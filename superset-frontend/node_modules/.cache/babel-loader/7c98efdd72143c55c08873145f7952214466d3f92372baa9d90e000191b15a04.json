{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useRef, useState } from 'react';\nimport { t } from '@superset-ui/core';\nimport { Button, AntdSelect } from 'src/components';\nimport FormLabel from 'src/components/Form/FormLabel';\nimport { Icons } from 'src/components/Icons';\nimport { infoTooltip, CredentialInfoForm } from '../styles';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nvar CredentialInfoOptions;\n(function (CredentialInfoOptions) {\n  CredentialInfoOptions[CredentialInfoOptions[\"JsonUpload\"] = 0] = \"JsonUpload\";\n  CredentialInfoOptions[CredentialInfoOptions[\"CopyPaste\"] = 1] = \"CopyPaste\";\n})(CredentialInfoOptions || (CredentialInfoOptions = {}));\n// These are the columns that are going to be added to encrypted extra, they differ in name based\n// on the engine, however we want to use the same component for each of them. Make sure to add the\n// the engine specific name here.\nexport const encryptedCredentialsMap = {\n  gsheets: 'service_account_info',\n  bigquery: 'credentials_info'\n};\nexport const EncryptedField = ({ changeMethods, isEditMode, db, editNewDb }) => {var _db$parameters;\n  const selectedFileInputRef = useRef(null);\n  const [uploadOption, setUploadOption] = useState(CredentialInfoOptions.JsonUpload.valueOf());\n  const [fileToUpload, setFileToUpload] = useState(null);\n  const showCredentialsInfo = !isEditMode;\n  const encryptedField = (db == null ? void 0 : db.engine) &&\n  encryptedCredentialsMap[db.engine];\n  const paramValue = db == null ? void 0 : (_db$parameters = db.parameters) == null ? void 0 : _db$parameters[encryptedField];\n  const encryptedValue = paramValue && typeof paramValue === 'object' ?\n  JSON.stringify(paramValue) :\n  paramValue;\n  return _jsxs(CredentialInfoForm, { children: [\n    showCredentialsInfo && _jsxs(_Fragment, { children: [\n      _jsx(FormLabel, { children:\n        t('How do you want to enter service account credentials?') }\n      ),\n      _jsxs(AntdSelect, { defaultValue: uploadOption, style: { width: '100%' }, onChange: (option) => setUploadOption(option), children: [\n        _jsx(AntdSelect.Option, { value: CredentialInfoOptions.JsonUpload, children:\n          t('Upload JSON file') }\n        ),\n\n        _jsx(AntdSelect.Option, { value: CredentialInfoOptions.CopyPaste, children:\n          t('Copy and Paste JSON credentials') }\n        )] }\n      )] }\n    ),\n    uploadOption === CredentialInfoOptions.CopyPaste ||\n    isEditMode ||\n    editNewDb ? _jsxs(\"div\", { className: \"input-container\", children: [\n      _jsx(FormLabel, { children: t('Service Account') }),\n      _jsx(\"textarea\", { className: \"input-form\", name: encryptedField, value: typeof encryptedValue === 'boolean' ?\n        String(encryptedValue) :\n        encryptedValue, onChange: changeMethods.onParametersChange, placeholder: t('Paste content of service credentials JSON file here') })] }\n    ) : showCredentialsInfo && _jsxs(\"div\", { className: \"input-container\", css: (theme) => infoTooltip(theme), children: [\n      !fileToUpload && _jsxs(Button, { onClick: () => {var _selectedFileInputRef;return (_selectedFileInputRef = selectedFileInputRef.current) == null ? void 0 : _selectedFileInputRef.click();}, children: [\n        _jsx(Icons.LinkOutlined, { iconSize: \"m\" }),\n        t('Upload credentials')] }\n      ),\n      fileToUpload && _jsxs(\"div\", { className: \"credentials-uploaded\", children: [\n        _jsxs(Button, { block: true, disabled: true, children: [\n          _jsx(Icons.LinkOutlined, { iconSize: \"m\" }),\n          t('Credentials uploaded')] }\n        ),\n        _jsx(Icons.DeleteFilled, { iconSize: \"m\", onClick: () => {\n            setFileToUpload(null);\n            changeMethods.onParametersChange({\n              target: {\n                name: encryptedField,\n                value: ''\n              }\n            });\n          } })] }\n      ),\n\n      _jsx(\"input\", { ref: selectedFileInputRef, id: \"selectedFile\", accept: \".json\", className: \"input-upload\", type: \"file\", onChange: async (event) => {var _file, _file2;\n          let file;\n          if (event.target.files) {\n            file = event.target.files[0];\n          }\n          setFileToUpload((_file = file) == null ? void 0 : _file.name);\n          changeMethods.onParametersChange({\n            target: {\n              type: null,\n              name: encryptedField,\n              value: await ((_file2 = file) == null ? void 0 : _file2.text()),\n              checked: false\n            }\n          });\n          if (selectedFileInputRef.current) {\n            selectedFileInputRef.current.value = null;\n          }\n        } })] }\n    )] }\n  );\n};__signature__(EncryptedField, \"useRef{selectedFileInputRef}\\nuseState{[uploadOption, setUploadOption](CredentialInfoOptions.JsonUpload.valueOf())}\\nuseState{[fileToUpload, setFileToUpload](null)}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CredentialInfoOptions, \"CredentialInfoOptions\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/EncryptedField.tsx\");reactHotLoader.register(encryptedCredentialsMap, \"encryptedCredentialsMap\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/EncryptedField.tsx\");reactHotLoader.register(EncryptedField, \"EncryptedField\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/EncryptedField.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useRef","useState","t","Button","AntdSelect","FormLabel","Icons","infoTooltip","CredentialInfoForm","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","CredentialInfoOptions","encryptedCredentialsMap","gsheets","bigquery","EncryptedField","changeMethods","isEditMode","db","editNewDb","_db$parameters","selectedFileInputRef","uploadOption","setUploadOption","JsonUpload","valueOf","fileToUpload","setFileToUpload","showCredentialsInfo","encryptedField","engine","paramValue","parameters","encryptedValue","JSON","stringify","children","defaultValue","style","width","onChange","option","Option","value","CopyPaste","className","name","String","onParametersChange","placeholder","css","theme","onClick","_selectedFileInputRef","current","click","LinkOutlined","iconSize","block","disabled","DeleteFilled","target","ref","id","accept","type","event","_file","_file2","file","files","text","checked","__signature__","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/DatabaseConnectionForm/EncryptedField.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useRef, useState } from 'react';\nimport { SupersetTheme, t } from '@superset-ui/core';\nimport { Button, AntdSelect } from 'src/components';\nimport FormLabel from 'src/components/Form/FormLabel';\nimport { Icons } from 'src/components/Icons';\nimport { DatabaseParameters, FieldPropTypes } from '../../types';\nimport { infoTooltip, CredentialInfoForm } from '../styles';\n\nenum CredentialInfoOptions {\n  JsonUpload,\n  CopyPaste,\n}\n\n// These are the columns that are going to be added to encrypted extra, they differ in name based\n// on the engine, however we want to use the same component for each of them. Make sure to add the\n// the engine specific name here.\nexport const encryptedCredentialsMap = {\n  gsheets: 'service_account_info',\n  bigquery: 'credentials_info',\n};\n\nexport const EncryptedField = ({\n  changeMethods,\n  isEditMode,\n  db,\n  editNewDb,\n}: FieldPropTypes) => {\n  const selectedFileInputRef = useRef<HTMLInputElement | null>(null);\n  const [uploadOption, setUploadOption] = useState<number>(\n    CredentialInfoOptions.JsonUpload.valueOf(),\n  );\n  const [fileToUpload, setFileToUpload] = useState<string | null | undefined>(\n    null,\n  );\n  const showCredentialsInfo = !isEditMode;\n  const encryptedField =\n    db?.engine &&\n    encryptedCredentialsMap[db.engine as keyof typeof encryptedCredentialsMap];\n  const paramValue =\n    db?.parameters?.[encryptedField as keyof DatabaseParameters];\n  const encryptedValue =\n    paramValue && typeof paramValue === 'object'\n      ? JSON.stringify(paramValue)\n      : paramValue;\n  return (\n    <CredentialInfoForm>\n      {showCredentialsInfo && (\n        <>\n          <FormLabel>\n            {t('How do you want to enter service account credentials?')}\n          </FormLabel>\n          <AntdSelect\n            defaultValue={uploadOption}\n            style={{ width: '100%' }}\n            onChange={option => setUploadOption(option)}\n          >\n            <AntdSelect.Option value={CredentialInfoOptions.JsonUpload}>\n              {t('Upload JSON file')}\n            </AntdSelect.Option>\n\n            <AntdSelect.Option value={CredentialInfoOptions.CopyPaste}>\n              {t('Copy and Paste JSON credentials')}\n            </AntdSelect.Option>\n          </AntdSelect>\n        </>\n      )}\n      {uploadOption === CredentialInfoOptions.CopyPaste ||\n      isEditMode ||\n      editNewDb ? (\n        <div className=\"input-container\">\n          <FormLabel>{t('Service Account')}</FormLabel>\n          <textarea\n            className=\"input-form\"\n            name={encryptedField}\n            value={\n              typeof encryptedValue === 'boolean'\n                ? String(encryptedValue)\n                : encryptedValue\n            }\n            onChange={changeMethods.onParametersChange}\n            placeholder={t(\n              'Paste content of service credentials JSON file here',\n            )}\n          />\n        </div>\n      ) : (\n        showCredentialsInfo && (\n          <div\n            className=\"input-container\"\n            css={(theme: SupersetTheme) => infoTooltip(theme)}\n          >\n            {!fileToUpload && (\n              <Button onClick={() => selectedFileInputRef.current?.click()}>\n                <Icons.LinkOutlined iconSize=\"m\" />\n                {t('Upload credentials')}\n              </Button>\n            )}\n            {fileToUpload && (\n              <div className=\"credentials-uploaded\">\n                <Button block disabled>\n                  <Icons.LinkOutlined iconSize=\"m\" />\n                  {t('Credentials uploaded')}\n                </Button>\n                <Icons.DeleteFilled\n                  iconSize=\"m\"\n                  onClick={() => {\n                    setFileToUpload(null);\n                    changeMethods.onParametersChange({\n                      target: {\n                        name: encryptedField,\n                        value: '',\n                      },\n                    });\n                  }}\n                />\n              </div>\n            )}\n\n            <input\n              ref={selectedFileInputRef}\n              id=\"selectedFile\"\n              accept=\".json\"\n              className=\"input-upload\"\n              type=\"file\"\n              onChange={async event => {\n                let file;\n                if (event.target.files) {\n                  file = event.target.files[0];\n                }\n                setFileToUpload(file?.name);\n                changeMethods.onParametersChange({\n                  target: {\n                    type: null,\n                    name: encryptedField,\n                    value: await file?.text(),\n                    checked: false,\n                  },\n                });\n                if (selectedFileInputRef.current) {\n                  selectedFileInputRef.current.value = null as any;\n                }\n              }}\n            />\n          </div>\n        )\n      )}\n    </CredentialInfoForm>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}