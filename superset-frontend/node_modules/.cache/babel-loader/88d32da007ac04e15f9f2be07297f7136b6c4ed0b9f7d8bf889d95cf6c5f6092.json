{"ast":null,"code":"import _last from \"lodash/last\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\n\nimport { logging, t, SupersetClient } from '@superset-ui/core';\nimport { LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE, LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_PDF } from 'src/logger/LogUtils';\nimport { getDashboardUrlParams } from 'src/utils/urlUtils';\nimport { DownloadScreenshotFormat } from '../components/menu/DownloadMenuItems/types';\nconst RETRY_INTERVAL = 3000;\nconst MAX_RETRIES = 30;\nexport const useDownloadScreenshot = (dashboardId, logEvent) => {\n  const activeTabs = useSelector((state) => state.dashboardState.activeTabs || undefined);\n  const anchor = useSelector((state) => _last(state.dashboardState.directPathToChild) || undefined);\n  const dataMask = useSelector((state) => state.dataMask || undefined);\n  const { addDangerToast, addSuccessToast, addInfoToast } = useToasts();\n  const currentIntervalIds = useRef([]);\n  const stopIntervals = useCallback((message) => {\n    currentIntervalIds.current.forEach(clearInterval);\n    if (message === 'failure') {\n      addDangerToast(t('The screenshot could not be downloaded. Please, try again later.'));\n    }\n    if (message === 'success') {\n      addSuccessToast(t('The screenshot has been downloaded.'));\n    }\n  }, [addDangerToast, addSuccessToast]);\n  const downloadScreenshot = useCallback((format) => {\n    let retries = 0;\n    const toastIntervalId = setInterval(() => addInfoToast(t('The screenshot is being generated. Please, do not leave the page.'), { noDuplicate: true }), RETRY_INTERVAL);\n    currentIntervalIds.current = [\n    ...(currentIntervalIds.current || []),\n    toastIntervalId];\n\n    const checkImageReady = (cacheKey) => SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${dashboardId}/screenshot/${cacheKey}/?download_format=${format}`,\n      headers: { Accept: 'application/pdf, image/png' },\n      parseMethod: 'raw'\n    }).\n    then((response) => response.blob()).\n    then((blob) => {\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `screenshot.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n      stopIntervals('success');\n    }).\n    catch((err) => {\n      if (err.status === 404) {\n        throw new Error('Image not ready');\n      }\n    });\n    const fetchImageWithRetry = (cacheKey) => {\n      if (retries >= MAX_RETRIES) {\n        stopIntervals('failure');\n        logging.error('Max retries reached');\n        return;\n      }\n      checkImageReady(cacheKey).catch(() => {\n        retries += 1;\n      });\n    };\n    SupersetClient.post({\n      endpoint: `/api/v1/dashboard/${dashboardId}/cache_dashboard_screenshot/`,\n      jsonPayload: {\n        anchor,\n        activeTabs,\n        dataMask,\n        urlParams: getDashboardUrlParams(['edit'])\n      }\n    }).\n    then(({ json }) => {\n      const cacheKey = json == null ? void 0 : json.cache_key;\n      if (!cacheKey) {\n        throw new Error('No image URL in response');\n      }\n      const retryIntervalId = setInterval(() => {\n        fetchImageWithRetry(cacheKey);\n      }, RETRY_INTERVAL);\n      currentIntervalIds.current.push(retryIntervalId);\n      fetchImageWithRetry(cacheKey);\n    }).\n    catch((error) => {\n      logging.error(error);\n      stopIntervals('failure');\n    }).\n    finally(() => {\n      logEvent == null ? void 0 : logEvent(format === DownloadScreenshotFormat.PNG ?\n      LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE :\n      LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_PDF);\n    });\n  }, [\n  dashboardId,\n  anchor,\n  activeTabs,\n  dataMask,\n  addInfoToast,\n  stopIntervals,\n  logEvent]\n  );\n  useEffect(() => () => {\n    if (currentIntervalIds.current.length > 0) {\n      stopIntervals();\n    }\n    currentIntervalIds.current = [];\n  }, [stopIntervals]);\n  return downloadScreenshot;\n};__signature__(useDownloadScreenshot, \"useSelector{activeTabs}\\nuseSelector{anchor}\\nuseSelector{dataMask}\\nuseToasts{{ addDangerToast, addSuccessToast, addInfoToast }}\\nuseRef{currentIntervalIds}\\nuseCallback{stopIntervals}\\nuseCallback{downloadScreenshot}\\nuseEffect{}\", () => [useSelector, useSelector, useSelector, useToasts]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(RETRY_INTERVAL, \"RETRY_INTERVAL\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/hooks/useDownloadScreenshot.ts\");reactHotLoader.register(MAX_RETRIES, \"MAX_RETRIES\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/hooks/useDownloadScreenshot.ts\");reactHotLoader.register(useDownloadScreenshot, \"useDownloadScreenshot\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/hooks/useDownloadScreenshot.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useCallback","useEffect","useRef","useSelector","useToasts","logging","t","SupersetClient","LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE","LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_PDF","getDashboardUrlParams","DownloadScreenshotFormat","RETRY_INTERVAL","MAX_RETRIES","useDownloadScreenshot","dashboardId","logEvent","activeTabs","state","dashboardState","undefined","anchor","_last","directPathToChild","dataMask","addDangerToast","addSuccessToast","addInfoToast","currentIntervalIds","stopIntervals","message","current","forEach","clearInterval","downloadScreenshot","format","retries","toastIntervalId","setInterval","noDuplicate","checkImageReady","cacheKey","get","endpoint","headers","Accept","parseMethod","then","response","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","catch","err","status","Error","fetchImageWithRetry","error","post","jsonPayload","urlParams","json","cache_key","retryIntervalId","push","finally","PNG","length","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/dashboard/hooks/useDownloadScreenshot.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { last } from 'lodash';\nimport {\n  logging,\n  t,\n  SupersetClient,\n  SupersetApiError,\n} from '@superset-ui/core';\nimport {\n  LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE,\n  LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_PDF,\n} from 'src/logger/LogUtils';\nimport { RootState } from 'src/dashboard/types';\nimport { getDashboardUrlParams } from 'src/utils/urlUtils';\nimport { DownloadScreenshotFormat } from '../components/menu/DownloadMenuItems/types';\n\nconst RETRY_INTERVAL = 3000;\nconst MAX_RETRIES = 30;\n\nexport const useDownloadScreenshot = (\n  dashboardId: number,\n  logEvent?: Function,\n) => {\n  const activeTabs = useSelector(\n    (state: RootState) => state.dashboardState.activeTabs || undefined,\n  );\n  const anchor = useSelector(\n    (state: RootState) =>\n      last(state.dashboardState.directPathToChild) || undefined,\n  );\n  const dataMask = useSelector(\n    (state: RootState) => state.dataMask || undefined,\n  );\n\n  const { addDangerToast, addSuccessToast, addInfoToast } = useToasts();\n\n  const currentIntervalIds = useRef<NodeJS.Timeout[]>([]);\n\n  const stopIntervals = useCallback(\n    (message?: 'success' | 'failure') => {\n      currentIntervalIds.current.forEach(clearInterval);\n\n      if (message === 'failure') {\n        addDangerToast(\n          t('The screenshot could not be downloaded. Please, try again later.'),\n        );\n      }\n      if (message === 'success') {\n        addSuccessToast(t('The screenshot has been downloaded.'));\n      }\n    },\n    [addDangerToast, addSuccessToast],\n  );\n\n  const downloadScreenshot = useCallback(\n    (format: DownloadScreenshotFormat) => {\n      let retries = 0;\n\n      const toastIntervalId = setInterval(\n        () =>\n          addInfoToast(\n            t(\n              'The screenshot is being generated. Please, do not leave the page.',\n            ),\n            { noDuplicate: true },\n          ),\n        RETRY_INTERVAL,\n      );\n\n      currentIntervalIds.current = [\n        ...(currentIntervalIds.current || []),\n        toastIntervalId,\n      ];\n\n      const checkImageReady = (cacheKey: string) =>\n        SupersetClient.get({\n          endpoint: `/api/v1/dashboard/${dashboardId}/screenshot/${cacheKey}/?download_format=${format}`,\n          headers: { Accept: 'application/pdf, image/png' },\n          parseMethod: 'raw',\n        })\n          .then((response: Response) => response.blob())\n          .then(blob => {\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `screenshot.${format}`;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n            stopIntervals('success');\n          })\n          .catch(err => {\n            if ((err as SupersetApiError).status === 404) {\n              throw new Error('Image not ready');\n            }\n          });\n\n      const fetchImageWithRetry = (cacheKey: string) => {\n        if (retries >= MAX_RETRIES) {\n          stopIntervals('failure');\n          logging.error('Max retries reached');\n          return;\n        }\n        checkImageReady(cacheKey).catch(() => {\n          retries += 1;\n        });\n      };\n\n      SupersetClient.post({\n        endpoint: `/api/v1/dashboard/${dashboardId}/cache_dashboard_screenshot/`,\n        jsonPayload: {\n          anchor,\n          activeTabs,\n          dataMask,\n          urlParams: getDashboardUrlParams(['edit']),\n        },\n      })\n        .then(({ json }) => {\n          const cacheKey = json?.cache_key;\n          if (!cacheKey) {\n            throw new Error('No image URL in response');\n          }\n          const retryIntervalId = setInterval(() => {\n            fetchImageWithRetry(cacheKey);\n          }, RETRY_INTERVAL);\n          currentIntervalIds.current.push(retryIntervalId);\n          fetchImageWithRetry(cacheKey);\n        })\n        .catch(error => {\n          logging.error(error);\n          stopIntervals('failure');\n        })\n        .finally(() => {\n          logEvent?.(\n            format === DownloadScreenshotFormat.PNG\n              ? LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_IMAGE\n              : LOG_ACTIONS_DASHBOARD_DOWNLOAD_AS_PDF,\n          );\n        });\n    },\n    [\n      dashboardId,\n      anchor,\n      activeTabs,\n      dataMask,\n      addInfoToast,\n      stopIntervals,\n      logEvent,\n    ],\n  );\n\n  useEffect(\n    () => () => {\n      if (currentIntervalIds.current.length > 0) {\n        stopIntervals();\n      }\n      currentIntervalIds.current = [];\n    },\n    [stopIntervals],\n  );\n\n  return downloadScreenshot;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}