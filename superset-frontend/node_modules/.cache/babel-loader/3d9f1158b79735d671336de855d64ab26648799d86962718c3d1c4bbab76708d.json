{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport NumberFormatter from '../NumberFormatter';\nfunction formatMemory(binary, decimals, transfer) {\n  return (value) => {\n    let formatted = '';\n    if (value === 0) {\n      formatted = '0B';\n    } else\n    {\n      const sign = value > 0 ? '' : '-';\n      const absValue = Math.abs(value);\n      const suffixes = binary ?\n      ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'] :\n      ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB', 'RB', 'QB'];\n      const base = binary ? 1024 : 1000;\n      const i = Math.min(suffixes.length - 1, Math.floor(Math.log(absValue) / Math.log(base)));\n      formatted = `${sign}${parseFloat((absValue / Math.pow(base, i)).toFixed(decimals))}${suffixes[i]}`;\n    }\n    if (transfer) {\n      formatted = `${formatted}/s`;\n    }\n    return formatted;\n  };\n}\nexport default function createMemoryFormatter(config = {}) {\n  const { description, id, label, binary, decimals = 2, transfer = false } = config;\n  return new NumberFormatter({\n    description,\n    formatFunc: formatMemory(binary, decimals, transfer),\n    id: id != null ? id : 'memory_format',\n    label: label != null ? label : `Memory formatter`\n  });\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(formatMemory, \"formatMemory\", \"/Users/aryurkov/superset/superset-frontend/packages/superset-ui-core/src/number-format/factories/createMemoryFormatter.ts\");reactHotLoader.register(createMemoryFormatter, \"createMemoryFormatter\", \"/Users/aryurkov/superset/superset-frontend/packages/superset-ui-core/src/number-format/factories/createMemoryFormatter.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["NumberFormatter","formatMemory","binary","decimals","transfer","value","formatted","sign","absValue","Math","abs","suffixes","base","i","min","length","floor","log","parseFloat","pow","toFixed","createMemoryFormatter","config","description","id","label","formatFunc","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/packages/superset-ui-core/src/number-format/factories/createMemoryFormatter.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport NumberFormatter from '../NumberFormatter';\nimport { NumberFormatFunction } from '../types';\n\nfunction formatMemory(\n  binary?: boolean,\n  decimals?: number,\n  transfer?: boolean,\n): NumberFormatFunction {\n  return value => {\n    let formatted = '';\n    if (value === 0) {\n      formatted = '0B';\n    } else {\n      const sign = value > 0 ? '' : '-';\n      const absValue = Math.abs(value);\n\n      const suffixes = binary\n        ? ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        : ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB', 'RB', 'QB'];\n      const base = binary ? 1024 : 1000;\n\n      const i = Math.min(\n        suffixes.length - 1,\n        Math.floor(Math.log(absValue) / Math.log(base)),\n      );\n      formatted = `${sign}${parseFloat((absValue / Math.pow(base, i)).toFixed(decimals))}${suffixes[i]}`;\n    }\n\n    if (transfer) {\n      formatted = `${formatted}/s`;\n    }\n    return formatted;\n  };\n}\n\nexport default function createMemoryFormatter(\n  config: {\n    description?: string;\n    id?: string;\n    label?: string;\n    binary?: boolean;\n    decimals?: number;\n    transfer?: boolean;\n  } = {},\n) {\n  const {\n    description,\n    id,\n    label,\n    binary,\n    decimals = 2,\n    transfer = false,\n  } = config;\n\n  return new NumberFormatter({\n    description,\n    formatFunc: formatMemory(binary, decimals, transfer),\n    id: id ?? 'memory_format',\n    label: label ?? `Memory formatter`,\n  });\n}\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA,OAAOA,eAAe,MAAM,oBAAoB;AAGhD,SAASC,YAAYA,CACnBC,MAAgB,EAChBC,QAAiB,EACjBC,QAAkB;EAElB,OAAO,CAAAC,KAAK,KAAG;IACb,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAID,KAAK,KAAK,CAAC,EAAE;MACfC,SAAS,GAAG,IAAI;KACjB;IAAM;MACL,MAAMC,IAAI,GAAGF,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG;MACjC,MAAMG,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACL,KAAK,CAAC;MAEhC,MAAMM,QAAQ,GAAGT,MAAM;MACnB,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;MAC7D,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;MACrE,MAAMU,IAAI,GAAGV,MAAM,GAAG,IAAI,GAAG,IAAI;MAEjC,MAAMW,CAAC,GAAGJ,IAAI,CAACK,GAAG,CAChBH,QAAQ,CAACI,MAAM,GAAG,CAAC,EACnBN,IAAI,CAACO,KAAK,CAACP,IAAI,CAACQ,GAAG,CAACT,QAAQ,CAAC,GAAGC,IAAI,CAACQ,GAAG,CAACL,IAAI,CAAC,CAAC,CAChD;MACDN,SAAS,GAAG,GAAGC,IAAI,GAAGW,UAAU,CAAC,CAACV,QAAQ,GAAGC,IAAI,CAACU,GAAG,CAACP,IAAI,EAAEC,CAAC,CAAC,EAAEO,OAAO,CAACjB,QAAQ,CAAC,CAAC,GAAGQ,QAAQ,CAACE,CAAC,CAAC,EAAE;;IAGpG,IAAIT,QAAQ,EAAE;MACZE,SAAS,GAAG,GAAGA,SAAS,IAAI;;IAE9B,OAAOA,SAAS;EAClB,CAAC;AACH;AAEA,eAAc,SAAUe,qBAAqBA,CAC3CC,MAAA,GAOI,EAAE;EAEN,MAAM,EACJC,WAAW,EACXC,EAAE,EACFC,KAAK,EACLvB,MAAM,EACNC,QAAQ,GAAG,CAAC,EACZC,QAAQ,GAAG,KAAK,EACjB,GAAGkB,MAAM;EAEV,OAAO,IAAItB,eAAe,CAAC;IACzBuB,WAAW;IACXG,UAAU,EAAEzB,YAAY,CAACC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,CAAC;IACpDoB,EAAE,EAAEA,EAAE,WAAFA,EAAE,GAAI,eAAe;IACzBC,KAAK,EAAEA,KAAK,WAALA,KAAK,GAAI;GACjB,CAAC;AACJ,CAAC,mBAAAE,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CAzDQ9B,YAAY,+IAAA0B,cAAA,CAAAI,QAAA,CAgCGV,qBAAqB,gLAAAW,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}