{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * Util for layer related operations.\n */\nimport OlParser from 'geostyler-openlayers-parser';\nimport TileLayer from 'ol/layer/Tile';\nimport TileWMS from 'ol/source/TileWMS';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport XyzSource from 'ol/source/XYZ';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { isWfsLayerConf, isWmsLayerConf, isXyzLayerConf } from '../typeguards';\nimport { isVersionBelow } from './serviceUtil';\n/**\n * Create a WMS layer.\n *\n * @param wmsLayerConf The layer configuration\n *\n * @returns The created WMS layer\n */\nexport const createWmsLayer = (wmsLayerConf) => {\n  const { url, layersParam, version, attribution } = wmsLayerConf;\n  return new TileLayer({\n    source: new TileWMS({\n      url,\n      params: {\n        LAYERS: layersParam,\n        VERSION: version\n      },\n      attributions: attribution\n    })\n  });\n};\n/**\n * Create a XYZ layer.\n *\n * @param xyzLayerConf The layer configuration\n *\n * @returns The created XYZ layer\n */\nexport const createXyzLayer = (xyzLayerConf) => {\n  const { url, attribution } = xyzLayerConf;\n  return new TileLayer({\n    source: new XyzSource({\n      url,\n      attributions: attribution\n    })\n  });\n};\n/**\n * Create a WFS layer.\n *\n * @param wfsLayerConf The layer configuration\n *\n * @returns The created WFS layer\n */\nexport const createWfsLayer = async (wfsLayerConf) => {var _writeStyleResult;\n  const { url, typeName, maxFeatures, version = '1.1.0', style, attribution } = wfsLayerConf;\n  const wfsSource = new VectorSource({\n    format: new GeoJSON(),\n    attributions: attribution,\n    url: (extent) => {\n      const requestUrl = new URL(url);\n      const params = requestUrl.searchParams;\n      params.append('service', 'wfs');\n      params.append('request', 'GetFeature');\n      params.append('outputFormat', 'application/json');\n      // TODO: make CRS configurable or take it from Ol Map\n      params.append('srsName', 'EPSG:3857');\n      params.append('version', version);\n      let typeNameQuery = 'typeNames';\n      if (isVersionBelow(version, '2.0.0', 'WFS')) {\n        typeNameQuery = 'typeName';\n      }\n      params.append(typeNameQuery, typeName);\n      params.append('bbox', extent.join(','));\n      if (maxFeatures) {\n        let maxFeaturesQuery = 'count';\n        if (isVersionBelow(version, '2.0.0', 'WFS')) {\n          maxFeaturesQuery = 'maxFeatures';\n        }\n        params.append(maxFeaturesQuery, maxFeatures.toString());\n      }\n      return requestUrl.toString();\n    },\n    strategy: bboxStrategy\n  });\n  let writeStyleResult;\n  if (style) {\n    const olParser = new OlParser();\n    writeStyleResult = await olParser.writeStyle(style);\n    if (writeStyleResult.errors) {\n      console.warn('Could not create ol-style', writeStyleResult.errors);\n      return undefined;\n    }\n  }\n  return new VectorLayer({\n    source: wfsSource,\n    // @ts-ignore\n    style: (_writeStyleResult = writeStyleResult) == null ? void 0 : _writeStyleResult.output\n  });\n};\n/**\n * Create a layer instance with the provided configuration.\n *\n * @param layerConf The layer configuration\n *\n * @returns The created layer\n */\nexport const createLayer = async (layerConf) => {\n  let layer;\n  if (isWmsLayerConf(layerConf)) {\n    layer = createWmsLayer(layerConf);\n  } else\n  if (isWfsLayerConf(layerConf)) {\n    layer = await createWfsLayer(layerConf);\n  } else\n  if (isXyzLayerConf(layerConf)) {\n    layer = createXyzLayer(layerConf);\n  } else\n  {\n    console.warn('Provided layerconfig is not recognized');\n  }\n  return layer;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(createWmsLayer, \"createWmsLayer\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/layerUtil.tsx\");reactHotLoader.register(createXyzLayer, \"createXyzLayer\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/layerUtil.tsx\");reactHotLoader.register(createWfsLayer, \"createWfsLayer\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/layerUtil.tsx\");reactHotLoader.register(createLayer, \"createLayer\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/layerUtil.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["OlParser","TileLayer","TileWMS","bbox","bboxStrategy","VectorLayer","VectorSource","XyzSource","GeoJSON","isWfsLayerConf","isWmsLayerConf","isXyzLayerConf","isVersionBelow","createWmsLayer","wmsLayerConf","url","layersParam","version","attribution","source","params","LAYERS","VERSION","attributions","createXyzLayer","xyzLayerConf","createWfsLayer","wfsLayerConf","_writeStyleResult","typeName","maxFeatures","style","wfsSource","format","extent","requestUrl","URL","searchParams","append","typeNameQuery","join","maxFeaturesQuery","toString","strategy","writeStyleResult","olParser","writeStyle","errors","console","warn","undefined","output","createLayer","layerConf","layer","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/layerUtil.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Util for layer related operations.\n */\n\nimport OlParser from 'geostyler-openlayers-parser';\nimport TileLayer from 'ol/layer/Tile';\nimport TileWMS from 'ol/source/TileWMS';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport XyzSource from 'ol/source/XYZ';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { WmsLayerConf, WfsLayerConf, LayerConf, XyzLayerConf } from '../types';\nimport { isWfsLayerConf, isWmsLayerConf, isXyzLayerConf } from '../typeguards';\nimport { isVersionBelow } from './serviceUtil';\n\n/**\n * Create a WMS layer.\n *\n * @param wmsLayerConf The layer configuration\n *\n * @returns The created WMS layer\n */\nexport const createWmsLayer = (wmsLayerConf: WmsLayerConf) => {\n  const { url, layersParam, version, attribution } = wmsLayerConf;\n  return new TileLayer({\n    source: new TileWMS({\n      url,\n      params: {\n        LAYERS: layersParam,\n        VERSION: version,\n      },\n      attributions: attribution,\n    }),\n  });\n};\n\n/**\n * Create a XYZ layer.\n *\n * @param xyzLayerConf The layer configuration\n *\n * @returns The created XYZ layer\n */\nexport const createXyzLayer = (xyzLayerConf: XyzLayerConf) => {\n  const { url, attribution } = xyzLayerConf;\n  return new TileLayer({\n    source: new XyzSource({\n      url,\n      attributions: attribution,\n    }),\n  });\n};\n\n/**\n * Create a WFS layer.\n *\n * @param wfsLayerConf The layer configuration\n *\n * @returns The created WFS layer\n */\nexport const createWfsLayer = async (wfsLayerConf: WfsLayerConf) => {\n  const {\n    url,\n    typeName,\n    maxFeatures,\n    version = '1.1.0',\n    style,\n    attribution,\n  } = wfsLayerConf;\n\n  const wfsSource = new VectorSource({\n    format: new GeoJSON(),\n    attributions: attribution,\n    url: extent => {\n      const requestUrl = new URL(url);\n      const params = requestUrl.searchParams;\n      params.append('service', 'wfs');\n      params.append('request', 'GetFeature');\n      params.append('outputFormat', 'application/json');\n      // TODO: make CRS configurable or take it from Ol Map\n      params.append('srsName', 'EPSG:3857');\n      params.append('version', version);\n\n      let typeNameQuery = 'typeNames';\n      if (isVersionBelow(version, '2.0.0', 'WFS')) {\n        typeNameQuery = 'typeName';\n      }\n      params.append(typeNameQuery, typeName);\n\n      params.append('bbox', extent.join(','));\n      if (maxFeatures) {\n        let maxFeaturesQuery = 'count';\n        if (isVersionBelow(version, '2.0.0', 'WFS')) {\n          maxFeaturesQuery = 'maxFeatures';\n        }\n        params.append(maxFeaturesQuery, maxFeatures.toString());\n      }\n\n      return requestUrl.toString();\n    },\n    strategy: bboxStrategy,\n  });\n\n  let writeStyleResult;\n  if (style) {\n    const olParser = new OlParser();\n    writeStyleResult = await olParser.writeStyle(style);\n    if (writeStyleResult.errors) {\n      console.warn('Could not create ol-style', writeStyleResult.errors);\n      return undefined;\n    }\n  }\n\n  return new VectorLayer({\n    source: wfsSource,\n    // @ts-ignore\n    style: writeStyleResult?.output,\n  });\n};\n\n/**\n * Create a layer instance with the provided configuration.\n *\n * @param layerConf The layer configuration\n *\n * @returns The created layer\n */\nexport const createLayer = async (layerConf: LayerConf) => {\n  let layer;\n  if (isWmsLayerConf(layerConf)) {\n    layer = createWmsLayer(layerConf);\n  } else if (isWfsLayerConf(layerConf)) {\n    layer = await createWfsLayer(layerConf);\n  } else if (isXyzLayerConf(layerConf)) {\n    layer = createXyzLayer(layerConf);\n  } else {\n    console.warn('Provided layerconfig is not recognized');\n  }\n  return layer;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}