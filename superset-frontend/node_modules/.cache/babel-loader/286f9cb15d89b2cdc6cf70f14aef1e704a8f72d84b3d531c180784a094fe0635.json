{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { extractTimegrain, getNumberFormatter, NumberFormats, GenericDataType, getMetricLabel, getXAxisLabel, getValueFormatter, t, tooltipHtml } from '@superset-ui/core';\nimport { graphic } from 'echarts/core';\nimport { getDateFormatter, parseMetricValue } from '../utils';\nimport { getDefaultTooltip } from '../../utils/tooltip';\nconst formatPercentChange = getNumberFormatter(NumberFormats.PERCENT_SIGNED_1_POINT);\nexport default function transformProps(chartProps) {var _chartProps$datasourc, _metricEntry;\n  const { width, height, queriesData, formData, rawFormData, theme, hooks, inContextMenu, datasource: { currencyFormats = {}, columnFormats = {} } } = chartProps;\n  const { colorPicker, compareLag: compareLag_, compareSuffix = '', timeFormat, headerFontSize, metric = 'value', showTimestamp, showTrendLine, subtitle = '', subtitleFontSize, aggregation, startYAxisAtZero, subheader = '', subheaderFontSize, forceTimestampFormatting, yAxisFormat, currencyFormat, timeRangeFixed } = formData;\n  const granularity = extractTimegrain(rawFormData);\n  const { data = [], colnames = [], coltypes = [], from_dttm: fromDatetime, to_dttm: toDatetime } = queriesData[0];\n  const aggregatedQueryData = queriesData.length > 1 ? queriesData[1] : null;\n  const hasAggregatedData = (aggregatedQueryData == null ? void 0 : aggregatedQueryData.data) &&\n  aggregatedQueryData.data.length > 0 &&\n  aggregation !== 'LAST_VALUE';\n  const aggregatedData = hasAggregatedData ? aggregatedQueryData.data[0] : null;\n  const refs = {};\n  const metricName = getMetricLabel(metric);\n  const compareLag = Number(compareLag_) || 0;\n  let formattedSubheader = subheader;\n  const { r, g, b } = colorPicker;\n  const mainColor = `rgb(${r}, ${g}, ${b})`;\n  const xAxisLabel = getXAxisLabel(rawFormData);\n  let trendLineData;\n  let percentChange = 0;\n  let bigNumber = data.length === 0 ? null : data[0][metricName];\n  let timestamp = data.length === 0 ? null : data[0][xAxisLabel];\n  let bigNumberFallback = null;\n  let sortedData = [];\n  if (data.length > 0) {\n    sortedData = data.\n    map((d) => [d[xAxisLabel], parseMetricValue(d[metricName])])\n    // sort in time descending order\n    .sort((a, b) => a[0] !== null && b[0] !== null ? b[0] - a[0] : 0);\n  }\n  if (hasAggregatedData && aggregatedData) {\n    if (aggregatedData[metricName] !== null &&\n    aggregatedData[metricName] !== undefined) {\n      bigNumber = aggregatedData[metricName];\n    } else\n    {\n      const metricKeys = Object.keys(aggregatedData).filter((key) => key !== xAxisLabel &&\n      aggregatedData[key] !== null &&\n      typeof aggregatedData[key] === 'number');\n      bigNumber = metricKeys.length > 0 ? aggregatedData[metricKeys[0]] : null;\n    }\n    timestamp = sortedData.length > 0 ? sortedData[0][0] : null;\n  } else\n  if (sortedData.length > 0) {\n    bigNumber = sortedData[0][1];\n    timestamp = sortedData[0][0];\n    if (bigNumber === null) {\n      bigNumberFallback = sortedData.find((d) => d[1] !== null);\n      bigNumber = bigNumberFallback ? bigNumberFallback[1] : null;\n      timestamp = bigNumberFallback ? bigNumberFallback[0] : null;\n    }\n  }\n  if (compareLag > 0 && sortedData.length > 0) {\n    const compareIndex = compareLag;\n    if (compareIndex < sortedData.length) {\n      const compareValue = sortedData[compareIndex][1];\n      // compare values must both be non-nulls\n      if (bigNumber !== null && compareValue !== null) {\n        percentChange = compareValue ?\n        (Number(bigNumber) - compareValue) / Math.abs(compareValue) :\n        0;\n        formattedSubheader = `${formatPercentChange(percentChange)} ${compareSuffix}`;\n      }\n    }\n  }\n  if (data.length > 0) {\n    const reversedData = [...sortedData].reverse();\n    // @ts-ignore\n    trendLineData = showTrendLine ? reversedData : undefined;\n  }\n  let className = '';\n  if (percentChange > 0) {\n    className = 'positive';\n  } else\n  if (percentChange < 0) {\n    className = 'negative';\n  }\n  const metricColtypeIndex = colnames.findIndex((name) => name === metricName);\n  const metricColtype = metricColtypeIndex > -1 ? coltypes[metricColtypeIndex] : null;\n  let metricEntry;\n  if ((_chartProps$datasourc = chartProps.datasource) != null && _chartProps$datasourc.metrics) {\n    metricEntry = chartProps.datasource.metrics.find((metricEntry) => metricEntry.metric_name === metric);\n  }\n  const formatTime = getDateFormatter(timeFormat, granularity, (_metricEntry = metricEntry) == null ? void 0 : _metricEntry.d3format);\n  const numberFormatter = getValueFormatter(metric, currencyFormats, columnFormats, yAxisFormat, currencyFormat);\n  const headerFormatter = metricColtype === GenericDataType.Temporal ||\n  metricColtype === GenericDataType.String ||\n  forceTimestampFormatting ?\n  formatTime :\n  numberFormatter;\n  if (trendLineData && timeRangeFixed && fromDatetime) {\n    const toDatetimeOrToday = toDatetime != null ? toDatetime : Date.now();\n    if (!trendLineData[0][0] || trendLineData[0][0] > fromDatetime) {\n      trendLineData.unshift([fromDatetime, null]);\n    }\n    if (!trendLineData[trendLineData.length - 1][0] ||\n    trendLineData[trendLineData.length - 1][0] < toDatetimeOrToday) {\n      trendLineData.push([toDatetimeOrToday, null]);\n    }\n  }\n  const echartOptions = trendLineData ?\n  {\n    series: [\n    {\n      data: trendLineData,\n      type: 'line',\n      smooth: true,\n      symbol: 'circle',\n      symbolSize: 10,\n      showSymbol: false,\n      color: mainColor,\n      areaStyle: {\n        color: new graphic.LinearGradient(0, 0, 0, 1, [\n        {\n          offset: 0,\n          color: mainColor\n        },\n        {\n          offset: 1,\n          color: theme.colors.grayscale.light5\n        }]\n        )\n      }\n    }],\n\n    xAxis: {\n      min: trendLineData[0][0],\n      max: trendLineData[trendLineData.length - 1][0],\n      show: false,\n      type: 'value'\n    },\n    yAxis: {\n      scale: !startYAxisAtZero,\n      show: false\n    },\n    grid: {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      trigger: 'axis',\n      formatter: (params) => tooltipHtml([\n      [\n      metricName,\n      params[0].data[1] === null ?\n      t('N/A') :\n      headerFormatter.format(params[0].data[1])]],\n\n      formatTime(params[0].data[0]))\n    },\n    aria: {\n      enabled: true,\n      label: {\n        description: `Big number visualization ${subheader}`\n      }\n    }\n  } :\n  {};\n  const { onContextMenu } = hooks;\n  return {\n    width,\n    height,\n    bigNumber,\n    // @ts-ignore\n    bigNumberFallback,\n    className,\n    headerFormatter,\n    formatTime,\n    formData,\n    headerFontSize,\n    subtitleFontSize,\n    subtitle,\n    subheaderFontSize,\n    mainColor,\n    showTimestamp,\n    showTrendLine,\n    startYAxisAtZero,\n    subheader: formattedSubheader,\n    timestamp,\n    trendLineData,\n    echartOptions,\n    onContextMenu,\n    xValueFormatter: formatTime,\n    refs\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(formatPercentChange, \"formatPercentChange\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberWithTrendline/transformProps.ts\");reactHotLoader.register(transformProps, \"transformProps\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberWithTrendline/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["extractTimegrain","getNumberFormatter","NumberFormats","GenericDataType","getMetricLabel","getXAxisLabel","getValueFormatter","t","tooltipHtml","graphic","getDateFormatter","parseMetricValue","getDefaultTooltip","formatPercentChange","PERCENT_SIGNED_1_POINT","transformProps","chartProps","_chartProps$datasourc","_metricEntry","width","height","queriesData","formData","rawFormData","theme","hooks","inContextMenu","datasource","currencyFormats","columnFormats","colorPicker","compareLag","compareLag_","compareSuffix","timeFormat","headerFontSize","metric","showTimestamp","showTrendLine","subtitle","subtitleFontSize","aggregation","startYAxisAtZero","subheader","subheaderFontSize","forceTimestampFormatting","yAxisFormat","currencyFormat","timeRangeFixed","granularity","data","colnames","coltypes","from_dttm","fromDatetime","to_dttm","toDatetime","aggregatedQueryData","length","hasAggregatedData","aggregatedData","refs","metricName","Number","formattedSubheader","r","g","b","mainColor","xAxisLabel","trendLineData","percentChange","bigNumber","timestamp","bigNumberFallback","sortedData","map","d","sort","a","undefined","metricKeys","Object","keys","filter","key","find","compareIndex","compareValue","Math","abs","reversedData","reverse","className","metricColtypeIndex","findIndex","name","metricColtype","metricEntry","metrics","metric_name","formatTime","d3format","numberFormatter","headerFormatter","Temporal","String","toDatetimeOrToday","Date","now","unshift","push","echartOptions","series","type","smooth","symbol","symbolSize","showSymbol","color","areaStyle","LinearGradient","offset","colors","grayscale","light5","xAxis","min","max","show","yAxis","scale","grid","left","right","top","bottom","tooltip","trigger","formatter","params","format","aria","enabled","label","description","onContextMenu","xValueFormatter","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberWithTrendline/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  extractTimegrain,\n  getNumberFormatter,\n  NumberFormats,\n  GenericDataType,\n  getMetricLabel,\n  getXAxisLabel,\n  Metric,\n  getValueFormatter,\n  t,\n  tooltipHtml,\n} from '@superset-ui/core';\nimport { EChartsCoreOption, graphic } from 'echarts/core';\nimport {\n  BigNumberVizProps,\n  BigNumberDatum,\n  BigNumberWithTrendlineChartProps,\n  TimeSeriesDatum,\n} from '../types';\nimport { getDateFormatter, parseMetricValue } from '../utils';\nimport { getDefaultTooltip } from '../../utils/tooltip';\nimport { Refs } from '../../types';\n\nconst formatPercentChange = getNumberFormatter(\n  NumberFormats.PERCENT_SIGNED_1_POINT,\n);\n\nexport default function transformProps(\n  chartProps: BigNumberWithTrendlineChartProps,\n): BigNumberVizProps {\n  const {\n    width,\n    height,\n    queriesData,\n    formData,\n    rawFormData,\n    theme,\n    hooks,\n    inContextMenu,\n    datasource: { currencyFormats = {}, columnFormats = {} },\n  } = chartProps;\n  const {\n    colorPicker,\n    compareLag: compareLag_,\n    compareSuffix = '',\n    timeFormat,\n    headerFontSize,\n    metric = 'value',\n    showTimestamp,\n    showTrendLine,\n    subtitle = '',\n    subtitleFontSize,\n    aggregation,\n    startYAxisAtZero,\n    subheader = '',\n    subheaderFontSize,\n    forceTimestampFormatting,\n    yAxisFormat,\n    currencyFormat,\n    timeRangeFixed,\n  } = formData;\n  const granularity = extractTimegrain(rawFormData);\n  const {\n    data = [],\n    colnames = [],\n    coltypes = [],\n    from_dttm: fromDatetime,\n    to_dttm: toDatetime,\n  } = queriesData[0];\n\n  const aggregatedQueryData = queriesData.length > 1 ? queriesData[1] : null;\n\n  const hasAggregatedData =\n    aggregatedQueryData?.data &&\n    aggregatedQueryData.data.length > 0 &&\n    aggregation !== 'LAST_VALUE';\n\n  const aggregatedData = hasAggregatedData ? aggregatedQueryData.data[0] : null;\n  const refs: Refs = {};\n  const metricName = getMetricLabel(metric);\n  const compareLag = Number(compareLag_) || 0;\n  let formattedSubheader = subheader;\n\n  const { r, g, b } = colorPicker;\n  const mainColor = `rgb(${r}, ${g}, ${b})`;\n\n  const xAxisLabel = getXAxisLabel(rawFormData) as string;\n  let trendLineData: TimeSeriesDatum[] | undefined;\n  let percentChange = 0;\n  let bigNumber = data.length === 0 ? null : data[0][metricName];\n  let timestamp = data.length === 0 ? null : data[0][xAxisLabel];\n  let bigNumberFallback = null;\n  let sortedData: [number | null, number | null][] = [];\n\n  if (data.length > 0) {\n    sortedData = (data as BigNumberDatum[])\n      .map(\n        d =>\n          [d[xAxisLabel], parseMetricValue(d[metricName])] as [\n            number | null,\n            number | null,\n          ],\n      )\n      // sort in time descending order\n      .sort((a, b) => (a[0] !== null && b[0] !== null ? b[0] - a[0] : 0));\n  }\n  if (hasAggregatedData && aggregatedData) {\n    if (\n      aggregatedData[metricName] !== null &&\n      aggregatedData[metricName] !== undefined\n    ) {\n      bigNumber = aggregatedData[metricName];\n    } else {\n      const metricKeys = Object.keys(aggregatedData).filter(\n        key =>\n          key !== xAxisLabel &&\n          aggregatedData[key] !== null &&\n          typeof aggregatedData[key] === 'number',\n      );\n      bigNumber = metricKeys.length > 0 ? aggregatedData[metricKeys[0]] : null;\n    }\n\n    timestamp = sortedData.length > 0 ? sortedData[0][0] : null;\n  } else if (sortedData.length > 0) {\n    bigNumber = sortedData[0][1];\n    timestamp = sortedData[0][0];\n\n    if (bigNumber === null) {\n      bigNumberFallback = sortedData.find(d => d[1] !== null);\n      bigNumber = bigNumberFallback ? bigNumberFallback[1] : null;\n      timestamp = bigNumberFallback ? bigNumberFallback[0] : null;\n    }\n  }\n\n  if (compareLag > 0 && sortedData.length > 0) {\n    const compareIndex = compareLag;\n    if (compareIndex < sortedData.length) {\n      const compareValue = sortedData[compareIndex][1];\n      // compare values must both be non-nulls\n      if (bigNumber !== null && compareValue !== null) {\n        percentChange = compareValue\n          ? (Number(bigNumber) - compareValue) / Math.abs(compareValue)\n          : 0;\n        formattedSubheader = `${formatPercentChange(\n          percentChange,\n        )} ${compareSuffix}`;\n      }\n    }\n  }\n\n  if (data.length > 0) {\n    const reversedData = [...sortedData].reverse();\n    // @ts-ignore\n    trendLineData = showTrendLine ? reversedData : undefined;\n  }\n\n  let className = '';\n  if (percentChange > 0) {\n    className = 'positive';\n  } else if (percentChange < 0) {\n    className = 'negative';\n  }\n\n  const metricColtypeIndex = colnames.findIndex(name => name === metricName);\n  const metricColtype =\n    metricColtypeIndex > -1 ? coltypes[metricColtypeIndex] : null;\n\n  let metricEntry: Metric | undefined;\n  if (chartProps.datasource?.metrics) {\n    metricEntry = chartProps.datasource.metrics.find(\n      metricEntry => metricEntry.metric_name === metric,\n    );\n  }\n\n  const formatTime = getDateFormatter(\n    timeFormat,\n    granularity,\n    metricEntry?.d3format,\n  );\n\n  const numberFormatter = getValueFormatter(\n    metric,\n    currencyFormats,\n    columnFormats,\n    yAxisFormat,\n    currencyFormat,\n  );\n\n  const headerFormatter =\n    metricColtype === GenericDataType.Temporal ||\n    metricColtype === GenericDataType.String ||\n    forceTimestampFormatting\n      ? formatTime\n      : numberFormatter;\n\n  if (trendLineData && timeRangeFixed && fromDatetime) {\n    const toDatetimeOrToday = toDatetime ?? Date.now();\n    if (!trendLineData[0][0] || trendLineData[0][0] > fromDatetime) {\n      trendLineData.unshift([fromDatetime, null]);\n    }\n    if (\n      !trendLineData[trendLineData.length - 1][0] ||\n      trendLineData[trendLineData.length - 1][0]! < toDatetimeOrToday\n    ) {\n      trendLineData.push([toDatetimeOrToday, null]);\n    }\n  }\n\n  const echartOptions: EChartsCoreOption = trendLineData\n    ? {\n        series: [\n          {\n            data: trendLineData,\n            type: 'line',\n            smooth: true,\n            symbol: 'circle',\n            symbolSize: 10,\n            showSymbol: false,\n            color: mainColor,\n            areaStyle: {\n              color: new graphic.LinearGradient(0, 0, 0, 1, [\n                {\n                  offset: 0,\n                  color: mainColor,\n                },\n                {\n                  offset: 1,\n                  color: theme.colors.grayscale.light5,\n                },\n              ]),\n            },\n          },\n        ],\n        xAxis: {\n          min: trendLineData[0][0],\n          max: trendLineData[trendLineData.length - 1][0],\n          show: false,\n          type: 'value',\n        },\n        yAxis: {\n          scale: !startYAxisAtZero,\n          show: false,\n        },\n        grid: {\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0,\n        },\n        tooltip: {\n          ...getDefaultTooltip(refs),\n          show: !inContextMenu,\n          trigger: 'axis',\n          formatter: (params: { data: TimeSeriesDatum }[]) =>\n            tooltipHtml(\n              [\n                [\n                  metricName,\n                  params[0].data[1] === null\n                    ? t('N/A')\n                    : headerFormatter.format(params[0].data[1]),\n                ],\n              ],\n              formatTime(params[0].data[0]),\n            ),\n        },\n        aria: {\n          enabled: true,\n          label: {\n            description: `Big number visualization ${subheader}`,\n          },\n        },\n      }\n    : {};\n\n  const { onContextMenu } = hooks;\n\n  return {\n    width,\n    height,\n    bigNumber,\n    // @ts-ignore\n    bigNumberFallback,\n    className,\n    headerFormatter,\n    formatTime,\n    formData,\n    headerFontSize,\n    subtitleFontSize,\n    subtitle,\n    subheaderFontSize,\n    mainColor,\n    showTimestamp,\n    showTrendLine,\n    startYAxisAtZero,\n    subheader: formattedSubheader,\n    timestamp,\n    trendLineData,\n    echartOptions,\n    onContextMenu,\n    xValueFormatter: formatTime,\n    refs,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}