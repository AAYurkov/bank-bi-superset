{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useMemo, useEffect, useRef, useCallback } from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport rison from 'rison';\nimport { AsyncSelect, Select } from 'src/components';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useCatalogs, useSchemas } from 'src/hooks/apiResources';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst DatabaseSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      width: calc(100% - 30px - ${theme.gridUnit}px);\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\nconst LabelStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${({ theme }) => theme.gridUnit - 2}px;\n\n  .backend {\n    overflow: visible;\n  }\n\n  .name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\nconst SelectLabel = ({ backend, databaseName }) => _jsxs(LabelStyle, { children: [\n  _jsx(Label, { className: \"backend\", children: backend || '' }),\n  _jsx(\"span\", { className: \"name\", title: databaseName, children:\n    databaseName }\n  )] }\n);\nconst EMPTY_CATALOG_OPTIONS = [];\nconst EMPTY_SCHEMA_OPTIONS = [];\nexport default function DatabaseSelector({ db, formMode = false, emptyState, getDbList, handleError, isDatabaseSelectEnabled = true, onDbChange, onEmptyResults, onCatalogChange, catalog, onSchemaChange, schema, readOnly = false, sqlLabMode = false }) {\n  const showCatalogSelector = !!(db != null && db.allow_multi_catalog);\n  const [currentDb, setCurrentDb] = useState();\n  const [errorPayload, setErrorPayload] = useState();\n  const [currentCatalog, setCurrentCatalog] = useState(catalog ? { label: catalog, value: catalog, title: catalog } : undefined);\n  const catalogRef = useRef(catalog);\n  catalogRef.current = catalog;\n  const [currentSchema, setCurrentSchema] = useState(schema ? { label: schema, value: schema, title: schema } : undefined);\n  const schemaRef = useRef(schema);\n  schemaRef.current = schema;\n  const { addSuccessToast } = useToasts();\n  const sortComparator = useCallback((itemA, itemB) => itemA.order - itemB.order, []);\n  const loadDatabases = useMemo(() => async (search, page, pageSize) => {\n    const queryParams = rison.encode({\n      order_column: 'database_name',\n      order_direction: 'asc',\n      page,\n      page_size: pageSize,\n      ...(formMode || !sqlLabMode ?\n      { filters: [{ col: 'database_name', opr: 'ct', value: search }] } :\n      {\n        filters: [\n        { col: 'database_name', opr: 'ct', value: search },\n        {\n          col: 'expose_in_sqllab',\n          opr: 'eq',\n          value: true\n        }]\n\n      })\n    });\n    const endpoint = `/api/v1/database/?q=${queryParams}`;\n    return SupersetClient.get({ endpoint }).then(({ json }) => {\n      const { result, count } = json;\n      if (getDbList) {\n        getDbList(result);\n      }\n      if (result.length === 0) {\n        if (onEmptyResults)\n        onEmptyResults(search);\n      }\n      const options = result.map((row, order) => ({\n        label: _jsx(SelectLabel, { backend: row.backend, databaseName: row.database_name }),\n        value: row.id,\n        id: row.id,\n        database_name: row.database_name,\n        backend: row.backend,\n        allow_multi_catalog: row.allow_multi_catalog,\n        order\n      }));\n      return {\n        data: options,\n        totalCount: count != null ? count : options.length\n      };\n    });\n  }, [formMode, getDbList, sqlLabMode, onEmptyResults]);\n  useEffect(() => {\n    setCurrentDb((current) => (current == null ? void 0 : current.id) !== (db == null ? void 0 : db.id) ?\n    db ?\n    {\n      label: _jsx(SelectLabel, { backend: db.backend, databaseName: db.database_name }),\n      value: db.id,\n      ...db\n    } :\n    undefined :\n    current);\n  }, [db]);\n  function changeSchema(schema) {\n    setCurrentSchema(schema);\n    if (onSchemaChange && (schema == null ? void 0 : schema.value) !== schemaRef.current) {\n      onSchemaChange(schema == null ? void 0 : schema.value);\n    }\n  }\n  const { currentData: schemaData, isFetching: loadingSchemas, refetch: refetchSchemas } = useSchemas({\n    dbId: currentDb == null ? void 0 : currentDb.value,\n    catalog: currentCatalog == null ? void 0 : currentCatalog.value,\n    onSuccess: (schemas, isFetched) => {\n      setErrorPayload(null);\n      if (schemas.length === 1) {\n        changeSchema(schemas[0]);\n      } else\n      if (!schemas.find((schemaOption) => schemaRef.current === schemaOption.value)) {\n        changeSchema(undefined);\n      }\n      if (isFetched) {\n        addSuccessToast('List refreshed');\n      }\n    },\n    onError: (error) => {\n      if (error != null && error.errors) {var _error$errors;\n        setErrorPayload(error == null ? void 0 : (_error$errors = error.errors) == null ? void 0 : _error$errors[0]);\n      } else\n      {\n        handleError(t('There was an error loading the schemas'));\n      }\n    }\n  });\n  const schemaOptions = schemaData || EMPTY_SCHEMA_OPTIONS;\n  function changeCatalog(catalog) {\n    setCurrentCatalog(catalog);\n    setCurrentSchema(undefined);\n    if (onCatalogChange && (catalog == null ? void 0 : catalog.value) !== catalogRef.current) {\n      onCatalogChange(catalog == null ? void 0 : catalog.value);\n    }\n  }\n  const { data: catalogData, isFetching: loadingCatalogs, refetch: refetchCatalogs } = useCatalogs({\n    dbId: showCatalogSelector ? currentDb == null ? void 0 : currentDb.value : undefined,\n    onSuccess: (catalogs, isFetched) => {\n      setErrorPayload(null);\n      if (!showCatalogSelector) {\n        changeCatalog(null);\n      } else\n      if (catalogs.length === 1) {\n        changeCatalog(catalogs[0]);\n      } else\n      if (!catalogs.find((catalogOption) => catalogRef.current === catalogOption.value)) {\n        changeCatalog(undefined);\n      }\n      if (showCatalogSelector && isFetched) {\n        addSuccessToast('List refreshed');\n      }\n    },\n    onError: (error) => {\n      if (showCatalogSelector) {\n        if (error != null && error.errors) {var _error$errors2;\n          setErrorPayload(error == null ? void 0 : (_error$errors2 = error.errors) == null ? void 0 : _error$errors2[0]);\n        } else\n        {\n          handleError(t('There was an error loading the catalogs'));\n        }\n      }\n    }\n  });\n  const catalogOptions = catalogData || EMPTY_CATALOG_OPTIONS;\n  function changeDatabase(value, database) {\n    setCurrentDb(database);\n    setCurrentCatalog(undefined);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onCatalogChange) {\n      onCatalogChange(undefined);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n  function renderSelectRow(select, refreshBtn) {\n    return _jsxs(\"div\", { className: \"section\", children: [\n      _jsx(\"span\", { className: \"select\", children: select }),\n      _jsx(\"span\", { className: \"refresh\", children: refreshBtn })] }\n    );\n  }\n  function renderDatabaseSelect() {\n    return renderSelectRow(_jsx(AsyncSelect, { ariaLabel: t('Select database or type to search databases'), optionFilterProps: ['database_name', 'value'], \"data-test\": \"select-database\", header: _jsx(FormLabel, { children: t('Database') }), lazyLoading: false, notFoundContent: emptyState, onChange: changeDatabase, value: currentDb, placeholder: t('Select database or type to search databases'), disabled: !isDatabaseSelectEnabled || readOnly, options: loadDatabases, sortComparator: sortComparator }), null);\n  }\n  function renderCatalogSelect() {\n    const refreshIcon = !readOnly && _jsx(RefreshLabel, { onClick: refetchCatalogs, tooltipContent: t('Force refresh catalog list') });\n    return renderSelectRow(_jsx(Select, { ariaLabel: t('Select catalog or type to search catalogs'), disabled: !currentDb || readOnly, header: _jsx(FormLabel, { children: t('Catalog') }), labelInValue: true, loading: loadingCatalogs, name: \"select-catalog\", notFoundContent: t('No compatible catalog found'), placeholder: t('Select catalog or type to search catalogs'), onChange: (item) => changeCatalog(item), options: catalogOptions, showSearch: true, value: currentCatalog || undefined, allowClear: true }), refreshIcon);\n  }\n  function renderSchemaSelect() {\n    const refreshIcon = !readOnly && _jsx(RefreshLabel, { onClick: refetchSchemas, tooltipContent: t('Force refresh schema list') });\n    return renderSelectRow(_jsx(Select, { ariaLabel: t('Select schema or type to search schemas'), disabled: !currentDb || readOnly, header: _jsx(FormLabel, { children: t('Schema') }), labelInValue: true, loading: loadingSchemas, name: \"select-schema\", notFoundContent: t('No compatible schema found'), placeholder: t('Select schema or type to search schemas'), onChange: (item) => changeSchema(item), options: schemaOptions, showSearch: true, value: currentSchema, allowClear: true }), refreshIcon);\n  }\n  function renderError() {\n    return errorPayload ? _jsx(ErrorMessageWithStackTrace, { error: errorPayload, source: \"crud\" }) : null;\n  }\n  return _jsxs(DatabaseSelectorWrapper, { \"data-test\": \"DatabaseSelector\", children: [\n    renderDatabaseSelect(),\n    renderError(),\n    showCatalogSelector && renderCatalogSelect(),\n    renderSchemaSelect()] }\n  );\n}__signature__(DatabaseSelector, \"useState{[currentDb, setCurrentDb]}\\nuseState{[errorPayload, setErrorPayload]}\\nuseState{[currentCatalog, setCurrentCatalog](catalog ? { label: catalog, value: catalog, title: catalog } : undefined)}\\nuseRef{catalogRef}\\nuseState{[currentSchema, setCurrentSchema](schema ? { label: schema, value: schema, title: schema } : undefined)}\\nuseRef{schemaRef}\\nuseToasts{{ addSuccessToast }}\\nuseCallback{sortComparator}\\nuseMemo{loadDatabases}\\nuseEffect{}\\nuseSchemas{{ currentData: schemaData, isFetching: loadingSchemas, refetch: refetchSchemas, }}\\nuseCatalogs{{ data: catalogData, isFetching: loadingCatalogs, refetch: refetchCatalogs, }}\", () => [useToasts, useSchemas, useCatalogs]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DatabaseSelectorWrapper, \"DatabaseSelectorWrapper\", \"/Users/aryurkov/superset/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(LabelStyle, \"LabelStyle\", \"/Users/aryurkov/superset/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(SelectLabel, \"SelectLabel\", \"/Users/aryurkov/superset/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(EMPTY_CATALOG_OPTIONS, \"EMPTY_CATALOG_OPTIONS\", \"/Users/aryurkov/superset/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(EMPTY_SCHEMA_OPTIONS, \"EMPTY_SCHEMA_OPTIONS\", \"/Users/aryurkov/superset/superset-frontend/src/components/DatabaseSelector/index.tsx\");reactHotLoader.register(DatabaseSelector, \"DatabaseSelector\", \"/Users/aryurkov/superset/superset-frontend/src/components/DatabaseSelector/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useState","useMemo","useEffect","useRef","useCallback","styled","SupersetClient","t","rison","AsyncSelect","Select","ErrorMessageWithStackTrace","Label","FormLabel","RefreshLabel","useToasts","useCatalogs","useSchemas","jsx","_jsx","jsxs","_jsxs","DatabaseSelectorWrapper","div","theme","gridUnit","LabelStyle","SelectLabel","backend","databaseName","children","className","title","EMPTY_CATALOG_OPTIONS","EMPTY_SCHEMA_OPTIONS","DatabaseSelector","db","formMode","emptyState","getDbList","handleError","isDatabaseSelectEnabled","onDbChange","onEmptyResults","onCatalogChange","catalog","onSchemaChange","schema","readOnly","sqlLabMode","showCatalogSelector","allow_multi_catalog","currentDb","setCurrentDb","errorPayload","setErrorPayload","currentCatalog","setCurrentCatalog","label","value","undefined","catalogRef","current","currentSchema","setCurrentSchema","schemaRef","addSuccessToast","sortComparator","itemA","itemB","order","loadDatabases","search","page","pageSize","queryParams","encode","order_column","order_direction","page_size","filters","col","opr","endpoint","get","then","json","result","count","length","options","map","row","database_name","id","data","totalCount","changeSchema","currentData","schemaData","isFetching","loadingSchemas","refetch","refetchSchemas","dbId","onSuccess","schemas","isFetched","find","schemaOption","onError","error","errors","_error$errors","schemaOptions","changeCatalog","catalogData","loadingCatalogs","refetchCatalogs","catalogs","catalogOption","_error$errors2","catalogOptions","changeDatabase","database","renderSelectRow","select","refreshBtn","renderDatabaseSelect","ariaLabel","optionFilterProps","header","lazyLoading","notFoundContent","onChange","placeholder","disabled","renderCatalogSelect","refreshIcon","onClick","tooltipContent","labelInValue","loading","name","item","showSearch","allowClear","renderSchemaSelect","renderError","source","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/components/DatabaseSelector/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ReactNode,\n  useState,\n  useMemo,\n  useEffect,\n  useRef,\n  useCallback,\n} from 'react';\nimport { styled, SupersetClient, SupersetError, t } from '@superset-ui/core';\nimport type { LabeledValue as AntdLabeledValue } from 'antd-v5/lib/select';\nimport rison from 'rison';\nimport { AsyncSelect, Select } from 'src/components';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport {\n  useCatalogs,\n  CatalogOption,\n  useSchemas,\n  SchemaOption,\n} from 'src/hooks/apiResources';\n\nconst DatabaseSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      width: calc(100% - 30px - ${theme.gridUnit}px);\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\n\nconst LabelStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${({ theme }) => theme.gridUnit - 2}px;\n\n  .backend {\n    overflow: visible;\n  }\n\n  .name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\ntype DatabaseValue = {\n  label: ReactNode;\n  value: number;\n  id: number;\n  database_name: string;\n  backend?: string;\n};\n\nexport type DatabaseObject = {\n  id: number;\n  database_name: string;\n  backend?: string;\n  allow_multi_catalog?: boolean;\n};\n\nexport interface DatabaseSelectorProps {\n  db?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => void;\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onEmptyResults?: (searchText?: string) => void;\n  onCatalogChange?: (catalog?: string) => void;\n  catalog?: string | null;\n  onSchemaChange?: (schema?: string) => void;\n  schema?: string;\n  readOnly?: boolean;\n  sqlLabMode?: boolean;\n}\n\nconst SelectLabel = ({\n  backend,\n  databaseName,\n}: {\n  backend?: string;\n  databaseName: string;\n}) => (\n  <LabelStyle>\n    <Label className=\"backend\">{backend || ''}</Label>\n    <span className=\"name\" title={databaseName}>\n      {databaseName}\n    </span>\n  </LabelStyle>\n);\n\nconst EMPTY_CATALOG_OPTIONS: CatalogOption[] = [];\nconst EMPTY_SCHEMA_OPTIONS: SchemaOption[] = [];\n\ninterface AntdLabeledValueWithOrder extends AntdLabeledValue {\n  order: number;\n}\n\nexport default function DatabaseSelector({\n  db,\n  formMode = false,\n  emptyState,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onEmptyResults,\n  onCatalogChange,\n  catalog,\n  onSchemaChange,\n  schema,\n  readOnly = false,\n  sqlLabMode = false,\n}: DatabaseSelectorProps) {\n  const showCatalogSelector = !!db?.allow_multi_catalog;\n  const [currentDb, setCurrentDb] = useState<DatabaseValue | undefined>();\n  const [errorPayload, setErrorPayload] = useState<SupersetError | null>();\n  const [currentCatalog, setCurrentCatalog] = useState<\n    CatalogOption | null | undefined\n  >(catalog ? { label: catalog, value: catalog, title: catalog } : undefined);\n  const catalogRef = useRef(catalog);\n  catalogRef.current = catalog;\n  const [currentSchema, setCurrentSchema] = useState<SchemaOption | undefined>(\n    schema ? { label: schema, value: schema, title: schema } : undefined,\n  );\n  const schemaRef = useRef(schema);\n  schemaRef.current = schema;\n  const { addSuccessToast } = useToasts();\n  const sortComparator = useCallback(\n    (itemA: AntdLabeledValueWithOrder, itemB: AntdLabeledValueWithOrder) =>\n      itemA.order - itemB.order,\n    [],\n  );\n\n  const loadDatabases = useMemo(\n    () =>\n      async (\n        search: string,\n        page: number,\n        pageSize: number,\n      ): Promise<{\n        data: DatabaseValue[];\n        totalCount: number;\n      }> => {\n        const queryParams = rison.encode({\n          order_column: 'database_name',\n          order_direction: 'asc',\n          page,\n          page_size: pageSize,\n          ...(formMode || !sqlLabMode\n            ? { filters: [{ col: 'database_name', opr: 'ct', value: search }] }\n            : {\n                filters: [\n                  { col: 'database_name', opr: 'ct', value: search },\n                  {\n                    col: 'expose_in_sqllab',\n                    opr: 'eq',\n                    value: true,\n                  },\n                ],\n              }),\n        });\n        const endpoint = `/api/v1/database/?q=${queryParams}`;\n        return SupersetClient.get({ endpoint }).then(({ json }) => {\n          const { result, count } = json;\n          if (getDbList) {\n            getDbList(result);\n          }\n          if (result.length === 0) {\n            if (onEmptyResults) onEmptyResults(search);\n          }\n\n          const options = result.map((row: DatabaseObject, order: number) => ({\n            label: (\n              <SelectLabel\n                backend={row.backend}\n                databaseName={row.database_name}\n              />\n            ),\n            value: row.id,\n            id: row.id,\n            database_name: row.database_name,\n            backend: row.backend,\n            allow_multi_catalog: row.allow_multi_catalog,\n            order,\n          }));\n\n          return {\n            data: options,\n            totalCount: count ?? options.length,\n          };\n        });\n      },\n    [formMode, getDbList, sqlLabMode, onEmptyResults],\n  );\n\n  useEffect(() => {\n    setCurrentDb(current =>\n      current?.id !== db?.id\n        ? db\n          ? {\n              label: (\n                <SelectLabel\n                  backend={db.backend}\n                  databaseName={db.database_name}\n                />\n              ),\n              value: db.id,\n              ...db,\n            }\n          : undefined\n        : current,\n    );\n  }, [db]);\n\n  function changeSchema(schema: SchemaOption | undefined) {\n    setCurrentSchema(schema);\n    if (onSchemaChange && schema?.value !== schemaRef.current) {\n      onSchemaChange(schema?.value);\n    }\n  }\n\n  const {\n    currentData: schemaData,\n    isFetching: loadingSchemas,\n    refetch: refetchSchemas,\n  } = useSchemas({\n    dbId: currentDb?.value,\n    catalog: currentCatalog?.value,\n    onSuccess: (schemas, isFetched) => {\n      setErrorPayload(null);\n      if (schemas.length === 1) {\n        changeSchema(schemas[0]);\n      } else if (\n        !schemas.find(schemaOption => schemaRef.current === schemaOption.value)\n      ) {\n        changeSchema(undefined);\n      }\n\n      if (isFetched) {\n        addSuccessToast('List refreshed');\n      }\n    },\n    onError: error => {\n      if (error?.errors) {\n        setErrorPayload(error?.errors?.[0]);\n      } else {\n        handleError(t('There was an error loading the schemas'));\n      }\n    },\n  });\n\n  const schemaOptions = schemaData || EMPTY_SCHEMA_OPTIONS;\n\n  function changeCatalog(catalog: CatalogOption | null | undefined) {\n    setCurrentCatalog(catalog);\n    setCurrentSchema(undefined);\n    if (onCatalogChange && catalog?.value !== catalogRef.current) {\n      onCatalogChange(catalog?.value);\n    }\n  }\n\n  const {\n    data: catalogData,\n    isFetching: loadingCatalogs,\n    refetch: refetchCatalogs,\n  } = useCatalogs({\n    dbId: showCatalogSelector ? currentDb?.value : undefined,\n    onSuccess: (catalogs, isFetched) => {\n      setErrorPayload(null);\n      if (!showCatalogSelector) {\n        changeCatalog(null);\n      } else if (catalogs.length === 1) {\n        changeCatalog(catalogs[0]);\n      } else if (\n        !catalogs.find(\n          catalogOption => catalogRef.current === catalogOption.value,\n        )\n      ) {\n        changeCatalog(undefined);\n      }\n\n      if (showCatalogSelector && isFetched) {\n        addSuccessToast('List refreshed');\n      }\n    },\n    onError: error => {\n      if (showCatalogSelector) {\n        if (error?.errors) {\n          setErrorPayload(error?.errors?.[0]);\n        } else {\n          handleError(t('There was an error loading the catalogs'));\n        }\n      }\n    },\n  });\n\n  const catalogOptions = catalogData || EMPTY_CATALOG_OPTIONS;\n\n  function changeDatabase(\n    value: { label: string; value: number },\n    database: DatabaseValue,\n  ) {\n    setCurrentDb(database);\n    setCurrentCatalog(undefined);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onCatalogChange) {\n      onCatalogChange(undefined);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  function renderDatabaseSelect() {\n    return renderSelectRow(\n      <AsyncSelect\n        ariaLabel={t('Select database or type to search databases')}\n        optionFilterProps={['database_name', 'value']}\n        data-test=\"select-database\"\n        header={<FormLabel>{t('Database')}</FormLabel>}\n        lazyLoading={false}\n        notFoundContent={emptyState}\n        onChange={changeDatabase}\n        value={currentDb}\n        placeholder={t('Select database or type to search databases')}\n        disabled={!isDatabaseSelectEnabled || readOnly}\n        options={loadDatabases}\n        sortComparator={sortComparator}\n      />,\n      null,\n    );\n  }\n\n  function renderCatalogSelect() {\n    const refreshIcon = !readOnly && (\n      <RefreshLabel\n        onClick={refetchCatalogs}\n        tooltipContent={t('Force refresh catalog list')}\n      />\n    );\n    return renderSelectRow(\n      <Select\n        ariaLabel={t('Select catalog or type to search catalogs')}\n        disabled={!currentDb || readOnly}\n        header={<FormLabel>{t('Catalog')}</FormLabel>}\n        labelInValue\n        loading={loadingCatalogs}\n        name=\"select-catalog\"\n        notFoundContent={t('No compatible catalog found')}\n        placeholder={t('Select catalog or type to search catalogs')}\n        onChange={item => changeCatalog(item as CatalogOption)}\n        options={catalogOptions}\n        showSearch\n        value={currentCatalog || undefined}\n        allowClear\n      />,\n      refreshIcon,\n    );\n  }\n\n  function renderSchemaSelect() {\n    const refreshIcon = !readOnly && (\n      <RefreshLabel\n        onClick={refetchSchemas}\n        tooltipContent={t('Force refresh schema list')}\n      />\n    );\n    return renderSelectRow(\n      <Select\n        ariaLabel={t('Select schema or type to search schemas')}\n        disabled={!currentDb || readOnly}\n        header={<FormLabel>{t('Schema')}</FormLabel>}\n        labelInValue\n        loading={loadingSchemas}\n        name=\"select-schema\"\n        notFoundContent={t('No compatible schema found')}\n        placeholder={t('Select schema or type to search schemas')}\n        onChange={item => changeSchema(item as SchemaOption)}\n        options={schemaOptions}\n        showSearch\n        value={currentSchema}\n        allowClear\n      />,\n      refreshIcon,\n    );\n  }\n\n  function renderError() {\n    return errorPayload ? (\n      <ErrorMessageWithStackTrace error={errorPayload} source=\"crud\" />\n    ) : null;\n  }\n\n  return (\n    <DatabaseSelectorWrapper data-test=\"DatabaseSelector\">\n      {renderDatabaseSelect()}\n      {renderError()}\n      {showCatalogSelector && renderCatalogSelect()}\n      {renderSchemaSelect()}\n    </DatabaseSelectorWrapper>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}