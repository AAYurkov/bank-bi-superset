{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { DTTM_ALIAS, AxisType, getTimeFormatter, getColumnLabel, getNumberFormatter, ensureIsArray } from '@superset-ui/core';\nimport Echart from '../components/Echart';\nimport { formatSeriesName } from '../utils/series';\nimport { ExtraControls } from '../components/ExtraControls';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst TIMER_DURATION = 300;\nexport default function EchartsTimeseries({ formData, height, width, echartOptions, groupby, labelMap, selectedValues, setDataMask, setControlValue, legendData = [], onContextMenu, onLegendStateChanged, onFocusedSeries, xValueFormatter, xAxis, refs, emitCrossFilters, coltypeMapping }) {\n  const { stack } = formData;\n  const echartRef = useRef(null);\n  // eslint-disable-next-line no-param-reassign\n  refs.echartRef = echartRef;\n  const clickTimer = useRef();\n  const extraControlRef = useRef(null);\n  const [extraControlHeight, setExtraControlHeight] = useState(0);\n  useEffect(() => {var _extraControlRef$curr;\n    const updatedHeight = ((_extraControlRef$curr = extraControlRef.current) == null ? void 0 : _extraControlRef$curr.offsetHeight) || 0;\n    setExtraControlHeight(updatedHeight);\n  }, [formData.showExtraControls]);\n  const hasDimensions = ensureIsArray(groupby).length > 0;\n  const getModelInfo = (target, globalModel) => {\n    let el = target;\n    let model = null;\n    while (el) {\n      // eslint-disable-next-line no-underscore-dangle\n      const modelInfo = el.__ecComponentInfo;\n      if (modelInfo != null) {\n        model = globalModel.getComponent(modelInfo.mainType, modelInfo.index);\n        break;\n      }\n      el = el.parent;\n    }\n    return model;\n  };\n  const getCrossFilterDataMask = useCallback((value) => {\n    const selected = Object.values(selectedValues);\n    let values;\n    if (selected.includes(value)) {\n      values = selected.filter((v) => v !== value);\n    } else\n    {\n      values = [value];\n    }\n    const groupbyValues = values.map((value) => labelMap[value]);\n    return {\n      dataMask: {\n        extraFormData: {\n          filters: values.length === 0 ?\n          [] :\n          groupby.map((col, idx) => {\n            const val = groupbyValues.map((v) => v[idx]);\n            if (val === null || val === undefined)\n            return {\n              col,\n              op: 'IS NULL'\n            };\n            return {\n              col,\n              op: 'IN',\n              val: val\n            };\n          })\n        },\n        filterState: {\n          label: groupbyValues.length ? groupbyValues : undefined,\n          value: groupbyValues.length ? groupbyValues : null,\n          selectedValues: values.length ? values : null\n        }\n      },\n      isCurrentValueSelected: selected.includes(value)\n    };\n  }, [groupby, labelMap, selectedValues]);\n  const handleChange = useCallback((value) => {\n    if (!emitCrossFilters) {\n      return;\n    }\n    setDataMask(getCrossFilterDataMask(value).dataMask);\n  }, [emitCrossFilters, setDataMask, getCrossFilterDataMask]);\n  const eventHandlers = {\n    click: (props) => {\n      if (!hasDimensions) {\n        return;\n      }\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      // Ensure that double-click events do not trigger single click event. So we put it in the timer.\n      clickTimer.current = setTimeout(() => {\n        const { seriesName: name } = props;\n        handleChange(name);\n      }, TIMER_DURATION);\n    },\n    mouseout: () => {\n      onFocusedSeries(null);\n    },\n    mouseover: (params) => {\n      onFocusedSeries(params.seriesName);\n    },\n    legendselectchanged: (payload) => {\n      onLegendStateChanged == null ? void 0 : onLegendStateChanged(payload.selected);\n    },\n    legendselectall: (payload) => {\n      onLegendStateChanged == null ? void 0 : onLegendStateChanged(payload.selected);\n    },\n    legendinverseselect: (payload) => {\n      onLegendStateChanged == null ? void 0 : onLegendStateChanged(payload.selected);\n    },\n    contextmenu: async (eventParams) => {\n      if (onContextMenu) {var _labelMap$seriesName;\n        eventParams.event.stop();\n        const { data, seriesName } = eventParams;\n        const drillToDetailFilters = [];\n        const drillByFilters = [];\n        const pointerEvent = eventParams.event.event;\n        const values = [\n        ...(eventParams.name ? [eventParams.name] : []),\n        ...((_labelMap$seriesName = labelMap[seriesName]) != null ? _labelMap$seriesName : [])];\n\n        const groupBy = ensureIsArray(formData.groupby);\n        if (data && xAxis.type === AxisType.Time) {\n          drillToDetailFilters.push({\n            col:\n            // if the xAxis is '__timestamp', granularity_sqla will be the column of filter\n            xAxis.label === DTTM_ALIAS ?\n            formData.granularitySqla :\n            xAxis.label,\n            grain: formData.timeGrainSqla,\n            op: '==',\n            val: data[0],\n            formattedVal: xValueFormatter(data[0])\n          });\n        }\n        [\n        ...(xAxis.type === AxisType.Category && data ? [xAxis.label] : []),\n        ...groupBy].\n        forEach((dimension, i) => drillToDetailFilters.push({\n          col: dimension,\n          op: '==',\n          val: values[i],\n          formattedVal: String(values[i])\n        }));\n        groupBy.forEach((dimension, i) => {\n          const val = labelMap[seriesName][i];\n          drillByFilters.push({\n            col: dimension,\n            op: '==',\n            val,\n            formattedVal: formatSeriesName(values[i], {\n              timeFormatter: getTimeFormatter(formData.dateFormat),\n              numberFormatter: getNumberFormatter(formData.numberFormat),\n              coltype: coltypeMapping == null ? void 0 : coltypeMapping[getColumnLabel(dimension)]\n            })\n          });\n        });\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          drillBy: { filters: drillByFilters, groupbyFieldName: 'groupby' },\n          crossFilter: hasDimensions ?\n          getCrossFilterDataMask(seriesName) :\n          undefined\n        });\n      }\n    }\n  };\n  const zrEventHandlers = {\n    dblclick: (params) => {var _echartRef$current;\n      // clear single click timer\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      const pointInPixel = [params.offsetX, params.offsetY];\n      const echartInstance = (_echartRef$current = echartRef.current) == null ? void 0 : _echartRef$current.getEchartInstance();\n      if (echartInstance != null && echartInstance.containPixel('grid', pointInPixel)) {var _params$target;\n        // do not trigger if click unstacked chart's blank area\n        if (!stack && ((_params$target = params.target) == null ? void 0 : _params$target.type) === 'ec-polygon')\n        return;\n        // @ts-ignore\n        const globalModel = echartInstance.getModel();\n        const model = getModelInfo(params.target, globalModel);\n        if (model) {\n          const { name } = model;\n          const legendState = legendData.reduce((previous, datum) => ({\n            ...previous,\n            [datum]: datum === name\n          }), {});\n          onLegendStateChanged == null ? void 0 : onLegendStateChanged(legendState);\n        }\n      }\n    }\n  };\n  return _jsxs(_Fragment, { children: [\n    _jsx(\"div\", { ref: extraControlRef, children:\n      _jsx(ExtraControls, { formData: formData, setControlValue: setControlValue }) }\n    ),\n    _jsx(Echart, { ref: echartRef, refs: refs, height: height - extraControlHeight, width: width, echartOptions: echartOptions, eventHandlers: eventHandlers, zrEventHandlers: zrEventHandlers, selectedValues: selectedValues })] }\n  );\n}__signature__(EchartsTimeseries, \"useRef{echartRef}\\nuseRef{clickTimer}\\nuseRef{extraControlRef}\\nuseState{[extraControlHeight, setExtraControlHeight](0)}\\nuseEffect{}\\nuseCallback{getCrossFilterDataMask}\\nuseCallback{handleChange}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(TIMER_DURATION, \"TIMER_DURATION\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/Timeseries/EchartsTimeseries.tsx\");reactHotLoader.register(EchartsTimeseries, \"EchartsTimeseries\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/Timeseries/EchartsTimeseries.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","DTTM_ALIAS","AxisType","getTimeFormatter","getColumnLabel","getNumberFormatter","ensureIsArray","Echart","formatSeriesName","ExtraControls","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","TIMER_DURATION","EchartsTimeseries","formData","height","width","echartOptions","groupby","labelMap","selectedValues","setDataMask","setControlValue","legendData","onContextMenu","onLegendStateChanged","onFocusedSeries","xValueFormatter","xAxis","refs","emitCrossFilters","coltypeMapping","stack","echartRef","clickTimer","extraControlRef","extraControlHeight","setExtraControlHeight","_extraControlRef$curr","updatedHeight","current","offsetHeight","showExtraControls","hasDimensions","length","getModelInfo","target","globalModel","el","model","modelInfo","__ecComponentInfo","getComponent","mainType","index","parent","getCrossFilterDataMask","value","selected","Object","values","includes","filter","v","groupbyValues","map","dataMask","extraFormData","filters","col","idx","val","undefined","op","filterState","label","isCurrentValueSelected","handleChange","eventHandlers","click","props","clearTimeout","setTimeout","seriesName","name","mouseout","mouseover","params","legendselectchanged","payload","legendselectall","legendinverseselect","contextmenu","eventParams","_labelMap$seriesName","event","stop","data","drillToDetailFilters","drillByFilters","pointerEvent","groupBy","type","Time","push","granularitySqla","grain","timeGrainSqla","formattedVal","Category","forEach","dimension","i","String","timeFormatter","dateFormat","numberFormatter","numberFormat","coltype","clientX","clientY","drillToDetail","drillBy","groupbyFieldName","crossFilter","zrEventHandlers","dblclick","_echartRef$current","pointInPixel","offsetX","offsetY","echartInstance","getEchartInstance","containPixel","_params$target","getModel","legendState","reduce","previous","datum","children","ref","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/Timeseries/EchartsTimeseries.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport {\n  DTTM_ALIAS,\n  BinaryQueryObjectFilterClause,\n  AxisType,\n  getTimeFormatter,\n  getColumnLabel,\n  getNumberFormatter,\n  LegendState,\n  ensureIsArray,\n} from '@superset-ui/core';\nimport type { ViewRootGroup } from 'echarts/types/src/util/types';\nimport type GlobalModel from 'echarts/types/src/model/Global';\nimport type ComponentModel from 'echarts/types/src/model/Component';\nimport { EchartsHandler, EventHandlers } from '../types';\nimport Echart from '../components/Echart';\nimport { TimeseriesChartTransformedProps } from './types';\nimport { formatSeriesName } from '../utils/series';\nimport { ExtraControls } from '../components/ExtraControls';\n\nconst TIMER_DURATION = 300;\n\nexport default function EchartsTimeseries({\n  formData,\n  height,\n  width,\n  echartOptions,\n  groupby,\n  labelMap,\n  selectedValues,\n  setDataMask,\n  setControlValue,\n  legendData = [],\n  onContextMenu,\n  onLegendStateChanged,\n  onFocusedSeries,\n  xValueFormatter,\n  xAxis,\n  refs,\n  emitCrossFilters,\n  coltypeMapping,\n}: TimeseriesChartTransformedProps) {\n  const { stack } = formData;\n  const echartRef = useRef<EchartsHandler | null>(null);\n  // eslint-disable-next-line no-param-reassign\n  refs.echartRef = echartRef;\n  const clickTimer = useRef<ReturnType<typeof setTimeout>>();\n  const extraControlRef = useRef<HTMLDivElement>(null);\n  const [extraControlHeight, setExtraControlHeight] = useState(0);\n  useEffect(() => {\n    const updatedHeight = extraControlRef.current?.offsetHeight || 0;\n    setExtraControlHeight(updatedHeight);\n  }, [formData.showExtraControls]);\n\n  const hasDimensions = ensureIsArray(groupby).length > 0;\n\n  const getModelInfo = (target: ViewRootGroup, globalModel: GlobalModel) => {\n    let el = target;\n    let model: ComponentModel | null = null;\n    while (el) {\n      // eslint-disable-next-line no-underscore-dangle\n      const modelInfo = el.__ecComponentInfo;\n      if (modelInfo != null) {\n        model = globalModel.getComponent(modelInfo.mainType, modelInfo.index);\n        break;\n      }\n      el = el.parent;\n    }\n    return model;\n  };\n\n  const getCrossFilterDataMask = useCallback(\n    (value: string) => {\n      const selected: string[] = Object.values(selectedValues);\n      let values: string[];\n      if (selected.includes(value)) {\n        values = selected.filter(v => v !== value);\n      } else {\n        values = [value];\n      }\n      const groupbyValues = values.map(value => labelMap[value]);\n      return {\n        dataMask: {\n          extraFormData: {\n            filters:\n              values.length === 0\n                ? []\n                : groupby.map((col, idx) => {\n                    const val = groupbyValues.map(v => v[idx]);\n                    if (val === null || val === undefined)\n                      return {\n                        col,\n                        op: 'IS NULL' as const,\n                      };\n                    return {\n                      col,\n                      op: 'IN' as const,\n                      val: val as (string | number | boolean)[],\n                    };\n                  }),\n          },\n          filterState: {\n            label: groupbyValues.length ? groupbyValues : undefined,\n            value: groupbyValues.length ? groupbyValues : null,\n            selectedValues: values.length ? values : null,\n          },\n        },\n        isCurrentValueSelected: selected.includes(value),\n      };\n    },\n    [groupby, labelMap, selectedValues],\n  );\n\n  const handleChange = useCallback(\n    (value: string) => {\n      if (!emitCrossFilters) {\n        return;\n      }\n      setDataMask(getCrossFilterDataMask(value).dataMask);\n    },\n    [emitCrossFilters, setDataMask, getCrossFilterDataMask],\n  );\n\n  const eventHandlers: EventHandlers = {\n    click: props => {\n      if (!hasDimensions) {\n        return;\n      }\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      // Ensure that double-click events do not trigger single click event. So we put it in the timer.\n      clickTimer.current = setTimeout(() => {\n        const { seriesName: name } = props;\n        handleChange(name);\n      }, TIMER_DURATION);\n    },\n    mouseout: () => {\n      onFocusedSeries(null);\n    },\n    mouseover: params => {\n      onFocusedSeries(params.seriesName);\n    },\n    legendselectchanged: payload => {\n      onLegendStateChanged?.(payload.selected);\n    },\n    legendselectall: payload => {\n      onLegendStateChanged?.(payload.selected);\n    },\n    legendinverseselect: payload => {\n      onLegendStateChanged?.(payload.selected);\n    },\n    contextmenu: async eventParams => {\n      if (onContextMenu) {\n        eventParams.event.stop();\n        const { data, seriesName } = eventParams;\n        const drillToDetailFilters: BinaryQueryObjectFilterClause[] = [];\n        const drillByFilters: BinaryQueryObjectFilterClause[] = [];\n        const pointerEvent = eventParams.event.event;\n        const values = [\n          ...(eventParams.name ? [eventParams.name] : []),\n          ...(labelMap[seriesName] ?? []),\n        ];\n        const groupBy = ensureIsArray(formData.groupby);\n        if (data && xAxis.type === AxisType.Time) {\n          drillToDetailFilters.push({\n            col:\n              // if the xAxis is '__timestamp', granularity_sqla will be the column of filter\n              xAxis.label === DTTM_ALIAS\n                ? formData.granularitySqla\n                : xAxis.label,\n            grain: formData.timeGrainSqla,\n            op: '==',\n            val: data[0],\n            formattedVal: xValueFormatter(data[0]),\n          });\n        }\n        [\n          ...(xAxis.type === AxisType.Category && data ? [xAxis.label] : []),\n          ...groupBy,\n        ].forEach((dimension, i) =>\n          drillToDetailFilters.push({\n            col: dimension,\n            op: '==',\n            val: values[i],\n            formattedVal: String(values[i]),\n          }),\n        );\n        groupBy.forEach((dimension, i) => {\n          const val = labelMap[seriesName][i];\n          drillByFilters.push({\n            col: dimension,\n            op: '==',\n            val,\n            formattedVal: formatSeriesName(values[i], {\n              timeFormatter: getTimeFormatter(formData.dateFormat),\n              numberFormatter: getNumberFormatter(formData.numberFormat),\n              coltype: coltypeMapping?.[getColumnLabel(dimension)],\n            }),\n          });\n        });\n\n        onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n          drillToDetail: drillToDetailFilters,\n          drillBy: { filters: drillByFilters, groupbyFieldName: 'groupby' },\n          crossFilter: hasDimensions\n            ? getCrossFilterDataMask(seriesName)\n            : undefined,\n        });\n      }\n    },\n  };\n\n  const zrEventHandlers: EventHandlers = {\n    dblclick: params => {\n      // clear single click timer\n      if (clickTimer.current) {\n        clearTimeout(clickTimer.current);\n      }\n      const pointInPixel = [params.offsetX, params.offsetY];\n      const echartInstance = echartRef.current?.getEchartInstance();\n      if (echartInstance?.containPixel('grid', pointInPixel)) {\n        // do not trigger if click unstacked chart's blank area\n        if (!stack && params.target?.type === 'ec-polygon') return;\n        // @ts-ignore\n        const globalModel = echartInstance.getModel();\n        const model = getModelInfo(params.target, globalModel);\n        if (model) {\n          const { name } = model;\n          const legendState: LegendState = legendData.reduce(\n            (previous, datum) => ({\n              ...previous,\n              [datum]: datum === name,\n            }),\n            {},\n          );\n          onLegendStateChanged?.(legendState);\n        }\n      }\n    },\n  };\n\n  return (\n    <>\n      <div ref={extraControlRef}>\n        <ExtraControls formData={formData} setControlValue={setControlValue} />\n      </div>\n      <Echart\n        ref={echartRef}\n        refs={refs}\n        height={height - extraControlHeight}\n        width={width}\n        echartOptions={echartOptions}\n        eventHandlers={eventHandlers}\n        zrEventHandlers={zrEventHandlers}\n        selectedValues={selectedValues}\n      />\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}