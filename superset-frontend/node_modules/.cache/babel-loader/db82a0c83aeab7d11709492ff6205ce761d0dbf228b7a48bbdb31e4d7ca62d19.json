{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { getMetricLabel, getValueFormatter, getNumberFormatter, ensureIsArray } from '@superset-ui/core';\nimport { getComparisonFontSize, getHeaderFontSize } from './utils';\ndayjs.extend(utc);\nexport const parseMetricValue = (metricValue) => {\n  if (typeof metricValue === 'string') {\n    const dateObject = dayjs.utc(metricValue, undefined, true);\n    if (dateObject.isValid()) {\n      return dateObject.valueOf();\n    }\n    return 0;\n  }\n  return metricValue != null ? metricValue : 0;\n};\nexport default function transformProps(chartProps) {var _chartProps$rawFormDa, _chartProps$rawFormDa2, _chartProps$rawFormDa3, _chartProps$rawFormDa4, _chartProps$rawFormDa5, _formData$extraFormDa;\n  /**\n   * This function is called after a successful response has been\n   * received from the chart data endpoint, and is used to transform\n   * the incoming data prior to being sent to the Visualization.\n   *\n   * The transformProps function is also quite useful to return\n   * additional/modified props to your data viz component. The formData\n   * can also be accessed from your CustomViz.tsx file, but\n   * doing supplying custom props here is often handy for integrating third\n   * party libraries that rely on specific props.\n   *\n   * A description of properties in `chartProps`:\n   * - `height`, `width`: the height/width of the DOM element in which\n   *   the chart is located\n   * - `formData`: the chart data request payload that was sent to the\n   *   backend.\n   * - `queriesData`: the chart data response payload that was received\n   *   from the backend. Some notable properties of `queriesData`:\n   *   - `data`: an array with data, each row with an object mapping\n   *     the column/alias to its value. Example:\n   *     `[{ col1: 'abc', metric1: 10 }, { col1: 'xyz', metric1: 20 }]`\n   *   - `rowcount`: the number of rows in `data`\n   *   - `query`: the query that was issued.\n   *\n   * Please note: the transformProps function gets cached when the\n   * application loads. When making changes to the `transformProps`\n   * function during development with hot reloading, changes won't\n   * be seen until restarting the development server.\n   */\n  const { width, height, formData, queriesData, datasource: { currencyFormats = {}, columnFormats = {} } } = chartProps;\n  const { boldText, headerFontSize, headerText, metric, yAxisFormat, currencyFormat, subheaderFontSize, comparisonColorScheme, comparisonColorEnabled, percentDifferenceFormat, subtitle = '', subtitleFontSize, columnConfig } = formData;\n  const { data: dataA = [] } = queriesData[0];\n  const data = dataA;\n  const metricName = metric ? getMetricLabel(metric) : '';\n  const timeComparison = ensureIsArray((_chartProps$rawFormDa = chartProps.rawFormData) == null ? void 0 : _chartProps$rawFormDa.time_compare)[0];\n  const startDateOffset = (_chartProps$rawFormDa2 = chartProps.rawFormData) == null ? void 0 : _chartProps$rawFormDa2.start_date_offset;\n  const currentTimeRangeFilter = (_chartProps$rawFormDa3 = chartProps.rawFormData) == null ? void 0 : (_chartProps$rawFormDa4 = _chartProps$rawFormDa3.adhoc_filters) == null ? void 0 : (_chartProps$rawFormDa5 = _chartProps$rawFormDa4.filter((adhoc_filter) => adhoc_filter.operator === 'TEMPORAL_RANGE')) == null ? void 0 : _chartProps$rawFormDa5[0];\n  const isCustomOrInherit = timeComparison === 'custom' || timeComparison === 'inherit';\n  let dataOffset = [];\n  if (isCustomOrInherit) {\n    if (timeComparison && timeComparison === 'custom') {\n      dataOffset = [startDateOffset];\n    } else\n    {\n      dataOffset = ensureIsArray(timeComparison) || [];\n    }\n  }\n  const { value1, value2 } = data.reduce((acc, curr) => {\n    Object.keys(curr).forEach((key) => {\n      if (key.includes(`${metricName}__${!isCustomOrInherit ? timeComparison : dataOffset[0]}`)) {\n        acc.value2 += curr[key];\n      } else\n      if (key.includes(metricName)) {\n        acc.value1 += curr[key];\n      }\n    });\n    return acc;\n  }, { value1: 0, value2: 0 });\n  let bigNumber = data.length === 0 ? 0 : parseMetricValue(value1);\n  let prevNumber = data.length === 0 ? 0 : parseMetricValue(value2);\n  const numberFormatter = getValueFormatter(metric, currencyFormats, columnFormats, yAxisFormat, currencyFormat);\n  const compTitles = {\n    r: 'Range',\n    y: 'Year',\n    m: 'Month',\n    w: 'Week'\n  };\n  const formatPercentChange = getNumberFormatter(percentDifferenceFormat);\n  let valueDifference = bigNumber - prevNumber;\n  let percentDifferenceNum;\n  if (!bigNumber && !prevNumber) {\n    percentDifferenceNum = 0;\n  } else\n  if (!bigNumber || !prevNumber) {\n    percentDifferenceNum = bigNumber ? 1 : -1;\n  } else\n  {\n    percentDifferenceNum = (bigNumber - prevNumber) / Math.abs(prevNumber);\n  }\n  const compType = compTitles[formData.timeComparison];\n  bigNumber = numberFormatter(bigNumber);\n  prevNumber = numberFormatter(prevNumber);\n  valueDifference = numberFormatter(valueDifference);\n  const percentDifference = formatPercentChange(percentDifferenceNum);\n  return {\n    width,\n    height,\n    data,\n    metricName,\n    bigNumber,\n    prevNumber,\n    valueDifference,\n    percentDifferenceFormattedString: percentDifference,\n    boldText,\n    subtitle,\n    subtitleFontSize,\n    headerFontSize: getHeaderFontSize(headerFontSize),\n    subheaderFontSize: getComparisonFontSize(subheaderFontSize),\n    headerText,\n    compType,\n    comparisonColorEnabled,\n    comparisonColorScheme,\n    percentDifferenceNumber: percentDifferenceNum,\n    currentTimeRangeFilter,\n    startDateOffset,\n    shift: timeComparison,\n    dashboardTimeRange: formData == null ? void 0 : (_formData$extraFormDa = formData.extraFormData) == null ? void 0 : _formData$extraFormDa.time_range,\n    columnConfig\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(parseMetricValue, \"parseMetricValue\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberPeriodOverPeriod/transformProps.ts\");reactHotLoader.register(transformProps, \"transformProps\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberPeriodOverPeriod/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["dayjs","utc","getMetricLabel","getValueFormatter","getNumberFormatter","ensureIsArray","getComparisonFontSize","getHeaderFontSize","extend","parseMetricValue","metricValue","dateObject","undefined","isValid","valueOf","transformProps","chartProps","_chartProps$rawFormDa","_chartProps$rawFormDa2","_chartProps$rawFormDa3","_chartProps$rawFormDa4","_chartProps$rawFormDa5","_formData$extraFormDa","width","height","formData","queriesData","datasource","currencyFormats","columnFormats","boldText","headerFontSize","headerText","metric","yAxisFormat","currencyFormat","subheaderFontSize","comparisonColorScheme","comparisonColorEnabled","percentDifferenceFormat","subtitle","subtitleFontSize","columnConfig","data","dataA","metricName","timeComparison","rawFormData","time_compare","startDateOffset","start_date_offset","currentTimeRangeFilter","adhoc_filters","filter","adhoc_filter","operator","isCustomOrInherit","dataOffset","value1","value2","reduce","acc","curr","Object","keys","forEach","key","includes","bigNumber","length","prevNumber","numberFormatter","compTitles","r","y","m","w","formatPercentChange","valueDifference","percentDifferenceNum","Math","abs","compType","percentDifference","percentDifferenceFormattedString","percentDifferenceNumber","shift","dashboardTimeRange","extraFormData","time_range","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/BigNumber/BigNumberPeriodOverPeriod/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport {\n  ChartProps,\n  getMetricLabel,\n  getValueFormatter,\n  getNumberFormatter,\n  SimpleAdhocFilter,\n  ensureIsArray,\n} from '@superset-ui/core';\nimport { getComparisonFontSize, getHeaderFontSize } from './utils';\n\ndayjs.extend(utc);\n\nexport const parseMetricValue = (metricValue: number | string | null) => {\n  if (typeof metricValue === 'string') {\n    const dateObject = dayjs.utc(metricValue, undefined, true);\n    if (dateObject.isValid()) {\n      return dateObject.valueOf();\n    }\n    return 0;\n  }\n  return metricValue ?? 0;\n};\n\nexport default function transformProps(chartProps: ChartProps) {\n  /**\n   * This function is called after a successful response has been\n   * received from the chart data endpoint, and is used to transform\n   * the incoming data prior to being sent to the Visualization.\n   *\n   * The transformProps function is also quite useful to return\n   * additional/modified props to your data viz component. The formData\n   * can also be accessed from your CustomViz.tsx file, but\n   * doing supplying custom props here is often handy for integrating third\n   * party libraries that rely on specific props.\n   *\n   * A description of properties in `chartProps`:\n   * - `height`, `width`: the height/width of the DOM element in which\n   *   the chart is located\n   * - `formData`: the chart data request payload that was sent to the\n   *   backend.\n   * - `queriesData`: the chart data response payload that was received\n   *   from the backend. Some notable properties of `queriesData`:\n   *   - `data`: an array with data, each row with an object mapping\n   *     the column/alias to its value. Example:\n   *     `[{ col1: 'abc', metric1: 10 }, { col1: 'xyz', metric1: 20 }]`\n   *   - `rowcount`: the number of rows in `data`\n   *   - `query`: the query that was issued.\n   *\n   * Please note: the transformProps function gets cached when the\n   * application loads. When making changes to the `transformProps`\n   * function during development with hot reloading, changes won't\n   * be seen until restarting the development server.\n   */\n  const {\n    width,\n    height,\n    formData,\n    queriesData,\n    datasource: { currencyFormats = {}, columnFormats = {} },\n  } = chartProps;\n  const {\n    boldText,\n    headerFontSize,\n    headerText,\n    metric,\n    yAxisFormat,\n    currencyFormat,\n    subheaderFontSize,\n    comparisonColorScheme,\n    comparisonColorEnabled,\n    percentDifferenceFormat,\n    subtitle = '',\n    subtitleFontSize,\n    columnConfig,\n  } = formData;\n  const { data: dataA = [] } = queriesData[0];\n  const data = dataA;\n  const metricName = metric ? getMetricLabel(metric) : '';\n  const timeComparison = ensureIsArray(chartProps.rawFormData?.time_compare)[0];\n  const startDateOffset = chartProps.rawFormData?.start_date_offset;\n  const currentTimeRangeFilter = chartProps.rawFormData?.adhoc_filters?.filter(\n    (adhoc_filter: SimpleAdhocFilter) =>\n      adhoc_filter.operator === 'TEMPORAL_RANGE',\n  )?.[0];\n\n  const isCustomOrInherit =\n    timeComparison === 'custom' || timeComparison === 'inherit';\n  let dataOffset: string[] = [];\n  if (isCustomOrInherit) {\n    if (timeComparison && timeComparison === 'custom') {\n      dataOffset = [startDateOffset];\n    } else {\n      dataOffset = ensureIsArray(timeComparison) || [];\n    }\n  }\n\n  const { value1, value2 } = data.reduce(\n    (acc: { value1: number; value2: number }, curr: { [x: string]: any }) => {\n      Object.keys(curr).forEach(key => {\n        if (\n          key.includes(\n            `${metricName}__${\n              !isCustomOrInherit ? timeComparison : dataOffset[0]\n            }`,\n          )\n        ) {\n          acc.value2 += curr[key];\n        } else if (key.includes(metricName)) {\n          acc.value1 += curr[key];\n        }\n      });\n      return acc;\n    },\n    { value1: 0, value2: 0 },\n  );\n\n  let bigNumber: number | string =\n    data.length === 0 ? 0 : parseMetricValue(value1);\n  let prevNumber: number | string =\n    data.length === 0 ? 0 : parseMetricValue(value2);\n\n  const numberFormatter = getValueFormatter(\n    metric,\n    currencyFormats,\n    columnFormats,\n    yAxisFormat,\n    currencyFormat,\n  );\n\n  const compTitles = {\n    r: 'Range' as string,\n    y: 'Year' as string,\n    m: 'Month' as string,\n    w: 'Week' as string,\n  };\n\n  const formatPercentChange = getNumberFormatter(percentDifferenceFormat);\n\n  let valueDifference: number | string = bigNumber - prevNumber;\n\n  let percentDifferenceNum;\n\n  if (!bigNumber && !prevNumber) {\n    percentDifferenceNum = 0;\n  } else if (!bigNumber || !prevNumber) {\n    percentDifferenceNum = bigNumber ? 1 : -1;\n  } else {\n    percentDifferenceNum = (bigNumber - prevNumber) / Math.abs(prevNumber);\n  }\n\n  const compType =\n    compTitles[formData.timeComparison as keyof typeof compTitles];\n  bigNumber = numberFormatter(bigNumber);\n  prevNumber = numberFormatter(prevNumber);\n  valueDifference = numberFormatter(valueDifference);\n  const percentDifference: string = formatPercentChange(percentDifferenceNum);\n\n  return {\n    width,\n    height,\n    data,\n    metricName,\n    bigNumber,\n    prevNumber,\n    valueDifference,\n    percentDifferenceFormattedString: percentDifference,\n    boldText,\n    subtitle,\n    subtitleFontSize,\n    headerFontSize: getHeaderFontSize(headerFontSize),\n    subheaderFontSize: getComparisonFontSize(subheaderFontSize),\n    headerText,\n    compType,\n    comparisonColorEnabled,\n    comparisonColorScheme,\n    percentDifferenceNumber: percentDifferenceNum,\n    currentTimeRangeFilter,\n    startDateOffset,\n    shift: timeComparison,\n    dashboardTimeRange: formData?.extraFormData?.time_range,\n    columnConfig,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}