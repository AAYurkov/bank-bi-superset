{"ast":null,"code":"import _pick from \"lodash/pick\";import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled, getExtensionsRegistry, css, useTheme } from '@superset-ui/core';\nimport { useEffect, useRef, useState, useReducer, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { setItem, LocalStorageKeys } from 'src/utils/localStorageHelpers';\nimport Tabs from 'src/components/Tabs';\nimport { AntdSelect, Upload } from 'src/components';\nimport Alert from 'src/components/Alert';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { IconButton } from 'src/components/IconButton';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport ValidatedInput from 'src/components/Form/LabeledErrorBoundInput';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport ErrorAlert from 'src/components/ImportModal/ErrorAlert';\nimport { Icons } from 'src/components/Icons';\nimport { testDatabaseConnection, useSingleViewResource, useAvailableDatabases, useDatabaseValidation, getDatabaseImages, getConnectionAlert, useImportResource } from 'src/views/CRUD/hooks';\nimport { useCommonConf } from 'src/features/databases/state';\nimport Loading from 'src/components/Loading';\n\nimport { ConfigurationMethod, Engines } from '../types';\nimport ExtraOptions from './ExtraOptions';\nimport SqlAlchemyForm from './SqlAlchemyForm';\nimport DatabaseConnectionForm from './DatabaseConnectionForm';\nimport { antDAlertStyles, antdWarningAlertStyles, StyledAlertMargin, antDModalNoPaddingStyles, antDModalStyles, antDTabsStyles, buttonLinkStyles, importDbButtonLinkStyles, alchemyButtonLinkStyles, TabHeader, formHelperStyles, formStyles, StyledAlignment, SelectDatabaseStyles, infoTooltip, StyledFooterButton, StyledStickyHeader, formScrollableStyles, StyledUploadWrapper } from './styles';\nimport ModalHeader, { DOCUMENTATION_LINK } from './ModalHeader';\nimport SSHTunnelForm from './SSHTunnelForm';\nimport SSHTunnelSwitch from './SSHTunnelSwitch';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst DEFAULT_EXTRA = JSON.stringify({ allows_virtual_table_explore: true });\nconst engineSpecificAlertMapping = {\n  [Engines.GSheet]: {\n    message: 'Why do I need to create a database?',\n    description: 'To begin using your Google Sheets, you need to create a database first. ' +\n    'Databases are used as a way to identify ' +\n    'your data so that it can be queried and visualized. This ' +\n    'database will hold all of your individual Google Sheets ' +\n    'you choose to connect here.'\n  }\n};\nconst TabsStyled = styled(Tabs)`\n  .ant-tabs-content {\n    display: flex;\n    width: 100%;\n    overflow: inherit;\n\n    & > .ant-tabs-tabpane {\n      position: relative;\n    }\n  }\n`;\nconst ErrorAlertContainer = styled.div`\n  ${({ theme }) => `\n    margin: ${theme.gridUnit * 8}px ${theme.gridUnit * 4}px;\n  `};\n`;\nconst SSHTunnelContainer = styled.div`\n  ${({ theme }) => `\n    padding: 0px ${theme.gridUnit * 4}px;\n  `};\n`;\nexport var ActionType;\n(function (ActionType) {\n  ActionType[ActionType[\"AddTableCatalogSheet\"] = 0] = \"AddTableCatalogSheet\";\n  ActionType[ActionType[\"ConfigMethodChange\"] = 1] = \"ConfigMethodChange\";\n  ActionType[ActionType[\"DbSelected\"] = 2] = \"DbSelected\";\n  ActionType[ActionType[\"EditorChange\"] = 3] = \"EditorChange\";\n  ActionType[ActionType[\"ExtraEditorChange\"] = 4] = \"ExtraEditorChange\";\n  ActionType[ActionType[\"ExtraInputChange\"] = 5] = \"ExtraInputChange\";\n  ActionType[ActionType[\"EncryptedExtraInputChange\"] = 6] = \"EncryptedExtraInputChange\";\n  ActionType[ActionType[\"Fetched\"] = 7] = \"Fetched\";\n  ActionType[ActionType[\"InputChange\"] = 8] = \"InputChange\";\n  ActionType[ActionType[\"ParametersChange\"] = 9] = \"ParametersChange\";\n  ActionType[ActionType[\"QueryChange\"] = 10] = \"QueryChange\";\n  ActionType[ActionType[\"RemoveTableCatalogSheet\"] = 11] = \"RemoveTableCatalogSheet\";\n  ActionType[ActionType[\"Reset\"] = 12] = \"Reset\";\n  ActionType[ActionType[\"TextChange\"] = 13] = \"TextChange\";\n  ActionType[ActionType[\"ParametersSSHTunnelChange\"] = 14] = \"ParametersSSHTunnelChange\";\n  ActionType[ActionType[\"SetSSHTunnelLoginMethod\"] = 15] = \"SetSSHTunnelLoginMethod\";\n  ActionType[ActionType[\"RemoveSSHTunnelConfig\"] = 16] = \"RemoveSSHTunnelConfig\";\n})(ActionType || (ActionType = {}));\nexport var AuthType;\n(function (AuthType) {\n  AuthType[AuthType[\"Password\"] = 0] = \"Password\";\n  AuthType[AuthType[\"PrivateKey\"] = 1] = \"PrivateKey\";\n})(AuthType || (AuthType = {}));\nconst StyledBtns = styled.div`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 3}px;\n  margin-left: ${({ theme }) => theme.gridUnit * 3}px;\n`;\nexport function dbReducer(state, action) {var _action$payload$type, _trimmedState$catalog, _action$payload, _action$payload$param;\n  const trimmedState = {\n    ...(state || {})\n  };\n  let query = {};\n  let query_input = '';\n  let parametersCatalog;\n  let actionPayloadJson;\n  const extraJson = JSON.parse(trimmedState.extra || '{}');\n  switch (action.type) {\n    case ActionType.ExtraEditorChange:\n      // \"extra\" payload in state is a string\n      try {\n        // we don't want to stringify encoded strings twice\n        actionPayloadJson = JSON.parse(action.payload.json || '{}');\n      }\n      catch (e) {\n        actionPayloadJson = action.payload.json;\n      }\n      return {\n        ...trimmedState,\n        extra: JSON.stringify({\n          ...extraJson,\n          [action.payload.name]: actionPayloadJson\n        })\n      };\n    case ActionType.EncryptedExtraInputChange:\n      return {\n        ...trimmedState,\n        masked_encrypted_extra: JSON.stringify({\n          ...JSON.parse(trimmedState.masked_encrypted_extra || '{}'),\n          [action.payload.name]: action.payload.value\n        })\n      };\n    case ActionType.ExtraInputChange:\n      // \"extra\" payload in state is a string\n      if (action.payload.name === 'schema_cache_timeout' ||\n      action.payload.name === 'table_cache_timeout') {\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            metadata_cache_timeout: {\n              ...(extraJson == null ? void 0 : extraJson.metadata_cache_timeout),\n              [action.payload.name]: action.payload.value\n            }\n          })\n        };\n      }\n      if (action.payload.name === 'schemas_allowed_for_file_upload') {\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            schemas_allowed_for_file_upload: (action.payload.value || '').\n            split(',').\n            filter((schema) => schema !== '')\n          })\n        };\n      }\n      if (action.payload.name === 'http_path') {var _action$payload$value;\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            engine_params: {\n              connect_args: {\n                [action.payload.name]: (_action$payload$value = action.payload.value) == null ? void 0 : _action$payload$value.trim()\n              }\n            }\n          })\n        };\n      }\n      if (action.payload.name === 'expand_rows') {\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            schema_options: {\n              ...(extraJson == null ? void 0 : extraJson.schema_options),\n              [action.payload.name]: !!action.payload.value\n            }\n          })\n        };\n      }\n      return {\n        ...trimmedState,\n        extra: JSON.stringify({\n          ...extraJson,\n          [action.payload.name]: action.payload.type === 'checkbox' ?\n          action.payload.checked :\n          action.payload.value\n        })\n      };\n    case ActionType.InputChange:\n      if (action.payload.type === 'checkbox') {\n        return {\n          ...trimmedState,\n          [action.payload.name]: action.payload.checked\n        };\n      }\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value\n      };\n    case ActionType.ParametersChange:\n      // catalog params will always have a catalog state for\n      // dbs that use a catalog, i.e., gsheets, even if the\n      // fields are empty strings\n      if ((_action$payload$type = action.payload.type) != null && _action$payload$type.startsWith('catalog') &&\n      trimmedState.catalog !== undefined) {var _action$payload$type2;\n        // Formatting wrapping google sheets table catalog\n        const catalogCopy = [...trimmedState.catalog];\n        const idx = (_action$payload$type2 = action.payload.type) == null ? void 0 : _action$payload$type2.split('-')[1];\n        const catalogToUpdate = catalogCopy[parseInt(idx, 10)] || {};\n        if (action.payload.value !== undefined) {\n          catalogToUpdate[action.payload.name] =\n          action.payload.value;\n        }\n        // insert updated catalog to existing state\n        catalogCopy.splice(parseInt(idx, 10), 1, catalogToUpdate);\n        // format catalog for state\n        // eslint-disable-next-line array-callback-return\n        parametersCatalog = catalogCopy.reduce((obj, item) => {\n          const catalog = { ...obj };\n          catalog[item.name] = item.value;\n          return catalog;\n        }, {});\n        return {\n          ...trimmedState,\n          catalog: catalogCopy,\n          parameters: {\n            ...trimmedState.parameters,\n            catalog: parametersCatalog\n          }\n        };\n      }\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          [action.payload.name]: action.payload.value\n        }\n      };\n    case ActionType.ParametersSSHTunnelChange:\n      return {\n        ...trimmedState,\n        ssh_tunnel: {\n          ...trimmedState.ssh_tunnel,\n          [action.payload.name]: action.payload.value\n        }\n      };\n    case ActionType.SetSSHTunnelLoginMethod:{\n        let ssh_tunnel = {};\n        if (trimmedState != null && trimmedState.ssh_tunnel) {\n          // remove any attributes that are considered sensitive\n          ssh_tunnel = _pick(trimmedState.ssh_tunnel, [\n          'id',\n          'server_address',\n          'server_port',\n          'username']\n          );\n        }\n        if (action.payload.login_method === AuthType.PrivateKey) {var _trimmedState$ssh_tun, _trimmedState$ssh_tun2;\n          return {\n            ...trimmedState,\n            ssh_tunnel: {\n              private_key: trimmedState == null ? void 0 : (_trimmedState$ssh_tun = trimmedState.ssh_tunnel) == null ? void 0 : _trimmedState$ssh_tun.private_key,\n              private_key_password: trimmedState == null ? void 0 : (_trimmedState$ssh_tun2 = trimmedState.ssh_tunnel) == null ? void 0 : _trimmedState$ssh_tun2.private_key_password,\n              ...ssh_tunnel\n            }\n          };\n        }\n        if (action.payload.login_method === AuthType.Password) {var _trimmedState$ssh_tun3;\n          return {\n            ...trimmedState,\n            ssh_tunnel: {\n              password: trimmedState == null ? void 0 : (_trimmedState$ssh_tun3 = trimmedState.ssh_tunnel) == null ? void 0 : _trimmedState$ssh_tun3.password,\n              ...ssh_tunnel\n            }\n          };\n        }\n        return {\n          ...trimmedState\n        };\n      }\n    case ActionType.RemoveSSHTunnelConfig:\n      return {\n        ...trimmedState,\n        ssh_tunnel: undefined\n      };\n    case ActionType.AddTableCatalogSheet:\n      if (trimmedState.catalog !== undefined) {\n        return {\n          ...trimmedState,\n          catalog: [...trimmedState.catalog, { name: '', value: '' }]\n        };\n      }\n      return {\n        ...trimmedState,\n        catalog: [{ name: '', value: '' }]\n      };\n    case ActionType.RemoveTableCatalogSheet:\n      (_trimmedState$catalog = trimmedState.catalog) == null ? void 0 : _trimmedState$catalog.splice(action.payload.indexToDelete, 1);\n      return {\n        ...trimmedState\n      };\n    case ActionType.EditorChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.json\n      };\n    case ActionType.QueryChange:\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          query: Object.fromEntries(new URLSearchParams(action.payload.value))\n        },\n        query_input: action.payload.value\n      };\n    case ActionType.TextChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value\n      };\n    case ActionType.Fetched:\n      // convert query to a string and store in query_input\n      query = ((_action$payload = action.payload) == null ? void 0 : (_action$payload$param = _action$payload.parameters) == null ? void 0 : _action$payload$param.query) || {};\n      query_input = Object.entries(query).\n      map(([key, value]) => `${key}=${value}`).\n      join('&');\n      if (action.payload.masked_encrypted_extra &&\n      action.payload.configuration_method === ConfigurationMethod.DynamicForm) {var _extraJsonPayload$eng;\n        // \"extra\" payload from the api is a string\n        const extraJsonPayload = {\n          ...JSON.parse(action.payload.extra || '{}')\n        };\n        const payloadCatalog = (_extraJsonPayload$eng = extraJsonPayload.engine_params) == null ? void 0 : _extraJsonPayload$eng.catalog;\n        const engineRootCatalog = Object.entries(payloadCatalog || {}).map(([name, value]) => ({ name, value }));\n        return {\n          ...action.payload,\n          engine: action.payload.backend || trimmedState.engine,\n          configuration_method: action.payload.configuration_method,\n          catalog: engineRootCatalog,\n          parameters: {\n            ...(action.payload.parameters || trimmedState.parameters),\n            catalog: payloadCatalog\n          },\n          query_input\n        };\n      }\n      return {\n        ...action.payload,\n        masked_encrypted_extra: action.payload.masked_encrypted_extra || '',\n        engine: action.payload.backend || trimmedState.engine,\n        configuration_method: action.payload.configuration_method,\n        parameters: action.payload.parameters || trimmedState.parameters,\n        ssh_tunnel: action.payload.ssh_tunnel || trimmedState.ssh_tunnel,\n        query_input\n      };\n    case ActionType.DbSelected:\n      // set initial state for blank form\n      return {\n        ...action.payload,\n        extra: DEFAULT_EXTRA,\n        expose_in_sqllab: true\n      };\n    case ActionType.ConfigMethodChange:\n      return {\n        ...action.payload\n      };\n    case ActionType.Reset:\n    default:\n      return null;\n  }\n}\nconst DEFAULT_TAB_KEY = '1';\nconst DatabaseModal = ({ addDangerToast, addSuccessToast, onDatabaseAdd, onHide, show, databaseId, dbEngine }) => {var _extensionsRegistry$g, _availableDbs$databas3, _availableDbs$databas4, _db$parameters2;\n  const theme = useTheme();\n  const [db, setDB] = useReducer(dbReducer, null);\n  // Database fetch logic\n  const { state: { loading: dbLoading, resource: dbFetched, error: dbErrors }, fetchResource, createResource, updateResource, clearError } = useSingleViewResource('database', t('database'), addDangerToast, 'connection');\n  const [tabKey, setTabKey] = useState(DEFAULT_TAB_KEY);\n  const [availableDbs, getAvailableDbs] = useAvailableDatabases();\n  const [validationErrors, getValidation, setValidationErrors] = useDatabaseValidation();\n  const [hasConnectedDb, setHasConnectedDb] = useState(false);\n  const [showCTAbtns, setShowCTAbtns] = useState(false);\n  const [dbName, setDbName] = useState('');\n  const [editNewDb, setEditNewDb] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [testInProgress, setTestInProgress] = useState(false);\n  const [passwords, setPasswords] = useState({});\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] = useState({});\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState(false);\n  const [fileList, setFileList] = useState([]);\n  const [importingModal, setImportingModal] = useState(false);\n  const [importingErrorMessage, setImportingErrorMessage] = useState();\n  const [passwordFields, setPasswordFields] = useState([]);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState([]);\n  const [sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields] = useState([]);\n  const [extraExtensionComponentState, setExtraExtensionComponentState] = useState({});\n  const SSHTunnelSwitchComponent = (_extensionsRegistry$g = extensionsRegistry.get('ssh_tunnel.form.switch')) != null ? _extensionsRegistry$g : SSHTunnelSwitch;\n  const [useSSHTunneling, setUseSSHTunneling] = useState(undefined);\n  let dbConfigExtraExtension = extensionsRegistry.get('databaseconnection.extraOption');\n  if (dbConfigExtraExtension) {\n    // add method for db modal to store data\n    dbConfigExtraExtension = {\n      ...dbConfigExtraExtension,\n      onEdit: (componentState) => {\n        setExtraExtensionComponentState({\n          ...extraExtensionComponentState,\n          ...componentState\n        });\n      }\n    };\n  }\n  const conf = useCommonConf();\n  const dbImages = getDatabaseImages();\n  const connectionAlert = getConnectionAlert();\n  const isEditMode = !!databaseId;\n  const hasAlert = connectionAlert ||\n  !!(db != null && db.engine &&\n  engineSpecificAlertMapping[db.engine]);\n  const useSqlAlchemyForm = (db == null ? void 0 : db.configuration_method) === ConfigurationMethod.SqlalchemyUri;\n  const useTabLayout = isEditMode || useSqlAlchemyForm;\n  const isDynamic = (engine) => {var _availableDbs$databas, _availableDbs$databas2;return (availableDbs == null ? void 0 : (_availableDbs$databas = availableDbs.databases) == null ? void 0 : (_availableDbs$databas2 = _availableDbs$databas.find((DB) => DB.backend === engine || DB.engine === engine)) == null ? void 0 : _availableDbs$databas2.parameters) !== undefined;};\n  const showDBError = validationErrors || dbErrors;\n  const history = useHistory();\n  const dbModel =\n  // TODO: we need a centralized engine in one place\n  // first try to match both engine and driver\n  (availableDbs == null ? void 0 : (_availableDbs$databas3 = availableDbs.databases) == null ? void 0 : _availableDbs$databas3.find((available) => available.engine === (isEditMode ? db == null ? void 0 : db.backend : db == null ? void 0 : db.engine) &&\n  available.default_driver === (db == null ? void 0 : db.driver))) || (\n  // alternatively try to match only engine\n  availableDbs == null ? void 0 : (_availableDbs$databas4 = availableDbs.databases) == null ? void 0 : _availableDbs$databas4.find((available) => available.engine === (isEditMode ? db == null ? void 0 : db.backend : db == null ? void 0 : db.engine))) ||\n  {};\n  // Test Connection logic\n  const testConnection = () => {var _db$database_name;\n    if (!(db != null && db.sqlalchemy_uri)) {\n      addDangerToast(t('Please enter a SQLAlchemy URI to test'));\n      return;\n    }\n    const connection = {\n      sqlalchemy_uri: (db == null ? void 0 : db.sqlalchemy_uri) || '',\n      database_name: (db == null ? void 0 : (_db$database_name = db.database_name) == null ? void 0 : _db$database_name.trim()) || undefined,\n      impersonate_user: (db == null ? void 0 : db.impersonate_user) || undefined,\n      extra: db == null ? void 0 : db.extra,\n      masked_encrypted_extra: (db == null ? void 0 : db.masked_encrypted_extra) || '',\n      server_cert: (db == null ? void 0 : db.server_cert) || undefined,\n      ssh_tunnel: !_isEmpty(db == null ? void 0 : db.ssh_tunnel) && useSSHTunneling ?\n      {\n        ...db.ssh_tunnel,\n        server_port: Number(db.ssh_tunnel.server_port)\n      } :\n      undefined\n    };\n    setTestInProgress(true);\n    testDatabaseConnection(connection, (errorMsg) => {\n      setTestInProgress(false);\n      addDangerToast(errorMsg);\n    }, (errorMsg) => {\n      setTestInProgress(false);\n      addSuccessToast(errorMsg);\n    });\n  };\n  const getPlaceholder = (field) => {\n    if (field === 'database') {\n      return t('e.g. world_population');\n    }\n    return undefined;\n  };\n  const removeFile = (removedFile) => {\n    setFileList(fileList.filter((file) => file.uid !== removedFile.uid));\n    return false;\n  };\n  const onChange = useCallback((type, payload) => {\n    setDB({ type, payload });\n  }, []);\n  const handleClearValidationErrors = useCallback(() => {\n    setValidationErrors(null);\n  }, [setValidationErrors]);\n  const handleParametersChange = useCallback(({ target }) => {\n    onChange(ActionType.ParametersChange, {\n      type: target.type,\n      name: target.name,\n      checked: target.checked,\n      value: target.value\n    });\n  }, [onChange]);\n  const onClose = () => {\n    setDB({ type: ActionType.Reset });\n    setHasConnectedDb(false);\n    handleClearValidationErrors(); // reset validation errors on close\n    clearError();\n    setEditNewDb(false);\n    setFileList([]);\n    setImportingModal(false);\n    setImportingErrorMessage('');\n    setPasswordFields([]);\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setPasswords({});\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n    setConfirmedOverwrite(false);\n    setUseSSHTunneling(undefined);\n    onHide();\n  };\n  const redirectURL = (url) => {\n    history.push(url);\n  };\n  // Database import logic\n  const { state: { alreadyExists, passwordsNeeded, sshPasswordNeeded, sshPrivateKeyNeeded, sshPrivateKeyPasswordNeeded, loading: importLoading, failed: importErrored }, importResource } = useImportResource('database', t('database'), (msg) => {\n    setImportingErrorMessage(msg);\n  });\n  const onSave = async () => {var _dbConfigExtraExtensi, _dbToUpdate$parameter7;\n    let dbConfigExtraExtensionOnSaveError;\n    setLoading(true);\n    (_dbConfigExtraExtensi = dbConfigExtraExtension) == null ? void 0 : _dbConfigExtraExtensi.\n    onSave(extraExtensionComponentState, db).\n    then(({ error }) => {\n      if (error) {\n        dbConfigExtraExtensionOnSaveError = error;\n        addDangerToast(error);\n      }\n    });\n    if (dbConfigExtraExtensionOnSaveError) {\n      setLoading(false);\n      return;\n    }\n    // Clone DB object\n    const dbToUpdate = { ...(db || {}) };\n    if (dbToUpdate.configuration_method === ConfigurationMethod.DynamicForm) {var _dbToUpdate$parameter, _dbToUpdate$parameter2;\n      // Validate DB before saving\n      if (dbToUpdate != null && (_dbToUpdate$parameter = dbToUpdate.parameters) != null && _dbToUpdate$parameter.catalog) {\n        // need to stringify gsheets catalog to allow it to be serialized\n        dbToUpdate.extra = JSON.stringify({\n          ...JSON.parse(dbToUpdate.extra || '{}'),\n          engine_params: {\n            catalog: dbToUpdate.parameters.catalog\n          }\n        });\n      }\n      const errors = await getValidation(dbToUpdate, true);\n      if (!_isEmpty(validationErrors) || errors != null && errors.length) {\n        addDangerToast(t('Connection failed, please check your connection settings.'));\n        setLoading(false);\n        return;\n      }\n      const parameters_schema = isEditMode ? (_dbToUpdate$parameter2 =\n      dbToUpdate.parameters_schema) == null ? void 0 : _dbToUpdate$parameter2.properties :\n      dbModel == null ? void 0 : dbModel.parameters.properties;\n      const additionalEncryptedExtra = JSON.parse(dbToUpdate.masked_encrypted_extra || '{}');\n      const paramConfigArray = Object.keys(parameters_schema || {});\n      paramConfigArray.forEach((paramConfig) => {var _dbToUpdate$parameter3;\n        /*\n         * Parameters that are annotated with the `x-encrypted-extra` properties should be\n         * moved to `masked_encrypted_extra`, so that they are stored encrypted in the\n         * backend when the database is created or edited.\n         */\n        if (parameters_schema[paramConfig]['x-encrypted-extra'] && (_dbToUpdate$parameter3 =\n        dbToUpdate.parameters) != null && _dbToUpdate$parameter3[paramConfig]) {var _dbToUpdate$parameter4;\n          if (typeof ((_dbToUpdate$parameter4 = dbToUpdate.parameters) == null ? void 0 : _dbToUpdate$parameter4[paramConfig]) === 'object') {var _dbToUpdate$parameter5;\n            // add new encrypted extra to masked_encrypted_extra object\n            additionalEncryptedExtra[paramConfig] = (_dbToUpdate$parameter5 =\n            dbToUpdate.parameters) == null ? void 0 : _dbToUpdate$parameter5[paramConfig];\n            // The backend expects `masked_encrypted_extra` as a string for historical\n            // reasons.\n            dbToUpdate.parameters[paramConfig] = JSON.stringify(dbToUpdate.parameters[paramConfig]);\n          } else\n          {var _dbToUpdate$parameter6;\n            additionalEncryptedExtra[paramConfig] = JSON.parse(((_dbToUpdate$parameter6 = dbToUpdate.parameters) == null ? void 0 : _dbToUpdate$parameter6[paramConfig]) || '{}');\n          }\n        }\n      });\n      // cast the new encrypted extra object into a string\n      dbToUpdate.masked_encrypted_extra = JSON.stringify(additionalEncryptedExtra);\n      // this needs to be added by default to gsheets\n      if (dbToUpdate.engine === Engines.GSheet) {\n        dbToUpdate.impersonate_user = true;\n      }\n    }\n    if (dbToUpdate != null && (_dbToUpdate$parameter7 = dbToUpdate.parameters) != null && _dbToUpdate$parameter7.catalog) {\n      // need to stringify gsheets catalog to allow it to be serialized\n      dbToUpdate.extra = JSON.stringify({\n        ...JSON.parse(dbToUpdate.extra || '{}'),\n        engine_params: {\n          catalog: dbToUpdate.parameters.catalog\n        }\n      });\n    }\n    // strictly checking for false as an indication that the toggle got unchecked\n    if (useSSHTunneling === false) {\n      // remove ssh tunnel\n      dbToUpdate.ssh_tunnel = null;\n    }\n    if (db != null && db.id) {\n      const result = await updateResource(db.id, dbToUpdate, dbToUpdate.configuration_method === ConfigurationMethod.DynamicForm);\n      if (result) {var _dbConfigExtraExtensi2;\n        if (onDatabaseAdd)\n        onDatabaseAdd();\n        (_dbConfigExtraExtensi2 = dbConfigExtraExtension) == null ? void 0 : _dbConfigExtraExtensi2.\n        onSave(extraExtensionComponentState, db).\n        then(({ error }) => {\n          if (error) {\n            dbConfigExtraExtensionOnSaveError = error;\n            addDangerToast(error);\n          }\n        });\n        if (dbConfigExtraExtensionOnSaveError) {\n          setLoading(false);\n          return;\n        }\n        if (!editNewDb) {\n          onClose();\n          addSuccessToast(t('Database settings updated'));\n        }\n      }\n    } else\n    if (db) {\n      // Create\n      const dbId = await createResource(dbToUpdate, dbToUpdate.configuration_method === ConfigurationMethod.DynamicForm);\n      if (dbId) {var _dbConfigExtraExtensi3;\n        setHasConnectedDb(true);\n        if (onDatabaseAdd)\n        onDatabaseAdd();\n        (_dbConfigExtraExtensi3 = dbConfigExtraExtension) == null ? void 0 : _dbConfigExtraExtensi3.\n        onSave(extraExtensionComponentState, db).\n        then(({ error }) => {\n          if (error) {\n            dbConfigExtraExtensionOnSaveError = error;\n            addDangerToast(error);\n          }\n        });\n        if (dbConfigExtraExtensionOnSaveError) {\n          setLoading(false);\n          return;\n        }\n        if (useTabLayout) {\n          // tab layout only has one step\n          // so it should close immediately on save\n          onClose();\n          addSuccessToast(t('Database connected'));\n        }\n      }\n    } else\n    {\n      // Import - doesn't use db state\n      setImportingModal(true);\n      if (!(fileList[0].originFileObj instanceof File)) {\n        return;\n      }\n      const dbId = await importResource(fileList[0].originFileObj, passwords, sshTunnelPasswords, sshTunnelPrivateKeys, sshTunnelPrivateKeyPasswords, confirmedOverwrite);\n      if (dbId) {\n        if (onDatabaseAdd)\n        onDatabaseAdd();\n        onClose();\n        addSuccessToast(t('Database connected'));\n      }\n    }\n    setShowCTAbtns(true);\n    setEditNewDb(false);\n    setLoading(false);\n  };\n  // Initialize\n  const fetchDB = () => {\n    if (isEditMode && databaseId) {\n      if (!dbLoading) {\n        fetchResource(databaseId).catch((e) => addDangerToast(t('Sorry there was an error fetching database information: %s', e.message)));\n      }\n    }\n  };\n  const setDatabaseModel = (database_name) => {\n    if (database_name === 'Other') {\n      // Allow users to connect to DB via legacy SQLA form\n      setDB({\n        type: ActionType.DbSelected,\n        payload: {\n          database_name,\n          configuration_method: ConfigurationMethod.SqlalchemyUri,\n          engine: undefined,\n          engine_information: {\n            supports_file_upload: true\n          }\n        }\n      });\n    } else\n    {\n      const selectedDbModel = availableDbs == null ? void 0 : availableDbs.databases.filter((db) => db.name === database_name)[0];\n      const { engine, parameters, engine_information, default_driver, sqlalchemy_uri_placeholder } = selectedDbModel;\n      const isDynamic = parameters !== undefined;\n      setDB({\n        type: ActionType.DbSelected,\n        payload: {\n          database_name,\n          engine,\n          configuration_method: isDynamic ?\n          ConfigurationMethod.DynamicForm :\n          ConfigurationMethod.SqlalchemyUri,\n          engine_information,\n          driver: default_driver,\n          sqlalchemy_uri_placeholder\n        }\n      });\n      if (engine === Engines.GSheet) {\n        // only create a catalog if the DB is Google Sheets\n        setDB({ type: ActionType.AddTableCatalogSheet });\n      }\n    }\n  };\n  const renderAvailableSelector = () => {var _ref, _connectionAlert$ADD_;return _jsxs(\"div\", { className: \"available\", children: [\n      _jsx(\"h4\", { className: \"available-label\", children:\n        t('Or choose from a list of other databases we support:') }\n      ),\n      _jsx(\"div\", { className: \"control-label\", children: t('Supported databases') }),\n      _jsxs(AntdSelect, { className: \"available-select\", onChange: setDatabaseModel, placeholder: t('Choose a database...'), showSearch: true, children: [(_ref =\n        [...((availableDbs == null ? void 0 : availableDbs.databases) || [])]) == null ? void 0 : _ref.\n        sort((a, b) => a.name.localeCompare(b.name)).\n        map((database, index) => _jsx(AntdSelect.Option, { value: database.name, children:\n          database.name }, `database-${index}`\n        )),\n\n        _jsx(AntdSelect.Option, { value: \"Other\", children:\n          t('Other') }, \"Other\"\n        )] }\n      ),\n      _jsx(Alert, { showIcon: true, closable: false, css: (theme) => antDAlertStyles(theme), type: \"info\", message: (connectionAlert == null ? void 0 : (_connectionAlert$ADD_ = connectionAlert.ADD_DATABASE) == null ? void 0 : _connectionAlert$ADD_.message) ||\n        t('Want to add a new database?'), description: connectionAlert != null && connectionAlert.ADD_DATABASE ? _jsxs(_Fragment, { children: [\n          t('Any databases that allow connections via SQL Alchemy URIs can be added. '),\n          _jsx(\"a\", { href: connectionAlert == null ? void 0 : connectionAlert.ADD_DATABASE.contact_link, target: \"_blank\", rel: \"noopener noreferrer\", children:\n            connectionAlert == null ? void 0 : connectionAlert.ADD_DATABASE.contact_description_link }\n          ), ' ',\n          connectionAlert == null ? void 0 : connectionAlert.ADD_DATABASE.description] }\n        ) : _jsxs(_Fragment, { children: [\n          t('Any databases that allow connections via SQL Alchemy URIs can be added. Learn about how to connect a database driver '),\n          _jsx(\"a\", { href: DOCUMENTATION_LINK, target: \"_blank\", rel: \"noopener noreferrer\", children:\n            t('here') }\n          ), \".\"] }\n\n        ) })] }\n    );};\n  const renderPreferredSelector = () => {var _availableDbs$databas5;return _jsx(\"div\", { className: \"preferred\", children:\n      availableDbs == null ? void 0 : (_availableDbs$databas5 = availableDbs.databases) == null ? void 0 : _availableDbs$databas5.\n      filter((db) => db.preferred).\n      map((database) => _jsx(IconButton, { className: \"preferred-item\", onClick: () => setDatabaseModel(database.name), buttonText: database.name, icon: dbImages == null ? void 0 : dbImages[database.engine] }, `${database.name}`)) }\n    );};\n  const handleBackButtonOnFinish = () => {\n    if (dbFetched) {\n      fetchResource(dbFetched.id);\n    }\n    setShowCTAbtns(false);\n    setEditNewDb(true);\n  };\n  const handleBackButtonOnConnect = () => {\n    if (editNewDb)\n    setHasConnectedDb(false);\n    if (importingModal)\n    setImportingModal(false);\n    if (importErrored) {\n      setImportingModal(false);\n      setImportingErrorMessage('');\n      setPasswordFields([]);\n      setSSHTunnelPasswordFields([]);\n      setSSHTunnelPrivateKeyFields([]);\n      setSSHTunnelPrivateKeyPasswordFields([]);\n      setPasswords({});\n      setSSHTunnelPasswords({});\n      setSSHTunnelPrivateKeys({});\n      setSSHTunnelPrivateKeyPasswords({});\n    }\n    setDB({ type: ActionType.Reset });\n    setFileList([]);\n  };\n  const handleDisableOnImport = () => {\n    if (importLoading ||\n    alreadyExists.length && !confirmedOverwrite ||\n    passwordsNeeded.length && JSON.stringify(passwords) === '{}' ||\n    sshPasswordNeeded.length &&\n    JSON.stringify(sshTunnelPasswords) === '{}' ||\n    sshPrivateKeyNeeded.length &&\n    JSON.stringify(sshTunnelPrivateKeys) === '{}' ||\n    sshPrivateKeyPasswordNeeded.length &&\n    JSON.stringify(sshTunnelPrivateKeyPasswords) === '{}')\n    return true;\n    return false;\n  };\n  const renderModalFooter = () => {\n    if (db) {\n      // if db show back + connect\n      if (!hasConnectedDb || editNewDb) {\n        return _jsxs(_Fragment, { children: [\n          _jsx(StyledFooterButton, { onClick: handleBackButtonOnConnect, children:\n            t('Back') }, \"back\"\n          ),\n          _jsx(StyledFooterButton, { buttonStyle: \"primary\", onClick: onSave, loading: isLoading, children:\n            t('Connect') }, \"submit\"\n          )] }\n        );\n      }\n      return _jsxs(_Fragment, { children: [\n        _jsx(StyledFooterButton, { onClick: handleBackButtonOnFinish, children:\n          t('Back') }, \"back\"\n        ),\n        _jsx(StyledFooterButton, { buttonStyle: \"primary\", onClick: onSave, \"data-test\": \"modal-confirm-button\", loading: isLoading, children:\n          t('Finish') }, \"submit\"\n        )] }\n      );\n    }\n    // Import doesn't use db state, so footer will not render in the if statement above\n    if (importingModal) {\n      return _jsxs(_Fragment, { children: [\n        _jsx(StyledFooterButton, { onClick: handleBackButtonOnConnect, children:\n          t('Back') }, \"back\"\n        ),\n        _jsx(StyledFooterButton, { buttonStyle: \"primary\", onClick: onSave, disabled: handleDisableOnImport(), loading: isLoading, children:\n          t('Connect') }, \"submit\"\n        )] }\n      );\n    }\n    return _jsx(_Fragment, {});\n  };\n  const renderEditModalFooter = (db) => _jsxs(_Fragment, { children: [\n    _jsx(StyledFooterButton, { onClick: onClose, children:\n      t('Close') }, \"close\"\n    ),\n    _jsx(StyledFooterButton, { buttonStyle: \"primary\", onClick: onSave, disabled: db == null ? void 0 : db.is_managed_externally, loading: isLoading, tooltip: db != null && db.is_managed_externally ?\n      t(\"This database is managed externally, and can't be edited in Superset\") :\n      '', children:\n      t('Finish') }, \"submit\"\n    )] }\n  );\n  const firstUpdate = useRef(true); // Captures first render\n  // Only runs when importing files don't need user input\n  useEffect(() => {\n    // Will not run on first render\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    if (!importLoading &&\n    !alreadyExists.length &&\n    !passwordsNeeded.length &&\n    !sshPasswordNeeded.length &&\n    !sshPrivateKeyNeeded.length &&\n    !sshPrivateKeyPasswordNeeded.length &&\n    !isLoading && // This prevents a double toast for non-related imports\n    !importErrored // This prevents a success toast on error\n    ) {\n      onClose();\n      addSuccessToast(t('Database connected'));\n    }\n  }, [\n  alreadyExists,\n  passwordsNeeded,\n  importLoading,\n  importErrored,\n  sshPasswordNeeded,\n  sshPrivateKeyNeeded,\n  sshPrivateKeyPasswordNeeded]\n  );\n  useEffect(() => {\n    if (show) {\n      setTabKey(DEFAULT_TAB_KEY);\n      setLoading(true);\n      getAvailableDbs();\n    }\n    if (databaseId && show) {\n      fetchDB();\n    }\n  }, [show, databaseId]);\n  useEffect(() => {\n    if (dbFetched) {\n      setDB({\n        type: ActionType.Fetched,\n        payload: dbFetched\n      });\n      // keep a copy of the name separate for display purposes\n      // because it shouldn't change when the form is updated\n      setDbName(dbFetched.database_name);\n    }\n  }, [dbFetched]);\n  useEffect(() => {\n    if (isLoading) {\n      setLoading(false);\n    }\n    if (availableDbs && dbEngine) {\n      // set model if passed into props\n      setDatabaseModel(dbEngine);\n    }\n  }, [availableDbs]);\n  // This forces the modal to scroll until the importing filename is in view\n  useEffect(() => {\n    if (importingModal) {var _document;\n      (_document = document) == null ? void 0 : _document.\n      getElementsByClassName('ant-upload-list-item-name')[0].\n      scrollIntoView();\n    }\n  }, [importingModal]);\n  useEffect(() => {\n    setPasswordFields([...passwordsNeeded]);\n  }, [passwordsNeeded]);\n  useEffect(() => {\n    setSSHTunnelPasswordFields([...sshPasswordNeeded]);\n  }, [sshPasswordNeeded]);\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields([...sshPrivateKeyNeeded]);\n  }, [sshPrivateKeyNeeded]);\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields([...sshPrivateKeyPasswordNeeded]);\n  }, [sshPrivateKeyPasswordNeeded]);\n  useEffect(() => {var _db$parameters;\n    if ((db == null ? void 0 : (_db$parameters = db.parameters) == null ? void 0 : _db$parameters.ssh) !== undefined) {\n      setUseSSHTunneling(db.parameters.ssh);\n    }\n  }, [db == null ? void 0 : (_db$parameters2 = db.parameters) == null ? void 0 : _db$parameters2.ssh]);\n  const onDbImport = async (info) => {\n    setImportingErrorMessage('');\n    setPasswordFields([]);\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setPasswords({});\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n    setImportingModal(true);\n    setFileList([\n    {\n      ...info.file,\n      status: 'done'\n    }]\n    );\n    if (!(info.file.originFileObj instanceof File))\n    return;\n    const dbId = await importResource(info.file.originFileObj, passwords, sshTunnelPasswords, sshTunnelPrivateKeys, sshTunnelPrivateKeyPasswords, confirmedOverwrite);\n    if (dbId)\n    onDatabaseAdd == null ? void 0 : onDatabaseAdd();\n  };\n  const passwordNeededField = () => {\n    if (!passwordFields.length &&\n    !sshTunnelPasswordFields.length &&\n    !sshTunnelPrivateKeyFields.length &&\n    !sshTunnelPrivateKeyPasswordFields.length)\n    return null;\n    const files = [\n    ...new Set([\n    ...passwordFields,\n    ...sshTunnelPasswordFields,\n    ...sshTunnelPrivateKeyFields,\n    ...sshTunnelPrivateKeyPasswordFields]\n    )];\n\n    return files.map((database) => _jsxs(_Fragment, { children: [\n      _jsx(StyledAlertMargin, { children:\n        _jsx(Alert, { closable: false, css: (theme) => antDAlertStyles(theme), type: \"info\", showIcon: true, message: \"Database passwords\", description: t(`The passwords for the databases below are needed in order to import them. Please note that the \"Secure Extra\" and \"Certificate\" sections of the database configuration are not present in explore files and should be added manually after the import if they are needed.`) }) }\n      ),\n      (passwordFields == null ? void 0 : passwordFields.indexOf(database)) >= 0 && _jsx(ValidatedInput, { id: \"password_needed\", name: \"password_needed\", required: true, value: passwords[database], onChange: (event) => setPasswords({ ...passwords, [database]: event.target.value }), validationMethods: { onBlur: () => {} }, errorMessage: validationErrors == null ? void 0 : validationErrors.password_needed, label: t('%s PASSWORD', database.slice(10)), css: formScrollableStyles }),\n      (sshTunnelPasswordFields == null ? void 0 : sshTunnelPasswordFields.indexOf(database)) >= 0 && _jsx(ValidatedInput, { id: \"ssh_tunnel_password_needed\", name: \"ssh_tunnel_password_needed\", required: true, value: sshTunnelPasswords[database], onChange: (event) => setSSHTunnelPasswords({\n          ...sshTunnelPasswords,\n          [database]: event.target.value\n        }), validationMethods: { onBlur: () => {} }, errorMessage: validationErrors == null ? void 0 : validationErrors.ssh_tunnel_password_needed, label: t('%s SSH TUNNEL PASSWORD', database.slice(10)), css: formScrollableStyles }),\n      (sshTunnelPrivateKeyFields == null ? void 0 : sshTunnelPrivateKeyFields.indexOf(database)) >= 0 && _jsx(ValidatedInput, { id: \"ssh_tunnel_private_key_needed\", name: \"ssh_tunnel_private_key_needed\", required: true, value: sshTunnelPrivateKeys[database], onChange: (event) => setSSHTunnelPrivateKeys({\n          ...sshTunnelPrivateKeys,\n          [database]: event.target.value\n        }), validationMethods: { onBlur: () => {} }, errorMessage: validationErrors == null ? void 0 : validationErrors.ssh_tunnel_private_key_needed, label: t('%s SSH TUNNEL PRIVATE KEY', database.slice(10)), css: formScrollableStyles }),\n      (sshTunnelPrivateKeyPasswordFields == null ? void 0 : sshTunnelPrivateKeyPasswordFields.indexOf(database)) >= 0 && _jsx(ValidatedInput, { id: \"ssh_tunnel_private_key_password_needed\", name: \"ssh_tunnel_private_key_password_needed\", required: true, value: sshTunnelPrivateKeyPasswords[database], onChange: (event) => setSSHTunnelPrivateKeyPasswords({\n          ...sshTunnelPrivateKeyPasswords,\n          [database]: event.target.value\n        }), validationMethods: { onBlur: () => {} }, errorMessage: validationErrors == null ? void 0 : validationErrors.ssh_tunnel_private_key_password_needed, label: t('%s SSH TUNNEL PRIVATE KEY PASSWORD', database.slice(10)), css: formScrollableStyles })] }\n    ));\n  };\n  const importingErrorAlert = () => {\n    if (!importingErrorMessage)\n    return null;\n    return _jsx(StyledAlertMargin, { children:\n      _jsx(ErrorAlert, { errorMessage: importingErrorMessage, showDbInstallInstructions: passwordFields.length > 0 }) }\n    );\n  };\n  const confirmOverwrite = (event) => {var _event$currentTarget$, _event$currentTarget;\n    const targetValue = (_event$currentTarget$ = (_event$currentTarget = event.currentTarget) == null ? void 0 : _event$currentTarget.value) != null ? _event$currentTarget$ : '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n  const confirmOverwriteField = () => {\n    if (!alreadyExists.length)\n    return null;\n    return _jsxs(_Fragment, { children: [\n      _jsx(StyledAlertMargin, { children:\n        _jsx(Alert, { closable: false, css: (theme) => antdWarningAlertStyles(theme), type: \"warning\", showIcon: true, message: \"\", description: t('You are importing one or more databases that already exist. Overwriting might cause you to lose some of your work. Are you sure you want to overwrite?') }) }\n      ),\n      _jsx(ValidatedInput, { id: \"confirm_overwrite\", name: \"confirm_overwrite\", required: true, validationMethods: { onBlur: () => {} }, errorMessage: validationErrors == null ? void 0 : validationErrors.confirm_overwrite, label: t('Type \"%s\" to confirm', t('OVERWRITE')), onChange: confirmOverwrite, css: formScrollableStyles })] }\n    );\n  };\n  const tabChange = (key) => setTabKey(key);\n  const renderStepTwoAlert = () => {var _connectionAlert$REGI, _engineSpecificAlertM, _connectionAlert$DEFA, _engineSpecificAlertM2, _connectionAlert$DEFA2;\n    const { hostname } = window.location;\n    let ipAlert = (connectionAlert == null ? void 0 : (_connectionAlert$REGI = connectionAlert.REGIONAL_IPS) == null ? void 0 : _connectionAlert$REGI.default) || '';\n    const regionalIPs = (connectionAlert == null ? void 0 : connectionAlert.REGIONAL_IPS) || {};\n    Object.entries(regionalIPs).forEach(([ipRegion, ipRange]) => {\n      const regex = new RegExp(ipRegion);\n      if (hostname.match(regex))\n      ipAlert = ipRange;\n    });\n    return (db == null ? void 0 : db.engine) && _jsx(StyledAlertMargin, { children:\n      _jsx(Alert, { closable: false, css: (theme) => antDAlertStyles(theme), type: \"info\", showIcon: true, message: ((_engineSpecificAlertM = engineSpecificAlertMapping[db.engine]) == null ? void 0 : _engineSpecificAlertM.message) || (connectionAlert == null ? void 0 : (_connectionAlert$DEFA = connectionAlert.DEFAULT) == null ? void 0 : _connectionAlert$DEFA.message), description: ((_engineSpecificAlertM2 = engineSpecificAlertMapping[db.engine]) == null ? void 0 : _engineSpecificAlertM2.description) || (connectionAlert == null ? void 0 : (_connectionAlert$DEFA2 = connectionAlert.DEFAULT) == null ? void 0 : _connectionAlert$DEFA2.description) + ipAlert }) }\n    );\n  };\n  // eslint-disable-next-line consistent-return\n  const errorAlert = () => {\n    let alertErrors = [];\n    if (!_isEmpty(dbErrors)) {\n      alertErrors =\n      typeof dbErrors === 'object' ?\n      Object.values(dbErrors) :\n      typeof dbErrors === 'string' ?\n      [dbErrors] :\n      [];\n    } else\n    if (!_isEmpty(validationErrors) &&\n    (validationErrors == null ? void 0 : validationErrors.error_type) === 'GENERIC_DB_ENGINE_ERROR') {\n      alertErrors = [\n      (validationErrors == null ? void 0 : validationErrors.description) || (validationErrors == null ? void 0 : validationErrors.message)];\n\n    }\n    if (alertErrors.length) {var _alertErrors;\n      return _jsx(ErrorAlertContainer, { children:\n        _jsx(ErrorMessageWithStackTrace, { title: t('Database Creation Error'), description: t('We are unable to connect to your database. Click \"See more\" for database-provided information that may help troubleshoot the issue.'), descriptionDetails: ((_alertErrors = alertErrors) == null ? void 0 : _alertErrors[0]) || (validationErrors == null ? void 0 : validationErrors.description) }) }\n      );\n    }\n    return _jsx(_Fragment, {});\n  };\n  const fetchAndSetDB = () => {\n    setLoading(true);\n    fetchResource(dbFetched == null ? void 0 : dbFetched.id).then((r) => {\n      setItem(LocalStorageKeys.Database, r);\n    });\n  };\n  const renderSSHTunnelForm = () => _jsx(SSHTunnelForm, { db: db, onSSHTunnelParametersChange: ({ target }) => {\n      onChange(ActionType.ParametersSSHTunnelChange, {\n        type: target.type,\n        name: target.name,\n        value: target.value\n      });\n      handleClearValidationErrors();\n    }, setSSHTunnelLoginMethod: (method) => setDB({\n      type: ActionType.SetSSHTunnelLoginMethod,\n      payload: { login_method: method }\n    }) });\n  const renderCTABtns = () => _jsxs(StyledBtns, { children: [\n    _jsx(Button, { buttonStyle: \"secondary\", onClick: () => {\n        setLoading(true);\n        fetchAndSetDB();\n        redirectURL('/dataset/add/');\n      }, children:\n      t('CREATE DATASET') }\n    ),\n    _jsx(Button, { buttonStyle: \"secondary\", onClick: () => {\n        setLoading(true);\n        fetchAndSetDB();\n        redirectURL(`/sqllab?db=true`);\n      }, children:\n      t('QUERY DATA IN SQL LAB') }\n    )] }\n  );\n  const renderDatabaseConnectionForm = () => _jsxs(_Fragment, { children: [\n    _jsx(DatabaseConnectionForm, { isEditMode: isEditMode, db: db, sslForced: false, dbModel: dbModel, onAddTableCatalog: () => {\n        setDB({ type: ActionType.AddTableCatalogSheet });\n      }, onQueryChange: ({ target }) => onChange(ActionType.QueryChange, {\n        name: target.name,\n        value: target.value\n      }), onExtraInputChange: ({ target }) => onChange(ActionType.ExtraInputChange, {\n        name: target.name,\n        value: target.value\n      }), onEncryptedExtraInputChange: ({ target }) => onChange(ActionType.EncryptedExtraInputChange, {\n        name: target.name,\n        value: target.value\n      }), onRemoveTableCatalog: (idx) => {\n        setDB({\n          type: ActionType.RemoveTableCatalogSheet,\n          payload: { indexToDelete: idx }\n        });\n      }, onParametersChange: handleParametersChange, onChange: ({ target }) => onChange(ActionType.TextChange, {\n        name: target.name,\n        value: target.value\n      }), getValidation: () => getValidation(db), validationErrors: validationErrors, getPlaceholder: getPlaceholder, clearValidationErrors: handleClearValidationErrors }),\n    useSSHTunneling && _jsx(SSHTunnelContainer, { children: renderSSHTunnelForm() })] }\n  );\n  const renderFinishState = () => {\n    if (!editNewDb) {\n      return _jsx(ExtraOptions, { extraExtension: dbConfigExtraExtension, db: db, onInputChange: ({ target }) => onChange(ActionType.InputChange, {\n          type: target.type,\n          name: target.name,\n          checked: target.checked,\n          value: target.value\n        }), onTextChange: ({ target }) => onChange(ActionType.TextChange, {\n          name: target.name,\n          value: target.value\n        }), onEditorChange: (payload) => onChange(ActionType.EditorChange, payload), onExtraInputChange: ({ target }) => {\n          onChange(ActionType.ExtraInputChange, {\n            type: target.type,\n            name: target.name,\n            checked: target.checked,\n            value: target.value\n          });\n        }, onExtraEditorChange: (payload) => onChange(ActionType.ExtraEditorChange, payload) });\n    }\n    return renderDatabaseConnectionForm();\n  };\n  if (fileList.length > 0 && (\n  alreadyExists.length ||\n  passwordFields.length ||\n  sshTunnelPasswordFields.length ||\n  sshTunnelPrivateKeyFields.length ||\n  sshTunnelPrivateKeyPasswordFields.length)) {\n    return _jsxs(Modal, { centered: true, css: (theme) => [\n      antDModalNoPaddingStyles,\n      antDModalStyles(theme),\n      formHelperStyles(theme),\n      formStyles(theme)],\n      footer: renderModalFooter(), maskClosable: false, name: \"database\", onHide: onClose, onHandledPrimaryAction: onSave, primaryButtonName: t('Connect'), show: show, title: _jsx(\"h4\", { children: t('Connect a database') }), width: \"500px\", children: [\n      _jsx(ModalHeader, { db: db, dbName: dbName, dbModel: dbModel, fileList: fileList, hasConnectedDb: hasConnectedDb, isEditMode: isEditMode, isLoading: isLoading, useSqlAlchemyForm: useSqlAlchemyForm }),\n      confirmOverwriteField(),\n      importingErrorAlert(),\n      passwordNeededField()] }\n    );\n  }\n  const modalFooter = isEditMode ?\n  renderEditModalFooter(db) :\n  renderModalFooter();\n  return useTabLayout ? _jsxs(Modal, { css: (theme) => [\n    antDTabsStyles,\n    antDModalNoPaddingStyles,\n    antDModalStyles(theme),\n    formHelperStyles(theme),\n    formStyles(theme)],\n    name: \"database\", \"data-test\": \"database-modal\", onHandledPrimaryAction: onSave, onHide: onClose, primaryButtonName: isEditMode ? t('Save') : t('Connect'), width: \"500px\", centered: true, show: show, title: _jsxs(\"h4\", { children: [\n      isEditMode ? _jsx(Icons.EditOutlined, { iconSize: \"l\", css: css`\n                margin: auto ${theme.gridUnit * 2}px auto 0;\n              ` }) : _jsx(Icons.InsertRowAboveOutlined, { iconSize: \"l\", css: css`\n                margin: auto ${theme.gridUnit * 2}px auto 0;\n              ` }),\n      isEditMode ? t('Edit database') : t('Connect a database')] }\n    ), footer: modalFooter, maskClosable: false, children: [\n    _jsx(StyledStickyHeader, { children:\n      _jsx(TabHeader, { children:\n        _jsx(ModalHeader, { isLoading: isLoading, isEditMode: isEditMode, useSqlAlchemyForm: useSqlAlchemyForm, hasConnectedDb: hasConnectedDb, db: db, dbName: dbName, dbModel: dbModel }) }\n      ) }\n    ),\n    _jsxs(TabsStyled, { defaultActiveKey: DEFAULT_TAB_KEY, activeKey: tabKey, onTabClick: tabChange, animated: { inkBar: true, tabPane: true }, children: [\n      _jsxs(Tabs.TabPane, { tab: _jsx(\"span\", { children: t('Basic') }), children: [\n        useSqlAlchemyForm ? _jsxs(StyledAlignment, { children: [\n          _jsxs(SqlAlchemyForm, { db: db, onInputChange: ({ target }) => onChange(ActionType.InputChange, {\n              type: target.type,\n              name: target.name,\n              checked: target.checked,\n              value: target.value\n            }), conf: conf, testConnection: testConnection, testInProgress: testInProgress, children: [\n            _jsx(SSHTunnelSwitchComponent, { dbModel: dbModel, db: db, changeMethods: {\n                onParametersChange: handleParametersChange\n              }, clearValidationErrors: handleClearValidationErrors }),\n            useSSHTunneling && renderSSHTunnelForm()] }\n          ),\n          isDynamic((db == null ? void 0 : db.backend) || (db == null ? void 0 : db.engine)) && !isEditMode && _jsxs(\"div\", { css: (theme) => infoTooltip(theme), children: [\n            _jsx(Button, { buttonStyle: \"link\", onClick: () => setDB({\n                type: ActionType.ConfigMethodChange,\n                payload: {\n                  database_name: db == null ? void 0 : db.database_name,\n                  configuration_method: ConfigurationMethod.DynamicForm,\n                  engine: db == null ? void 0 : db.engine\n                }\n              }), css: (theme) => alchemyButtonLinkStyles(theme), children:\n              t('Connect this database using the dynamic form instead') }\n            ),\n            _jsx(InfoTooltip, { tooltip: t('Click this link to switch to an alternate form that exposes only the required fields needed to connect this database.'), viewBox: \"0 -6 24 24\" })] }\n          )] }\n        ) : renderDatabaseConnectionForm(),\n        !isEditMode && _jsx(StyledAlertMargin, { children:\n          _jsx(Alert, { closable: false, css: (theme) => antDAlertStyles(theme), message: t('Additional fields may be required'), showIcon: true, description: _jsxs(_Fragment, { children: [\n              t('Select databases require additional fields to be completed in the Advanced tab to successfully connect the database. Learn what requirements your databases has '),\n              _jsx(\"a\", { href: DOCUMENTATION_LINK, target: \"_blank\", rel: \"noopener noreferrer\", className: \"additional-fields-alert-description\", children:\n                t('here') }\n              ), \".\"] }\n\n            ), type: \"info\" }) }\n        ),\n        showDBError && errorAlert()] }, \"1\"\n      ),\n      _jsx(Tabs.TabPane, { tab: _jsx(\"span\", { children: t('Advanced') }), children:\n        _jsx(ExtraOptions, { extraExtension: dbConfigExtraExtension, db: db, onInputChange: ({ target }) => onChange(ActionType.InputChange, {\n            type: target.type,\n            name: target.name,\n            checked: target.checked,\n            value: target.value\n          }), onTextChange: ({ target }) => onChange(ActionType.TextChange, {\n            name: target.name,\n            value: target.value\n          }), onEditorChange: (payload) => onChange(ActionType.EditorChange, payload), onExtraInputChange: ({ target }) => {\n            onChange(ActionType.ExtraInputChange, {\n              type: target.type,\n              name: target.name,\n              checked: target.checked,\n              value: target.value\n            });\n          }, onExtraEditorChange: (payload) => {\n            onChange(ActionType.ExtraEditorChange, payload);\n          } }) }, \"2\"\n      )] }\n    )] }\n  ) : _jsxs(Modal, { css: (theme) => [\n    antDModalNoPaddingStyles,\n    antDModalStyles(theme),\n    formHelperStyles(theme),\n    formStyles(theme)],\n    name: \"database\", onHandledPrimaryAction: onSave, onHide: onClose, primaryButtonName: hasConnectedDb ? t('Finish') : t('Connect'), width: \"500px\", centered: true, show: show, title: _jsxs(\"h4\", { children: [\n      _jsx(Icons.InsertRowAboveOutlined, { iconSize: \"l\", css: css`\n              margin: auto ${theme.gridUnit * 2}px auto 0;\n            ` }),\n      t('Connect a database')] }\n    ), footer: renderModalFooter(), maskClosable: false, children: [\n    !isLoading && hasConnectedDb ? _jsxs(_Fragment, { children: [\n      _jsx(ModalHeader, { isLoading: isLoading, isEditMode: isEditMode, useSqlAlchemyForm: useSqlAlchemyForm, hasConnectedDb: hasConnectedDb, db: db, dbName: dbName, dbModel: dbModel, editNewDb: editNewDb }),\n      showCTAbtns && renderCTABtns(),\n      renderFinishState()] }\n    ) : _jsx(_Fragment, { children:\n\n      !isLoading && (\n      !db ? _jsxs(SelectDatabaseStyles, { children: [\n        _jsx(ModalHeader, { isLoading: isLoading, isEditMode: isEditMode, useSqlAlchemyForm: useSqlAlchemyForm, hasConnectedDb: hasConnectedDb, db: db, dbName: dbName, dbModel: dbModel }),\n        renderPreferredSelector(),\n        renderAvailableSelector(),\n        _jsx(StyledUploadWrapper, { children:\n          _jsx(Upload, { name: \"databaseFile\", id: \"databaseFile\", \"data-test\": \"database-file-input\", accept: \".yaml,.json,.yml,.zip\", customRequest: () => {}, onChange: onDbImport, onRemove: removeFile, children:\n            _jsx(Button, { \"data-test\": \"import-database-btn\", buttonStyle: \"link\", type: \"link\", css: importDbButtonLinkStyles, children:\n              t('Import database from file') }\n            ) }\n          ) }\n        ),\n        importingErrorAlert()] }\n      ) : _jsxs(_Fragment, { children: [\n        _jsx(ModalHeader, { isLoading: isLoading, isEditMode: isEditMode, useSqlAlchemyForm: useSqlAlchemyForm, hasConnectedDb: hasConnectedDb, db: db, dbName: dbName, dbModel: dbModel }),\n        hasAlert && renderStepTwoAlert(),\n        renderDatabaseConnectionForm(),\n        _jsx(\"div\", { css: (theme) => infoTooltip(theme), children:\n          dbModel.engine !== Engines.GSheet && _jsxs(_Fragment, { children: [\n            _jsx(Button, { \"data-test\": \"sqla-connect-btn\", buttonStyle: \"link\", onClick: () => setDB({\n                type: ActionType.ConfigMethodChange,\n                payload: {\n                  engine: db.engine,\n                  configuration_method: ConfigurationMethod.SqlalchemyUri,\n                  database_name: db.database_name\n                }\n              }), css: buttonLinkStyles, children:\n              t('Connect this database with a SQLAlchemy URI string instead') }\n            ),\n            _jsx(InfoTooltip, { tooltip: t('Click this link to switch to an alternate form that allows you to input the SQLAlchemy URL for this database manually.'), viewBox: \"0 -6 24 24\" })] }\n          ) }\n        ),\n\n        showDBError && errorAlert()] }\n      )) }\n    ),\n    isLoading && _jsx(Loading, {})] }\n  );\n};__signature__(DatabaseModal, \"useTheme{theme}\\nuseReducer{[db, setDB](null)}\\nuseSingleViewResource{{ state: { loading: dbLoading, resource: dbFetched, error: dbErrors }, fetchResource, createResource, updateResource, clearError, }}\\nuseState{[tabKey, setTabKey](DEFAULT_TAB_KEY)}\\nuseAvailableDatabases{[availableDbs, getAvailableDbs]}\\nuseDatabaseValidation{[validationErrors, getValidation, setValidationErrors]}\\nuseState{[hasConnectedDb, setHasConnectedDb](false)}\\nuseState{[showCTAbtns, setShowCTAbtns](false)}\\nuseState{[dbName, setDbName]('')}\\nuseState{[editNewDb, setEditNewDb](false)}\\nuseState{[isLoading, setLoading](false)}\\nuseState{[testInProgress, setTestInProgress](false)}\\nuseState{[passwords, setPasswords]({})}\\nuseState{[sshTunnelPasswords, setSSHTunnelPasswords]({})}\\nuseState{[sshTunnelPrivateKeys, setSSHTunnelPrivateKeys]({})}\\nuseState{[sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords]({})}\\nuseState{[confirmedOverwrite, setConfirmedOverwrite](false)}\\nuseState{[fileList, setFileList]([])}\\nuseState{[importingModal, setImportingModal](false)}\\nuseState{[importingErrorMessage, setImportingErrorMessage]}\\nuseState{[passwordFields, setPasswordFields]([])}\\nuseState{[sshTunnelPasswordFields, setSSHTunnelPasswordFields]([])}\\nuseState{[sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields]([])}\\nuseState{[sshTunnelPrivateKeyPasswordFields, setSSHTunnelPrivateKeyPasswordFields,]([])}\\nuseState{[extraExtensionComponentState, setExtraExtensionComponentState]({})}\\nuseState{[useSSHTunneling, setUseSSHTunneling](undefined)}\\nuseCommonConf{conf}\\nuseHistory{history}\\nuseCallback{onChange}\\nuseCallback{handleClearValidationErrors}\\nuseCallback{handleParametersChange}\\nuseImportResource{{ state: { alreadyExists, passwordsNeeded, sshPasswordNeeded, sshPrivateKeyNeeded, sshPrivateKeyPasswordNeeded, loading: importLoading, failed: importErrored, }, importResource, }}\\nuseRef{firstUpdate}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\", () => [useTheme, useSingleViewResource, useAvailableDatabases, useDatabaseValidation, useCommonConf, useHistory, useImportResource]);const _default =\nwithToasts(DatabaseModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(extensionsRegistry, \"extensionsRegistry\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx\");reactHotLoader.register(DEFAULT_EXTRA, \"DEFAULT_EXTRA\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx\");reactHotLoader.register(engineSpecificAlertMapping, \"engineSpecificAlertMapping\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx\");reactHotLoader.register(TabsStyled, \"TabsStyled\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx\");reactHotLoader.register(ErrorAlertContainer, \"ErrorAlertContainer\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx\");reactHotLoader.register(SSHTunnelContainer, \"SSHTunnelContainer\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx\");reactHotLoader.register(ActionType, \"ActionType\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx\");reactHotLoader.register(AuthType, \"AuthType\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx\");reactHotLoader.register(StyledBtns, \"StyledBtns\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx\");reactHotLoader.register(dbReducer, \"dbReducer\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx\");reactHotLoader.register(DEFAULT_TAB_KEY, \"DEFAULT_TAB_KEY\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx\");reactHotLoader.register(DatabaseModal, \"DatabaseModal\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["t","styled","getExtensionsRegistry","css","useTheme","useEffect","useRef","useState","useReducer","useCallback","useHistory","setItem","LocalStorageKeys","Tabs","AntdSelect","Upload","Alert","Modal","Button","IconButton","InfoTooltip","withToasts","ValidatedInput","ErrorMessageWithStackTrace","ErrorAlert","Icons","testDatabaseConnection","useSingleViewResource","useAvailableDatabases","useDatabaseValidation","getDatabaseImages","getConnectionAlert","useImportResource","useCommonConf","Loading","ConfigurationMethod","Engines","ExtraOptions","SqlAlchemyForm","DatabaseConnectionForm","antDAlertStyles","antdWarningAlertStyles","StyledAlertMargin","antDModalNoPaddingStyles","antDModalStyles","antDTabsStyles","buttonLinkStyles","importDbButtonLinkStyles","alchemyButtonLinkStyles","TabHeader","formHelperStyles","formStyles","StyledAlignment","SelectDatabaseStyles","infoTooltip","StyledFooterButton","StyledStickyHeader","formScrollableStyles","StyledUploadWrapper","ModalHeader","DOCUMENTATION_LINK","SSHTunnelForm","SSHTunnelSwitch","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","extensionsRegistry","DEFAULT_EXTRA","JSON","stringify","allows_virtual_table_explore","engineSpecificAlertMapping","GSheet","message","description","TabsStyled","ErrorAlertContainer","div","theme","gridUnit","SSHTunnelContainer","ActionType","AuthType","StyledBtns","dbReducer","state","action","_action$payload$type","_trimmedState$catalog","_action$payload","_action$payload$param","trimmedState","query","query_input","parametersCatalog","actionPayloadJson","extraJson","parse","extra","type","ExtraEditorChange","payload","json","e","name","EncryptedExtraInputChange","masked_encrypted_extra","value","ExtraInputChange","metadata_cache_timeout","schemas_allowed_for_file_upload","split","filter","schema","_action$payload$value","engine_params","connect_args","trim","schema_options","checked","InputChange","ParametersChange","startsWith","catalog","undefined","_action$payload$type2","catalogCopy","idx","catalogToUpdate","parseInt","splice","reduce","obj","item","parameters","ParametersSSHTunnelChange","ssh_tunnel","SetSSHTunnelLoginMethod","_pick","login_method","PrivateKey","_trimmedState$ssh_tun","_trimmedState$ssh_tun2","private_key","private_key_password","Password","_trimmedState$ssh_tun3","password","RemoveSSHTunnelConfig","AddTableCatalogSheet","RemoveTableCatalogSheet","indexToDelete","EditorChange","QueryChange","Object","fromEntries","URLSearchParams","TextChange","Fetched","entries","map","key","join","configuration_method","DynamicForm","_extraJsonPayload$eng","extraJsonPayload","payloadCatalog","engineRootCatalog","engine","backend","DbSelected","expose_in_sqllab","ConfigMethodChange","Reset","DEFAULT_TAB_KEY","DatabaseModal","addDangerToast","addSuccessToast","onDatabaseAdd","onHide","show","databaseId","dbEngine","_extensionsRegistry$g","_availableDbs$databas3","_availableDbs$databas4","_db$parameters2","db","setDB","loading","dbLoading","resource","dbFetched","error","dbErrors","fetchResource","createResource","updateResource","clearError","tabKey","setTabKey","availableDbs","getAvailableDbs","validationErrors","getValidation","setValidationErrors","hasConnectedDb","setHasConnectedDb","showCTAbtns","setShowCTAbtns","dbName","setDbName","editNewDb","setEditNewDb","isLoading","setLoading","testInProgress","setTestInProgress","passwords","setPasswords","sshTunnelPasswords","setSSHTunnelPasswords","sshTunnelPrivateKeys","setSSHTunnelPrivateKeys","sshTunnelPrivateKeyPasswords","setSSHTunnelPrivateKeyPasswords","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModal","setImportingModal","importingErrorMessage","setImportingErrorMessage","passwordFields","setPasswordFields","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","extraExtensionComponentState","setExtraExtensionComponentState","SSHTunnelSwitchComponent","get","useSSHTunneling","setUseSSHTunneling","dbConfigExtraExtension","onEdit","componentState","conf","dbImages","connectionAlert","isEditMode","hasAlert","useSqlAlchemyForm","SqlalchemyUri","useTabLayout","isDynamic","_availableDbs$databas","_availableDbs$databas2","databases","find","DB","showDBError","history","dbModel","available","default_driver","driver","testConnection","_db$database_name","sqlalchemy_uri","connection","database_name","impersonate_user","server_cert","_isEmpty","server_port","Number","errorMsg","getPlaceholder","field","removeFile","removedFile","file","uid","onChange","handleClearValidationErrors","handleParametersChange","target","onClose","redirectURL","url","push","alreadyExists","passwordsNeeded","sshPasswordNeeded","sshPrivateKeyNeeded","sshPrivateKeyPasswordNeeded","importLoading","failed","importErrored","importResource","msg","onSave","_dbConfigExtraExtensi","_dbToUpdate$parameter7","dbConfigExtraExtensionOnSaveError","then","dbToUpdate","_dbToUpdate$parameter","_dbToUpdate$parameter2","errors","length","parameters_schema","properties","additionalEncryptedExtra","paramConfigArray","keys","forEach","paramConfig","_dbToUpdate$parameter3","_dbToUpdate$parameter4","_dbToUpdate$parameter5","_dbToUpdate$parameter6","id","result","_dbConfigExtraExtensi2","dbId","_dbConfigExtraExtensi3","originFileObj","File","fetchDB","catch","setDatabaseModel","engine_information","supports_file_upload","selectedDbModel","sqlalchemy_uri_placeholder","renderAvailableSelector","_ref","_connectionAlert$ADD_","className","children","placeholder","showSearch","sort","a","b","localeCompare","database","index","Option","showIcon","closable","ADD_DATABASE","href","contact_link","rel","contact_description_link","renderPreferredSelector","_availableDbs$databas5","preferred","onClick","buttonText","icon","handleBackButtonOnFinish","handleBackButtonOnConnect","handleDisableOnImport","renderModalFooter","buttonStyle","disabled","renderEditModalFooter","is_managed_externally","tooltip","firstUpdate","current","_document","document","getElementsByClassName","scrollIntoView","_db$parameters","ssh","onDbImport","info","status","passwordNeededField","files","Set","indexOf","required","event","validationMethods","onBlur","errorMessage","password_needed","label","slice","ssh_tunnel_password_needed","ssh_tunnel_private_key_needed","ssh_tunnel_private_key_password_needed","importingErrorAlert","showDbInstallInstructions","confirmOverwrite","_event$currentTarget$","_event$currentTarget","targetValue","currentTarget","toUpperCase","confirmOverwriteField","confirm_overwrite","tabChange","renderStepTwoAlert","_connectionAlert$REGI","_engineSpecificAlertM","_connectionAlert$DEFA","_engineSpecificAlertM2","_connectionAlert$DEFA2","hostname","window","location","ipAlert","REGIONAL_IPS","default","regionalIPs","ipRegion","ipRange","regex","RegExp","match","DEFAULT","errorAlert","alertErrors","values","error_type","_alertErrors","title","descriptionDetails","fetchAndSetDB","r","Database","renderSSHTunnelForm","onSSHTunnelParametersChange","setSSHTunnelLoginMethod","method","renderCTABtns","renderDatabaseConnectionForm","sslForced","onAddTableCatalog","onQueryChange","onExtraInputChange","onEncryptedExtraInputChange","onRemoveTableCatalog","onParametersChange","clearValidationErrors","renderFinishState","extraExtension","onInputChange","onTextChange","onEditorChange","onExtraEditorChange","centered","footer","maskClosable","onHandledPrimaryAction","primaryButtonName","width","modalFooter","EditOutlined","iconSize","InsertRowAboveOutlined","defaultActiveKey","activeKey","onTabClick","animated","inkBar","tabPane","TabPane","tab","changeMethods","viewBox","accept","customRequest","onRemove","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/features/databases/DatabaseModal/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  t,\n  styled,\n  SupersetTheme,\n  getExtensionsRegistry,\n  css,\n  useTheme,\n} from '@superset-ui/core';\n\nimport {\n  FunctionComponent,\n  useEffect,\n  useRef,\n  useState,\n  useReducer,\n  Reducer,\n  useCallback,\n  ChangeEvent,\n} from 'react';\n\nimport { useHistory } from 'react-router-dom';\nimport { setItem, LocalStorageKeys } from 'src/utils/localStorageHelpers';\n// eslint-disable-next-line no-restricted-imports\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface'; // TODO: Remove antd\nimport Tabs from 'src/components/Tabs';\nimport { AntdSelect, Upload } from 'src/components';\nimport Alert from 'src/components/Alert';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { IconButton } from 'src/components/IconButton';\nimport InfoTooltip from 'src/components/InfoTooltip';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport ValidatedInput from 'src/components/Form/LabeledErrorBoundInput';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport ErrorAlert from 'src/components/ImportModal/ErrorAlert';\nimport { Icons } from 'src/components/Icons';\nimport {\n  testDatabaseConnection,\n  useSingleViewResource,\n  useAvailableDatabases,\n  useDatabaseValidation,\n  getDatabaseImages,\n  getConnectionAlert,\n  useImportResource,\n} from 'src/views/CRUD/hooks';\nimport { useCommonConf } from 'src/features/databases/state';\nimport Loading from 'src/components/Loading';\nimport { isEmpty, pick } from 'lodash';\nimport { OnlyKeyWithType } from 'src/utils/types';\nimport {\n  DatabaseObject,\n  DatabaseForm,\n  ConfigurationMethod,\n  CatalogObject,\n  Engines,\n  ExtraJson,\n  CustomTextType,\n  DatabaseParameters,\n} from '../types';\nimport ExtraOptions from './ExtraOptions';\nimport SqlAlchemyForm from './SqlAlchemyForm';\nimport DatabaseConnectionForm from './DatabaseConnectionForm';\nimport {\n  antDAlertStyles,\n  antdWarningAlertStyles,\n  StyledAlertMargin,\n  antDModalNoPaddingStyles,\n  antDModalStyles,\n  antDTabsStyles,\n  buttonLinkStyles,\n  importDbButtonLinkStyles,\n  alchemyButtonLinkStyles,\n  TabHeader,\n  formHelperStyles,\n  formStyles,\n  StyledAlignment,\n  SelectDatabaseStyles,\n  infoTooltip,\n  StyledFooterButton,\n  StyledStickyHeader,\n  formScrollableStyles,\n  StyledUploadWrapper,\n} from './styles';\nimport ModalHeader, { DOCUMENTATION_LINK } from './ModalHeader';\nimport SSHTunnelForm from './SSHTunnelForm';\nimport SSHTunnelSwitch from './SSHTunnelSwitch';\n\nconst extensionsRegistry = getExtensionsRegistry();\n\nconst DEFAULT_EXTRA = JSON.stringify({ allows_virtual_table_explore: true });\n\nconst engineSpecificAlertMapping = {\n  [Engines.GSheet]: {\n    message: 'Why do I need to create a database?',\n    description:\n      'To begin using your Google Sheets, you need to create a database first. ' +\n      'Databases are used as a way to identify ' +\n      'your data so that it can be queried and visualized. This ' +\n      'database will hold all of your individual Google Sheets ' +\n      'you choose to connect here.',\n  },\n};\n\nconst TabsStyled = styled(Tabs)`\n  .ant-tabs-content {\n    display: flex;\n    width: 100%;\n    overflow: inherit;\n\n    & > .ant-tabs-tabpane {\n      position: relative;\n    }\n  }\n`;\n\nconst ErrorAlertContainer = styled.div`\n  ${({ theme }) => `\n    margin: ${theme.gridUnit * 8}px ${theme.gridUnit * 4}px;\n  `};\n`;\n\nconst SSHTunnelContainer = styled.div`\n  ${({ theme }) => `\n    padding: 0px ${theme.gridUnit * 4}px;\n  `};\n`;\n\nexport interface DatabaseModalProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onDatabaseAdd?: (database?: DatabaseObject) => void;\n  onHide: () => void;\n  show: boolean;\n  databaseId: number | undefined; // If included, will go into edit mode\n  dbEngine: string | undefined; // if included goto step 2 with engine already set\n}\n\nexport enum ActionType {\n  AddTableCatalogSheet,\n  ConfigMethodChange,\n  DbSelected,\n  EditorChange,\n  ExtraEditorChange,\n  ExtraInputChange,\n  EncryptedExtraInputChange,\n  Fetched,\n  InputChange,\n  ParametersChange,\n  QueryChange,\n  RemoveTableCatalogSheet,\n  Reset,\n  TextChange,\n  ParametersSSHTunnelChange,\n  SetSSHTunnelLoginMethod,\n  RemoveSSHTunnelConfig,\n}\n\nexport enum AuthType {\n  Password,\n  PrivateKey,\n}\n\ninterface DBReducerPayloadType {\n  target?: string;\n  name: string;\n  json?: string;\n  type?: string;\n  checked?: boolean;\n  value?: string;\n}\n\nexport type DBReducerActionType =\n  | {\n      type:\n        | ActionType.ExtraEditorChange\n        | ActionType.ExtraInputChange\n        | ActionType.EncryptedExtraInputChange\n        | ActionType.TextChange\n        | ActionType.QueryChange\n        | ActionType.InputChange\n        | ActionType.EditorChange\n        | ActionType.ParametersChange\n        | ActionType.ParametersSSHTunnelChange;\n      payload: DBReducerPayloadType;\n    }\n  | {\n      type: ActionType.Fetched;\n      payload: Partial<DatabaseObject>;\n    }\n  | {\n      type: ActionType.DbSelected;\n      payload: {\n        database_name?: string;\n        engine?: string;\n        configuration_method: ConfigurationMethod;\n        engine_information?: {};\n        driver?: string;\n        sqlalchemy_uri_placeholder?: string;\n      };\n    }\n  | {\n      type:\n        | ActionType.Reset\n        | ActionType.RemoveSSHTunnelConfig\n        | ActionType.AddTableCatalogSheet;\n    }\n  | {\n      type: ActionType.RemoveTableCatalogSheet;\n      payload: {\n        indexToDelete: number;\n      };\n    }\n  | {\n      type: ActionType.ConfigMethodChange;\n      payload: {\n        database_name?: string;\n        engine?: string;\n        configuration_method: ConfigurationMethod;\n      };\n    }\n  | {\n      type: ActionType.SetSSHTunnelLoginMethod;\n      payload: {\n        login_method: AuthType;\n      };\n    };\n\nconst StyledBtns = styled.div`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 3}px;\n  margin-left: ${({ theme }) => theme.gridUnit * 3}px;\n`;\n\nexport function dbReducer(\n  state: Partial<DatabaseObject> | null,\n  action: DBReducerActionType,\n): Partial<DatabaseObject> | null {\n  const trimmedState = {\n    ...(state || {}),\n  };\n  let query = {};\n  let query_input = '';\n  let parametersCatalog;\n  let actionPayloadJson;\n  const extraJson: ExtraJson = JSON.parse(trimmedState.extra || '{}');\n\n  switch (action.type) {\n    case ActionType.ExtraEditorChange:\n      // \"extra\" payload in state is a string\n      try {\n        // we don't want to stringify encoded strings twice\n        actionPayloadJson = JSON.parse(action.payload.json || '{}');\n      } catch (e) {\n        actionPayloadJson = action.payload.json;\n      }\n      return {\n        ...trimmedState,\n        extra: JSON.stringify({\n          ...extraJson,\n          [action.payload.name]: actionPayloadJson,\n        }),\n      };\n    case ActionType.EncryptedExtraInputChange:\n      return {\n        ...trimmedState,\n        masked_encrypted_extra: JSON.stringify({\n          ...JSON.parse(trimmedState.masked_encrypted_extra || '{}'),\n          [action.payload.name]: action.payload.value,\n        }),\n      };\n    case ActionType.ExtraInputChange:\n      // \"extra\" payload in state is a string\n      if (\n        action.payload.name === 'schema_cache_timeout' ||\n        action.payload.name === 'table_cache_timeout'\n      ) {\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            metadata_cache_timeout: {\n              ...extraJson?.metadata_cache_timeout,\n              [action.payload.name]: action.payload.value,\n            },\n          }),\n        };\n      }\n      if (action.payload.name === 'schemas_allowed_for_file_upload') {\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            schemas_allowed_for_file_upload: (action.payload.value || '')\n              .split(',')\n              .filter(schema => schema !== ''),\n          }),\n        };\n      }\n      if (action.payload.name === 'http_path') {\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            engine_params: {\n              connect_args: {\n                [action.payload.name]: action.payload.value?.trim(),\n              },\n            },\n          }),\n        };\n      }\n      if (action.payload.name === 'expand_rows') {\n        return {\n          ...trimmedState,\n          extra: JSON.stringify({\n            ...extraJson,\n            schema_options: {\n              ...extraJson?.schema_options,\n              [action.payload.name]: !!action.payload.value,\n            },\n          }),\n        };\n      }\n      return {\n        ...trimmedState,\n        extra: JSON.stringify({\n          ...extraJson,\n          [action.payload.name]:\n            action.payload.type === 'checkbox'\n              ? action.payload.checked\n              : action.payload.value,\n        }),\n      };\n    case ActionType.InputChange:\n      if (action.payload.type === 'checkbox') {\n        return {\n          ...trimmedState,\n          [action.payload.name]: action.payload.checked,\n        };\n      }\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value,\n      };\n    case ActionType.ParametersChange:\n      // catalog params will always have a catalog state for\n      // dbs that use a catalog, i.e., gsheets, even if the\n      // fields are empty strings\n      if (\n        action.payload.type?.startsWith('catalog') &&\n        trimmedState.catalog !== undefined\n      ) {\n        // Formatting wrapping google sheets table catalog\n        const catalogCopy: CatalogObject[] = [...trimmedState.catalog];\n        const idx = action.payload.type?.split('-')[1];\n        const catalogToUpdate: CatalogObject =\n          catalogCopy[parseInt(idx, 10)] || {};\n        if (action.payload.value !== undefined) {\n          catalogToUpdate[action.payload.name as keyof CatalogObject] =\n            action.payload.value;\n        }\n\n        // insert updated catalog to existing state\n        catalogCopy.splice(parseInt(idx, 10), 1, catalogToUpdate);\n\n        // format catalog for state\n        // eslint-disable-next-line array-callback-return\n        parametersCatalog = catalogCopy.reduce<Record<string, string>>(\n          (obj, item: CatalogObject) => {\n            const catalog = { ...obj };\n            catalog[item.name as keyof CatalogObject] = item.value;\n            return catalog;\n          },\n          {},\n        );\n\n        return {\n          ...trimmedState,\n          catalog: catalogCopy,\n          parameters: {\n            ...trimmedState.parameters,\n            catalog: parametersCatalog,\n          },\n        };\n      }\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          [action.payload.name]: action.payload.value,\n        },\n      };\n\n    case ActionType.ParametersSSHTunnelChange:\n      return {\n        ...trimmedState,\n        ssh_tunnel: {\n          ...trimmedState.ssh_tunnel,\n          [action.payload.name]: action.payload.value,\n        },\n      };\n    case ActionType.SetSSHTunnelLoginMethod: {\n      let ssh_tunnel = {};\n      if (trimmedState?.ssh_tunnel) {\n        // remove any attributes that are considered sensitive\n        ssh_tunnel = pick(trimmedState.ssh_tunnel, [\n          'id',\n          'server_address',\n          'server_port',\n          'username',\n        ]);\n      }\n      if (action.payload.login_method === AuthType.PrivateKey) {\n        return {\n          ...trimmedState,\n          ssh_tunnel: {\n            private_key: trimmedState?.ssh_tunnel?.private_key,\n            private_key_password:\n              trimmedState?.ssh_tunnel?.private_key_password,\n            ...ssh_tunnel,\n          },\n        };\n      }\n      if (action.payload.login_method === AuthType.Password) {\n        return {\n          ...trimmedState,\n          ssh_tunnel: {\n            password: trimmedState?.ssh_tunnel?.password,\n            ...ssh_tunnel,\n          },\n        };\n      }\n      return {\n        ...trimmedState,\n      };\n    }\n    case ActionType.RemoveSSHTunnelConfig:\n      return {\n        ...trimmedState,\n        ssh_tunnel: undefined,\n      };\n    case ActionType.AddTableCatalogSheet:\n      if (trimmedState.catalog !== undefined) {\n        return {\n          ...trimmedState,\n          catalog: [...trimmedState.catalog, { name: '', value: '' }],\n        };\n      }\n      return {\n        ...trimmedState,\n        catalog: [{ name: '', value: '' }],\n      };\n    case ActionType.RemoveTableCatalogSheet:\n      trimmedState.catalog?.splice(action.payload.indexToDelete, 1);\n      return {\n        ...trimmedState,\n      };\n    case ActionType.EditorChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.json,\n      };\n    case ActionType.QueryChange:\n      return {\n        ...trimmedState,\n        parameters: {\n          ...trimmedState.parameters,\n          query: Object.fromEntries(new URLSearchParams(action.payload.value)),\n        },\n        query_input: action.payload.value,\n      };\n    case ActionType.TextChange:\n      return {\n        ...trimmedState,\n        [action.payload.name]: action.payload.value,\n      };\n    case ActionType.Fetched:\n      // convert query to a string and store in query_input\n      query = action.payload?.parameters?.query || {};\n      query_input = Object.entries(query)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&');\n\n      if (\n        action.payload.masked_encrypted_extra &&\n        action.payload.configuration_method === ConfigurationMethod.DynamicForm\n      ) {\n        // \"extra\" payload from the api is a string\n        const extraJsonPayload: ExtraJson = {\n          ...JSON.parse((action.payload.extra as string) || '{}'),\n        };\n\n        const payloadCatalog = extraJsonPayload.engine_params?.catalog;\n\n        const engineRootCatalog = Object.entries(payloadCatalog || {}).map(\n          ([name, value]: string[]) => ({ name, value }),\n        );\n\n        return {\n          ...action.payload,\n          engine: action.payload.backend || trimmedState.engine,\n          configuration_method: action.payload.configuration_method,\n          catalog: engineRootCatalog,\n          parameters: {\n            ...(action.payload.parameters || trimmedState.parameters),\n            catalog: payloadCatalog,\n          },\n          query_input,\n        };\n      }\n      return {\n        ...action.payload,\n        masked_encrypted_extra: action.payload.masked_encrypted_extra || '',\n        engine: action.payload.backend || trimmedState.engine,\n        configuration_method: action.payload.configuration_method,\n        parameters: action.payload.parameters || trimmedState.parameters,\n        ssh_tunnel: action.payload.ssh_tunnel || trimmedState.ssh_tunnel,\n        query_input,\n      };\n\n    case ActionType.DbSelected:\n      // set initial state for blank form\n      return {\n        ...action.payload,\n        extra: DEFAULT_EXTRA,\n        expose_in_sqllab: true,\n      };\n    case ActionType.ConfigMethodChange:\n      return {\n        ...action.payload,\n      };\n\n    case ActionType.Reset:\n    default:\n      return null;\n  }\n}\n\nconst DEFAULT_TAB_KEY = '1';\n\nconst DatabaseModal: FunctionComponent<DatabaseModalProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  onDatabaseAdd,\n  onHide,\n  show,\n  databaseId,\n  dbEngine,\n}) => {\n  const theme = useTheme();\n  const [db, setDB] = useReducer<\n    Reducer<Partial<DatabaseObject> | null, DBReducerActionType>\n  >(dbReducer, null);\n  // Database fetch logic\n  const {\n    state: { loading: dbLoading, resource: dbFetched, error: dbErrors },\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  } = useSingleViewResource<DatabaseObject>(\n    'database',\n    t('database'),\n    addDangerToast,\n    'connection',\n  );\n\n  const [tabKey, setTabKey] = useState<string>(DEFAULT_TAB_KEY);\n  const [availableDbs, getAvailableDbs] = useAvailableDatabases();\n  const [validationErrors, getValidation, setValidationErrors] =\n    useDatabaseValidation();\n  const [hasConnectedDb, setHasConnectedDb] = useState<boolean>(false);\n  const [showCTAbtns, setShowCTAbtns] = useState(false);\n  const [dbName, setDbName] = useState('');\n  const [editNewDb, setEditNewDb] = useState<boolean>(false);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [testInProgress, setTestInProgress] = useState<boolean>(false);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] =\n    useState<Record<string, string>>({});\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModal, setImportingModal] = useState<boolean>(false);\n  const [importingErrorMessage, setImportingErrorMessage] = useState<string>();\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n  const [extraExtensionComponentState, setExtraExtensionComponentState] =\n    useState<object>({});\n\n  const SSHTunnelSwitchComponent =\n    extensionsRegistry.get('ssh_tunnel.form.switch') ?? SSHTunnelSwitch;\n\n  const [useSSHTunneling, setUseSSHTunneling] = useState<boolean | undefined>(\n    undefined,\n  );\n\n  let dbConfigExtraExtension = extensionsRegistry.get(\n    'databaseconnection.extraOption',\n  );\n\n  if (dbConfigExtraExtension) {\n    // add method for db modal to store data\n    dbConfigExtraExtension = {\n      ...dbConfigExtraExtension,\n      onEdit: componentState => {\n        setExtraExtensionComponentState({\n          ...extraExtensionComponentState,\n          ...componentState,\n        });\n      },\n    };\n  }\n\n  const conf = useCommonConf();\n  const dbImages = getDatabaseImages();\n  const connectionAlert = getConnectionAlert();\n  const isEditMode = !!databaseId;\n  const hasAlert =\n    connectionAlert ||\n    !!(\n      db?.engine &&\n      engineSpecificAlertMapping[\n        db.engine as keyof typeof engineSpecificAlertMapping\n      ]\n    );\n  const useSqlAlchemyForm =\n    db?.configuration_method === ConfigurationMethod.SqlalchemyUri;\n  const useTabLayout = isEditMode || useSqlAlchemyForm;\n  const isDynamic = (engine: string | undefined) =>\n    availableDbs?.databases?.find(\n      (DB: DatabaseObject) => DB.backend === engine || DB.engine === engine,\n    )?.parameters !== undefined;\n  const showDBError = validationErrors || dbErrors;\n  const history = useHistory();\n\n  const dbModel: DatabaseForm =\n    // TODO: we need a centralized engine in one place\n\n    // first try to match both engine and driver\n    availableDbs?.databases?.find(\n      (available: {\n        engine: string | undefined;\n        default_driver: string | undefined;\n      }) =>\n        available.engine === (isEditMode ? db?.backend : db?.engine) &&\n        available.default_driver === db?.driver,\n    ) ||\n    // alternatively try to match only engine\n    availableDbs?.databases?.find(\n      (available: { engine: string | undefined }) =>\n        available.engine === (isEditMode ? db?.backend : db?.engine),\n    ) ||\n    {};\n\n  // Test Connection logic\n  const testConnection = () => {\n    if (!db?.sqlalchemy_uri) {\n      addDangerToast(t('Please enter a SQLAlchemy URI to test'));\n      return;\n    }\n\n    const connection = {\n      sqlalchemy_uri: db?.sqlalchemy_uri || '',\n      database_name: db?.database_name?.trim() || undefined,\n      impersonate_user: db?.impersonate_user || undefined,\n      extra: db?.extra,\n      masked_encrypted_extra: db?.masked_encrypted_extra || '',\n      server_cert: db?.server_cert || undefined,\n      ssh_tunnel:\n        !isEmpty(db?.ssh_tunnel) && useSSHTunneling\n          ? {\n              ...db.ssh_tunnel,\n              server_port: Number(db.ssh_tunnel!.server_port),\n            }\n          : undefined,\n    };\n    setTestInProgress(true);\n    testDatabaseConnection(\n      connection,\n      (errorMsg: string) => {\n        setTestInProgress(false);\n        addDangerToast(errorMsg);\n      },\n      (errorMsg: string) => {\n        setTestInProgress(false);\n        addSuccessToast(errorMsg);\n      },\n    );\n  };\n\n  const getPlaceholder = (field: string) => {\n    if (field === 'database') {\n      return t('e.g. world_population');\n    }\n    return undefined;\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const onChange = useCallback(\n    (\n      type: DBReducerActionType['type'],\n      payload: CustomTextType | DBReducerPayloadType,\n    ) => {\n      setDB({ type, payload } as DBReducerActionType);\n    },\n    [],\n  );\n\n  const handleClearValidationErrors = useCallback(() => {\n    setValidationErrors(null);\n  }, [setValidationErrors]);\n\n  const handleParametersChange = useCallback(\n    ({ target }: { target: HTMLInputElement }) => {\n      onChange(ActionType.ParametersChange, {\n        type: target.type,\n        name: target.name,\n        checked: target.checked,\n        value: target.value,\n      });\n    },\n    [onChange],\n  );\n\n  const onClose = () => {\n    setDB({ type: ActionType.Reset });\n    setHasConnectedDb(false);\n    handleClearValidationErrors(); // reset validation errors on close\n    clearError();\n    setEditNewDb(false);\n    setFileList([]);\n    setImportingModal(false);\n    setImportingErrorMessage('');\n    setPasswordFields([]);\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setPasswords({});\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n    setConfirmedOverwrite(false);\n    setUseSSHTunneling(undefined);\n    onHide();\n  };\n\n  const redirectURL = (url: string) => {\n    history.push(url);\n  };\n\n  // Database import logic\n  const {\n    state: {\n      alreadyExists,\n      passwordsNeeded,\n      sshPasswordNeeded,\n      sshPrivateKeyNeeded,\n      sshPrivateKeyPasswordNeeded,\n      loading: importLoading,\n      failed: importErrored,\n    },\n    importResource,\n  } = useImportResource('database', t('database'), msg => {\n    setImportingErrorMessage(msg);\n  });\n\n  const onSave = async () => {\n    let dbConfigExtraExtensionOnSaveError;\n\n    setLoading(true);\n\n    dbConfigExtraExtension\n      ?.onSave(extraExtensionComponentState, db)\n      .then(({ error }: { error: any }) => {\n        if (error) {\n          dbConfigExtraExtensionOnSaveError = error;\n          addDangerToast(error);\n        }\n      });\n\n    if (dbConfigExtraExtensionOnSaveError) {\n      setLoading(false);\n      return;\n    }\n    // Clone DB object\n    const dbToUpdate = { ...(db || {}) };\n\n    if (dbToUpdate.configuration_method === ConfigurationMethod.DynamicForm) {\n      // Validate DB before saving\n      if (dbToUpdate?.parameters?.catalog) {\n        // need to stringify gsheets catalog to allow it to be serialized\n        dbToUpdate.extra = JSON.stringify({\n          ...JSON.parse(dbToUpdate.extra || '{}'),\n          engine_params: {\n            catalog: dbToUpdate.parameters.catalog,\n          },\n        });\n      }\n\n      const errors = await getValidation(dbToUpdate, true);\n      if (!isEmpty(validationErrors) || errors?.length) {\n        addDangerToast(\n          t('Connection failed, please check your connection settings.'),\n        );\n        setLoading(false);\n        return;\n      }\n\n      const parameters_schema = isEditMode\n        ? dbToUpdate.parameters_schema?.properties\n        : dbModel?.parameters.properties;\n      const additionalEncryptedExtra = JSON.parse(\n        dbToUpdate.masked_encrypted_extra || '{}',\n      );\n      const paramConfigArray = Object.keys(parameters_schema || {});\n\n      paramConfigArray.forEach(paramConfig => {\n        /*\n         * Parameters that are annotated with the `x-encrypted-extra` properties should be\n         * moved to `masked_encrypted_extra`, so that they are stored encrypted in the\n         * backend when the database is created or edited.\n         */\n        if (\n          parameters_schema[paramConfig]['x-encrypted-extra'] &&\n          dbToUpdate.parameters?.[paramConfig as keyof DatabaseParameters]\n        ) {\n          if (\n            typeof dbToUpdate.parameters?.[\n              paramConfig as keyof DatabaseParameters\n            ] === 'object'\n          ) {\n            // add new encrypted extra to masked_encrypted_extra object\n            additionalEncryptedExtra[paramConfig] =\n              dbToUpdate.parameters?.[paramConfig as keyof DatabaseParameters];\n            // The backend expects `masked_encrypted_extra` as a string for historical\n            // reasons.\n            dbToUpdate.parameters[\n              paramConfig as OnlyKeyWithType<DatabaseParameters, string>\n            ] = JSON.stringify(\n              dbToUpdate.parameters[paramConfig as keyof DatabaseParameters],\n            );\n          } else {\n            additionalEncryptedExtra[paramConfig] = JSON.parse(\n              dbToUpdate.parameters?.[\n                paramConfig as OnlyKeyWithType<DatabaseParameters, string>\n              ] || '{}',\n            );\n          }\n        }\n      });\n      // cast the new encrypted extra object into a string\n      dbToUpdate.masked_encrypted_extra = JSON.stringify(\n        additionalEncryptedExtra,\n      );\n      // this needs to be added by default to gsheets\n      if (dbToUpdate.engine === Engines.GSheet) {\n        dbToUpdate.impersonate_user = true;\n      }\n    }\n\n    if (dbToUpdate?.parameters?.catalog) {\n      // need to stringify gsheets catalog to allow it to be serialized\n      dbToUpdate.extra = JSON.stringify({\n        ...JSON.parse(dbToUpdate.extra || '{}'),\n        engine_params: {\n          catalog: dbToUpdate.parameters.catalog,\n        },\n      });\n    }\n\n    // strictly checking for false as an indication that the toggle got unchecked\n    if (useSSHTunneling === false) {\n      // remove ssh tunnel\n      dbToUpdate.ssh_tunnel = null;\n    }\n\n    if (db?.id) {\n      const result = await updateResource(\n        db.id as number,\n        dbToUpdate as DatabaseObject,\n        dbToUpdate.configuration_method === ConfigurationMethod.DynamicForm, // onShow toast on SQLA Forms\n      );\n      if (result) {\n        if (onDatabaseAdd) onDatabaseAdd();\n        dbConfigExtraExtension\n          ?.onSave(extraExtensionComponentState, db)\n          .then(({ error }: { error: any }) => {\n            if (error) {\n              dbConfigExtraExtensionOnSaveError = error;\n              addDangerToast(error);\n            }\n          });\n        if (dbConfigExtraExtensionOnSaveError) {\n          setLoading(false);\n          return;\n        }\n        if (!editNewDb) {\n          onClose();\n          addSuccessToast(t('Database settings updated'));\n        }\n      }\n    } else if (db) {\n      // Create\n      const dbId = await createResource(\n        dbToUpdate as DatabaseObject,\n        dbToUpdate.configuration_method === ConfigurationMethod.DynamicForm, // onShow toast on SQLA Forms\n      );\n      if (dbId) {\n        setHasConnectedDb(true);\n        if (onDatabaseAdd) onDatabaseAdd();\n        dbConfigExtraExtension\n          ?.onSave(extraExtensionComponentState, db)\n          .then(({ error }: { error: any }) => {\n            if (error) {\n              dbConfigExtraExtensionOnSaveError = error;\n              addDangerToast(error);\n            }\n          });\n        if (dbConfigExtraExtensionOnSaveError) {\n          setLoading(false);\n          return;\n        }\n\n        if (useTabLayout) {\n          // tab layout only has one step\n          // so it should close immediately on save\n          onClose();\n          addSuccessToast(t('Database connected'));\n        }\n      }\n    } else {\n      // Import - doesn't use db state\n      setImportingModal(true);\n\n      if (!(fileList[0].originFileObj instanceof File)) {\n        return;\n      }\n\n      const dbId = await importResource(\n        fileList[0].originFileObj,\n        passwords,\n        sshTunnelPasswords,\n        sshTunnelPrivateKeys,\n        sshTunnelPrivateKeyPasswords,\n        confirmedOverwrite,\n      );\n      if (dbId) {\n        if (onDatabaseAdd) onDatabaseAdd();\n        onClose();\n        addSuccessToast(t('Database connected'));\n      }\n    }\n\n    setShowCTAbtns(true);\n    setEditNewDb(false);\n    setLoading(false);\n  };\n\n  // Initialize\n  const fetchDB = () => {\n    if (isEditMode && databaseId) {\n      if (!dbLoading) {\n        fetchResource(databaseId).catch(e =>\n          addDangerToast(\n            t(\n              'Sorry there was an error fetching database information: %s',\n              e.message,\n            ),\n          ),\n        );\n      }\n    }\n  };\n\n  const setDatabaseModel = (database_name: string) => {\n    if (database_name === 'Other') {\n      // Allow users to connect to DB via legacy SQLA form\n      setDB({\n        type: ActionType.DbSelected,\n        payload: {\n          database_name,\n          configuration_method: ConfigurationMethod.SqlalchemyUri,\n          engine: undefined,\n          engine_information: {\n            supports_file_upload: true,\n          },\n        },\n      });\n    } else {\n      const selectedDbModel = availableDbs?.databases.filter(\n        (db: DatabaseObject) => db.name === database_name,\n      )[0];\n      const {\n        engine,\n        parameters,\n        engine_information,\n        default_driver,\n        sqlalchemy_uri_placeholder,\n      } = selectedDbModel;\n      const isDynamic = parameters !== undefined;\n      setDB({\n        type: ActionType.DbSelected,\n        payload: {\n          database_name,\n          engine,\n          configuration_method: isDynamic\n            ? ConfigurationMethod.DynamicForm\n            : ConfigurationMethod.SqlalchemyUri,\n          engine_information,\n          driver: default_driver,\n          sqlalchemy_uri_placeholder,\n        },\n      });\n\n      if (engine === Engines.GSheet) {\n        // only create a catalog if the DB is Google Sheets\n        setDB({ type: ActionType.AddTableCatalogSheet });\n      }\n    }\n  };\n\n  const renderAvailableSelector = () => (\n    <div className=\"available\">\n      <h4 className=\"available-label\">\n        {t('Or choose from a list of other databases we support:')}\n      </h4>\n      <div className=\"control-label\">{t('Supported databases')}</div>\n      <AntdSelect\n        className=\"available-select\"\n        onChange={setDatabaseModel}\n        placeholder={t('Choose a database...')}\n        showSearch\n      >\n        {[...(availableDbs?.databases || [])]\n          ?.sort((a: DatabaseForm, b: DatabaseForm) =>\n            a.name.localeCompare(b.name),\n          )\n          .map((database: DatabaseForm, index: number) => (\n            <AntdSelect.Option value={database.name} key={`database-${index}`}>\n              {database.name}\n            </AntdSelect.Option>\n          ))}\n        {/* Allow users to connect to DB via legacy SQLA form */}\n        <AntdSelect.Option value=\"Other\" key=\"Other\">\n          {t('Other')}\n        </AntdSelect.Option>\n      </AntdSelect>\n      <Alert\n        showIcon\n        closable={false}\n        css={(theme: SupersetTheme) => antDAlertStyles(theme)}\n        type=\"info\"\n        message={\n          connectionAlert?.ADD_DATABASE?.message ||\n          t('Want to add a new database?')\n        }\n        description={\n          connectionAlert?.ADD_DATABASE ? (\n            <>\n              {t(\n                'Any databases that allow connections via SQL Alchemy URIs can be added. ',\n              )}\n              <a\n                href={connectionAlert?.ADD_DATABASE.contact_link}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {connectionAlert?.ADD_DATABASE.contact_description_link}\n              </a>{' '}\n              {connectionAlert?.ADD_DATABASE.description}\n            </>\n          ) : (\n            <>\n              {t(\n                'Any databases that allow connections via SQL Alchemy URIs can be added. Learn about how to connect a database driver ',\n              )}\n              <a\n                href={DOCUMENTATION_LINK}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {t('here')}\n              </a>\n              .\n            </>\n          )\n        }\n      />\n    </div>\n  );\n\n  const renderPreferredSelector = () => (\n    <div className=\"preferred\">\n      {availableDbs?.databases\n        ?.filter((db: DatabaseForm) => db.preferred)\n        .map((database: DatabaseForm) => (\n          <IconButton\n            className=\"preferred-item\"\n            onClick={() => setDatabaseModel(database.name)}\n            buttonText={database.name}\n            icon={dbImages?.[database.engine]}\n            key={`${database.name}`}\n          />\n        ))}\n    </div>\n  );\n\n  const handleBackButtonOnFinish = () => {\n    if (dbFetched) {\n      fetchResource(dbFetched.id as number);\n    }\n    setShowCTAbtns(false);\n    setEditNewDb(true);\n  };\n\n  const handleBackButtonOnConnect = () => {\n    if (editNewDb) setHasConnectedDb(false);\n    if (importingModal) setImportingModal(false);\n    if (importErrored) {\n      setImportingModal(false);\n      setImportingErrorMessage('');\n      setPasswordFields([]);\n      setSSHTunnelPasswordFields([]);\n      setSSHTunnelPrivateKeyFields([]);\n      setSSHTunnelPrivateKeyPasswordFields([]);\n      setPasswords({});\n      setSSHTunnelPasswords({});\n      setSSHTunnelPrivateKeys({});\n      setSSHTunnelPrivateKeyPasswords({});\n    }\n    setDB({ type: ActionType.Reset });\n    setFileList([]);\n  };\n\n  const handleDisableOnImport = () => {\n    if (\n      importLoading ||\n      (alreadyExists.length && !confirmedOverwrite) ||\n      (passwordsNeeded.length && JSON.stringify(passwords) === '{}') ||\n      (sshPasswordNeeded.length &&\n        JSON.stringify(sshTunnelPasswords) === '{}') ||\n      (sshPrivateKeyNeeded.length &&\n        JSON.stringify(sshTunnelPrivateKeys) === '{}') ||\n      (sshPrivateKeyPasswordNeeded.length &&\n        JSON.stringify(sshTunnelPrivateKeyPasswords) === '{}')\n    )\n      return true;\n    return false;\n  };\n\n  const renderModalFooter = () => {\n    if (db) {\n      // if db show back + connect\n      if (!hasConnectedDb || editNewDb) {\n        return (\n          <>\n            <StyledFooterButton key=\"back\" onClick={handleBackButtonOnConnect}>\n              {t('Back')}\n            </StyledFooterButton>\n            <StyledFooterButton\n              key=\"submit\"\n              buttonStyle=\"primary\"\n              onClick={onSave}\n              loading={isLoading}\n            >\n              {t('Connect')}\n            </StyledFooterButton>\n          </>\n        );\n      }\n\n      return (\n        <>\n          <StyledFooterButton key=\"back\" onClick={handleBackButtonOnFinish}>\n            {t('Back')}\n          </StyledFooterButton>\n          <StyledFooterButton\n            key=\"submit\"\n            buttonStyle=\"primary\"\n            onClick={onSave}\n            data-test=\"modal-confirm-button\"\n            loading={isLoading}\n          >\n            {t('Finish')}\n          </StyledFooterButton>\n        </>\n      );\n    }\n\n    // Import doesn't use db state, so footer will not render in the if statement above\n    if (importingModal) {\n      return (\n        <>\n          <StyledFooterButton key=\"back\" onClick={handleBackButtonOnConnect}>\n            {t('Back')}\n          </StyledFooterButton>\n          <StyledFooterButton\n            key=\"submit\"\n            buttonStyle=\"primary\"\n            onClick={onSave}\n            disabled={handleDisableOnImport()}\n            loading={isLoading}\n          >\n            {t('Connect')}\n          </StyledFooterButton>\n        </>\n      );\n    }\n\n    return <></>;\n  };\n\n  const renderEditModalFooter = (db: Partial<DatabaseObject> | null) => (\n    <>\n      <StyledFooterButton key=\"close\" onClick={onClose}>\n        {t('Close')}\n      </StyledFooterButton>\n      <StyledFooterButton\n        key=\"submit\"\n        buttonStyle=\"primary\"\n        onClick={onSave}\n        disabled={db?.is_managed_externally}\n        loading={isLoading}\n        tooltip={\n          db?.is_managed_externally\n            ? t(\n                \"This database is managed externally, and can't be edited in Superset\",\n              )\n            : ''\n        }\n      >\n        {t('Finish')}\n      </StyledFooterButton>\n    </>\n  );\n\n  const firstUpdate = useRef(true); // Captures first render\n  // Only runs when importing files don't need user input\n  useEffect(() => {\n    // Will not run on first render\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n\n    if (\n      !importLoading &&\n      !alreadyExists.length &&\n      !passwordsNeeded.length &&\n      !sshPasswordNeeded.length &&\n      !sshPrivateKeyNeeded.length &&\n      !sshPrivateKeyPasswordNeeded.length &&\n      !isLoading && // This prevents a double toast for non-related imports\n      !importErrored // This prevents a success toast on error\n    ) {\n      onClose();\n      addSuccessToast(t('Database connected'));\n    }\n  }, [\n    alreadyExists,\n    passwordsNeeded,\n    importLoading,\n    importErrored,\n    sshPasswordNeeded,\n    sshPrivateKeyNeeded,\n    sshPrivateKeyPasswordNeeded,\n  ]);\n\n  useEffect(() => {\n    if (show) {\n      setTabKey(DEFAULT_TAB_KEY);\n      setLoading(true);\n      getAvailableDbs();\n    }\n    if (databaseId && show) {\n      fetchDB();\n    }\n  }, [show, databaseId]);\n\n  useEffect(() => {\n    if (dbFetched) {\n      setDB({\n        type: ActionType.Fetched,\n        payload: dbFetched,\n      });\n      // keep a copy of the name separate for display purposes\n      // because it shouldn't change when the form is updated\n      setDbName(dbFetched.database_name);\n    }\n  }, [dbFetched]);\n\n  useEffect(() => {\n    if (isLoading) {\n      setLoading(false);\n    }\n\n    if (availableDbs && dbEngine) {\n      // set model if passed into props\n      setDatabaseModel(dbEngine);\n    }\n  }, [availableDbs]);\n\n  // This forces the modal to scroll until the importing filename is in view\n  useEffect(() => {\n    if (importingModal) {\n      document\n        ?.getElementsByClassName('ant-upload-list-item-name')[0]\n        .scrollIntoView();\n    }\n  }, [importingModal]);\n\n  useEffect(() => {\n    setPasswordFields([...passwordsNeeded]);\n  }, [passwordsNeeded]);\n\n  useEffect(() => {\n    setSSHTunnelPasswordFields([...sshPasswordNeeded]);\n  }, [sshPasswordNeeded]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields([...sshPrivateKeyNeeded]);\n  }, [sshPrivateKeyNeeded]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields([...sshPrivateKeyPasswordNeeded]);\n  }, [sshPrivateKeyPasswordNeeded]);\n\n  useEffect(() => {\n    if (db?.parameters?.ssh !== undefined) {\n      setUseSSHTunneling(db.parameters.ssh);\n    }\n  }, [db?.parameters?.ssh]);\n\n  const onDbImport = async (info: UploadChangeParam) => {\n    setImportingErrorMessage('');\n    setPasswordFields([]);\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setPasswords({});\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n    setImportingModal(true);\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n\n    if (!(info.file.originFileObj instanceof File)) return;\n    const dbId = await importResource(\n      info.file.originFileObj,\n      passwords,\n      sshTunnelPasswords,\n      sshTunnelPrivateKeys,\n      sshTunnelPrivateKeyPasswords,\n      confirmedOverwrite,\n    );\n    if (dbId) onDatabaseAdd?.();\n  };\n\n  const passwordNeededField = () => {\n    if (\n      !passwordFields.length &&\n      !sshTunnelPasswordFields.length &&\n      !sshTunnelPrivateKeyFields.length &&\n      !sshTunnelPrivateKeyPasswordFields.length\n    )\n      return null;\n\n    const files = [\n      ...new Set([\n        ...passwordFields,\n        ...sshTunnelPasswordFields,\n        ...sshTunnelPrivateKeyFields,\n        ...sshTunnelPrivateKeyPasswordFields,\n      ]),\n    ];\n\n    return files.map(database => (\n      <>\n        <StyledAlertMargin>\n          <Alert\n            closable={false}\n            css={(theme: SupersetTheme) => antDAlertStyles(theme)}\n            type=\"info\"\n            showIcon\n            message=\"Database passwords\"\n            description={t(\n              `The passwords for the databases below are needed in order to import them. Please note that the \"Secure Extra\" and \"Certificate\" sections of the database configuration are not present in explore files and should be added manually after the import if they are needed.`,\n            )}\n          />\n        </StyledAlertMargin>\n        {passwordFields?.indexOf(database) >= 0 && (\n          <ValidatedInput\n            id=\"password_needed\"\n            name=\"password_needed\"\n            required\n            value={passwords[database]}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              setPasswords({ ...passwords, [database]: event.target.value })\n            }\n            validationMethods={{ onBlur: () => {} }}\n            errorMessage={validationErrors?.password_needed}\n            label={t('%s PASSWORD', database.slice(10))}\n            css={formScrollableStyles}\n          />\n        )}\n        {sshTunnelPasswordFields?.indexOf(database) >= 0 && (\n          <ValidatedInput\n            id=\"ssh_tunnel_password_needed\"\n            name=\"ssh_tunnel_password_needed\"\n            required\n            value={sshTunnelPasswords[database]}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              setSSHTunnelPasswords({\n                ...sshTunnelPasswords,\n                [database]: event.target.value,\n              })\n            }\n            validationMethods={{ onBlur: () => {} }}\n            errorMessage={validationErrors?.ssh_tunnel_password_needed}\n            label={t('%s SSH TUNNEL PASSWORD', database.slice(10))}\n            css={formScrollableStyles}\n          />\n        )}\n        {sshTunnelPrivateKeyFields?.indexOf(database) >= 0 && (\n          <ValidatedInput\n            id=\"ssh_tunnel_private_key_needed\"\n            name=\"ssh_tunnel_private_key_needed\"\n            required\n            value={sshTunnelPrivateKeys[database]}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              setSSHTunnelPrivateKeys({\n                ...sshTunnelPrivateKeys,\n                [database]: event.target.value,\n              })\n            }\n            validationMethods={{ onBlur: () => {} }}\n            errorMessage={validationErrors?.ssh_tunnel_private_key_needed}\n            label={t('%s SSH TUNNEL PRIVATE KEY', database.slice(10))}\n            css={formScrollableStyles}\n          />\n        )}\n        {sshTunnelPrivateKeyPasswordFields?.indexOf(database) >= 0 && (\n          <ValidatedInput\n            id=\"ssh_tunnel_private_key_password_needed\"\n            name=\"ssh_tunnel_private_key_password_needed\"\n            required\n            value={sshTunnelPrivateKeyPasswords[database]}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              setSSHTunnelPrivateKeyPasswords({\n                ...sshTunnelPrivateKeyPasswords,\n                [database]: event.target.value,\n              })\n            }\n            validationMethods={{ onBlur: () => {} }}\n            errorMessage={\n              validationErrors?.ssh_tunnel_private_key_password_needed\n            }\n            label={t('%s SSH TUNNEL PRIVATE KEY PASSWORD', database.slice(10))}\n            css={formScrollableStyles}\n          />\n        )}\n      </>\n    ));\n  };\n\n  const importingErrorAlert = () => {\n    if (!importingErrorMessage) return null;\n\n    return (\n      <StyledAlertMargin>\n        <ErrorAlert\n          errorMessage={importingErrorMessage}\n          showDbInstallInstructions={passwordFields.length > 0}\n        />\n      </StyledAlertMargin>\n    );\n  };\n\n  const confirmOverwrite = (event: ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const confirmOverwriteField = () => {\n    if (!alreadyExists.length) return null;\n\n    return (\n      <>\n        <StyledAlertMargin>\n          <Alert\n            closable={false}\n            css={(theme: SupersetTheme) => antdWarningAlertStyles(theme)}\n            type=\"warning\"\n            showIcon\n            message=\"\"\n            description={t(\n              'You are importing one or more databases that already exist. Overwriting might cause you to lose some of your work. Are you sure you want to overwrite?',\n            )}\n          />\n        </StyledAlertMargin>\n        <ValidatedInput\n          id=\"confirm_overwrite\"\n          name=\"confirm_overwrite\"\n          required\n          validationMethods={{ onBlur: () => {} }}\n          errorMessage={validationErrors?.confirm_overwrite}\n          label={t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          onChange={confirmOverwrite}\n          css={formScrollableStyles}\n        />\n      </>\n    );\n  };\n\n  const tabChange = (key: string) => setTabKey(key);\n\n  const renderStepTwoAlert = () => {\n    const { hostname } = window.location;\n    let ipAlert = connectionAlert?.REGIONAL_IPS?.default || '';\n    const regionalIPs = connectionAlert?.REGIONAL_IPS || {};\n    Object.entries(regionalIPs).forEach(([ipRegion, ipRange]) => {\n      const regex = new RegExp(ipRegion);\n      if (hostname.match(regex)) ipAlert = ipRange;\n    });\n    return (\n      db?.engine && (\n        <StyledAlertMargin>\n          <Alert\n            closable={false}\n            css={(theme: SupersetTheme) => antDAlertStyles(theme)}\n            type=\"info\"\n            showIcon\n            message={\n              engineSpecificAlertMapping[\n                db.engine as keyof typeof engineSpecificAlertMapping\n              ]?.message || connectionAlert?.DEFAULT?.message\n            }\n            description={\n              engineSpecificAlertMapping[\n                db.engine as keyof typeof engineSpecificAlertMapping\n              ]?.description || connectionAlert?.DEFAULT?.description + ipAlert\n            }\n          />\n        </StyledAlertMargin>\n      )\n    );\n  };\n\n  // eslint-disable-next-line consistent-return\n  const errorAlert = () => {\n    let alertErrors: string[] = [];\n    if (!isEmpty(dbErrors)) {\n      alertErrors =\n        typeof dbErrors === 'object'\n          ? Object.values(dbErrors)\n          : typeof dbErrors === 'string'\n            ? [dbErrors]\n            : [];\n    } else if (\n      !isEmpty(validationErrors) &&\n      validationErrors?.error_type === 'GENERIC_DB_ENGINE_ERROR'\n    ) {\n      alertErrors = [\n        validationErrors?.description || validationErrors?.message,\n      ];\n    }\n    if (alertErrors.length) {\n      return (\n        <ErrorAlertContainer>\n          <ErrorMessageWithStackTrace\n            title={t('Database Creation Error')}\n            description={t(\n              'We are unable to connect to your database. Click \"See more\" for database-provided information that may help troubleshoot the issue.',\n            )}\n            descriptionDetails={\n              alertErrors?.[0] || validationErrors?.description\n            }\n          />\n        </ErrorAlertContainer>\n      );\n    }\n    return <></>;\n  };\n\n  const fetchAndSetDB = () => {\n    setLoading(true);\n    fetchResource(dbFetched?.id as number).then(r => {\n      setItem(LocalStorageKeys.Database, r);\n    });\n  };\n\n  const renderSSHTunnelForm = () => (\n    <SSHTunnelForm\n      db={db as DatabaseObject}\n      onSSHTunnelParametersChange={({ target }) => {\n        onChange(ActionType.ParametersSSHTunnelChange, {\n          type: target.type,\n          name: target.name,\n          value: target.value,\n        });\n        handleClearValidationErrors();\n      }}\n      setSSHTunnelLoginMethod={(method: AuthType) =>\n        setDB({\n          type: ActionType.SetSSHTunnelLoginMethod,\n          payload: { login_method: method },\n        })\n      }\n    />\n  );\n\n  const renderCTABtns = () => (\n    <StyledBtns>\n      <Button\n        buttonStyle=\"secondary\"\n        onClick={() => {\n          setLoading(true);\n          fetchAndSetDB();\n          redirectURL('/dataset/add/');\n        }}\n      >\n        {t('CREATE DATASET')}\n      </Button>\n      <Button\n        buttonStyle=\"secondary\"\n        onClick={() => {\n          setLoading(true);\n          fetchAndSetDB();\n          redirectURL(`/sqllab?db=true`);\n        }}\n      >\n        {t('QUERY DATA IN SQL LAB')}\n      </Button>\n    </StyledBtns>\n  );\n\n  const renderDatabaseConnectionForm = () => (\n    <>\n      <DatabaseConnectionForm\n        isEditMode={isEditMode}\n        db={db as DatabaseObject}\n        sslForced={false}\n        dbModel={dbModel}\n        onAddTableCatalog={() => {\n          setDB({ type: ActionType.AddTableCatalogSheet });\n        }}\n        onQueryChange={({ target }: { target: HTMLInputElement }) =>\n          onChange(ActionType.QueryChange, {\n            name: target.name,\n            value: target.value,\n          })\n        }\n        onExtraInputChange={({ target }: { target: HTMLInputElement }) =>\n          onChange(ActionType.ExtraInputChange, {\n            name: target.name,\n            value: target.value,\n          })\n        }\n        onEncryptedExtraInputChange={({\n          target,\n        }: {\n          target: HTMLInputElement;\n        }) =>\n          onChange(ActionType.EncryptedExtraInputChange, {\n            name: target.name,\n            value: target.value,\n          })\n        }\n        onRemoveTableCatalog={(idx: number) => {\n          setDB({\n            type: ActionType.RemoveTableCatalogSheet,\n            payload: { indexToDelete: idx },\n          });\n        }}\n        onParametersChange={handleParametersChange}\n        onChange={({ target }: { target: HTMLInputElement }) =>\n          onChange(ActionType.TextChange, {\n            name: target.name,\n            value: target.value,\n          })\n        }\n        getValidation={() => getValidation(db)}\n        validationErrors={validationErrors}\n        getPlaceholder={getPlaceholder}\n        clearValidationErrors={handleClearValidationErrors}\n      />\n      {useSSHTunneling && (\n        <SSHTunnelContainer>{renderSSHTunnelForm()}</SSHTunnelContainer>\n      )}\n    </>\n  );\n\n  const renderFinishState = () => {\n    if (!editNewDb) {\n      return (\n        <ExtraOptions\n          extraExtension={dbConfigExtraExtension}\n          db={db as DatabaseObject}\n          onInputChange={({ target }: { target: HTMLInputElement }) =>\n            onChange(ActionType.InputChange, {\n              type: target.type,\n              name: target.name,\n              checked: target.checked,\n              value: target.value,\n            })\n          }\n          onTextChange={({ target }: { target: HTMLTextAreaElement }) =>\n            onChange(ActionType.TextChange, {\n              name: target.name,\n              value: target.value,\n            })\n          }\n          onEditorChange={(payload: { name: string; json: any }) =>\n            onChange(ActionType.EditorChange, payload)\n          }\n          onExtraInputChange={({ target }: { target: HTMLInputElement }) => {\n            onChange(ActionType.ExtraInputChange, {\n              type: target.type,\n              name: target.name,\n              checked: target.checked,\n              value: target.value,\n            });\n          }}\n          onExtraEditorChange={(payload: { name: string; json: any }) =>\n            onChange(ActionType.ExtraEditorChange, payload)\n          }\n        />\n      );\n    }\n    return renderDatabaseConnectionForm();\n  };\n\n  if (\n    fileList.length > 0 &&\n    (alreadyExists.length ||\n      passwordFields.length ||\n      sshTunnelPasswordFields.length ||\n      sshTunnelPrivateKeyFields.length ||\n      sshTunnelPrivateKeyPasswordFields.length)\n  ) {\n    return (\n      <Modal\n        centered\n        css={(theme: SupersetTheme) => [\n          antDModalNoPaddingStyles,\n          antDModalStyles(theme),\n          formHelperStyles(theme),\n          formStyles(theme),\n        ]}\n        footer={renderModalFooter()}\n        maskClosable={false}\n        name=\"database\"\n        onHide={onClose}\n        onHandledPrimaryAction={onSave}\n        primaryButtonName={t('Connect')}\n        show={show}\n        title={<h4>{t('Connect a database')}</h4>}\n        width=\"500px\"\n      >\n        <ModalHeader\n          db={db}\n          dbName={dbName}\n          dbModel={dbModel}\n          fileList={fileList}\n          hasConnectedDb={hasConnectedDb}\n          isEditMode={isEditMode}\n          isLoading={isLoading}\n          useSqlAlchemyForm={useSqlAlchemyForm}\n        />\n        {confirmOverwriteField()}\n        {importingErrorAlert()}\n        {passwordNeededField()}\n      </Modal>\n    );\n  }\n  const modalFooter = isEditMode\n    ? renderEditModalFooter(db)\n    : renderModalFooter();\n  return useTabLayout ? (\n    <Modal\n      css={(theme: SupersetTheme) => [\n        antDTabsStyles,\n        antDModalNoPaddingStyles,\n        antDModalStyles(theme),\n        formHelperStyles(theme),\n        formStyles(theme),\n      ]}\n      name=\"database\"\n      data-test=\"database-modal\"\n      onHandledPrimaryAction={onSave}\n      onHide={onClose}\n      primaryButtonName={isEditMode ? t('Save') : t('Connect')}\n      width=\"500px\"\n      centered\n      show={show}\n      title={\n        <h4>\n          {isEditMode ? (\n            <Icons.EditOutlined\n              iconSize=\"l\"\n              css={css`\n                margin: auto ${theme.gridUnit * 2}px auto 0;\n              `}\n            />\n          ) : (\n            <Icons.InsertRowAboveOutlined\n              iconSize=\"l\"\n              css={css`\n                margin: auto ${theme.gridUnit * 2}px auto 0;\n              `}\n            />\n          )}\n          {isEditMode ? t('Edit database') : t('Connect a database')}\n        </h4>\n      }\n      footer={modalFooter}\n      maskClosable={false}\n    >\n      <StyledStickyHeader>\n        <TabHeader>\n          <ModalHeader\n            isLoading={isLoading}\n            isEditMode={isEditMode}\n            useSqlAlchemyForm={useSqlAlchemyForm}\n            hasConnectedDb={hasConnectedDb}\n            db={db}\n            dbName={dbName}\n            dbModel={dbModel}\n          />\n        </TabHeader>\n      </StyledStickyHeader>\n      <TabsStyled\n        defaultActiveKey={DEFAULT_TAB_KEY}\n        activeKey={tabKey}\n        onTabClick={tabChange}\n        animated={{ inkBar: true, tabPane: true }}\n      >\n        <Tabs.TabPane tab={<span>{t('Basic')}</span>} key=\"1\">\n          {useSqlAlchemyForm ? (\n            <StyledAlignment>\n              <SqlAlchemyForm\n                db={db as DatabaseObject}\n                onInputChange={({ target }: { target: HTMLInputElement }) =>\n                  onChange(ActionType.InputChange, {\n                    type: target.type,\n                    name: target.name,\n                    checked: target.checked,\n                    value: target.value,\n                  })\n                }\n                conf={conf}\n                testConnection={testConnection}\n                testInProgress={testInProgress}\n              >\n                <SSHTunnelSwitchComponent\n                  dbModel={dbModel}\n                  db={db as DatabaseObject}\n                  changeMethods={{\n                    onParametersChange: handleParametersChange,\n                  }}\n                  clearValidationErrors={handleClearValidationErrors}\n                />\n                {useSSHTunneling && renderSSHTunnelForm()}\n              </SqlAlchemyForm>\n              {isDynamic(db?.backend || db?.engine) && !isEditMode && (\n                <div css={(theme: SupersetTheme) => infoTooltip(theme)}>\n                  <Button\n                    buttonStyle=\"link\"\n                    onClick={() =>\n                      setDB({\n                        type: ActionType.ConfigMethodChange,\n                        payload: {\n                          database_name: db?.database_name,\n                          configuration_method: ConfigurationMethod.DynamicForm,\n                          engine: db?.engine,\n                        },\n                      })\n                    }\n                    css={theme => alchemyButtonLinkStyles(theme)}\n                  >\n                    {t('Connect this database using the dynamic form instead')}\n                  </Button>\n                  <InfoTooltip\n                    tooltip={t(\n                      'Click this link to switch to an alternate form that exposes only the required fields needed to connect this database.',\n                    )}\n                    viewBox=\"0 -6 24 24\"\n                  />\n                </div>\n              )}\n            </StyledAlignment>\n          ) : (\n            renderDatabaseConnectionForm()\n          )}\n          {!isEditMode && (\n            <StyledAlertMargin>\n              <Alert\n                closable={false}\n                css={(theme: SupersetTheme) => antDAlertStyles(theme)}\n                message={t('Additional fields may be required')}\n                showIcon\n                description={\n                  <>\n                    {t(\n                      'Select databases require additional fields to be completed in the Advanced tab to successfully connect the database. Learn what requirements your databases has ',\n                    )}\n                    <a\n                      href={DOCUMENTATION_LINK}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"additional-fields-alert-description\"\n                    >\n                      {t('here')}\n                    </a>\n                    .\n                  </>\n                }\n                type=\"info\"\n              />\n            </StyledAlertMargin>\n          )}\n          {showDBError && errorAlert()}\n        </Tabs.TabPane>\n        <Tabs.TabPane tab={<span>{t('Advanced')}</span>} key=\"2\">\n          <ExtraOptions\n            extraExtension={dbConfigExtraExtension}\n            db={db as DatabaseObject}\n            onInputChange={({ target }: { target: HTMLInputElement }) =>\n              onChange(ActionType.InputChange, {\n                type: target.type,\n                name: target.name,\n                checked: target.checked,\n                value: target.value,\n              })\n            }\n            onTextChange={({ target }: { target: HTMLTextAreaElement }) =>\n              onChange(ActionType.TextChange, {\n                name: target.name,\n                value: target.value,\n              })\n            }\n            onEditorChange={(payload: { name: string; json: any }) =>\n              onChange(ActionType.EditorChange, payload)\n            }\n            onExtraInputChange={({ target }: { target: HTMLInputElement }) => {\n              onChange(ActionType.ExtraInputChange, {\n                type: target.type,\n                name: target.name,\n                checked: target.checked,\n                value: target.value,\n              });\n            }}\n            onExtraEditorChange={(payload: { name: string; json: any }) => {\n              onChange(ActionType.ExtraEditorChange, payload);\n            }}\n          />\n        </Tabs.TabPane>\n      </TabsStyled>\n    </Modal>\n  ) : (\n    <Modal\n      css={(theme: SupersetTheme) => [\n        antDModalNoPaddingStyles,\n        antDModalStyles(theme),\n        formHelperStyles(theme),\n        formStyles(theme),\n      ]}\n      name=\"database\"\n      onHandledPrimaryAction={onSave}\n      onHide={onClose}\n      primaryButtonName={hasConnectedDb ? t('Finish') : t('Connect')}\n      width=\"500px\"\n      centered\n      show={show}\n      title={\n        <h4>\n          <Icons.InsertRowAboveOutlined\n            iconSize=\"l\"\n            css={css`\n              margin: auto ${theme.gridUnit * 2}px auto 0;\n            `}\n          />\n          {t('Connect a database')}\n        </h4>\n      }\n      footer={renderModalFooter()}\n      maskClosable={false}\n    >\n      {!isLoading && hasConnectedDb ? (\n        <>\n          <ModalHeader\n            isLoading={isLoading}\n            isEditMode={isEditMode}\n            useSqlAlchemyForm={useSqlAlchemyForm}\n            hasConnectedDb={hasConnectedDb}\n            db={db}\n            dbName={dbName}\n            dbModel={dbModel}\n            editNewDb={editNewDb}\n          />\n          {showCTAbtns && renderCTABtns()}\n          {renderFinishState()}\n        </>\n      ) : (\n        <>\n          {/* Dynamic Form Step 1 */}\n          {!isLoading &&\n            (!db ? (\n              <SelectDatabaseStyles>\n                <ModalHeader\n                  isLoading={isLoading}\n                  isEditMode={isEditMode}\n                  useSqlAlchemyForm={useSqlAlchemyForm}\n                  hasConnectedDb={hasConnectedDb}\n                  db={db}\n                  dbName={dbName}\n                  dbModel={dbModel}\n                />\n                {renderPreferredSelector()}\n                {renderAvailableSelector()}\n                <StyledUploadWrapper>\n                  <Upload\n                    name=\"databaseFile\"\n                    id=\"databaseFile\"\n                    data-test=\"database-file-input\"\n                    accept=\".yaml,.json,.yml,.zip\"\n                    customRequest={() => {}}\n                    onChange={onDbImport}\n                    onRemove={removeFile}\n                  >\n                    <Button\n                      data-test=\"import-database-btn\"\n                      buttonStyle=\"link\"\n                      type=\"link\"\n                      css={importDbButtonLinkStyles}\n                    >\n                      {t('Import database from file')}\n                    </Button>\n                  </Upload>\n                </StyledUploadWrapper>\n                {importingErrorAlert()}\n              </SelectDatabaseStyles>\n            ) : (\n              <>\n                <ModalHeader\n                  isLoading={isLoading}\n                  isEditMode={isEditMode}\n                  useSqlAlchemyForm={useSqlAlchemyForm}\n                  hasConnectedDb={hasConnectedDb}\n                  db={db}\n                  dbName={dbName}\n                  dbModel={dbModel}\n                />\n                {hasAlert && renderStepTwoAlert()}\n                {renderDatabaseConnectionForm()}\n                <div css={(theme: SupersetTheme) => infoTooltip(theme)}>\n                  {dbModel.engine !== Engines.GSheet && (\n                    <>\n                      <Button\n                        data-test=\"sqla-connect-btn\"\n                        buttonStyle=\"link\"\n                        onClick={() =>\n                          setDB({\n                            type: ActionType.ConfigMethodChange,\n                            payload: {\n                              engine: db.engine,\n                              configuration_method:\n                                ConfigurationMethod.SqlalchemyUri,\n                              database_name: db.database_name,\n                            },\n                          })\n                        }\n                        css={buttonLinkStyles}\n                      >\n                        {t(\n                          'Connect this database with a SQLAlchemy URI string instead',\n                        )}\n                      </Button>\n                      <InfoTooltip\n                        tooltip={t(\n                          'Click this link to switch to an alternate form that allows you to input the SQLAlchemy URL for this database manually.',\n                        )}\n                        viewBox=\"0 -6 24 24\"\n                      />\n                    </>\n                  )}\n                </div>\n                {/* Step 2 */}\n                {showDBError && errorAlert()}\n              </>\n            ))}\n        </>\n      )}\n      {isLoading && <Loading />}\n    </Modal>\n  );\n};\n\nexport default withToasts(DatabaseModal);\n"],"mappings":"8WAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,CAAC,EACDC,MAAM,EAENC,qBAAqB,EACrBC,GAAG,EACHC,QAAQ,QACH,mBAAmB;AAE1B,SAEEC,SAAS,EACTC,MAAM,EACNC,QAAQ,EACRC,UAAU,EAEVC,WAAW,QAEN,OAAO;AAEd,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,OAAO,EAAEC,gBAAgB,QAAQ,+BAA+B;AAGzE,OAAOC,IAAI,MAAM,qBAAqB;AACtC,SAASC,UAAU,EAAEC,MAAM,QAAQ,gBAAgB;AACnD,OAAOC,KAAK,MAAM,sBAAsB;AACxC,OAAOC,KAAK,MAAM,sBAAsB;AACxC,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,UAAU,QAAQ,2BAA2B;AACtD,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,UAAU,MAAM,yCAAyC;AAChE,OAAOC,cAAc,MAAM,4CAA4C;AACvE,OAAOC,0BAA0B,MAAM,wDAAwD;AAC/F,OAAOC,UAAU,MAAM,uCAAuC;AAC9D,SAASC,KAAK,QAAQ,sBAAsB;AAC5C,SACEC,sBAAsB,EACtBC,qBAAqB,EACrBC,qBAAqB,EACrBC,qBAAqB,EACrBC,iBAAiB,EACjBC,kBAAkB,EAClBC,iBAAiB,QACZ,sBAAsB;AAC7B,SAASC,aAAa,QAAQ,8BAA8B;AAC5D,OAAOC,OAAO,MAAM,wBAAwB;;AAG5C,SAGEC,mBAAmB,EAEnBC,OAAO,QAIF,UAAU;AACjB,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D,SACEC,eAAe,EACfC,sBAAsB,EACtBC,iBAAiB,EACjBC,wBAAwB,EACxBC,eAAe,EACfC,cAAc,EACdC,gBAAgB,EAChBC,wBAAwB,EACxBC,uBAAuB,EACvBC,SAAS,EACTC,gBAAgB,EAChBC,UAAU,EACVC,eAAe,EACfC,oBAAoB,EACpBC,WAAW,EACXC,kBAAkB,EAClBC,kBAAkB,EAClBC,oBAAoB,EACpBC,mBAAmB,QACd,UAAU;AACjB,OAAOC,WAAW,IAAIC,kBAAkB,QAAQ,eAAe;AAC/D,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB,CAAC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA,EAAAC,QAAA,IAAAC,SAAA;AAEhD,MAAMC,kBAAkB,GAAGnE,qBAAqB,EAAE;AAElD,MAAMoE,aAAa,GAAGC,IAAI,CAACC,SAAS,CAAC,EAAEC,4BAA4B,EAAE,IAAI,EAAE,CAAC;AAE5E,MAAMC,0BAA0B,GAAG;EACjC,CAACtC,OAAO,CAACuC,MAAM,GAAG;IAChBC,OAAO,EAAE,qCAAqC;IAC9CC,WAAW,EACT,0EAA0E;IAC1E,0CAA0C;IAC1C,2DAA2D;IAC3D,0DAA0D;IAC1D;;CAEL;AAED,MAAMC,UAAU,GAAG7E,MAAM,CAACY,IAAI,CAAC;;;;;;;;;;CAU9B;AAED,MAAMkE,mBAAmB,GAAG9E,MAAM,CAAC+E,GAAG;IAClC,CAAC,EAAEC,KAAK,EAAE,KAAK;cACLA,KAAK,CAACC,QAAQ,GAAG,CAAC,MAAMD,KAAK,CAACC,QAAQ,GAAG,CAAC;GACrD;CACF;AAED,MAAMC,kBAAkB,GAAGlF,MAAM,CAAC+E,GAAG;IACjC,CAAC,EAAEC,KAAK,EAAE,KAAK;mBACAA,KAAK,CAACC,QAAQ,GAAG,CAAC;GAClC;CACF;AAYD,WAAYE,UAkBX;AAlBD,WAAYA,UAAU;EACpBA,UAAA,CAAAA,UAAA,sDAAoB;EACpBA,UAAA,CAAAA,UAAA,kDAAkB;EAClBA,UAAA,CAAAA,UAAA,kCAAU;EACVA,UAAA,CAAAA,UAAA,sCAAY;EACZA,UAAA,CAAAA,UAAA,gDAAiB;EACjBA,UAAA,CAAAA,UAAA,8CAAgB;EAChBA,UAAA,CAAAA,UAAA,gEAAyB;EACzBA,UAAA,CAAAA,UAAA,4BAAO;EACPA,UAAA,CAAAA,UAAA,oCAAW;EACXA,UAAA,CAAAA,UAAA,8CAAgB;EAChBA,UAAA,CAAAA,UAAA,qCAAW;EACXA,UAAA,CAAAA,UAAA,6DAAuB;EACvBA,UAAA,CAAAA,UAAA,yBAAK;EACLA,UAAA,CAAAA,UAAA,mCAAU;EACVA,UAAA,CAAAA,UAAA,iEAAyB;EACzBA,UAAA,CAAAA,UAAA,6DAAuB;EACvBA,UAAA,CAAAA,UAAA,yDAAqB;AACvB,CAAC,EAlBWA,UAAU,KAAVA,UAAU;AAoBtB,WAAYC,QAGX;AAHD,WAAYA,QAAQ;EAClBA,QAAA,CAAAA,QAAA,8BAAQ;EACRA,QAAA,CAAAA,QAAA,kCAAU;AACZ,CAAC,EAHWA,QAAQ,KAARA,QAAQ;AAsEpB,MAAMC,UAAU,GAAGrF,MAAM,CAAC+E,GAAG;mBACV,CAAC,EAAEC,KAAK,EAAE,KAAKA,KAAK,CAACC,QAAQ,GAAG,CAAC;iBACnC,CAAC,EAAED,KAAK,EAAE,KAAKA,KAAK,CAACC,QAAQ,GAAG,CAAC;CACjD;AAED,OAAM,SAAUK,SAASA,CACvBC,KAAqC,EACrCC,MAA2B,OAAAC,oBAAA,EAAAC,qBAAA,EAAAC,eAAA,EAAAC,qBAAA;EAE3B,MAAMC,YAAY,GAAG;IACnB,IAAIN,KAAK,IAAI,EAAE;GAChB;EACD,IAAIO,KAAK,GAAG,EAAE;EACd,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIC,iBAAiB;EACrB,IAAIC,iBAAiB;EACrB,MAAMC,SAAS,GAAc5B,IAAI,CAAC6B,KAAK,CAACN,YAAY,CAACO,KAAK,IAAI,IAAI,CAAC;EAEnE,QAAQZ,MAAM,CAACa,IAAI;IACjB,KAAKlB,UAAU,CAACmB,iBAAiB;MAC/B;MACA,IAAI;QACF;QACAL,iBAAiB,GAAG3B,IAAI,CAAC6B,KAAK,CAACX,MAAM,CAACe,OAAO,CAACC,IAAI,IAAI,IAAI,CAAC;;MAC3D,OAAOC,CAAC,EAAE;QACVR,iBAAiB,GAAGT,MAAM,CAACe,OAAO,CAACC,IAAI;;MAEzC,OAAO;QACL,GAAGX,YAAY;QACfO,KAAK,EAAE9B,IAAI,CAACC,SAAS,CAAC;UACpB,GAAG2B,SAAS;UACZ,CAACV,MAAM,CAACe,OAAO,CAACG,IAAI,GAAGT;SACxB;OACF;IACH,KAAKd,UAAU,CAACwB,yBAAyB;MACvC,OAAO;QACL,GAAGd,YAAY;QACfe,sBAAsB,EAAEtC,IAAI,CAACC,SAAS,CAAC;UACrC,GAAGD,IAAI,CAAC6B,KAAK,CAACN,YAAY,CAACe,sBAAsB,IAAI,IAAI,CAAC;UAC1D,CAACpB,MAAM,CAACe,OAAO,CAACG,IAAI,GAAGlB,MAAM,CAACe,OAAO,CAACM;SACvC;OACF;IACH,KAAK1B,UAAU,CAAC2B,gBAAgB;MAC9B;MACA,IACEtB,MAAM,CAACe,OAAO,CAACG,IAAI,KAAK,sBAAsB;MAC9ClB,MAAM,CAACe,OAAO,CAACG,IAAI,KAAK,qBAAqB,EAC7C;QACA,OAAO;UACL,GAAGb,YAAY;UACfO,KAAK,EAAE9B,IAAI,CAACC,SAAS,CAAC;YACpB,GAAG2B,SAAS;YACZa,sBAAsB,EAAE;cACtB,IAAGb,SAAS,oBAATA,SAAS,CAAEa,sBAAsB;cACpC,CAACvB,MAAM,CAACe,OAAO,CAACG,IAAI,GAAGlB,MAAM,CAACe,OAAO,CAACM;;WAEzC;SACF;;MAEH,IAAIrB,MAAM,CAACe,OAAO,CAACG,IAAI,KAAK,iCAAiC,EAAE;QAC7D,OAAO;UACL,GAAGb,YAAY;UACfO,KAAK,EAAE9B,IAAI,CAACC,SAAS,CAAC;YACpB,GAAG2B,SAAS;YACZc,+BAA+B,EAAE,CAACxB,MAAM,CAACe,OAAO,CAACM,KAAK,IAAI,EAAE;YACzDI,KAAK,CAAC,GAAG,CAAC;YACVC,MAAM,CAAC,CAAAC,MAAM,KAAIA,MAAM,KAAK,EAAE;WAClC;SACF;;MAEH,IAAI3B,MAAM,CAACe,OAAO,CAACG,IAAI,KAAK,WAAW,EAAE,KAAAU,qBAAA;QACvC,OAAO;UACL,GAAGvB,YAAY;UACfO,KAAK,EAAE9B,IAAI,CAACC,SAAS,CAAC;YACpB,GAAG2B,SAAS;YACZmB,aAAa,EAAE;cACbC,YAAY,EAAE;gBACZ,CAAC9B,MAAM,CAACe,OAAO,CAACG,IAAI,IAAAU,qBAAA,GAAG5B,MAAM,CAACe,OAAO,CAACM,KAAK,qBAApBO,qBAAA,CAAsBG,IAAI;;;WAGtD;SACF;;MAEH,IAAI/B,MAAM,CAACe,OAAO,CAACG,IAAI,KAAK,aAAa,EAAE;QACzC,OAAO;UACL,GAAGb,YAAY;UACfO,KAAK,EAAE9B,IAAI,CAACC,SAAS,CAAC;YACpB,GAAG2B,SAAS;YACZsB,cAAc,EAAE;cACd,IAAGtB,SAAS,oBAATA,SAAS,CAAEsB,cAAc;cAC5B,CAAChC,MAAM,CAACe,OAAO,CAACG,IAAI,GAAG,CAAC,CAAClB,MAAM,CAACe,OAAO,CAACM;;WAE3C;SACF;;MAEH,OAAO;QACL,GAAGhB,YAAY;QACfO,KAAK,EAAE9B,IAAI,CAACC,SAAS,CAAC;UACpB,GAAG2B,SAAS;UACZ,CAACV,MAAM,CAACe,OAAO,CAACG,IAAI,GAClBlB,MAAM,CAACe,OAAO,CAACF,IAAI,KAAK,UAAU;UAC9Bb,MAAM,CAACe,OAAO,CAACkB,OAAO;UACtBjC,MAAM,CAACe,OAAO,CAACM;SACtB;OACF;IACH,KAAK1B,UAAU,CAACuC,WAAW;MACzB,IAAIlC,MAAM,CAACe,OAAO,CAACF,IAAI,KAAK,UAAU,EAAE;QACtC,OAAO;UACL,GAAGR,YAAY;UACf,CAACL,MAAM,CAACe,OAAO,CAACG,IAAI,GAAGlB,MAAM,CAACe,OAAO,CAACkB;SACvC;;MAEH,OAAO;QACL,GAAG5B,YAAY;QACf,CAACL,MAAM,CAACe,OAAO,CAACG,IAAI,GAAGlB,MAAM,CAACe,OAAO,CAACM;OACvC;IACH,KAAK1B,UAAU,CAACwC,gBAAgB;MAC9B;MACA;MACA;MACA,IACE,CAAAlC,oBAAA,GAAAD,MAAM,CAACe,OAAO,CAACF,IAAI,aAAnBZ,oBAAA,CAAqBmC,UAAU,CAAC,SAAS,CAAC;MAC1C/B,YAAY,CAACgC,OAAO,KAAKC,SAAS,EAClC,KAAAC,qBAAA;QACA;QACA,MAAMC,WAAW,GAAoB,CAAC,GAAGnC,YAAY,CAACgC,OAAO,CAAC;QAC9D,MAAMI,GAAG,IAAAF,qBAAA,GAAGvC,MAAM,CAACe,OAAO,CAACF,IAAI,qBAAnB0B,qBAAA,CAAqBd,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAMiB,eAAe,GACnBF,WAAW,CAACG,QAAQ,CAACF,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE;QACtC,IAAIzC,MAAM,CAACe,OAAO,CAACM,KAAK,KAAKiB,SAAS,EAAE;UACtCI,eAAe,CAAC1C,MAAM,CAACe,OAAO,CAACG,IAA2B,CAAC;UACzDlB,MAAM,CAACe,OAAO,CAACM,KAAK;;QAGxB;QACAmB,WAAW,CAACI,MAAM,CAACD,QAAQ,CAACF,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAEC,eAAe,CAAC;QAEzD;QACA;QACAlC,iBAAiB,GAAGgC,WAAW,CAACK,MAAM,CACpC,CAACC,GAAG,EAAEC,IAAmB,KAAI;UAC3B,MAAMV,OAAO,GAAG,EAAE,GAAGS,GAAG,EAAE;UAC1BT,OAAO,CAACU,IAAI,CAAC7B,IAA2B,CAAC,GAAG6B,IAAI,CAAC1B,KAAK;UACtD,OAAOgB,OAAO;QAChB,CAAC,EACD,EAAE,CACH;QAED,OAAO;UACL,GAAGhC,YAAY;UACfgC,OAAO,EAAEG,WAAW;UACpBQ,UAAU,EAAE;YACV,GAAG3C,YAAY,CAAC2C,UAAU;YAC1BX,OAAO,EAAE7B;;SAEZ;;MAEH,OAAO;QACL,GAAGH,YAAY;QACf2C,UAAU,EAAE;UACV,GAAG3C,YAAY,CAAC2C,UAAU;UAC1B,CAAChD,MAAM,CAACe,OAAO,CAACG,IAAI,GAAGlB,MAAM,CAACe,OAAO,CAACM;;OAEzC;IAEH,KAAK1B,UAAU,CAACsD,yBAAyB;MACvC,OAAO;QACL,GAAG5C,YAAY;QACf6C,UAAU,EAAE;UACV,GAAG7C,YAAY,CAAC6C,UAAU;UAC1B,CAAClD,MAAM,CAACe,OAAO,CAACG,IAAI,GAAGlB,MAAM,CAACe,OAAO,CAACM;;OAEzC;IACH,KAAK1B,UAAU,CAACwD,uBAAuB,CAAE;QACvC,IAAID,UAAU,GAAG,EAAE;QACnB,IAAI7C,YAAY,YAAZA,YAAY,CAAE6C,UAAU,EAAE;UAC5B;UACAA,UAAU,GAAGE,KAAA,CAAK/C,YAAY,CAAC6C,UAAU,EAAE;UACzC,IAAI;UACJ,gBAAgB;UAChB,aAAa;UACb,UAAU;UACX,CAAC;;QAEJ,IAAIlD,MAAM,CAACe,OAAO,CAACsC,YAAY,KAAKzD,QAAQ,CAAC0D,UAAU,EAAE,KAAAC,qBAAA,EAAAC,sBAAA;UACvD,OAAO;YACL,GAAGnD,YAAY;YACf6C,UAAU,EAAE;cACVO,WAAW,EAAEpD,YAAY,qBAAAkD,qBAAA,GAAZlD,YAAY,CAAE6C,UAAU,qBAAxBK,qBAAA,CAA0BE,WAAW;cAClDC,oBAAoB,EAClBrD,YAAY,qBAAAmD,sBAAA,GAAZnD,YAAY,CAAE6C,UAAU,qBAAxBM,sBAAA,CAA0BE,oBAAoB;cAChD,GAAGR;;WAEN;;QAEH,IAAIlD,MAAM,CAACe,OAAO,CAACsC,YAAY,KAAKzD,QAAQ,CAAC+D,QAAQ,EAAE,KAAAC,sBAAA;UACrD,OAAO;YACL,GAAGvD,YAAY;YACf6C,UAAU,EAAE;cACVW,QAAQ,EAAExD,YAAY,qBAAAuD,sBAAA,GAAZvD,YAAY,CAAE6C,UAAU,qBAAxBU,sBAAA,CAA0BC,QAAQ;cAC5C,GAAGX;;WAEN;;QAEH,OAAO;UACL,GAAG7C;SACJ;;IAEH,KAAKV,UAAU,CAACmE,qBAAqB;MACnC,OAAO;QACL,GAAGzD,YAAY;QACf6C,UAAU,EAAEZ;OACb;IACH,KAAK3C,UAAU,CAACoE,oBAAoB;MAClC,IAAI1D,YAAY,CAACgC,OAAO,KAAKC,SAAS,EAAE;QACtC,OAAO;UACL,GAAGjC,YAAY;UACfgC,OAAO,EAAE,CAAC,GAAGhC,YAAY,CAACgC,OAAO,EAAE,EAAEnB,IAAI,EAAE,EAAE,EAAEG,KAAK,EAAE,EAAE,EAAE;SAC3D;;MAEH,OAAO;QACL,GAAGhB,YAAY;QACfgC,OAAO,EAAE,CAAC,EAAEnB,IAAI,EAAE,EAAE,EAAEG,KAAK,EAAE,EAAE,EAAE;OAClC;IACH,KAAK1B,UAAU,CAACqE,uBAAuB;MACrC,CAAA9D,qBAAA,GAAAG,YAAY,CAACgC,OAAO,qBAApBnC,qBAAA,CAAsB0C,MAAM,CAAC5C,MAAM,CAACe,OAAO,CAACkD,aAAa,EAAE,CAAC,CAAC;MAC7D,OAAO;QACL,GAAG5D;OACJ;IACH,KAAKV,UAAU,CAACuE,YAAY;MAC1B,OAAO;QACL,GAAG7D,YAAY;QACf,CAACL,MAAM,CAACe,OAAO,CAACG,IAAI,GAAGlB,MAAM,CAACe,OAAO,CAACC;OACvC;IACH,KAAKrB,UAAU,CAACwE,WAAW;MACzB,OAAO;QACL,GAAG9D,YAAY;QACf2C,UAAU,EAAE;UACV,GAAG3C,YAAY,CAAC2C,UAAU;UAC1B1C,KAAK,EAAE8D,MAAM,CAACC,WAAW,CAAC,IAAIC,eAAe,CAACtE,MAAM,CAACe,OAAO,CAACM,KAAK,CAAC;SACpE;QACDd,WAAW,EAAEP,MAAM,CAACe,OAAO,CAACM;OAC7B;IACH,KAAK1B,UAAU,CAAC4E,UAAU;MACxB,OAAO;QACL,GAAGlE,YAAY;QACf,CAACL,MAAM,CAACe,OAAO,CAACG,IAAI,GAAGlB,MAAM,CAACe,OAAO,CAACM;OACvC;IACH,KAAK1B,UAAU,CAAC6E,OAAO;MACrB;MACAlE,KAAK,GAAG,EAAAH,eAAA,GAAAH,MAAM,CAACe,OAAO,sBAAAX,qBAAA,GAAdD,eAAA,CAAgB6C,UAAU,qBAA1B5C,qBAAA,CAA4BE,KAAK,KAAI,EAAE;MAC/CC,WAAW,GAAG6D,MAAM,CAACK,OAAO,CAACnE,KAAK,CAAC;MAChCoE,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEtD,KAAK,CAAC,KAAK,GAAGsD,GAAG,IAAItD,KAAK,EAAE,CAAC;MACxCuD,IAAI,CAAC,GAAG,CAAC;MAEZ,IACE5E,MAAM,CAACe,OAAO,CAACK,sBAAsB;MACrCpB,MAAM,CAACe,OAAO,CAAC8D,oBAAoB,KAAKnI,mBAAmB,CAACoI,WAAW,EACvE,KAAAC,qBAAA;QACA;QACA,MAAMC,gBAAgB,GAAc;UAClC,GAAGlG,IAAI,CAAC6B,KAAK,CAAEX,MAAM,CAACe,OAAO,CAACH,KAAgB,IAAI,IAAI;SACvD;QAED,MAAMqE,cAAc,IAAAF,qBAAA,GAAGC,gBAAgB,CAACnD,aAAa,qBAA9BkD,qBAAA,CAAgC1C,OAAO;QAE9D,MAAM6C,iBAAiB,GAAGd,MAAM,CAACK,OAAO,CAACQ,cAAc,IAAI,EAAE,CAAC,CAACP,GAAG,CAChE,CAAC,CAACxD,IAAI,EAAEG,KAAK,CAAW,MAAM,EAAEH,IAAI,EAAEG,KAAK,EAAE,CAAC,CAC/C;QAED,OAAO;UACL,GAAGrB,MAAM,CAACe,OAAO;UACjBoE,MAAM,EAAEnF,MAAM,CAACe,OAAO,CAACqE,OAAO,IAAI/E,YAAY,CAAC8E,MAAM;UACrDN,oBAAoB,EAAE7E,MAAM,CAACe,OAAO,CAAC8D,oBAAoB;UACzDxC,OAAO,EAAE6C,iBAAiB;UAC1BlC,UAAU,EAAE;YACV,IAAIhD,MAAM,CAACe,OAAO,CAACiC,UAAU,IAAI3C,YAAY,CAAC2C,UAAU,CAAC;YACzDX,OAAO,EAAE4C;WACV;UACD1E;SACD;;MAEH,OAAO;QACL,GAAGP,MAAM,CAACe,OAAO;QACjBK,sBAAsB,EAAEpB,MAAM,CAACe,OAAO,CAACK,sBAAsB,IAAI,EAAE;QACnE+D,MAAM,EAAEnF,MAAM,CAACe,OAAO,CAACqE,OAAO,IAAI/E,YAAY,CAAC8E,MAAM;QACrDN,oBAAoB,EAAE7E,MAAM,CAACe,OAAO,CAAC8D,oBAAoB;QACzD7B,UAAU,EAAEhD,MAAM,CAACe,OAAO,CAACiC,UAAU,IAAI3C,YAAY,CAAC2C,UAAU;QAChEE,UAAU,EAAElD,MAAM,CAACe,OAAO,CAACmC,UAAU,IAAI7C,YAAY,CAAC6C,UAAU;QAChE3C;OACD;IAEH,KAAKZ,UAAU,CAAC0F,UAAU;MACxB;MACA,OAAO;QACL,GAAGrF,MAAM,CAACe,OAAO;QACjBH,KAAK,EAAE/B,aAAa;QACpByG,gBAAgB,EAAE;OACnB;IACH,KAAK3F,UAAU,CAAC4F,kBAAkB;MAChC,OAAO;QACL,GAAGvF,MAAM,CAACe;OACX;IAEH,KAAKpB,UAAU,CAAC6F,KAAK;IACrB;MACE,OAAO,IAAI;;AAEjB;AAEA,MAAMC,eAAe,GAAG,GAAG;AAE3B,MAAMC,aAAa,GAA0CA,CAAC,EAC5DC,cAAc,EACdC,eAAe,EACfC,aAAa,EACbC,MAAM,EACNC,IAAI,EACJC,UAAU,EACVC,QAAQ,EACT,KAAI,KAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,eAAA;EACH,MAAM7G,KAAK,GAAG7E,QAAQ,EAAE;EACxB,MAAM,CAAC2L,EAAE,EAAEC,KAAK,CAAC,GAAGxL,UAAU,CAE5B+E,SAAS,EAAE,IAAI,CAAC;EAClB;EACA,MAAM,EACJC,KAAK,EAAE,EAAEyG,OAAO,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,KAAK,EAAEC,QAAQ,EAAE,EACnEC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,UAAU,EACX,GAAG/K,qBAAqB,CACvB,UAAU,EACV3B,CAAC,CAAC,UAAU,CAAC,EACboL,cAAc,EACd,YAAY,CACb;EAED,MAAM,CAACuB,MAAM,EAAEC,SAAS,CAAC,GAAGrM,QAAQ,CAAS2K,eAAe,CAAC;EAC7D,MAAM,CAAC2B,YAAY,EAAEC,eAAe,CAAC,GAAGlL,qBAAqB,EAAE;EAC/D,MAAM,CAACmL,gBAAgB,EAAEC,aAAa,EAAEC,mBAAmB,CAAC,GAC1DpL,qBAAqB,EAAE;EACzB,MAAM,CAACqL,cAAc,EAAEC,iBAAiB,CAAC,GAAG5M,QAAQ,CAAU,KAAK,CAAC;EACpE,MAAM,CAAC6M,WAAW,EAAEC,cAAc,CAAC,GAAG9M,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC+M,MAAM,EAAEC,SAAS,CAAC,GAAGhN,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACiN,SAAS,EAAEC,YAAY,CAAC,GAAGlN,QAAQ,CAAU,KAAK,CAAC;EAC1D,MAAM,CAACmN,SAAS,EAAEC,UAAU,CAAC,GAAGpN,QAAQ,CAAU,KAAK,CAAC;EACxD,MAAM,CAACqN,cAAc,EAAEC,iBAAiB,CAAC,GAAGtN,QAAQ,CAAU,KAAK,CAAC;EACpE,MAAM,CAACuN,SAAS,EAAEC,YAAY,CAAC,GAAGxN,QAAQ,CAAyB,EAAE,CAAC;EACtE,MAAM,CAACyN,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG1N,QAAQ,CAE1D,EAAE,CAAC;EACL,MAAM,CAAC2N,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG5N,QAAQ,CAE9D,EAAE,CAAC;EACL,MAAM,CAAC6N,4BAA4B,EAAEC,+BAA+B,CAAC,GACnE9N,QAAQ,CAAyB,EAAE,CAAC;EACtC,MAAM,CAAC+N,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGhO,QAAQ,CAAU,KAAK,CAAC;EAC5E,MAAM,CAACiO,QAAQ,EAAEC,WAAW,CAAC,GAAGlO,QAAQ,CAAe,EAAE,CAAC;EAC1D,MAAM,CAACmO,cAAc,EAAEC,iBAAiB,CAAC,GAAGpO,QAAQ,CAAU,KAAK,CAAC;EACpE,MAAM,CAACqO,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGtO,QAAQ,EAAU;EAC5E,MAAM,CAACuO,cAAc,EAAEC,iBAAiB,CAAC,GAAGxO,QAAQ,CAAW,EAAE,CAAC;EAClE,MAAM,CAACyO,uBAAuB,EAAEC,0BAA0B,CAAC,GAAG1O,QAAQ,CAEpE,EAAE,CAAC;EACL,MAAM,CAAC2O,yBAAyB,EAAEC,4BAA4B,CAAC,GAAG5O,QAAQ,CAExE,EAAE,CAAC;EACL,MAAM,CACJ6O,iCAAiC,EACjCC,oCAAoC,CACrC,GAAG9O,QAAQ,CAAW,EAAE,CAAC;EAC1B,MAAM,CAAC+O,4BAA4B,EAAEC,+BAA+B,CAAC,GACnEhP,QAAQ,CAAS,EAAE,CAAC;EAEtB,MAAMiP,wBAAwB,IAAA7D,qBAAA,GAC5BtH,kBAAkB,CAACoL,GAAG,CAAC,wBAAwB,CAAC,YAAA9D,qBAAA,GAAI7H,eAAe;EAErE,MAAM,CAAC4L,eAAe,EAAEC,kBAAkB,CAAC,GAAGpP,QAAQ,CACpDwH,SAAS,CACV;EAED,IAAI6H,sBAAsB,GAAGvL,kBAAkB,CAACoL,GAAG,CACjD,gCAAgC,CACjC;EAED,IAAIG,sBAAsB,EAAE;IAC1B;IACAA,sBAAsB,GAAG;MACvB,GAAGA,sBAAsB;MACzBC,MAAM,EAAEA,CAAAC,cAAc,KAAG;QACvBP,+BAA+B,CAAC;UAC9B,GAAGD,4BAA4B;UAC/B,GAAGQ;SACJ,CAAC;MACJ;KACD;;EAGH,MAAMC,IAAI,GAAG9N,aAAa,EAAE;EAC5B,MAAM+N,QAAQ,GAAGlO,iBAAiB,EAAE;EACpC,MAAMmO,eAAe,GAAGlO,kBAAkB,EAAE;EAC5C,MAAMmO,UAAU,GAAG,CAAC,CAACzE,UAAU;EAC/B,MAAM0E,QAAQ,GACZF,eAAe;EACf,CAAC,EACClE,EAAE,YAAFA,EAAE,CAAEnB,MAAM;EACVlG,0BAA0B,CACxBqH,EAAE,CAACnB,MAAiD,CACrD,CACF;EACH,MAAMwF,iBAAiB,GACrB,CAAArE,EAAE,oBAAFA,EAAE,CAAEzB,oBAAoB,MAAKnI,mBAAmB,CAACkO,aAAa;EAChE,MAAMC,YAAY,GAAGJ,UAAU,IAAIE,iBAAiB;EACpD,MAAMG,SAAS,GAAGA,CAAC3F,MAA0B,UAAA4F,qBAAA,EAAAC,sBAAA,QAC3C,CAAA5D,YAAY,qBAAA2D,qBAAA,GAAZ3D,YAAY,CAAE6D,SAAS,sBAAAD,sBAAA,GAAvBD,qBAAA,CAAyBG,IAAI,CAC3B,CAACC,EAAkB,KAAKA,EAAE,CAAC/F,OAAO,KAAKD,MAAM,IAAIgG,EAAE,CAAChG,MAAM,KAAKA,MAAM,CACtE,qBAFD6F,sBAAA,CAEGhI,UAAU,MAAKV,SAAS;EAC7B,MAAM8I,WAAW,GAAG9D,gBAAgB,IAAIT,QAAQ;EAChD,MAAMwE,OAAO,GAAGpQ,UAAU,EAAE;EAE5B,MAAMqQ,OAAO;EACX;EAEA;EACA,CAAAlE,YAAY,qBAAAjB,sBAAA,GAAZiB,YAAY,CAAE6D,SAAS,qBAAvB9E,sBAAA,CAAyB+E,IAAI,CAC3B,CAACK,SAGA,KACCA,SAAS,CAACpG,MAAM,MAAMsF,UAAU,GAAGnE,EAAE,oBAAFA,EAAE,CAAElB,OAAO,GAAGkB,EAAE,oBAAFA,EAAE,CAAEnB,MAAM,CAAC;EAC5DoG,SAAS,CAACC,cAAc,MAAKlF,EAAE,oBAAFA,EAAE,CAAEmF,MAAM,EAC1C;EACD;EACArE,YAAY,qBAAAhB,sBAAA,GAAZgB,YAAY,CAAE6D,SAAS,qBAAvB7E,sBAAA,CAAyB8E,IAAI,CAC3B,CAACK,SAAyC,KACxCA,SAAS,CAACpG,MAAM,MAAMsF,UAAU,GAAGnE,EAAE,oBAAFA,EAAE,CAAElB,OAAO,GAAGkB,EAAE,oBAAFA,EAAE,CAAEnB,MAAM,CAAC,CAC/D;EACD,EAAE;EAEJ;EACA,MAAMuG,cAAc,GAAGA,CAAA,KAAK,KAAAC,iBAAA;IAC1B,IAAI,EAACrF,EAAE,YAAFA,EAAE,CAAEsF,cAAc,GAAE;MACvBjG,cAAc,CAACpL,CAAC,CAAC,uCAAuC,CAAC,CAAC;MAC1D;;IAGF,MAAMsR,UAAU,GAAG;MACjBD,cAAc,EAAE,CAAAtF,EAAE,oBAAFA,EAAE,CAAEsF,cAAc,KAAI,EAAE;MACxCE,aAAa,EAAE,CAAAxF,EAAE,qBAAAqF,iBAAA,GAAFrF,EAAE,CAAEwF,aAAa,qBAAjBH,iBAAA,CAAmB5J,IAAI,EAAE,KAAIO,SAAS;MACrDyJ,gBAAgB,EAAE,CAAAzF,EAAE,oBAAFA,EAAE,CAAEyF,gBAAgB,KAAIzJ,SAAS;MACnD1B,KAAK,EAAE0F,EAAE,oBAAFA,EAAE,CAAE1F,KAAK;MAChBQ,sBAAsB,EAAE,CAAAkF,EAAE,oBAAFA,EAAE,CAAElF,sBAAsB,KAAI,EAAE;MACxD4K,WAAW,EAAE,CAAA1F,EAAE,oBAAFA,EAAE,CAAE0F,WAAW,KAAI1J,SAAS;MACzCY,UAAU,EACR,CAAC+I,QAAA,CAAQ3F,EAAE,oBAAFA,EAAE,CAAEpD,UAAU,CAAC,IAAI+G,eAAe;MACvC;QACE,GAAG3D,EAAE,CAACpD,UAAU;QAChBgJ,WAAW,EAAEC,MAAM,CAAC7F,EAAE,CAACpD,UAAW,CAACgJ,WAAW;OAC/C;MACD5J;KACP;IACD8F,iBAAiB,CAAC,IAAI,CAAC;IACvBnM,sBAAsB,CACpB4P,UAAU,EACV,CAACO,QAAgB,KAAI;MACnBhE,iBAAiB,CAAC,KAAK,CAAC;MACxBzC,cAAc,CAACyG,QAAQ,CAAC;IAC1B,CAAC,EACD,CAACA,QAAgB,KAAI;MACnBhE,iBAAiB,CAAC,KAAK,CAAC;MACxBxC,eAAe,CAACwG,QAAQ,CAAC;IAC3B,CAAC,CACF;EACH,CAAC;EAED,MAAMC,cAAc,GAAGA,CAACC,KAAa,KAAI;IACvC,IAAIA,KAAK,KAAK,UAAU,EAAE;MACxB,OAAO/R,CAAC,CAAC,uBAAuB,CAAC;;IAEnC,OAAO+H,SAAS;EAClB,CAAC;EAED,MAAMiK,UAAU,GAAGA,CAACC,WAAuB,KAAI;IAC7CxD,WAAW,CAACD,QAAQ,CAACrH,MAAM,CAAC,CAAA+K,IAAI,KAAIA,IAAI,CAACC,GAAG,KAAKF,WAAW,CAACE,GAAG,CAAC,CAAC;IAClE,OAAO,KAAK;EACd,CAAC;EAED,MAAMC,QAAQ,GAAG3R,WAAW,CAC1B,CACE6F,IAAiC,EACjCE,OAA8C,KAC5C;IACFwF,KAAK,CAAC,EAAE1F,IAAI,EAAEE,OAAO,EAAyB,CAAC;EACjD,CAAC,EACD,EAAE,CACH;EAED,MAAM6L,2BAA2B,GAAG5R,WAAW,CAAC,MAAK;IACnDwM,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC,EAAE,CAACA,mBAAmB,CAAC,CAAC;EAEzB,MAAMqF,sBAAsB,GAAG7R,WAAW,CACxC,CAAC,EAAE8R,MAAM,EAAgC,KAAI;IAC3CH,QAAQ,CAAChN,UAAU,CAACwC,gBAAgB,EAAE;MACpCtB,IAAI,EAAEiM,MAAM,CAACjM,IAAI;MACjBK,IAAI,EAAE4L,MAAM,CAAC5L,IAAI;MACjBe,OAAO,EAAE6K,MAAM,CAAC7K,OAAO;MACvBZ,KAAK,EAAEyL,MAAM,CAACzL;KACf,CAAC;EACJ,CAAC,EACD,CAACsL,QAAQ,CAAC,CACX;EAED,MAAMI,OAAO,GAAGA,CAAA,KAAK;IACnBxG,KAAK,CAAC,EAAE1F,IAAI,EAAElB,UAAU,CAAC6F,KAAK,EAAE,CAAC;IACjCkC,iBAAiB,CAAC,KAAK,CAAC;IACxBkF,2BAA2B,EAAE,CAAC,CAAC;IAC/B3F,UAAU,EAAE;IACZe,YAAY,CAAC,KAAK,CAAC;IACnBgB,WAAW,CAAC,EAAE,CAAC;IACfE,iBAAiB,CAAC,KAAK,CAAC;IACxBE,wBAAwB,CAAC,EAAE,CAAC;IAC5BE,iBAAiB,CAAC,EAAE,CAAC;IACrBE,0BAA0B,CAAC,EAAE,CAAC;IAC9BE,4BAA4B,CAAC,EAAE,CAAC;IAChCE,oCAAoC,CAAC,EAAE,CAAC;IACxCtB,YAAY,CAAC,EAAE,CAAC;IAChBE,qBAAqB,CAAC,EAAE,CAAC;IACzBE,uBAAuB,CAAC,EAAE,CAAC;IAC3BE,+BAA+B,CAAC,EAAE,CAAC;IACnCE,qBAAqB,CAAC,KAAK,CAAC;IAC5BoB,kBAAkB,CAAC5H,SAAS,CAAC;IAC7BwD,MAAM,EAAE;EACV,CAAC;EAED,MAAMkH,WAAW,GAAGA,CAACC,GAAW,KAAI;IAClC5B,OAAO,CAAC6B,IAAI,CAACD,GAAG,CAAC;EACnB,CAAC;EAED;EACA,MAAM,EACJlN,KAAK,EAAE,EACLoN,aAAa,EACbC,eAAe,EACfC,iBAAiB,EACjBC,mBAAmB,EACnBC,2BAA2B,EAC3B/G,OAAO,EAAEgH,aAAa,EACtBC,MAAM,EAAEC,aAAa,EACtB,EACDC,cAAc,EACf,GAAGpR,iBAAiB,CAAC,UAAU,EAAEhC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAAqT,GAAG,KAAG;IACrDxE,wBAAwB,CAACwE,GAAG,CAAC;EAC/B,CAAC,CAAC;EAEF,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAW,KAAAC,qBAAA,EAAAC,sBAAA;IACxB,IAAIC,iCAAiC;IAErC9F,UAAU,CAAC,IAAI,CAAC;IAEhB,CAAA4F,qBAAA,GAAA3D,sBAAsB,qBAAtB2D,qBAAA;IACID,MAAM,CAAChE,4BAA4B,EAAEvD,EAAE,CAAC;IACzC2H,IAAI,CAAC,CAAC,EAAErH,KAAK,EAAkB,KAAI;MAClC,IAAIA,KAAK,EAAE;QACToH,iCAAiC,GAAGpH,KAAK;QACzCjB,cAAc,CAACiB,KAAK,CAAC;;IAEzB,CAAC,CAAC;IAEJ,IAAIoH,iCAAiC,EAAE;MACrC9F,UAAU,CAAC,KAAK,CAAC;MACjB;;IAEF;IACA,MAAMgG,UAAU,GAAG,EAAE,IAAI5H,EAAE,IAAI,EAAE,CAAC,EAAE;IAEpC,IAAI4H,UAAU,CAACrJ,oBAAoB,KAAKnI,mBAAmB,CAACoI,WAAW,EAAE,KAAAqJ,qBAAA,EAAAC,sBAAA;MACvE;MACA,IAAIF,UAAU,aAAAC,qBAAA,GAAVD,UAAU,CAAElL,UAAU,aAAtBmL,qBAAA,CAAwB9L,OAAO,EAAE;QACnC;QACA6L,UAAU,CAACtN,KAAK,GAAG9B,IAAI,CAACC,SAAS,CAAC;UAChC,GAAGD,IAAI,CAAC6B,KAAK,CAACuN,UAAU,CAACtN,KAAK,IAAI,IAAI,CAAC;UACvCiB,aAAa,EAAE;YACbQ,OAAO,EAAE6L,UAAU,CAAClL,UAAU,CAACX;;SAElC,CAAC;;MAGJ,MAAMgM,MAAM,GAAG,MAAM9G,aAAa,CAAC2G,UAAU,EAAE,IAAI,CAAC;MACpD,IAAI,CAACjC,QAAA,CAAQ3E,gBAAgB,CAAC,IAAI+G,MAAM,YAANA,MAAM,CAAEC,MAAM,EAAE;QAChD3I,cAAc,CACZpL,CAAC,CAAC,2DAA2D,CAAC,CAC/D;QACD2N,UAAU,CAAC,KAAK,CAAC;QACjB;;MAGF,MAAMqG,iBAAiB,GAAG9D,UAAU,IAAA2D,sBAAA;MAChCF,UAAU,CAACK,iBAAiB,qBAA5BH,sBAAA,CAA8BI,UAAU;MACxClD,OAAO,oBAAPA,OAAO,CAAEtI,UAAU,CAACwL,UAAU;MAClC,MAAMC,wBAAwB,GAAG3P,IAAI,CAAC6B,KAAK,CACzCuN,UAAU,CAAC9M,sBAAsB,IAAI,IAAI,CAC1C;MACD,MAAMsN,gBAAgB,GAAGtK,MAAM,CAACuK,IAAI,CAACJ,iBAAiB,IAAI,EAAE,CAAC;MAE7DG,gBAAgB,CAACE,OAAO,CAAC,CAAAC,WAAW,KAAG,KAAAC,sBAAA;QACrC;;;;;QAKA,IACEP,iBAAiB,CAACM,WAAW,CAAC,CAAC,mBAAmB,CAAC,KAAAC,sBAAA;QACnDZ,UAAU,CAAClL,UAAU,aAArB8L,sBAAA,CAAwBD,WAAuC,CAAC,EAChE,KAAAE,sBAAA;UACA,IACE,SAAAA,sBAAA,GAAOb,UAAU,CAAClL,UAAU,qBAArB+L,sBAAA,CACLF,WAAuC,CACxC,MAAK,QAAQ,EACd,KAAAG,sBAAA;YACA;YACAP,wBAAwB,CAACI,WAAW,CAAC,IAAAG,sBAAA;YACnCd,UAAU,CAAClL,UAAU,qBAArBgM,sBAAA,CAAwBH,WAAuC,CAAC;YAClE;YACA;YACAX,UAAU,CAAClL,UAAU,CACnB6L,WAA0D,CAC3D,GAAG/P,IAAI,CAACC,SAAS,CAChBmP,UAAU,CAAClL,UAAU,CAAC6L,WAAuC,CAAC,CAC/D;WACF;UAAM,KAAAI,sBAAA;YACLR,wBAAwB,CAACI,WAAW,CAAC,GAAG/P,IAAI,CAAC6B,KAAK,CAChD,EAAAsO,sBAAA,GAAAf,UAAU,CAAClL,UAAU,qBAArBiM,sBAAA,CACEJ,WAA0D,CAC3D,KAAI,IAAI,CACV;;;MAGP,CAAC,CAAC;MACF;MACAX,UAAU,CAAC9M,sBAAsB,GAAGtC,IAAI,CAACC,SAAS,CAChD0P,wBAAwB,CACzB;MACD;MACA,IAAIP,UAAU,CAAC/I,MAAM,KAAKxI,OAAO,CAACuC,MAAM,EAAE;QACxCgP,UAAU,CAACnC,gBAAgB,GAAG,IAAI;;;IAItC,IAAImC,UAAU,aAAAH,sBAAA,GAAVG,UAAU,CAAElL,UAAU,aAAtB+K,sBAAA,CAAwB1L,OAAO,EAAE;MACnC;MACA6L,UAAU,CAACtN,KAAK,GAAG9B,IAAI,CAACC,SAAS,CAAC;QAChC,GAAGD,IAAI,CAAC6B,KAAK,CAACuN,UAAU,CAACtN,KAAK,IAAI,IAAI,CAAC;QACvCiB,aAAa,EAAE;UACbQ,OAAO,EAAE6L,UAAU,CAAClL,UAAU,CAACX;;OAElC,CAAC;;IAGJ;IACA,IAAI4H,eAAe,KAAK,KAAK,EAAE;MAC7B;MACAiE,UAAU,CAAChL,UAAU,GAAG,IAAI;;IAG9B,IAAIoD,EAAE,YAAFA,EAAE,CAAE4I,EAAE,EAAE;MACV,MAAMC,MAAM,GAAG,MAAMnI,cAAc,CACjCV,EAAE,CAAC4I,EAAY,EACfhB,UAA4B,EAC5BA,UAAU,CAACrJ,oBAAoB,KAAKnI,mBAAmB,CAACoI,WAAW,CACpE;MACD,IAAIqK,MAAM,EAAE,KAAAC,sBAAA;QACV,IAAIvJ,aAAa;QAAEA,aAAa,EAAE;QAClC,CAAAuJ,sBAAA,GAAAjF,sBAAsB,qBAAtBiF,sBAAA;QACIvB,MAAM,CAAChE,4BAA4B,EAAEvD,EAAE,CAAC;QACzC2H,IAAI,CAAC,CAAC,EAAErH,KAAK,EAAkB,KAAI;UAClC,IAAIA,KAAK,EAAE;YACToH,iCAAiC,GAAGpH,KAAK;YACzCjB,cAAc,CAACiB,KAAK,CAAC;;QAEzB,CAAC,CAAC;QACJ,IAAIoH,iCAAiC,EAAE;UACrC9F,UAAU,CAAC,KAAK,CAAC;UACjB;;QAEF,IAAI,CAACH,SAAS,EAAE;UACdgF,OAAO,EAAE;UACTnH,eAAe,CAACrL,CAAC,CAAC,2BAA2B,CAAC,CAAC;;;KAGpD;IAAM,IAAI+L,EAAE,EAAE;MACb;MACA,MAAM+I,IAAI,GAAG,MAAMtI,cAAc,CAC/BmH,UAA4B,EAC5BA,UAAU,CAACrJ,oBAAoB,KAAKnI,mBAAmB,CAACoI,WAAW,CACpE;MACD,IAAIuK,IAAI,EAAE,KAAAC,sBAAA;QACR5H,iBAAiB,CAAC,IAAI,CAAC;QACvB,IAAI7B,aAAa;QAAEA,aAAa,EAAE;QAClC,CAAAyJ,sBAAA,GAAAnF,sBAAsB,qBAAtBmF,sBAAA;QACIzB,MAAM,CAAChE,4BAA4B,EAAEvD,EAAE,CAAC;QACzC2H,IAAI,CAAC,CAAC,EAAErH,KAAK,EAAkB,KAAI;UAClC,IAAIA,KAAK,EAAE;YACToH,iCAAiC,GAAGpH,KAAK;YACzCjB,cAAc,CAACiB,KAAK,CAAC;;QAEzB,CAAC,CAAC;QACJ,IAAIoH,iCAAiC,EAAE;UACrC9F,UAAU,CAAC,KAAK,CAAC;UACjB;;QAGF,IAAI2C,YAAY,EAAE;UAChB;UACA;UACAkC,OAAO,EAAE;UACTnH,eAAe,CAACrL,CAAC,CAAC,oBAAoB,CAAC,CAAC;;;KAG7C;IAAM;MACL;MACA2O,iBAAiB,CAAC,IAAI,CAAC;MAEvB,IAAI,EAAEH,QAAQ,CAAC,CAAC,CAAC,CAACwG,aAAa,YAAYC,IAAI,CAAC,EAAE;QAChD;;MAGF,MAAMH,IAAI,GAAG,MAAM1B,cAAc,CAC/B5E,QAAQ,CAAC,CAAC,CAAC,CAACwG,aAAa,EACzBlH,SAAS,EACTE,kBAAkB,EAClBE,oBAAoB,EACpBE,4BAA4B,EAC5BE,kBAAkB,CACnB;MACD,IAAIwG,IAAI,EAAE;QACR,IAAIxJ,aAAa;QAAEA,aAAa,EAAE;QAClCkH,OAAO,EAAE;QACTnH,eAAe,CAACrL,CAAC,CAAC,oBAAoB,CAAC,CAAC;;;IAI5CqN,cAAc,CAAC,IAAI,CAAC;IACpBI,YAAY,CAAC,KAAK,CAAC;IACnBE,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED;EACA,MAAMuH,OAAO,GAAGA,CAAA,KAAK;IACnB,IAAIhF,UAAU,IAAIzE,UAAU,EAAE;MAC5B,IAAI,CAACS,SAAS,EAAE;QACdK,aAAa,CAACd,UAAU,CAAC,CAAC0J,KAAK,CAAC,CAAAzO,CAAC,KAC/B0E,cAAc,CACZpL,CAAC,CACC,4DAA4D,EAC5D0G,CAAC,CAAC9B,OAAO,CACV,CACF,CACF;;;EAGP,CAAC;EAED,MAAMwQ,gBAAgB,GAAGA,CAAC7D,aAAqB,KAAI;IACjD,IAAIA,aAAa,KAAK,OAAO,EAAE;MAC7B;MACAvF,KAAK,CAAC;QACJ1F,IAAI,EAAElB,UAAU,CAAC0F,UAAU;QAC3BtE,OAAO,EAAE;UACP+K,aAAa;UACbjH,oBAAoB,EAAEnI,mBAAmB,CAACkO,aAAa;UACvDzF,MAAM,EAAE7C,SAAS;UACjBsN,kBAAkB,EAAE;YAClBC,oBAAoB,EAAE;;;OAG3B,CAAC;KACH;IAAM;MACL,MAAMC,eAAe,GAAG1I,YAAY,oBAAZA,YAAY,CAAE6D,SAAS,CAACvJ,MAAM,CACpD,CAAC4E,EAAkB,KAAKA,EAAE,CAACpF,IAAI,KAAK4K,aAAa,CAClD,CAAC,CAAC,CAAC;MACJ,MAAM,EACJ3G,MAAM,EACNnC,UAAU,EACV4M,kBAAkB,EAClBpE,cAAc,EACduE,0BAA0B,EAC3B,GAAGD,eAAe;MACnB,MAAMhF,SAAS,GAAG9H,UAAU,KAAKV,SAAS;MAC1CiE,KAAK,CAAC;QACJ1F,IAAI,EAAElB,UAAU,CAAC0F,UAAU;QAC3BtE,OAAO,EAAE;UACP+K,aAAa;UACb3G,MAAM;UACNN,oBAAoB,EAAEiG,SAAS;UAC3BpO,mBAAmB,CAACoI,WAAW;UAC/BpI,mBAAmB,CAACkO,aAAa;UACrCgF,kBAAkB;UAClBnE,MAAM,EAAED,cAAc;UACtBuE;;OAEH,CAAC;MAEF,IAAI5K,MAAM,KAAKxI,OAAO,CAACuC,MAAM,EAAE;QAC7B;QACAqH,KAAK,CAAC,EAAE1F,IAAI,EAAElB,UAAU,CAACoE,oBAAoB,EAAE,CAAC;;;EAGtD,CAAC;EAED,MAAMiM,uBAAuB,GAAGA,CAAA,UAAAC,IAAA,EAAAC,qBAAA,QAC9BzR,KAAA,UAAK0R,SAAS,EAAC,WAAW,EAAAC,QAAA;MACxB7R,IAAA,SAAI4R,SAAS,EAAC,iBAAiB,EAAAC,QAAA;QAC5B7V,CAAC,CAAC,sDAAsD,CAAC;MACxD,CACJ;MAAAgE,IAAA,UAAK4R,SAAS,EAAC,eAAe,EAAAC,QAAA,EAAE7V,CAAC,CAAC,qBAAqB,CAAC,EAAM,CAC9D;MAAAkE,KAAA,CAACpD,UAAU,IACT8U,SAAS,EAAC,kBAAkB,EAC5BxD,QAAQ,EAAEgD,gBAAiB,EAC3BU,WAAW,EAAE9V,CAAC,CAAC,sBAAsB,CAAE,EACvC+V,UAAU,QAAAF,QAAA,IAAAH,IAAA;QAET,CAAC,IAAI,CAAA7I,YAAY,oBAAZA,YAAY,CAAE6D,SAAS,KAAI,EAAE,CAAC,CAAC,qBAApCgF,IAAA;QACGM,IAAI,CAAC,CAACC,CAAe,EAAEC,CAAe,KACtCD,CAAC,CAACtP,IAAI,CAACwP,aAAa,CAACD,CAAC,CAACvP,IAAI,CAAC,CAC7B;QACAwD,GAAG,CAAC,CAACiM,QAAsB,EAAEC,KAAa,KACzCrS,IAAA,CAAClD,UAAU,CAACwV,MAAM,IAACxP,KAAK,EAAEsP,QAAQ,CAACzP,IAAK,EAAAkP,QAAA;UACrCO,QAAQ,CAACzP,IAAI,IAD8B,YAAY0P,KAAK;QAE5C,CACpB,CAAC;;QAEJrS,IAAA,CAAClD,UAAU,CAACwV,MAAM,IAACxP,KAAK,EAAC,OAAO,EAAA+O,QAAA;UAC7B7V,CAAC,CAAC,OAAO,CAAC,IADwB;QAElB,CACrB;MAAY,CACZ;MAAAgE,IAAA,CAAChD,KAAK,IACJuV,QAAQ,QACRC,QAAQ,EAAE,KAAM,EAChBrW,GAAG,EAAEA,CAAC8E,KAAoB,KAAKzC,eAAe,CAACyC,KAAK,CAAE,EACtDqB,IAAI,EAAC,MAAM,EACX1B,OAAO,EACL,CAAAqL,eAAe,qBAAA0F,qBAAA,GAAf1F,eAAe,CAAEwG,YAAY,qBAA7Bd,qBAAA,CAA+B/Q,OAAO;QACtC5E,CAAC,CAAC,6BAA6B,CAChC,EACD6E,WAAW,EACToL,eAAe,YAAfA,eAAe,CAAEwG,YAAY,GAC3BvS,KAAA,CAAAE,SAAA,IAAAyR,QAAA;UACG7V,CAAC,CACA,0EAA0E,CAC3E;UACDgE,IAAA,QACE0S,IAAI,EAAEzG,eAAe,oBAAfA,eAAe,CAAEwG,YAAY,CAACE,YAAa,EACjDpE,MAAM,EAAC,QAAQ,EACfqE,GAAG,EAAC,qBAAqB,EAAAf,QAAA;YAExB5F,eAAe,oBAAfA,eAAe,CAAEwG,YAAY,CAACI,wBAAwB;UACtD,CAAC,EAAC,GAAG;UACP5G,eAAe,oBAAfA,eAAe,CAAEwG,YAAY,CAAC5R,WAAW;QAC5C,CAAG,GAEHX,KAAA,CAAAE,SAAA,IAAAyR,QAAA;UACG7V,CAAC,CACA,uHAAuH,CACxH;UACDgE,IAAA,QACE0S,IAAI,EAAE9S,kBAAmB,EACzB2O,MAAM,EAAC,QAAQ,EACfqE,GAAG,EAAC,qBAAqB,EAAAf,QAAA;YAExB7V,CAAC,CAAC,MAAM,CAAC;UACT,CACH,KACF;;QAAA,CAEH,GAEL;IAAK,CAAC,EACP;EAED,MAAM8W,uBAAuB,GAAGA,CAAA,UAAAC,sBAAA,QAC9B/S,IAAA,UAAK4R,SAAS,EAAC,WAAW,EAAAC,QAAA;MACvBhJ,YAAY,qBAAAkK,sBAAA,GAAZlK,YAAY,CAAE6D,SAAS,qBAAvBqG,sBAAA;MACG5P,MAAM,CAAC,CAAC4E,EAAgB,KAAKA,EAAE,CAACiL,SAAS,CAAC;MAC3C7M,GAAG,CAAC,CAACiM,QAAsB,KAC1BpS,IAAA,CAAC7C,UAAU,IACTyU,SAAS,EAAC,gBAAgB,EAC1BqB,OAAO,EAAEA,CAAA,KAAM7B,gBAAgB,CAACgB,QAAQ,CAACzP,IAAI,CAAE,EAC/CuQ,UAAU,EAAEd,QAAQ,CAACzP,IAAK,EAC1BwQ,IAAI,EAAEnH,QAAQ,oBAARA,QAAQ,CAAGoG,QAAQ,CAACxL,MAAM,CAAE,IAC7B,GAAGwL,QAAQ,CAACzP,IAAI,EAAG,CAE3B,CAAC;IACD,CAAC,EACP;EAED,MAAMyQ,wBAAwB,GAAGA,CAAA,KAAK;IACpC,IAAIhL,SAAS,EAAE;MACbG,aAAa,CAACH,SAAS,CAACuI,EAAY,CAAC;;IAEvCtH,cAAc,CAAC,KAAK,CAAC;IACrBI,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAM4J,yBAAyB,GAAGA,CAAA,KAAK;IACrC,IAAI7J,SAAS;IAAEL,iBAAiB,CAAC,KAAK,CAAC;IACvC,IAAIuB,cAAc;IAAEC,iBAAiB,CAAC,KAAK,CAAC;IAC5C,IAAIwE,aAAa,EAAE;MACjBxE,iBAAiB,CAAC,KAAK,CAAC;MACxBE,wBAAwB,CAAC,EAAE,CAAC;MAC5BE,iBAAiB,CAAC,EAAE,CAAC;MACrBE,0BAA0B,CAAC,EAAE,CAAC;MAC9BE,4BAA4B,CAAC,EAAE,CAAC;MAChCE,oCAAoC,CAAC,EAAE,CAAC;MACxCtB,YAAY,CAAC,EAAE,CAAC;MAChBE,qBAAqB,CAAC,EAAE,CAAC;MACzBE,uBAAuB,CAAC,EAAE,CAAC;MAC3BE,+BAA+B,CAAC,EAAE,CAAC;;IAErCrC,KAAK,CAAC,EAAE1F,IAAI,EAAElB,UAAU,CAAC6F,KAAK,EAAE,CAAC;IACjCwD,WAAW,CAAC,EAAE,CAAC;EACjB,CAAC;EAED,MAAM6I,qBAAqB,GAAGA,CAAA,KAAK;IACjC,IACErE,aAAa;IACZL,aAAa,CAACmB,MAAM,IAAI,CAACzF,kBAAmB;IAC5CuE,eAAe,CAACkB,MAAM,IAAIxP,IAAI,CAACC,SAAS,CAACsJ,SAAS,CAAC,KAAK,IAAK;IAC7DgF,iBAAiB,CAACiB,MAAM;IACvBxP,IAAI,CAACC,SAAS,CAACwJ,kBAAkB,CAAC,KAAK,IAAK;IAC7C+E,mBAAmB,CAACgB,MAAM;IACzBxP,IAAI,CAACC,SAAS,CAAC0J,oBAAoB,CAAC,KAAK,IAAK;IAC/C8E,2BAA2B,CAACe,MAAM;IACjCxP,IAAI,CAACC,SAAS,CAAC4J,4BAA4B,CAAC,KAAK,IAAK;IAExD,OAAO,IAAI;IACb,OAAO,KAAK;EACd,CAAC;EAED,MAAMmJ,iBAAiB,GAAGA,CAAA,KAAK;IAC7B,IAAIxL,EAAE,EAAE;MACN;MACA,IAAI,CAACmB,cAAc,IAAIM,SAAS,EAAE;QAChC,OACEtJ,KAAA,CAAAE,SAAA,IAAAyR,QAAA;UACE7R,IAAA,CAACT,kBAAkB,IAAY0T,OAAO,EAAEI,yBAA0B,EAAAxB,QAAA;YAC/D7V,CAAC,CAAC,MAAM,CAAC,IADY;UAEJ,CACpB;UAAAgE,IAAA,CAACT,kBAAkB,IAEjBiU,WAAW,EAAC,SAAS,EACrBP,OAAO,EAAE3D,MAAO,EAChBrH,OAAO,EAAEyB,SAAU,EAAAmI,QAAA;YAElB7V,CAAC,CAAC,SAAS,CAAC,IALT;UAMc,CACtB;QAAA,CAAG;;MAIP,OACEkE,KAAA,CAAAE,SAAA,IAAAyR,QAAA;QACE7R,IAAA,CAACT,kBAAkB,IAAY0T,OAAO,EAAEG,wBAAyB,EAAAvB,QAAA;UAC9D7V,CAAC,CAAC,MAAM,CAAC,IADY;QAEJ,CACpB;QAAAgE,IAAA,CAACT,kBAAkB,IAEjBiU,WAAW,EAAC,SAAS,EACrBP,OAAO,EAAE3D,MAAO,EAChB,aAAU,sBAAsB,EAChCrH,OAAO,EAAEyB,SAAU,EAAAmI,QAAA;UAElB7V,CAAC,CAAC,QAAQ,CAAC,IANR;QAOc,CACtB;MAAA,CAAG;;IAIP;IACA,IAAI0O,cAAc,EAAE;MAClB,OACExK,KAAA,CAAAE,SAAA,IAAAyR,QAAA;QACE7R,IAAA,CAACT,kBAAkB,IAAY0T,OAAO,EAAEI,yBAA0B,EAAAxB,QAAA;UAC/D7V,CAAC,CAAC,MAAM,CAAC,IADY;QAEJ,CACpB;QAAAgE,IAAA,CAACT,kBAAkB,IAEjBiU,WAAW,EAAC,SAAS,EACrBP,OAAO,EAAE3D,MAAO,EAChBmE,QAAQ,EAAEH,qBAAqB,EAAG,EAClCrL,OAAO,EAAEyB,SAAU,EAAAmI,QAAA;UAElB7V,CAAC,CAAC,SAAS,CAAC,IANT;QAOc,CACtB;MAAA,CAAG;;IAIP,OAAOgE,IAAA,CAAAI,SAAA,IAAE,CAAG;EACd,CAAC;EAED,MAAMsT,qBAAqB,GAAGA,CAAC3L,EAAkC,KAC/D7H,KAAA,CAAAE,SAAA,IAAAyR,QAAA;IACE7R,IAAA,CAACT,kBAAkB,IAAa0T,OAAO,EAAEzE,OAAQ,EAAAqD,QAAA;MAC9C7V,CAAC,CAAC,OAAO,CAAC,IADW;IAEJ,CACpB;IAAAgE,IAAA,CAACT,kBAAkB,IAEjBiU,WAAW,EAAC,SAAS,EACrBP,OAAO,EAAE3D,MAAO,EAChBmE,QAAQ,EAAE1L,EAAE,oBAAFA,EAAE,CAAE4L,qBAAsB,EACpC1L,OAAO,EAAEyB,SAAU,EACnBkK,OAAO,EACL7L,EAAE,YAAFA,EAAE,CAAE4L,qBAAqB;MACrB3X,CAAC,CACC,sEAAsE,CACvE;MACD,EACL,EAAA6V,QAAA;MAEA7V,CAAC,CAAC,QAAQ,CAAC,IAbR;IAcc,CACtB;EAAA,CACD;EAED,MAAM6X,WAAW,GAAGvX,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAClC;EACAD,SAAS,CAAC,MAAK;IACb;IACA,IAAIwX,WAAW,CAACC,OAAO,EAAE;MACvBD,WAAW,CAACC,OAAO,GAAG,KAAK;MAC3B;;IAGF,IACE,CAAC7E,aAAa;IACd,CAACL,aAAa,CAACmB,MAAM;IACrB,CAAClB,eAAe,CAACkB,MAAM;IACvB,CAACjB,iBAAiB,CAACiB,MAAM;IACzB,CAAChB,mBAAmB,CAACgB,MAAM;IAC3B,CAACf,2BAA2B,CAACe,MAAM;IACnC,CAACrG,SAAS,IAAI;IACd,CAACyF,aAAa,CAAC;IAAA,EACf;MACAX,OAAO,EAAE;MACTnH,eAAe,CAACrL,CAAC,CAAC,oBAAoB,CAAC,CAAC;;EAE5C,CAAC,EAAE;EACD4S,aAAa;EACbC,eAAe;EACfI,aAAa;EACbE,aAAa;EACbL,iBAAiB;EACjBC,mBAAmB;EACnBC,2BAA2B;EAC5B,CAAC;EAEF3S,SAAS,CAAC,MAAK;IACb,IAAImL,IAAI,EAAE;MACRoB,SAAS,CAAC1B,eAAe,CAAC;MAC1ByC,UAAU,CAAC,IAAI,CAAC;MAChBb,eAAe,EAAE;;IAEnB,IAAIrB,UAAU,IAAID,IAAI,EAAE;MACtB0J,OAAO,EAAE;;EAEb,CAAC,EAAE,CAAC1J,IAAI,EAAEC,UAAU,CAAC,CAAC;EAEtBpL,SAAS,CAAC,MAAK;IACb,IAAI+L,SAAS,EAAE;MACbJ,KAAK,CAAC;QACJ1F,IAAI,EAAElB,UAAU,CAAC6E,OAAO;QACxBzD,OAAO,EAAE4F;OACV,CAAC;MACF;MACA;MACAmB,SAAS,CAACnB,SAAS,CAACmF,aAAa,CAAC;;EAEtC,CAAC,EAAE,CAACnF,SAAS,CAAC,CAAC;EAEf/L,SAAS,CAAC,MAAK;IACb,IAAIqN,SAAS,EAAE;MACbC,UAAU,CAAC,KAAK,CAAC;;IAGnB,IAAId,YAAY,IAAInB,QAAQ,EAAE;MAC5B;MACA0J,gBAAgB,CAAC1J,QAAQ,CAAC;;EAE9B,CAAC,EAAE,CAACmB,YAAY,CAAC,CAAC;EAElB;EACAxM,SAAS,CAAC,MAAK;IACb,IAAIqO,cAAc,EAAE,KAAAqJ,SAAA;MAClB,CAAAA,SAAA,GAAAC,QAAQ,qBAARD,SAAA;MACIE,sBAAsB,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC;MACvDC,cAAc,EAAE;;EAEvB,CAAC,EAAE,CAACxJ,cAAc,CAAC,CAAC;EAEpBrO,SAAS,CAAC,MAAK;IACb0O,iBAAiB,CAAC,CAAC,GAAG8D,eAAe,CAAC,CAAC;EACzC,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EAErBxS,SAAS,CAAC,MAAK;IACb4O,0BAA0B,CAAC,CAAC,GAAG6D,iBAAiB,CAAC,CAAC;EACpD,CAAC,EAAE,CAACA,iBAAiB,CAAC,CAAC;EAEvBzS,SAAS,CAAC,MAAK;IACb8O,4BAA4B,CAAC,CAAC,GAAG4D,mBAAmB,CAAC,CAAC;EACxD,CAAC,EAAE,CAACA,mBAAmB,CAAC,CAAC;EAEzB1S,SAAS,CAAC,MAAK;IACbgP,oCAAoC,CAAC,CAAC,GAAG2D,2BAA2B,CAAC,CAAC;EACxE,CAAC,EAAE,CAACA,2BAA2B,CAAC,CAAC;EAEjC3S,SAAS,CAAC,MAAK,KAAA8X,cAAA;IACb,IAAI,CAAApM,EAAE,qBAAAoM,cAAA,GAAFpM,EAAE,CAAEtD,UAAU,qBAAd0P,cAAA,CAAgBC,GAAG,MAAKrQ,SAAS,EAAE;MACrC4H,kBAAkB,CAAC5D,EAAE,CAACtD,UAAU,CAAC2P,GAAG,CAAC;;EAEzC,CAAC,EAAE,CAACrM,EAAE,qBAAAD,eAAA,GAAFC,EAAE,CAAEtD,UAAU,qBAAdqD,eAAA,CAAgBsM,GAAG,CAAC,CAAC;EAEzB,MAAMC,UAAU,GAAG,MAAAA,CAAOC,IAAuB,KAAI;IACnDzJ,wBAAwB,CAAC,EAAE,CAAC;IAC5BE,iBAAiB,CAAC,EAAE,CAAC;IACrBE,0BAA0B,CAAC,EAAE,CAAC;IAC9BE,4BAA4B,CAAC,EAAE,CAAC;IAChCE,oCAAoC,CAAC,EAAE,CAAC;IACxCtB,YAAY,CAAC,EAAE,CAAC;IAChBE,qBAAqB,CAAC,EAAE,CAAC;IACzBE,uBAAuB,CAAC,EAAE,CAAC;IAC3BE,+BAA+B,CAAC,EAAE,CAAC;IACnCM,iBAAiB,CAAC,IAAI,CAAC;IACvBF,WAAW,CAAC;IACV;MACE,GAAG6J,IAAI,CAACpG,IAAI;MACZqG,MAAM,EAAE;KACT;IACF,CAAC;IAEF,IAAI,EAAED,IAAI,CAACpG,IAAI,CAAC8C,aAAa,YAAYC,IAAI,CAAC;IAAE;IAChD,MAAMH,IAAI,GAAG,MAAM1B,cAAc,CAC/BkF,IAAI,CAACpG,IAAI,CAAC8C,aAAa,EACvBlH,SAAS,EACTE,kBAAkB,EAClBE,oBAAoB,EACpBE,4BAA4B,EAC5BE,kBAAkB,CACnB;IACD,IAAIwG,IAAI;IAAExJ,aAAa,oBAAbA,aAAa,CAAE,CAAE;EAC7B,CAAC;EAED,MAAMkN,mBAAmB,GAAGA,CAAA,KAAK;IAC/B,IACE,CAAC1J,cAAc,CAACiF,MAAM;IACtB,CAAC/E,uBAAuB,CAAC+E,MAAM;IAC/B,CAAC7E,yBAAyB,CAAC6E,MAAM;IACjC,CAAC3E,iCAAiC,CAAC2E,MAAM;IAEzC,OAAO,IAAI;IAEb,MAAM0E,KAAK,GAAG;IACZ,GAAG,IAAIC,GAAG,CAAC;IACT,GAAG5J,cAAc;IACjB,GAAGE,uBAAuB;IAC1B,GAAGE,yBAAyB;IAC5B,GAAGE,iCAAiC;IACrC,CAAC,CACH;;IAED,OAAOqJ,KAAK,CAACtO,GAAG,CAAC,CAAAiM,QAAQ,KACvBlS,KAAA,CAAAE,SAAA,IAAAyR,QAAA;MACE7R,IAAA,CAACtB,iBAAiB,IAAAmT,QAAA;QAChB7R,IAAA,CAAChD,KAAK,IACJwV,QAAQ,EAAE,KAAM,EAChBrW,GAAG,EAAEA,CAAC8E,KAAoB,KAAKzC,eAAe,CAACyC,KAAK,CAAE,EACtDqB,IAAI,EAAC,MAAM,EACXiQ,QAAQ,QACR3R,OAAO,EAAC,oBAAoB,EAC5BC,WAAW,EAAE7E,CAAC,CACZ,2QAA2Q,CAC3Q,GAEN;MAAmB,CACnB;MAAC,CAAA8O,cAAc,oBAAdA,cAAc,CAAE6J,OAAO,CAACvC,QAAQ,CAAC,KAAI,CAAC,IACrCpS,IAAA,CAAC1C,cAAc,IACbqT,EAAE,EAAC,iBAAiB,EACpBhO,IAAI,EAAC,iBAAiB,EACtBiS,QAAQ,QACR9R,KAAK,EAAEgH,SAAS,CAACsI,QAAQ,CAAE,EAC3BhE,QAAQ,EAAEA,CAACyG,KAAoC,KAC7C9K,YAAY,CAAC,EAAE,GAAGD,SAAS,EAAE,CAACsI,QAAQ,GAAGyC,KAAK,CAACtG,MAAM,CAACzL,KAAK,EAAE,CAC9D,EACDgS,iBAAiB,EAAE,EAAEC,MAAM,EAAEA,CAAA,KAAK,CAAE,CAAC,EAAG,EACxCC,YAAY,EAAEjM,gBAAgB,oBAAhBA,gBAAgB,CAAEkM,eAAgB,EAChDC,KAAK,EAAElZ,CAAC,CAAC,aAAa,EAAEoW,QAAQ,CAAC+C,KAAK,CAAC,EAAE,CAAC,CAAE,EAC5ChZ,GAAG,EAAEsD,oBAAqB,GAE7B;MACA,CAAAuL,uBAAuB,oBAAvBA,uBAAuB,CAAE2J,OAAO,CAACvC,QAAQ,CAAC,KAAI,CAAC,IAC9CpS,IAAA,CAAC1C,cAAc,IACbqT,EAAE,EAAC,4BAA4B,EAC/BhO,IAAI,EAAC,4BAA4B,EACjCiS,QAAQ,QACR9R,KAAK,EAAEkH,kBAAkB,CAACoI,QAAQ,CAAE,EACpChE,QAAQ,EAAEA,CAACyG,KAAoC,KAC7C5K,qBAAqB,CAAC;UACpB,GAAGD,kBAAkB;UACrB,CAACoI,QAAQ,GAAGyC,KAAK,CAACtG,MAAM,CAACzL;SAC1B,CACF,EACDgS,iBAAiB,EAAE,EAAEC,MAAM,EAAEA,CAAA,KAAK,CAAE,CAAC,EAAG,EACxCC,YAAY,EAAEjM,gBAAgB,oBAAhBA,gBAAgB,CAAEqM,0BAA2B,EAC3DF,KAAK,EAAElZ,CAAC,CAAC,wBAAwB,EAAEoW,QAAQ,CAAC+C,KAAK,CAAC,EAAE,CAAC,CAAE,EACvDhZ,GAAG,EAAEsD,oBAAqB,GAE7B;MACA,CAAAyL,yBAAyB,oBAAzBA,yBAAyB,CAAEyJ,OAAO,CAACvC,QAAQ,CAAC,KAAI,CAAC,IAChDpS,IAAA,CAAC1C,cAAc,IACbqT,EAAE,EAAC,+BAA+B,EAClChO,IAAI,EAAC,+BAA+B,EACpCiS,QAAQ,QACR9R,KAAK,EAAEoH,oBAAoB,CAACkI,QAAQ,CAAE,EACtChE,QAAQ,EAAEA,CAACyG,KAAoC,KAC7C1K,uBAAuB,CAAC;UACtB,GAAGD,oBAAoB;UACvB,CAACkI,QAAQ,GAAGyC,KAAK,CAACtG,MAAM,CAACzL;SAC1B,CACF,EACDgS,iBAAiB,EAAE,EAAEC,MAAM,EAAEA,CAAA,KAAK,CAAE,CAAC,EAAG,EACxCC,YAAY,EAAEjM,gBAAgB,oBAAhBA,gBAAgB,CAAEsM,6BAA8B,EAC9DH,KAAK,EAAElZ,CAAC,CAAC,2BAA2B,EAAEoW,QAAQ,CAAC+C,KAAK,CAAC,EAAE,CAAC,CAAE,EAC1DhZ,GAAG,EAAEsD,oBAAqB,GAE7B;MACA,CAAA2L,iCAAiC,oBAAjCA,iCAAiC,CAAEuJ,OAAO,CAACvC,QAAQ,CAAC,KAAI,CAAC,IACxDpS,IAAA,CAAC1C,cAAc,IACbqT,EAAE,EAAC,wCAAwC,EAC3ChO,IAAI,EAAC,wCAAwC,EAC7CiS,QAAQ,QACR9R,KAAK,EAAEsH,4BAA4B,CAACgI,QAAQ,CAAE,EAC9ChE,QAAQ,EAAEA,CAACyG,KAAoC,KAC7CxK,+BAA+B,CAAC;UAC9B,GAAGD,4BAA4B;UAC/B,CAACgI,QAAQ,GAAGyC,KAAK,CAACtG,MAAM,CAACzL;SAC1B,CACF,EACDgS,iBAAiB,EAAE,EAAEC,MAAM,EAAEA,CAAA,KAAK,CAAE,CAAC,EAAG,EACxCC,YAAY,EACVjM,gBAAgB,oBAAhBA,gBAAgB,CAAEuM,sCACnB,EACDJ,KAAK,EAAElZ,CAAC,CAAC,oCAAoC,EAAEoW,QAAQ,CAAC+C,KAAK,CAAC,EAAE,CAAC,CAAE,EACnEhZ,GAAG,EAAEsD,oBAAqB,GAE7B;IACH,CACD,CAAC;EACJ,CAAC;EAED,MAAM8V,mBAAmB,GAAGA,CAAA,KAAK;IAC/B,IAAI,CAAC3K,qBAAqB;IAAE,OAAO,IAAI;IAEvC,OACE5K,IAAA,CAACtB,iBAAiB,IAAAmT,QAAA;MAChB7R,IAAA,CAACxC,UAAU,IACTwX,YAAY,EAAEpK,qBAAsB,EACpC4K,yBAAyB,EAAE1K,cAAc,CAACiF,MAAM,GAAG,CAAE,GAEzD;IAAmB,CAAC;EAExB,CAAC;EAED,MAAM0F,gBAAgB,GAAGA,CAACZ,KAAoC,KAAI,KAAAa,qBAAA,EAAAC,oBAAA;IAChE,MAAMC,WAAW,IAAAF,qBAAA,IAAAC,oBAAA,GAAId,KAAK,CAACgB,aAAa,qBAAnBF,oBAAA,CAAqB7S,KAAgB,YAAA4S,qBAAA,GAAI,EAAE;IAChEnL,qBAAqB,CAACqL,WAAW,CAACE,WAAW,EAAE,KAAK9Z,CAAC,CAAC,WAAW,CAAC,CAAC;EACrE,CAAC;EAED,MAAM+Z,qBAAqB,GAAGA,CAAA,KAAK;IACjC,IAAI,CAACnH,aAAa,CAACmB,MAAM;IAAE,OAAO,IAAI;IAEtC,OACE7P,KAAA,CAAAE,SAAA,IAAAyR,QAAA;MACE7R,IAAA,CAACtB,iBAAiB,IAAAmT,QAAA;QAChB7R,IAAA,CAAChD,KAAK,IACJwV,QAAQ,EAAE,KAAM,EAChBrW,GAAG,EAAEA,CAAC8E,KAAoB,KAAKxC,sBAAsB,CAACwC,KAAK,CAAE,EAC7DqB,IAAI,EAAC,SAAS,EACdiQ,QAAQ,QACR3R,OAAO,EAAC,EAAE,EACVC,WAAW,EAAE7E,CAAC,CACZ,wJAAwJ,CACxJ,GAEN;MAAmB,CACnB;MAAAgE,IAAA,CAAC1C,cAAc,IACbqT,EAAE,EAAC,mBAAmB,EACtBhO,IAAI,EAAC,mBAAmB,EACxBiS,QAAQ,QACRE,iBAAiB,EAAE,EAAEC,MAAM,EAAEA,CAAA,KAAK,CAAE,CAAC,EAAG,EACxCC,YAAY,EAAEjM,gBAAgB,oBAAhBA,gBAAgB,CAAEiN,iBAAkB,EAClDd,KAAK,EAAElZ,CAAC,CAAC,sBAAsB,EAAEA,CAAC,CAAC,WAAW,CAAC,CAAE,EACjDoS,QAAQ,EAAEqH,gBAAiB,EAC3BtZ,GAAG,EAAEsD,oBAAqB,GAE9B;IAAA,CAAG;EAEP,CAAC;EAED,MAAMwW,SAAS,GAAGA,CAAC7P,GAAW,KAAKwC,SAAS,CAACxC,GAAG,CAAC;EAEjD,MAAM8P,kBAAkB,GAAGA,CAAA,KAAK,KAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IAC9B,MAAM,EAAEC,QAAQ,EAAE,GAAGC,MAAM,CAACC,QAAQ;IACpC,IAAIC,OAAO,GAAG,CAAA1K,eAAe,qBAAAkK,qBAAA,GAAflK,eAAe,CAAE2K,YAAY,qBAA7BT,qBAAA,CAA+BU,OAAO,KAAI,EAAE;IAC1D,MAAMC,WAAW,GAAG,CAAA7K,eAAe,oBAAfA,eAAe,CAAE2K,YAAY,KAAI,EAAE;IACvD/Q,MAAM,CAACK,OAAO,CAAC4Q,WAAW,CAAC,CAACzG,OAAO,CAAC,CAAC,CAAC0G,QAAQ,EAAEC,OAAO,CAAC,KAAI;MAC1D,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAACH,QAAQ,CAAC;MAClC,IAAIP,QAAQ,CAACW,KAAK,CAACF,KAAK,CAAC;MAAEN,OAAO,GAAGK,OAAO;IAC9C,CAAC,CAAC;IACF,OACE,CAAAjP,EAAE,oBAAFA,EAAE,CAAEnB,MAAM,KACR5G,IAAA,CAACtB,iBAAiB,IAAAmT,QAAA;MAChB7R,IAAA,CAAChD,KAAK,IACJwV,QAAQ,EAAE,KAAM,EAChBrW,GAAG,EAAEA,CAAC8E,KAAoB,KAAKzC,eAAe,CAACyC,KAAK,CAAE,EACtDqB,IAAI,EAAC,MAAM,EACXiQ,QAAQ,QACR3R,OAAO,EACL,EAAAwV,qBAAA,GAAA1V,0BAA0B,CACxBqH,EAAE,CAACnB,MAAiD,CACrD,qBAFDwP,qBAAA,CAEGxV,OAAO,MAAIqL,eAAe,qBAAAoK,qBAAA,GAAfpK,eAAe,CAAEmL,OAAO,qBAAxBf,qBAAA,CAA0BzV,OAAO,CAChD,EACDC,WAAW,EACT,EAAAyV,sBAAA,GAAA5V,0BAA0B,CACxBqH,EAAE,CAACnB,MAAiD,CACrD,qBAFD0P,sBAAA,CAEGzV,WAAW,KAAI,CAAAoL,eAAe,qBAAAsK,sBAAA,GAAftK,eAAe,CAAEmL,OAAO,qBAAxBb,sBAAA,CAA0B1V,WAAW,IAAG8V,OAC3D,GAEL;IAAmB,CACpB;EAEL,CAAC;EAED;EACA,MAAMU,UAAU,GAAGA,CAAA,KAAK;IACtB,IAAIC,WAAW,GAAa,EAAE;IAC9B,IAAI,CAAC5J,QAAA,CAAQpF,QAAQ,CAAC,EAAE;MACtBgP,WAAW;MACT,OAAOhP,QAAQ,KAAK,QAAQ;MACxBzC,MAAM,CAAC0R,MAAM,CAACjP,QAAQ,CAAC;MACvB,OAAOA,QAAQ,KAAK,QAAQ;MAC1B,CAACA,QAAQ,CAAC;MACV,EAAE;KACX;IAAM,IACL,CAACoF,QAAA,CAAQ3E,gBAAgB,CAAC;IAC1B,CAAAA,gBAAgB,oBAAhBA,gBAAgB,CAAEyO,UAAU,MAAK,yBAAyB,EAC1D;MACAF,WAAW,GAAG;MACZ,CAAAvO,gBAAgB,oBAAhBA,gBAAgB,CAAElI,WAAW,MAAIkI,gBAAgB,oBAAhBA,gBAAgB,CAAEnI,OAAO,EAC3D;;;IAEH,IAAI0W,WAAW,CAACvH,MAAM,EAAE,KAAA0H,YAAA;MACtB,OACEzX,IAAA,CAACe,mBAAmB,IAAA8Q,QAAA;QAClB7R,IAAA,CAACzC,0BAA0B,IACzBma,KAAK,EAAE1b,CAAC,CAAC,yBAAyB,CAAE,EACpC6E,WAAW,EAAE7E,CAAC,CACZ,qIAAqI,CACrI,EACF2b,kBAAkB,EAChB,EAAAF,YAAA,GAAAH,WAAW,qBAAXG,YAAA,CAAc,CAAC,CAAC,MAAI1O,gBAAgB,oBAAhBA,gBAAgB,CAAElI,WAAW,CAClD,GAEL;MAAqB,CAAC;;IAG1B,OAAOb,IAAA,CAAAI,SAAA,IAAE,CAAG;EACd,CAAC;EAED,MAAMwX,aAAa,GAAGA,CAAA,KAAK;IACzBjO,UAAU,CAAC,IAAI,CAAC;IAChBpB,aAAa,CAACH,SAAS,oBAATA,SAAS,CAAEuI,EAAY,CAAC,CAACjB,IAAI,CAAC,CAAAmI,CAAC,KAAG;MAC9Clb,OAAO,CAACC,gBAAgB,CAACkb,QAAQ,EAAED,CAAC,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,mBAAmB,GAAGA,CAAA,KAC1B/X,IAAA,CAACH,aAAa,IACZkI,EAAE,EAAEA,EAAqB,EACzBiQ,2BAA2B,EAAEA,CAAC,EAAEzJ,MAAM,EAAE,KAAI;MAC1CH,QAAQ,CAAChN,UAAU,CAACsD,yBAAyB,EAAE;QAC7CpC,IAAI,EAAEiM,MAAM,CAACjM,IAAI;QACjBK,IAAI,EAAE4L,MAAM,CAAC5L,IAAI;QACjBG,KAAK,EAAEyL,MAAM,CAACzL;OACf,CAAC;MACFuL,2BAA2B,EAAE;IAC/B,CAAE,EACF4J,uBAAuB,EAAEA,CAACC,MAAgB,KACxClQ,KAAK,CAAC;MACJ1F,IAAI,EAAElB,UAAU,CAACwD,uBAAuB;MACxCpC,OAAO,EAAE,EAAEsC,YAAY,EAAEoT,MAAM;KAChC,CACF,GAEJ;EAED,MAAMC,aAAa,GAAGA,CAAA,KACpBjY,KAAA,CAACoB,UAAU,IAAAuQ,QAAA;IACT7R,IAAA,CAAC9C,MAAM,IACLsW,WAAW,EAAC,WAAW,EACvBP,OAAO,EAAEA,CAAA,KAAK;QACZtJ,UAAU,CAAC,IAAI,CAAC;QAChBiO,aAAa,EAAE;QACfnJ,WAAW,CAAC,eAAe,CAAC;MAC9B,CAAE,EAAAoD,QAAA;MAED7V,CAAC,CAAC,gBAAgB,CAAC;IACd,CACR;IAAAgE,IAAA,CAAC9C,MAAM,IACLsW,WAAW,EAAC,WAAW,EACvBP,OAAO,EAAEA,CAAA,KAAK;QACZtJ,UAAU,CAAC,IAAI,CAAC;QAChBiO,aAAa,EAAE;QACfnJ,WAAW,CAAC,iBAAiB,CAAC;MAChC,CAAE,EAAAoD,QAAA;MAED7V,CAAC,CAAC,uBAAuB,CAAC;IACrB,CACV;EAAY,CACb;EAED,MAAMoc,4BAA4B,GAAGA,CAAA,KACnClY,KAAA,CAAAE,SAAA,IAAAyR,QAAA;IACE7R,IAAA,CAACzB,sBAAsB,IACrB2N,UAAU,EAAEA,UAAW,EACvBnE,EAAE,EAAEA,EAAqB,EACzBsQ,SAAS,EAAE,KAAM,EACjBtL,OAAO,EAAEA,OAAQ,EACjBuL,iBAAiB,EAAEA,CAAA,KAAK;QACtBtQ,KAAK,CAAC,EAAE1F,IAAI,EAAElB,UAAU,CAACoE,oBAAoB,EAAE,CAAC;MAClD,CAAE,EACF+S,aAAa,EAAEA,CAAC,EAAEhK,MAAM,EAAgC,KACtDH,QAAQ,CAAChN,UAAU,CAACwE,WAAW,EAAE;QAC/BjD,IAAI,EAAE4L,MAAM,CAAC5L,IAAI;QACjBG,KAAK,EAAEyL,MAAM,CAACzL;OACf,CACF,EACD0V,kBAAkB,EAAEA,CAAC,EAAEjK,MAAM,EAAgC,KAC3DH,QAAQ,CAAChN,UAAU,CAAC2B,gBAAgB,EAAE;QACpCJ,IAAI,EAAE4L,MAAM,CAAC5L,IAAI;QACjBG,KAAK,EAAEyL,MAAM,CAACzL;OACf,CACF,EACD2V,2BAA2B,EAAEA,CAAC,EAC5BlK,MAAM,EAGP,KACCH,QAAQ,CAAChN,UAAU,CAACwB,yBAAyB,EAAE;QAC7CD,IAAI,EAAE4L,MAAM,CAAC5L,IAAI;QACjBG,KAAK,EAAEyL,MAAM,CAACzL;OACf,CACF,EACD4V,oBAAoB,EAAEA,CAACxU,GAAW,KAAI;QACpC8D,KAAK,CAAC;UACJ1F,IAAI,EAAElB,UAAU,CAACqE,uBAAuB;UACxCjD,OAAO,EAAE,EAAEkD,aAAa,EAAExB,GAAG;SAC9B,CAAC;MACJ,CAAE,EACFyU,kBAAkB,EAAErK,sBAAuB,EAC3CF,QAAQ,EAAEA,CAAC,EAAEG,MAAM,EAAgC,KACjDH,QAAQ,CAAChN,UAAU,CAAC4E,UAAU,EAAE;QAC9BrD,IAAI,EAAE4L,MAAM,CAAC5L,IAAI;QACjBG,KAAK,EAAEyL,MAAM,CAACzL;OACf,CACF,EACDkG,aAAa,EAAEA,CAAA,KAAMA,aAAa,CAACjB,EAAE,CAAE,EACvCgB,gBAAgB,EAAEA,gBAAiB,EACnC+E,cAAc,EAAEA,cAAe,EAC/B8K,qBAAqB,EAAEvK,2BAA4B,GAErD;IAAC3C,eAAe,IACd1L,IAAA,CAACmB,kBAAkB,IAAA0Q,QAAA,EAAEkG,mBAAmB,EAAE,EAAqB,CAChE;EACH,CACD;EAED,MAAMc,iBAAiB,GAAGA,CAAA,KAAK;IAC7B,IAAI,CAACrP,SAAS,EAAE;MACd,OACExJ,IAAA,CAAC3B,YAAY,IACXya,cAAc,EAAElN,sBAAuB,EACvC7D,EAAE,EAAEA,EAAqB,EACzBgR,aAAa,EAAEA,CAAC,EAAExK,MAAM,EAAgC,KACtDH,QAAQ,CAAChN,UAAU,CAACuC,WAAW,EAAE;UAC/BrB,IAAI,EAAEiM,MAAM,CAACjM,IAAI;UACjBK,IAAI,EAAE4L,MAAM,CAAC5L,IAAI;UACjBe,OAAO,EAAE6K,MAAM,CAAC7K,OAAO;UACvBZ,KAAK,EAAEyL,MAAM,CAACzL;SACf,CACF,EACDkW,YAAY,EAAEA,CAAC,EAAEzK,MAAM,EAAmC,KACxDH,QAAQ,CAAChN,UAAU,CAAC4E,UAAU,EAAE;UAC9BrD,IAAI,EAAE4L,MAAM,CAAC5L,IAAI;UACjBG,KAAK,EAAEyL,MAAM,CAACzL;SACf,CACF,EACDmW,cAAc,EAAEA,CAACzW,OAAoC,KACnD4L,QAAQ,CAAChN,UAAU,CAACuE,YAAY,EAAEnD,OAAO,CAC1C,EACDgW,kBAAkB,EAAEA,CAAC,EAAEjK,MAAM,EAAgC,KAAI;UAC/DH,QAAQ,CAAChN,UAAU,CAAC2B,gBAAgB,EAAE;YACpCT,IAAI,EAAEiM,MAAM,CAACjM,IAAI;YACjBK,IAAI,EAAE4L,MAAM,CAAC5L,IAAI;YACjBe,OAAO,EAAE6K,MAAM,CAAC7K,OAAO;YACvBZ,KAAK,EAAEyL,MAAM,CAACzL;WACf,CAAC;QACJ,CAAE,EACFoW,mBAAmB,EAAEA,CAAC1W,OAAoC,KACxD4L,QAAQ,CAAChN,UAAU,CAACmB,iBAAiB,EAAEC,OAAO,CAC/C,GACD;;IAGN,OAAO4V,4BAA4B,EAAE;EACvC,CAAC;EAED,IACE5N,QAAQ,CAACuF,MAAM,GAAG,CAAC;EAClBnB,aAAa,CAACmB,MAAM;EACnBjF,cAAc,CAACiF,MAAM;EACrB/E,uBAAuB,CAAC+E,MAAM;EAC9B7E,yBAAyB,CAAC6E,MAAM;EAChC3E,iCAAiC,CAAC2E,MAAM,CAAC,EAC3C;IACA,OACE7P,KAAA,CAACjD,KAAK,IACJkc,QAAQ,QACRhd,GAAG,EAAEA,CAAC8E,KAAoB,KAAK;MAC7BtC,wBAAwB;MACxBC,eAAe,CAACqC,KAAK,CAAC;MACtB/B,gBAAgB,CAAC+B,KAAK,CAAC;MACvB9B,UAAU,CAAC8B,KAAK,CAAC,CACjB;MACFmY,MAAM,EAAE7F,iBAAiB,EAAG,EAC5B8F,YAAY,EAAE,KAAM,EACpB1W,IAAI,EAAC,UAAU,EACf4E,MAAM,EAAEiH,OAAQ,EAChB8K,sBAAsB,EAAEhK,MAAO,EAC/BiK,iBAAiB,EAAEvd,CAAC,CAAC,SAAS,CAAE,EAChCwL,IAAI,EAAEA,IAAK,EACXkQ,KAAK,EAAE1X,IAAA,SAAA6R,QAAA,EAAK7V,CAAC,CAAC,oBAAoB,CAAC,EAAK,CAAE,EAC1Cwd,KAAK,EAAC,OAAO,EAAA3H,QAAA;MAEb7R,IAAA,CAACL,WAAW,IACVoI,EAAE,EAAEA,EAAG,EACPuB,MAAM,EAAEA,MAAO,EACfyD,OAAO,EAAEA,OAAQ,EACjBvC,QAAQ,EAAEA,QAAS,EACnBtB,cAAc,EAAEA,cAAe,EAC/BgD,UAAU,EAAEA,UAAW,EACvBxC,SAAS,EAAEA,SAAU,EACrB0C,iBAAiB,EAAEA,iBAAkB,GAEvC;MAAC2J,qBAAqB,EAAE;MACvBR,mBAAmB,EAAE;MACrBf,mBAAmB,EAAE;IACjB,CAAC;;EAGZ,MAAMiF,WAAW,GAAGvN,UAAU;EAC1BwH,qBAAqB,CAAC3L,EAAE,CAAC;EACzBwL,iBAAiB,EAAE;EACvB,OAAOjH,YAAY,GACjBpM,KAAA,CAACjD,KAAK,IACJd,GAAG,EAAEA,CAAC8E,KAAoB,KAAK;IAC7BpC,cAAc;IACdF,wBAAwB;IACxBC,eAAe,CAACqC,KAAK,CAAC;IACtB/B,gBAAgB,CAAC+B,KAAK,CAAC;IACvB9B,UAAU,CAAC8B,KAAK,CAAC,CACjB;IACF0B,IAAI,EAAC,UAAU,EACf,aAAU,gBAAgB,EAC1B2W,sBAAsB,EAAEhK,MAAO,EAC/B/H,MAAM,EAAEiH,OAAQ,EAChB+K,iBAAiB,EAAErN,UAAU,GAAGlQ,CAAC,CAAC,MAAM,CAAC,GAAGA,CAAC,CAAC,SAAS,CAAE,EACzDwd,KAAK,EAAC,OAAO,EACbL,QAAQ,QACR3R,IAAI,EAAEA,IAAK,EACXkQ,KAAK,EACHxX,KAAA,SAAA2R,QAAA;MACG3F,UAAU,GACTlM,IAAA,CAACvC,KAAK,CAACic,YAAY,IACjBC,QAAQ,EAAC,GAAG,EACZxd,GAAG,EAAEA,GAAG;+BACS8E,KAAK,CAACC,QAAQ,GAAG,CAAC;eACjC,GACF,GAEFlB,IAAA,CAACvC,KAAK,CAACmc,sBAAsB,IAC3BD,QAAQ,EAAC,GAAG,EACZxd,GAAG,EAAEA,GAAG;+BACS8E,KAAK,CAACC,QAAQ,GAAG,CAAC;eACjC,GAEL;MACAgL,UAAU,GAAGlQ,CAAC,CAAC,eAAe,CAAC,GAAGA,CAAC,CAAC,oBAAoB,CAAC;IACxD,CACL,EACDod,MAAM,EAAEK,WAAY,EACpBJ,YAAY,EAAE,KAAM,EAAAxH,QAAA;IAEpB7R,IAAA,CAACR,kBAAkB,IAAAqS,QAAA;MACjB7R,IAAA,CAACf,SAAS,IAAA4S,QAAA;QACR7R,IAAA,CAACL,WAAW,IACV+J,SAAS,EAAEA,SAAU,EACrBwC,UAAU,EAAEA,UAAW,EACvBE,iBAAiB,EAAEA,iBAAkB,EACrClD,cAAc,EAAEA,cAAe,EAC/BnB,EAAE,EAAEA,EAAG,EACPuB,MAAM,EAAEA,MAAO,EACfyD,OAAO,EAAEA,OAAQ,GAErB;MAAW,CACb;IAAoB,CACpB;IAAA7M,KAAA,CAACY,UAAU,IACT+Y,gBAAgB,EAAE3S,eAAgB,EAClC4S,SAAS,EAAEnR,MAAO,EAClBoR,UAAU,EAAE9D,SAAU,EACtB+D,QAAQ,EAAE,EAAEC,MAAM,EAAE,IAAI,EAAEC,OAAO,EAAE,IAAI,EAAG,EAAArI,QAAA;MAE1C3R,KAAA,CAACrD,IAAI,CAACsd,OAAO,IAACC,GAAG,EAAEpa,IAAA,WAAA6R,QAAA,EAAO7V,CAAC,CAAC,OAAO,CAAC,EAAO,CAAE,EAAA6V,QAAA;QAC1CzF,iBAAiB,GAChBlM,KAAA,CAACd,eAAe,IAAAyS,QAAA;UACd3R,KAAA,CAAC5B,cAAc,IACbyJ,EAAE,EAAEA,EAAqB,EACzBgR,aAAa,EAAEA,CAAC,EAAExK,MAAM,EAAgC,KACtDH,QAAQ,CAAChN,UAAU,CAACuC,WAAW,EAAE;cAC/BrB,IAAI,EAAEiM,MAAM,CAACjM,IAAI;cACjBK,IAAI,EAAE4L,MAAM,CAAC5L,IAAI;cACjBe,OAAO,EAAE6K,MAAM,CAAC7K,OAAO;cACvBZ,KAAK,EAAEyL,MAAM,CAACzL;aACf,CACF,EACDiJ,IAAI,EAAEA,IAAK,EACXoB,cAAc,EAAEA,cAAe,EAC/BvD,cAAc,EAAEA,cAAe,EAAAiI,QAAA;YAE/B7R,IAAA,CAACwL,wBAAwB,IACvBuB,OAAO,EAAEA,OAAQ,EACjBhF,EAAE,EAAEA,EAAqB,EACzBsS,aAAa,EAAE;gBACb1B,kBAAkB,EAAErK;eACpB,EACFsK,qBAAqB,EAAEvK,2BAA4B,GAErD;YAAC3C,eAAe,IAAIqM,mBAAmB,EAAE;UAC3B,CAChB;UAACxL,SAAS,CAAC,CAAAxE,EAAE,oBAAFA,EAAE,CAAElB,OAAO,MAAIkB,EAAE,oBAAFA,EAAE,CAAEnB,MAAM,EAAC,IAAI,CAACsF,UAAU,IAClDhM,KAAA,UAAK/D,GAAG,EAAEA,CAAC8E,KAAoB,KAAK3B,WAAW,CAAC2B,KAAK,CAAE,EAAA4Q,QAAA;YACrD7R,IAAA,CAAC9C,MAAM,IACLsW,WAAW,EAAC,MAAM,EAClBP,OAAO,EAAEA,CAAA,KACPjL,KAAK,CAAC;gBACJ1F,IAAI,EAAElB,UAAU,CAAC4F,kBAAkB;gBACnCxE,OAAO,EAAE;kBACP+K,aAAa,EAAExF,EAAE,oBAAFA,EAAE,CAAEwF,aAAa;kBAChCjH,oBAAoB,EAAEnI,mBAAmB,CAACoI,WAAW;kBACrDK,MAAM,EAAEmB,EAAE,oBAAFA,EAAE,CAAEnB;;eAEf,CACF,EACDzK,GAAG,EAAEA,CAAA8E,KAAK,KAAIjC,uBAAuB,CAACiC,KAAK,CAAE,EAAA4Q,QAAA;cAE5C7V,CAAC,CAAC,sDAAsD,CAAC;YACpD,CACR;YAAAgE,IAAA,CAAC5C,WAAW,IACVwW,OAAO,EAAE5X,CAAC,CACR,uHAAuH,CACvH,EACFse,OAAO,EAAC,YAAY,GAExB;UAAK,CACN;QACc,CAAC,GAElBlC,4BAA4B,EAC7B;QACA,CAAClM,UAAU,IACVlM,IAAA,CAACtB,iBAAiB,IAAAmT,QAAA;UAChB7R,IAAA,CAAChD,KAAK,IACJwV,QAAQ,EAAE,KAAM,EAChBrW,GAAG,EAAEA,CAAC8E,KAAoB,KAAKzC,eAAe,CAACyC,KAAK,CAAE,EACtDL,OAAO,EAAE5E,CAAC,CAAC,mCAAmC,CAAE,EAChDuW,QAAQ,QACR1R,WAAW,EACTX,KAAA,CAAAE,SAAA,IAAAyR,QAAA;cACG7V,CAAC,CACA,kKAAkK,CACnK;cACDgE,IAAA,QACE0S,IAAI,EAAE9S,kBAAmB,EACzB2O,MAAM,EAAC,QAAQ,EACfqE,GAAG,EAAC,qBAAqB,EACzBhB,SAAS,EAAC,qCAAqC,EAAAC,QAAA;gBAE9C7V,CAAC,CAAC,MAAM,CAAC;cACT,CACH,KACF;;YAAA,CACD,EACDsG,IAAI,EAAC,MAAM,GAEf;QAAmB,CACpB;QACAuK,WAAW,IAAIwK,UAAU,EAAE,KApFoB;MAqFpC,CACd;MAAArX,IAAA,CAACnD,IAAI,CAACsd,OAAO,IAACC,GAAG,EAAEpa,IAAA,WAAA6R,QAAA,EAAO7V,CAAC,CAAC,UAAU,CAAC,EAAO,CAAE,EAAA6V,QAAA;QAC9C7R,IAAA,CAAC3B,YAAY,IACXya,cAAc,EAAElN,sBAAuB,EACvC7D,EAAE,EAAEA,EAAqB,EACzBgR,aAAa,EAAEA,CAAC,EAAExK,MAAM,EAAgC,KACtDH,QAAQ,CAAChN,UAAU,CAACuC,WAAW,EAAE;YAC/BrB,IAAI,EAAEiM,MAAM,CAACjM,IAAI;YACjBK,IAAI,EAAE4L,MAAM,CAAC5L,IAAI;YACjBe,OAAO,EAAE6K,MAAM,CAAC7K,OAAO;YACvBZ,KAAK,EAAEyL,MAAM,CAACzL;WACf,CACF,EACDkW,YAAY,EAAEA,CAAC,EAAEzK,MAAM,EAAmC,KACxDH,QAAQ,CAAChN,UAAU,CAAC4E,UAAU,EAAE;YAC9BrD,IAAI,EAAE4L,MAAM,CAAC5L,IAAI;YACjBG,KAAK,EAAEyL,MAAM,CAACzL;WACf,CACF,EACDmW,cAAc,EAAEA,CAACzW,OAAoC,KACnD4L,QAAQ,CAAChN,UAAU,CAACuE,YAAY,EAAEnD,OAAO,CAC1C,EACDgW,kBAAkB,EAAEA,CAAC,EAAEjK,MAAM,EAAgC,KAAI;YAC/DH,QAAQ,CAAChN,UAAU,CAAC2B,gBAAgB,EAAE;cACpCT,IAAI,EAAEiM,MAAM,CAACjM,IAAI;cACjBK,IAAI,EAAE4L,MAAM,CAAC5L,IAAI;cACjBe,OAAO,EAAE6K,MAAM,CAAC7K,OAAO;cACvBZ,KAAK,EAAEyL,MAAM,CAACzL;aACf,CAAC;UACJ,CAAE,EACFoW,mBAAmB,EAAEA,CAAC1W,OAAoC,KAAI;YAC5D4L,QAAQ,CAAChN,UAAU,CAACmB,iBAAiB,EAAEC,OAAO,CAAC;UACjD,CAAE,GAEN,IAjCqD;MAiCvC,CAChB;IAAY,CACd;EAAO,CAAC,GAERtC,KAAA,CAACjD,KAAK,IACJd,GAAG,EAAEA,CAAC8E,KAAoB,KAAK;IAC7BtC,wBAAwB;IACxBC,eAAe,CAACqC,KAAK,CAAC;IACtB/B,gBAAgB,CAAC+B,KAAK,CAAC;IACvB9B,UAAU,CAAC8B,KAAK,CAAC,CACjB;IACF0B,IAAI,EAAC,UAAU,EACf2W,sBAAsB,EAAEhK,MAAO,EAC/B/H,MAAM,EAAEiH,OAAQ,EAChB+K,iBAAiB,EAAErQ,cAAc,GAAGlN,CAAC,CAAC,QAAQ,CAAC,GAAGA,CAAC,CAAC,SAAS,CAAE,EAC/Dwd,KAAK,EAAC,OAAO,EACbL,QAAQ,QACR3R,IAAI,EAAEA,IAAK,EACXkQ,KAAK,EACHxX,KAAA,SAAA2R,QAAA;MACE7R,IAAA,CAACvC,KAAK,CAACmc,sBAAsB,IAC3BD,QAAQ,EAAC,GAAG,EACZxd,GAAG,EAAEA,GAAG;6BACS8E,KAAK,CAACC,QAAQ,GAAG,CAAC;aACjC,GAEJ;MAAClF,CAAC,CAAC,oBAAoB,CAAC;IACtB,CACL,EACDod,MAAM,EAAE7F,iBAAiB,EAAG,EAC5B8F,YAAY,EAAE,KAAM,EAAAxH,QAAA;IAEnB,CAACnI,SAAS,IAAIR,cAAc,GAC3BhJ,KAAA,CAAAE,SAAA,IAAAyR,QAAA;MACE7R,IAAA,CAACL,WAAW,IACV+J,SAAS,EAAEA,SAAU,EACrBwC,UAAU,EAAEA,UAAW,EACvBE,iBAAiB,EAAEA,iBAAkB,EACrClD,cAAc,EAAEA,cAAe,EAC/BnB,EAAE,EAAEA,EAAG,EACPuB,MAAM,EAAEA,MAAO,EACfyD,OAAO,EAAEA,OAAQ,EACjBvD,SAAS,EAAEA,SAAU,GAEvB;MAACJ,WAAW,IAAI+O,aAAa,EAAE;MAC9BU,iBAAiB,EAAE;IACtB,CAAG,GAEH7Y,IAAA,CAAAI,SAAA,IAAAyR,QAAA;;MAEG,CAACnI,SAAS;MACR,CAAC3B,EAAE,GACF7H,KAAA,CAACb,oBAAoB,IAAAwS,QAAA;QACnB7R,IAAA,CAACL,WAAW,IACV+J,SAAS,EAAEA,SAAU,EACrBwC,UAAU,EAAEA,UAAW,EACvBE,iBAAiB,EAAEA,iBAAkB,EACrClD,cAAc,EAAEA,cAAe,EAC/BnB,EAAE,EAAEA,EAAG,EACPuB,MAAM,EAAEA,MAAO,EACfyD,OAAO,EAAEA,OAAQ,GAEnB;QAAC+F,uBAAuB,EAAE;QACzBrB,uBAAuB,EAAE;QAC1BzR,IAAA,CAACN,mBAAmB,IAAAmS,QAAA;UAClB7R,IAAA,CAACjD,MAAM,IACL4F,IAAI,EAAC,cAAc,EACnBgO,EAAE,EAAC,cAAc,EACjB,aAAU,qBAAqB,EAC/B4J,MAAM,EAAC,uBAAuB,EAC9BC,aAAa,EAAEA,CAAA,KAAK,CAAE,CAAE,EACxBpM,QAAQ,EAAEiG,UAAW,EACrBoG,QAAQ,EAAEzM,UAAW,EAAA6D,QAAA;YAErB7R,IAAA,CAAC9C,MAAM,IACL,aAAU,qBAAqB,EAC/BsW,WAAW,EAAC,MAAM,EAClBlR,IAAI,EAAC,MAAM,EACXnG,GAAG,EAAE4C,wBAAyB,EAAA8S,QAAA;cAE7B7V,CAAC,CAAC,2BAA2B,CAAC;YACzB,CACV;UAAQ,CACV;QAAqB,CACrB;QAACuZ,mBAAmB,EAAE;MACF,CAAC,GAEvBrV,KAAA,CAAAE,SAAA,IAAAyR,QAAA;QACE7R,IAAA,CAACL,WAAW,IACV+J,SAAS,EAAEA,SAAU,EACrBwC,UAAU,EAAEA,UAAW,EACvBE,iBAAiB,EAAEA,iBAAkB,EACrClD,cAAc,EAAEA,cAAe,EAC/BnB,EAAE,EAAEA,EAAG,EACPuB,MAAM,EAAEA,MAAO,EACfyD,OAAO,EAAEA,OAAQ,GAEnB;QAACZ,QAAQ,IAAI+J,kBAAkB,EAAE;QAChCkC,4BAA4B,EAAE;QAC/BpY,IAAA,UAAK7D,GAAG,EAAEA,CAAC8E,KAAoB,KAAK3B,WAAW,CAAC2B,KAAK,CAAE,EAAA4Q,QAAA;UACpD9E,OAAO,CAACnG,MAAM,KAAKxI,OAAO,CAACuC,MAAM,IAChCT,KAAA,CAAAE,SAAA,IAAAyR,QAAA;YACE7R,IAAA,CAAC9C,MAAM,IACL,aAAU,kBAAkB,EAC5BsW,WAAW,EAAC,MAAM,EAClBP,OAAO,EAAEA,CAAA,KACPjL,KAAK,CAAC;gBACJ1F,IAAI,EAAElB,UAAU,CAAC4F,kBAAkB;gBACnCxE,OAAO,EAAE;kBACPoE,MAAM,EAAEmB,EAAE,CAACnB,MAAM;kBACjBN,oBAAoB,EAClBnI,mBAAmB,CAACkO,aAAa;kBACnCkB,aAAa,EAAExF,EAAE,CAACwF;;eAErB,CACF,EACDpR,GAAG,EAAE2C,gBAAiB,EAAA+S,QAAA;cAErB7V,CAAC,CACA,4DAA4D,CAC7D;YACK,CACR;YAAAgE,IAAA,CAAC5C,WAAW,IACVwW,OAAO,EAAE5X,CAAC,CACR,wHAAwH,CACxH,EACFse,OAAO,EAAC,YAAY,GAExB;UAAA,CACD;QACE,CACL;;QACCzN,WAAW,IAAIwK,UAAU,EAAE;MAC9B,CACD,CAAC;IACN,CACD;IACA3N,SAAS,IAAI1J,IAAA,CAAC9B,OAAO,KAAG;EACpB,CACR;AACH,CAAC,CAACwc,aAAA,CA5iDIvT,aAAa,kgEASH/K,QAAQ,EAWlBuB,qBAAqB,EAQeC,qBAAqB,EAE3DC,qBAAqB,EA0DVI,aAAa,EAoBVvB,UAAU,EAqItBsB,iBAAiB,SAAA2c,QAAA;AA6zCRtd,UAAU,CAAC8J,aAAa,CAAC,CAAxC,eAAAwT,QAAA,CAAyC,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAhE,OAAA,GAAA9S,SAAA,MAAA6W,cAAA,WAAAA,cAAA,CAAAE,QAAA,CAl/DnCza,kBAAkB,qHAAAua,cAAA,CAAAE,QAAA,CAElBxa,aAAa,gHAAAsa,cAAA,CAAAE,QAAA,CAEbpa,0BAA0B,6HAAAka,cAAA,CAAAE,QAAA,CAY1Bha,UAAU,6GAAA8Z,cAAA,CAAAE,QAAA,CAYV/Z,mBAAmB,sHAAA6Z,cAAA,CAAAE,QAAA,CAMnB3Z,kBAAkB,qHAAAyZ,cAAA,CAAAE,QAAA,CAgBZ1Z,UAkBX,6GAAAwZ,cAAA,CAAAE,QAAA,CAEWzZ,QAGX,2GAAAuZ,cAAA,CAAAE,QAAA,CAmEKxZ,UAAU,6GAAAsZ,cAAA,CAAAE,QAAA,CAKAvZ,SAAS,4GAAAqZ,cAAA,CAAAE,QAAA,CAiTnB5T,eAAe,kHAAA0T,cAAA,CAAAE,QAAA,CAEf3T,aAAa,gHAAAyT,cAAA,CAAAE,QAAA,CAAAH,QAAA,kIAAAI,WAAA,UAAAF,oBAAA,mBAAAA,oBAAA,CAAAE,WAAA,GAAAhX,SAAA,CAAAgX,WAAA,IAAAA,WAAA,CAAAC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}