{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { forwardRef, useEffect } from 'react';\nimport AsyncEsmComponent from 'src/components/AsyncEsmComponent';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { useTheme, css } from '@superset-ui/core';\nimport { Global } from '@emotion/react';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport { getTooltipHTML } from './Tooltip';\n/**\n * Async loaders to import brace modules. Must manually create call `import(...)`\n * promises because webpack can only analyze async imports statically.\n */\nconst aceModuleLoaders = {\n  'mode/sql': () => import('brace/mode/sql'),\n  'mode/markdown': () => import('brace/mode/markdown'),\n  'mode/css': () => import('brace/mode/css'),\n  'mode/json': () => import('brace/mode/json'),\n  'mode/yaml': () => import('brace/mode/yaml'),\n  'mode/html': () => import('brace/mode/html'),\n  'mode/javascript': () => import('brace/mode/javascript'),\n  'theme/textmate': () => import('brace/theme/textmate'),\n  'theme/github': () => import('brace/theme/github'),\n  'ext/language_tools': () => import('brace/ext/language_tools'),\n  'ext/searchbox': () => import('brace/ext/searchbox')\n};\n/**\n * Get an async AceEditor with automatical loading of specified ace modules.\n */\nexport default function AsyncAceEditor(aceModules, { defaultMode, defaultTheme, defaultTabSize = 2, fontFamily = 'Menlo, Consolas, Courier New, Ubuntu Mono, source-code-pro, Lucida Console, monospace', placeholder } = {}) {\n  return AsyncEsmComponent(async () => {var _aceModules$find, _aceModules$find2;\n    const reactAcePromise = import('react-ace');\n    const aceBuildsConfigPromise = import('ace-builds');\n    const cssWorkerUrlPromise = import('ace-builds/src-min-noconflict/worker-css');\n    const acequirePromise = import('ace-builds/src-min-noconflict/ace');\n    const [{ default: ReactAceEditor }, { config }, { default: cssWorkerUrl }, { require: acequire }] = await Promise.all([\n    reactAcePromise,\n    aceBuildsConfigPromise,\n    cssWorkerUrlPromise,\n    acequirePromise]\n    );\n    config.setModuleUrl('ace/mode/css_worker', cssWorkerUrl);\n    await Promise.all(aceModules.map((x) => aceModuleLoaders[x]()));\n    const inferredMode = defaultMode || ((_aceModules$find =\n    aceModules.find((x) => x.startsWith('mode/'))) == null ? void 0 : _aceModules$find.replace('mode/', ''));\n    const inferredTheme = defaultTheme || ((_aceModules$find2 =\n    aceModules.find((x) => x.startsWith('theme/'))) == null ? void 0 : _aceModules$find2.replace('theme/', ''));\n    return /*#__PURE__*/forwardRef(__signature__(function ExtendedAceEditor({ keywords, mode = inferredMode, theme = inferredTheme, tabSize = defaultTabSize, defaultValue = '', ...props }, ref) {\n      const supersetTheme = useTheme();\n      const langTools = acequire('ace/ext/language_tools');\n      const setCompleters = useEffectEvent((keywords) => {\n        const completer = {\n          getCompletions: (editor, session, pos, prefix, callback) => {\n            // If the prefix starts with a number, don't try to autocomplete\n            if (!Number.isNaN(parseInt(prefix, 10))) {\n              return;\n            }\n            if (session.getMode().$id === `ace/mode/${mode}`) {\n              callback(null, keywords);\n            }\n          }\n        };\n        langTools.setCompleters([completer]);\n      });\n      useEffect(() => {\n        if (keywords) {\n          setCompleters(keywords);\n        }\n      }, [keywords, setCompleters]);\n      return _jsxs(_Fragment, { children: [\n        _jsx(Global, { styles: css`\n                .ace_tooltip {\n                  margin-left: ${supersetTheme.gridUnit * 2}px;\n                  padding: 0px;\n                  border: 1px solid ${supersetTheme.colors.grayscale.light1};\n                }\n\n                & .tooltip-detail {\n                  background-color: ${supersetTheme.colors.grayscale.light5};\n                  white-space: pre-wrap;\n                  word-break: break-all;\n                  min-width: ${supersetTheme.gridUnit * 50}px;\n                  max-width: ${supersetTheme.gridUnit * 100}px;\n                  & .tooltip-detail-head {\n                    background-color: ${supersetTheme.colors.grayscale.light4};\n                    color: ${supersetTheme.colors.grayscale.dark1};\n                    display: flex;\n                    column-gap: ${supersetTheme.gridUnit}px;\n                    align-items: baseline;\n                    justify-content: space-between;\n                  }\n                  & .tooltip-detail-title {\n                    display: flex;\n                    column-gap: ${supersetTheme.gridUnit}px;\n                  }\n                  & .tooltip-detail-body {\n                    word-break: break-word;\n                  }\n                  & .tooltip-detail-head,\n                  & .tooltip-detail-body {\n                    padding: ${supersetTheme.gridUnit}px\n                      ${supersetTheme.gridUnit * 2}px;\n                  }\n                  & .tooltip-detail-footer {\n                    border-top: 1px ${supersetTheme.colors.grayscale.light2}\n                      solid;\n                    padding: 0 ${supersetTheme.gridUnit * 2}px;\n                    color: ${supersetTheme.colors.grayscale.dark1};\n                    font-size: ${supersetTheme.typography.sizes.xs}px;\n                  }\n                  & .tooltip-detail-meta {\n                    & > .ant-tag {\n                      margin-right: 0px;\n                    }\n                  }\n                }\n              ` }),\n        _jsx(ReactAceEditor, { ref: ref, mode: mode, theme: theme, tabSize: tabSize, defaultValue: defaultValue, setOptions: { fontFamily }, ...props })] }\n      );\n    }, \"useTheme{supersetTheme}\\nuseEffectEvent{setCompleters}\\nuseEffect{}\", () => [useTheme, useEffectEvent]));\n  }, placeholder);\n}\nexport const SQLEditor = AsyncAceEditor([\n'mode/sql',\n'theme/github',\n'ext/language_tools',\n'ext/searchbox']\n);\nexport const FullSQLEditor = AsyncAceEditor(['mode/sql', 'theme/github', 'ext/language_tools', 'ext/searchbox'], {\n  // a custom placeholder in SQL lab for less jumpy re-renders\n  placeholder: () => {\n    const gutterBackground = '#e8e8e8'; // from ace-github theme\n    return _jsxs(\"div\", { style: {\n        height: '100%'\n      }, children: [\n      _jsx(\"div\", { style: { width: 41, height: '100%', background: gutterBackground } }),\n\n      _jsx(\"div\", { className: \"ace_content\" })] }\n    );\n  }\n});\nexport const MarkdownEditor = AsyncAceEditor([\n'mode/markdown',\n'theme/textmate']\n);\nexport const TextAreaEditor = AsyncAceEditor([\n'mode/markdown',\n'mode/sql',\n'mode/json',\n'mode/html',\n'mode/javascript',\n'theme/textmate']\n);\nexport const CssEditor = AsyncAceEditor(['mode/css', 'theme/github']);\nexport const JsonEditor = AsyncAceEditor(['mode/json', 'theme/github']);\n/**\n * JSON or Yaml config editor.\n */\nexport const ConfigEditor = AsyncAceEditor([\n'mode/json',\n'mode/yaml',\n'theme/github']\n);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(aceModuleLoaders, \"aceModuleLoaders\", \"/Users/aryurkov/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(AsyncAceEditor, \"AsyncAceEditor\", \"/Users/aryurkov/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(SQLEditor, \"SQLEditor\", \"/Users/aryurkov/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(FullSQLEditor, \"FullSQLEditor\", \"/Users/aryurkov/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(MarkdownEditor, \"MarkdownEditor\", \"/Users/aryurkov/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(TextAreaEditor, \"TextAreaEditor\", \"/Users/aryurkov/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(CssEditor, \"CssEditor\", \"/Users/aryurkov/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(JsonEditor, \"JsonEditor\", \"/Users/aryurkov/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");reactHotLoader.register(ConfigEditor, \"ConfigEditor\", \"/Users/aryurkov/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["forwardRef","useEffect","AsyncEsmComponent","useEffectEvent","useTheme","css","Global","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","getTooltipHTML","aceModuleLoaders","mode/sql","mode/markdown","mode/css","mode/json","mode/yaml","mode/html","mode/javascript","theme/textmate","theme/github","ext/language_tools","ext/searchbox","AsyncAceEditor","aceModules","defaultMode","defaultTheme","defaultTabSize","fontFamily","placeholder","_aceModules$find","_aceModules$find2","reactAcePromise","aceBuildsConfigPromise","cssWorkerUrlPromise","acequirePromise","default","ReactAceEditor","config","cssWorkerUrl","require","acequire","Promise","all","setModuleUrl","map","x","inferredMode","find","startsWith","replace","inferredTheme","__signature__","ExtendedAceEditor","keywords","mode","theme","tabSize","defaultValue","props","ref","supersetTheme","langTools","setCompleters","completer","getCompletions","editor","session","pos","prefix","callback","Number","isNaN","parseInt","getMode","$id","children","styles","gridUnit","colors","grayscale","light1","light5","light4","dark1","light2","typography","sizes","xs","setOptions","SQLEditor","FullSQLEditor","gutterBackground","style","height","width","background","className","MarkdownEditor","TextAreaEditor","CssEditor","JsonEditor","ConfigEditor","reactHotLoader","reactHotLoaderGlobal","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/components/AsyncAceEditor/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { forwardRef, useEffect, ComponentType } from 'react';\n\nimport type {\n  Editor as OrigEditor,\n  IEditSession,\n  Position,\n  TextMode as OrigTextMode,\n} from 'brace';\nimport type AceEditor from 'react-ace';\nimport type { IAceEditorProps } from 'react-ace';\n\nimport AsyncEsmComponent, {\n  PlaceholderProps,\n} from 'src/components/AsyncEsmComponent';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { useTheme, css } from '@superset-ui/core';\nimport { Global } from '@emotion/react';\n\nexport { getTooltipHTML } from './Tooltip';\n\nexport interface AceCompleterKeywordData {\n  name: string;\n  value: string;\n  score: number;\n  meta: string;\n  docText?: string;\n  docHTML?: string;\n}\n\nexport type TextMode = OrigTextMode & { $id: string };\n\nexport interface AceCompleter {\n  insertMatch: (\n    data?: Editor | { value: string } | string,\n    options?: AceCompleterKeywordData,\n  ) => void;\n}\n\nexport type Editor = OrigEditor & {\n  completer: AceCompleter;\n  completers: AceCompleter[];\n};\n\nexport interface AceCompleterKeyword extends AceCompleterKeywordData {\n  completer?: AceCompleter;\n}\n\n/**\n * Async loaders to import brace modules. Must manually create call `import(...)`\n * promises because webpack can only analyze async imports statically.\n */\nconst aceModuleLoaders = {\n  'mode/sql': () => import('brace/mode/sql'),\n  'mode/markdown': () => import('brace/mode/markdown'),\n  'mode/css': () => import('brace/mode/css'),\n  'mode/json': () => import('brace/mode/json'),\n  'mode/yaml': () => import('brace/mode/yaml'),\n  'mode/html': () => import('brace/mode/html'),\n  'mode/javascript': () => import('brace/mode/javascript'),\n  'theme/textmate': () => import('brace/theme/textmate'),\n  'theme/github': () => import('brace/theme/github'),\n  'ext/language_tools': () => import('brace/ext/language_tools'),\n  'ext/searchbox': () => import('brace/ext/searchbox'),\n};\n\nexport type AceModule = keyof typeof aceModuleLoaders;\n\nexport type AsyncAceEditorProps = IAceEditorProps & {\n  keywords?: AceCompleterKeyword[];\n};\n\nexport type AceEditorMode = 'sql';\nexport type AceEditorTheme = 'textmate' | 'github';\nexport type AsyncAceEditorOptions = {\n  defaultMode?: AceEditorMode;\n  defaultTheme?: AceEditorTheme;\n  defaultTabSize?: number;\n  fontFamily?: string;\n  placeholder?: ComponentType<\n    PlaceholderProps & Partial<IAceEditorProps>\n  > | null;\n};\n\n/**\n * Get an async AceEditor with automatical loading of specified ace modules.\n */\nexport default function AsyncAceEditor(\n  aceModules: AceModule[],\n  {\n    defaultMode,\n    defaultTheme,\n    defaultTabSize = 2,\n    fontFamily = 'Menlo, Consolas, Courier New, Ubuntu Mono, source-code-pro, Lucida Console, monospace',\n    placeholder,\n  }: AsyncAceEditorOptions = {},\n) {\n  return AsyncEsmComponent(async () => {\n    const reactAcePromise = import('react-ace');\n    const aceBuildsConfigPromise = import('ace-builds');\n    const cssWorkerUrlPromise = import(\n      'ace-builds/src-min-noconflict/worker-css'\n    );\n    const acequirePromise = import('ace-builds/src-min-noconflict/ace');\n\n    const [\n      { default: ReactAceEditor },\n      { config },\n      { default: cssWorkerUrl },\n      { require: acequire },\n    ] = await Promise.all([\n      reactAcePromise,\n      aceBuildsConfigPromise,\n      cssWorkerUrlPromise,\n      acequirePromise,\n    ]);\n\n    config.setModuleUrl('ace/mode/css_worker', cssWorkerUrl);\n\n    await Promise.all(aceModules.map(x => aceModuleLoaders[x]()));\n\n    const inferredMode =\n      defaultMode ||\n      aceModules.find(x => x.startsWith('mode/'))?.replace('mode/', '');\n    const inferredTheme =\n      defaultTheme ||\n      aceModules.find(x => x.startsWith('theme/'))?.replace('theme/', '');\n\n    return forwardRef<AceEditor, AsyncAceEditorProps>(\n      function ExtendedAceEditor(\n        {\n          keywords,\n          mode = inferredMode,\n          theme = inferredTheme,\n          tabSize = defaultTabSize,\n          defaultValue = '',\n          ...props\n        },\n        ref,\n      ) {\n        const supersetTheme = useTheme();\n        const langTools = acequire('ace/ext/language_tools');\n        const setCompleters = useEffectEvent(\n          (keywords: AceCompleterKeyword[]) => {\n            const completer = {\n              getCompletions: (\n                editor: AceEditor,\n                session: IEditSession,\n                pos: Position,\n                prefix: string,\n                callback: (error: null, wordList: object[]) => void,\n              ) => {\n                // If the prefix starts with a number, don't try to autocomplete\n                if (!Number.isNaN(parseInt(prefix, 10))) {\n                  return;\n                }\n                if (\n                  (session.getMode() as TextMode).$id === `ace/mode/${mode}`\n                ) {\n                  callback(null, keywords);\n                }\n              },\n            };\n            langTools.setCompleters([completer]);\n          },\n        );\n        useEffect(() => {\n          if (keywords) {\n            setCompleters(keywords);\n          }\n        }, [keywords, setCompleters]);\n\n        return (\n          <>\n            <Global\n              styles={css`\n                .ace_tooltip {\n                  margin-left: ${supersetTheme.gridUnit * 2}px;\n                  padding: 0px;\n                  border: 1px solid ${supersetTheme.colors.grayscale.light1};\n                }\n\n                & .tooltip-detail {\n                  background-color: ${supersetTheme.colors.grayscale.light5};\n                  white-space: pre-wrap;\n                  word-break: break-all;\n                  min-width: ${supersetTheme.gridUnit * 50}px;\n                  max-width: ${supersetTheme.gridUnit * 100}px;\n                  & .tooltip-detail-head {\n                    background-color: ${supersetTheme.colors.grayscale.light4};\n                    color: ${supersetTheme.colors.grayscale.dark1};\n                    display: flex;\n                    column-gap: ${supersetTheme.gridUnit}px;\n                    align-items: baseline;\n                    justify-content: space-between;\n                  }\n                  & .tooltip-detail-title {\n                    display: flex;\n                    column-gap: ${supersetTheme.gridUnit}px;\n                  }\n                  & .tooltip-detail-body {\n                    word-break: break-word;\n                  }\n                  & .tooltip-detail-head,\n                  & .tooltip-detail-body {\n                    padding: ${supersetTheme.gridUnit}px\n                      ${supersetTheme.gridUnit * 2}px;\n                  }\n                  & .tooltip-detail-footer {\n                    border-top: 1px ${supersetTheme.colors.grayscale.light2}\n                      solid;\n                    padding: 0 ${supersetTheme.gridUnit * 2}px;\n                    color: ${supersetTheme.colors.grayscale.dark1};\n                    font-size: ${supersetTheme.typography.sizes.xs}px;\n                  }\n                  & .tooltip-detail-meta {\n                    & > .ant-tag {\n                      margin-right: 0px;\n                    }\n                  }\n                }\n              `}\n            />\n            <ReactAceEditor\n              ref={ref}\n              mode={mode}\n              theme={theme}\n              tabSize={tabSize}\n              defaultValue={defaultValue}\n              setOptions={{ fontFamily }}\n              {...props}\n            />\n          </>\n        );\n      },\n    );\n  }, placeholder);\n}\n\nexport const SQLEditor = AsyncAceEditor([\n  'mode/sql',\n  'theme/github',\n  'ext/language_tools',\n  'ext/searchbox',\n]);\n\nexport const FullSQLEditor = AsyncAceEditor(\n  ['mode/sql', 'theme/github', 'ext/language_tools', 'ext/searchbox'],\n  {\n    // a custom placeholder in SQL lab for less jumpy re-renders\n    placeholder: () => {\n      const gutterBackground = '#e8e8e8'; // from ace-github theme\n      return (\n        <div\n          style={{\n            height: '100%',\n          }}\n        >\n          <div\n            style={{ width: 41, height: '100%', background: gutterBackground }}\n          />\n          {/* make it possible to resize the placeholder */}\n          <div className=\"ace_content\" />\n        </div>\n      );\n    },\n  },\n);\n\nexport const MarkdownEditor = AsyncAceEditor([\n  'mode/markdown',\n  'theme/textmate',\n]);\n\nexport const TextAreaEditor = AsyncAceEditor([\n  'mode/markdown',\n  'mode/sql',\n  'mode/json',\n  'mode/html',\n  'mode/javascript',\n  'theme/textmate',\n]);\n\nexport const CssEditor = AsyncAceEditor(['mode/css', 'theme/github']);\n\nexport const JsonEditor = AsyncAceEditor(['mode/json', 'theme/github']);\n\n/**\n * JSON or Yaml config editor.\n */\nexport const ConfigEditor = AsyncAceEditor([\n  'mode/json',\n  'mode/yaml',\n  'theme/github',\n]);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}