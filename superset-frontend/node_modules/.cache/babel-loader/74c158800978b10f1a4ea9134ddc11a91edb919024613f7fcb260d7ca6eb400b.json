{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { getMetricLabel, ensureIsArray } from '@superset-ui/core';\nexport const aggregationOperator = (formData, queryObject) => {\n  const { aggregation = 'LAST_VALUE' } = formData;\n  if (aggregation === 'LAST_VALUE') {\n    return undefined;\n  }\n  const metrics = ensureIsArray(queryObject.metrics);\n  if (metrics.length === 0) {\n    return undefined;\n  }\n  const aggregates = {};\n  metrics.forEach((metric) => {\n    const metricLabel = getMetricLabel(metric);\n    aggregates[metricLabel] = {\n      operator: aggregation,\n      column: metricLabel\n    };\n  });\n  return {\n    operation: 'aggregate',\n    options: {\n      groupby: [],\n      aggregates\n    }\n  };\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(aggregationOperator, \"aggregationOperator\", \"/Users/aryurkov/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/aggregateOperator.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["getMetricLabel","ensureIsArray","aggregationOperator","formData","queryObject","aggregation","undefined","metrics","length","aggregates","forEach","metric","metricLabel","operator","column","operation","options","groupby","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/aggregateOperator.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport {\n  getMetricLabel,\n  ensureIsArray,\n  PostProcessingAggregation,\n  QueryFormData,\n  Aggregates,\n} from '@superset-ui/core';\nimport { PostProcessingFactory } from './types';\n\nexport const aggregationOperator: PostProcessingFactory<\n  PostProcessingAggregation\n> = (formData: QueryFormData, queryObject) => {\n  const { aggregation = 'LAST_VALUE' } = formData;\n\n  if (aggregation === 'LAST_VALUE') {\n    return undefined;\n  }\n\n  const metrics = ensureIsArray(queryObject.metrics);\n  if (metrics.length === 0) {\n    return undefined;\n  }\n\n  const aggregates: Aggregates = {};\n  metrics.forEach(metric => {\n    const metricLabel = getMetricLabel(metric);\n    aggregates[metricLabel] = {\n      operator: aggregation,\n      column: metricLabel,\n    };\n  });\n\n  return {\n    operation: 'aggregate',\n    options: {\n      groupby: [],\n      aggregates,\n    },\n  };\n};\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAkBA,SACEA,cAAc,EACdC,aAAa,QAIR,mBAAmB;AAG1B,OAAO,MAAMC,mBAAmB,GAE5BA,CAACC,QAAuB,EAAEC,WAAW,KAAI;EAC3C,MAAM,EAAEC,WAAW,GAAG,YAAY,EAAE,GAAGF,QAAQ;EAE/C,IAAIE,WAAW,KAAK,YAAY,EAAE;IAChC,OAAOC,SAAS;;EAGlB,MAAMC,OAAO,GAAGN,aAAa,CAACG,WAAW,CAACG,OAAO,CAAC;EAClD,IAAIA,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;IACxB,OAAOF,SAAS;;EAGlB,MAAMG,UAAU,GAAe,EAAE;EACjCF,OAAO,CAACG,OAAO,CAAC,CAAAC,MAAM,KAAG;IACvB,MAAMC,WAAW,GAAGZ,cAAc,CAACW,MAAM,CAAC;IAC1CF,UAAU,CAACG,WAAW,CAAC,GAAG;MACxBC,QAAQ,EAAER,WAAW;MACrBS,MAAM,EAAEF;KACT;EACH,CAAC,CAAC;EAEF,OAAO;IACLG,SAAS,EAAE,WAAW;IACtBC,OAAO,EAAE;MACPC,OAAO,EAAE,EAAE;MACXR;;GAEH;AACH,CAAC,CAAC,mBAAAS,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAd,SAAA,MAAAY,cAAA,WAAAA,cAAA,CAAAG,QAAA,CA9BWnB,mBAAmB,sKAAAoB,WAAA,UAAAH,oBAAA,mBAAAA,oBAAA,CAAAG,WAAA,GAAAhB,SAAA,CAAAgB,WAAA,IAAAA,WAAA,CAAAC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}