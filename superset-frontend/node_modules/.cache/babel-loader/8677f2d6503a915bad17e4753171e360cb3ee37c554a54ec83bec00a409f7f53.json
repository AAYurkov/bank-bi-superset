{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { CategoricalColorNamespace, getMetricLabel, tooltipHtml } from '@superset-ui/core';\nimport { extent as d3Extent } from 'd3-array';\nimport { DEFAULT_FORM_DATA as DEFAULT_GRAPH_FORM_DATA } from './types';\nimport { DEFAULT_GRAPH_SERIES_OPTION } from './constants';\nimport { getChartPadding, getColtypesMapping, getLegendProps, sanitizeHtml } from '../utils/series';\nimport { getDefaultTooltip } from '../utils/tooltip';\nfunction verifyEdgeSymbol(symbol) {\n  if (symbol === 'none' || symbol === 'circle' || symbol === 'arrow') {\n    return symbol;\n  }\n  return 'none';\n}\nfunction parseEdgeSymbol(symbols) {\n  const [start, end] = (symbols || '').split(',');\n  return [verifyEdgeSymbol(start), verifyEdgeSymbol(end)];\n}\n/**\n * Emphasized edge width with a min and max.\n */\nfunction getEmphasizedEdgeWidth(width) {\n  return Math.max(5, Math.min(width * 2, 20));\n}\n/**\n * Normalize node size, edge width, and apply label visibility thresholds.\n */\nfunction normalizeStyles(nodes, links, { baseNodeSize, baseEdgeWidth, showSymbolThreshold }) {\n  const minNodeSize = baseNodeSize * 0.5;\n  const maxNodeSize = baseNodeSize * 2;\n  const minEdgeWidth = baseEdgeWidth * 0.5;\n  const maxEdgeWidth = baseEdgeWidth * 2;\n  const [nodeMinValue, nodeMaxValue] = d3Extent(nodes, (x) => x.value);\n  const nodeSpread = nodeMaxValue - nodeMinValue;\n  nodes.forEach((node) => {\n    // eslint-disable-next-line no-param-reassign\n    node.symbolSize =\n    ((node.value - nodeMinValue) / nodeSpread * maxNodeSize || 0) +\n    minNodeSize;\n    // eslint-disable-next-line no-param-reassign\n    node.label = {\n      ...node.label,\n      show: showSymbolThreshold ? node.value > showSymbolThreshold : true\n    };\n  });\n  const [linkMinValue, linkMaxValue] = d3Extent(links, (x) => x.value);\n  const linkSpread = linkMaxValue - linkMinValue;\n  links.forEach((link) => {\n    const lineWidth = (link.value - linkMinValue) / linkSpread * maxEdgeWidth ||\n    0 + minEdgeWidth;\n    // eslint-disable-next-line no-param-reassign\n    link.lineStyle.width = lineWidth;\n    // eslint-disable-next-line no-param-reassign\n    link.emphasis.lineStyle = {\n      ...link.emphasis.lineStyle,\n      width: getEmphasizedEdgeWidth(lineWidth)\n    };\n    // eslint-disable-next-line no-param-reassign\n    link.select.lineStyle = {\n      ...link.select.lineStyle,\n      width: getEmphasizedEdgeWidth(lineWidth * 0.8),\n      opacity: 1\n    };\n  });\n}\nfunction getKeyByValue(object, value) {\n  return Object.keys(object).find((key) => object[key] === value);\n}\nfunction getCategoryName(columnName, name) {\n  if (name === false) {\n    return `${columnName}: false`;\n  }\n  if (name === true) {\n    return `${columnName}: true`;\n  }\n  if (name == null) {\n    return 'N/A';\n  }\n  return String(name);\n}\nexport default function transformProps(chartProps) {\n  const { width, height, formData, queriesData, hooks, inContextMenu, filterState, emitCrossFilters, theme } = chartProps;\n  const data = queriesData[0].data || [];\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n  const { source, target, sourceCategory, targetCategory, colorScheme, metric = '', layout, roam, draggable, selectedMode, showSymbolThreshold, edgeLength, gravity, repulsion, friction, legendMargin, legendOrientation, legendType, showLegend, baseEdgeWidth, baseNodeSize, edgeSymbol, sliceId } = { ...DEFAULT_GRAPH_FORM_DATA, ...formData };\n  const refs = {};\n  const metricLabel = getMetricLabel(metric);\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n  const firstColor = colorFn.range()[0];\n  const nodes = {};\n  const categories = new Set();\n  const echartNodes = [];\n  const echartLinks = [];\n  /**\n   * Get the node id of an existing node,\n   * or create a new node if it doesn't exist.\n   */\n  function getOrCreateNode(name, col, category, color) {\n    if (!(name in nodes)) {\n      nodes[name] = echartNodes.length;\n      echartNodes.push({\n        id: String(nodes[name]),\n        name,\n        col,\n        value: 0,\n        category,\n        select: DEFAULT_GRAPH_SERIES_OPTION.select,\n        tooltip: {\n          ...getDefaultTooltip(refs),\n          ...DEFAULT_GRAPH_SERIES_OPTION.tooltip\n        },\n        itemStyle: { color }\n      });\n    }\n    const node = echartNodes[nodes[name]];\n    if (category) {\n      categories.add(category);\n      // category may be empty when one of `sourceCategory`\n      // or `targetCategory` is not set.\n      if (!node.category) {\n        node.category = category;\n      }\n    }\n    return node;\n  }\n  data.forEach((link) => {\n    const value = link[metricLabel];\n    if (!value) {\n      return;\n    }\n    const sourceName = link[source];\n    const targetName = link[target];\n    const sourceCategoryName = sourceCategory ?\n    getCategoryName(sourceCategory, link[sourceCategory]) :\n    undefined;\n    const targetCategoryName = targetCategory ?\n    getCategoryName(targetCategory, link[targetCategory]) :\n    undefined;\n    const sourceNodeColor = sourceCategoryName ?\n    colorFn(sourceCategoryName) :\n    firstColor;\n    const targetNodeColor = targetCategoryName ?\n    colorFn(targetCategoryName) :\n    firstColor;\n    const sourceNode = getOrCreateNode(sourceName, source, sourceCategoryName, sourceNodeColor);\n    const targetNode = getOrCreateNode(targetName, target, targetCategoryName, targetNodeColor);\n    sourceNode.value += value;\n    targetNode.value += value;\n    echartLinks.push({\n      source: sourceNode.id,\n      target: targetNode.id,\n      value,\n      lineStyle: {\n        color: sourceNodeColor\n      },\n      emphasis: {},\n      select: {}\n    });\n  });\n  normalizeStyles(echartNodes, echartLinks, {\n    showSymbolThreshold,\n    baseEdgeWidth,\n    baseNodeSize\n  });\n  const categoryList = [...categories];\n  const series = [\n  {\n    zoom: DEFAULT_GRAPH_SERIES_OPTION.zoom,\n    type: 'graph',\n    categories: categoryList.map((c) => ({\n      name: c,\n      itemStyle: {\n        color: colorFn(c, sliceId)\n      }\n    })),\n    layout,\n    force: {\n      ...DEFAULT_GRAPH_SERIES_OPTION.force,\n      edgeLength,\n      gravity,\n      repulsion,\n      friction\n    },\n    circular: DEFAULT_GRAPH_SERIES_OPTION.circular,\n    data: echartNodes,\n    links: echartLinks,\n    roam,\n    draggable,\n    edgeSymbol: parseEdgeSymbol(edgeSymbol),\n    edgeSymbolSize: baseEdgeWidth * 2,\n    selectedMode,\n    ...getChartPadding(showLegend, legendOrientation, legendMargin),\n    animation: DEFAULT_GRAPH_SERIES_OPTION.animation,\n    label: DEFAULT_GRAPH_SERIES_OPTION.label,\n    lineStyle: DEFAULT_GRAPH_SERIES_OPTION.lineStyle,\n    emphasis: DEFAULT_GRAPH_SERIES_OPTION.emphasis\n  }];\n\n  const echartOptions = {\n    animationDuration: DEFAULT_GRAPH_SERIES_OPTION.animationDuration,\n    animationEasing: DEFAULT_GRAPH_SERIES_OPTION.animationEasing,\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      formatter: (params) => {\n        const source = sanitizeHtml(getKeyByValue(nodes, Number(params.data.source)));\n        const target = sanitizeHtml(getKeyByValue(nodes, Number(params.data.target)));\n        const title = `${source} > ${target}`;\n        return tooltipHtml([[metricLabel, `${params.value}`]], title);\n      }\n    },\n    legend: {\n      ...getLegendProps(legendType, legendOrientation, showLegend, theme),\n      data: categoryList\n    },\n    series\n  };\n  const { onContextMenu, setDataMask } = hooks;\n  return {\n    width,\n    height,\n    formData,\n    echartOptions,\n    onContextMenu,\n    setDataMask,\n    filterState,\n    refs,\n    emitCrossFilters,\n    coltypeMapping\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(verifyEdgeSymbol, \"verifyEdgeSymbol\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/Graph/transformProps.ts\");reactHotLoader.register(parseEdgeSymbol, \"parseEdgeSymbol\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/Graph/transformProps.ts\");reactHotLoader.register(getEmphasizedEdgeWidth, \"getEmphasizedEdgeWidth\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/Graph/transformProps.ts\");reactHotLoader.register(normalizeStyles, \"normalizeStyles\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/Graph/transformProps.ts\");reactHotLoader.register(getKeyByValue, \"getKeyByValue\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/Graph/transformProps.ts\");reactHotLoader.register(getCategoryName, \"getCategoryName\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/Graph/transformProps.ts\");reactHotLoader.register(transformProps, \"transformProps\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/Graph/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["CategoricalColorNamespace","getMetricLabel","tooltipHtml","extent","d3Extent","DEFAULT_FORM_DATA","DEFAULT_GRAPH_FORM_DATA","DEFAULT_GRAPH_SERIES_OPTION","getChartPadding","getColtypesMapping","getLegendProps","sanitizeHtml","getDefaultTooltip","verifyEdgeSymbol","symbol","parseEdgeSymbol","symbols","start","end","split","getEmphasizedEdgeWidth","width","Math","max","min","normalizeStyles","nodes","links","baseNodeSize","baseEdgeWidth","showSymbolThreshold","minNodeSize","maxNodeSize","minEdgeWidth","maxEdgeWidth","nodeMinValue","nodeMaxValue","x","value","nodeSpread","forEach","node","symbolSize","label","show","linkMinValue","linkMaxValue","linkSpread","link","lineWidth","lineStyle","emphasis","select","opacity","getKeyByValue","object","Object","keys","find","key","getCategoryName","columnName","name","String","transformProps","chartProps","height","formData","queriesData","hooks","inContextMenu","filterState","emitCrossFilters","theme","data","coltypeMapping","source","target","sourceCategory","targetCategory","colorScheme","metric","layout","roam","draggable","selectedMode","edgeLength","gravity","repulsion","friction","legendMargin","legendOrientation","legendType","showLegend","edgeSymbol","sliceId","refs","metricLabel","colorFn","getScale","firstColor","range","categories","Set","echartNodes","echartLinks","getOrCreateNode","col","category","color","length","push","id","tooltip","itemStyle","add","sourceName","targetName","sourceCategoryName","undefined","targetCategoryName","sourceNodeColor","targetNodeColor","sourceNode","targetNode","categoryList","series","zoom","type","map","c","force","circular","edgeSymbolSize","animation","echartOptions","animationDuration","animationEasing","formatter","params","Number","title","legend","onContextMenu","setDataMask","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/Graph/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  CategoricalColorNamespace,\n  getMetricLabel,\n  DataRecord,\n  DataRecordValue,\n  tooltipHtml,\n} from '@superset-ui/core';\nimport type { EChartsCoreOption } from 'echarts/core';\nimport type { GraphSeriesOption } from 'echarts/charts';\nimport type { GraphEdgeItemOption } from 'echarts/types/src/chart/graph/GraphSeries';\nimport { extent as d3Extent } from 'd3-array';\nimport {\n  EchartsGraphFormData,\n  EChartGraphNode,\n  DEFAULT_FORM_DATA as DEFAULT_GRAPH_FORM_DATA,\n  EdgeSymbol,\n  GraphChartTransformedProps,\n  EchartsGraphChartProps,\n} from './types';\nimport { DEFAULT_GRAPH_SERIES_OPTION } from './constants';\nimport {\n  getChartPadding,\n  getColtypesMapping,\n  getLegendProps,\n  sanitizeHtml,\n} from '../utils/series';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { Refs } from '../types';\n\ntype EdgeWithStyles = GraphEdgeItemOption & {\n  lineStyle: Exclude<GraphEdgeItemOption['lineStyle'], undefined>;\n  emphasis: Exclude<GraphEdgeItemOption['emphasis'], undefined>;\n  select: Exclude<GraphEdgeItemOption['select'], undefined>;\n};\n\nfunction verifyEdgeSymbol(symbol: string): EdgeSymbol {\n  if (symbol === 'none' || symbol === 'circle' || symbol === 'arrow') {\n    return symbol;\n  }\n  return 'none';\n}\n\nfunction parseEdgeSymbol(symbols?: string | null): [EdgeSymbol, EdgeSymbol] {\n  const [start, end] = (symbols || '').split(',');\n  return [verifyEdgeSymbol(start), verifyEdgeSymbol(end)];\n}\n\n/**\n * Emphasized edge width with a min and max.\n */\nfunction getEmphasizedEdgeWidth(width: number) {\n  return Math.max(5, Math.min(width * 2, 20));\n}\n\n/**\n * Normalize node size, edge width, and apply label visibility thresholds.\n */\nfunction normalizeStyles(\n  nodes: EChartGraphNode[],\n  links: EdgeWithStyles[],\n  {\n    baseNodeSize,\n    baseEdgeWidth,\n    showSymbolThreshold,\n  }: {\n    baseNodeSize: number;\n    baseEdgeWidth: number;\n    showSymbolThreshold?: number;\n  },\n) {\n  const minNodeSize = baseNodeSize * 0.5;\n  const maxNodeSize = baseNodeSize * 2;\n  const minEdgeWidth = baseEdgeWidth * 0.5;\n  const maxEdgeWidth = baseEdgeWidth * 2;\n  const [nodeMinValue, nodeMaxValue] = d3Extent(nodes, x => x.value) as [\n    number,\n    number,\n  ];\n\n  const nodeSpread = nodeMaxValue - nodeMinValue;\n  nodes.forEach(node => {\n    // eslint-disable-next-line no-param-reassign\n    node.symbolSize =\n      (((node.value - nodeMinValue) / nodeSpread) * maxNodeSize || 0) +\n      minNodeSize;\n    // eslint-disable-next-line no-param-reassign\n    node.label = {\n      ...node.label,\n      show: showSymbolThreshold ? node.value > showSymbolThreshold : true,\n    };\n  });\n\n  const [linkMinValue, linkMaxValue] = d3Extent(links, x => x.value) as [\n    number,\n    number,\n  ];\n  const linkSpread = linkMaxValue - linkMinValue;\n  links.forEach(link => {\n    const lineWidth =\n      ((link.value! - linkMinValue) / linkSpread) * maxEdgeWidth ||\n      0 + minEdgeWidth;\n    // eslint-disable-next-line no-param-reassign\n    link.lineStyle.width = lineWidth;\n    // eslint-disable-next-line no-param-reassign\n    link.emphasis.lineStyle = {\n      ...link.emphasis.lineStyle,\n      width: getEmphasizedEdgeWidth(lineWidth),\n    };\n    // eslint-disable-next-line no-param-reassign\n    link.select.lineStyle = {\n      ...link.select.lineStyle,\n      width: getEmphasizedEdgeWidth(lineWidth * 0.8),\n      opacity: 1,\n    };\n  });\n}\n\nfunction getKeyByValue(\n  object: { [name: string]: number },\n  value: number,\n): string {\n  return Object.keys(object).find(key => object[key] === value) as string;\n}\n\nfunction getCategoryName(columnName: string, name?: DataRecordValue) {\n  if (name === false) {\n    return `${columnName}: false`;\n  }\n  if (name === true) {\n    return `${columnName}: true`;\n  }\n  if (name == null) {\n    return 'N/A';\n  }\n  return String(name);\n}\n\nexport default function transformProps(\n  chartProps: EchartsGraphChartProps,\n): GraphChartTransformedProps {\n  const {\n    width,\n    height,\n    formData,\n    queriesData,\n    hooks,\n    inContextMenu,\n    filterState,\n    emitCrossFilters,\n    theme,\n  } = chartProps;\n  const data: DataRecord[] = queriesData[0].data || [];\n  const coltypeMapping = getColtypesMapping(queriesData[0]);\n  const {\n    source,\n    target,\n    sourceCategory,\n    targetCategory,\n    colorScheme,\n    metric = '',\n    layout,\n    roam,\n    draggable,\n    selectedMode,\n    showSymbolThreshold,\n    edgeLength,\n    gravity,\n    repulsion,\n    friction,\n    legendMargin,\n    legendOrientation,\n    legendType,\n    showLegend,\n    baseEdgeWidth,\n    baseNodeSize,\n    edgeSymbol,\n    sliceId,\n  }: EchartsGraphFormData = { ...DEFAULT_GRAPH_FORM_DATA, ...formData };\n\n  const refs: Refs = {};\n  const metricLabel = getMetricLabel(metric);\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme as string);\n  const firstColor = colorFn.range()[0];\n  const nodes: { [name: string]: number } = {};\n  const categories: Set<string> = new Set();\n  const echartNodes: EChartGraphNode[] = [];\n  const echartLinks: EdgeWithStyles[] = [];\n\n  /**\n   * Get the node id of an existing node,\n   * or create a new node if it doesn't exist.\n   */\n  function getOrCreateNode(\n    name: string,\n    col: string,\n    category?: string,\n    color?: string,\n  ) {\n    if (!(name in nodes)) {\n      nodes[name] = echartNodes.length;\n      echartNodes.push({\n        id: String(nodes[name]),\n        name,\n        col,\n        value: 0,\n        category,\n        select: DEFAULT_GRAPH_SERIES_OPTION.select,\n        tooltip: {\n          ...getDefaultTooltip(refs),\n          ...DEFAULT_GRAPH_SERIES_OPTION.tooltip,\n        },\n        itemStyle: { color },\n      });\n    }\n    const node = echartNodes[nodes[name]];\n    if (category) {\n      categories.add(category);\n      // category may be empty when one of `sourceCategory`\n      // or `targetCategory` is not set.\n      if (!node.category) {\n        node.category = category;\n      }\n    }\n    return node;\n  }\n\n  data.forEach(link => {\n    const value = link[metricLabel] as number;\n    if (!value) {\n      return;\n    }\n    const sourceName = link[source] as string;\n    const targetName = link[target] as string;\n    const sourceCategoryName = sourceCategory\n      ? getCategoryName(sourceCategory, link[sourceCategory])\n      : undefined;\n    const targetCategoryName = targetCategory\n      ? getCategoryName(targetCategory, link[targetCategory])\n      : undefined;\n    const sourceNodeColor = sourceCategoryName\n      ? colorFn(sourceCategoryName)\n      : firstColor;\n    const targetNodeColor = targetCategoryName\n      ? colorFn(targetCategoryName)\n      : firstColor;\n\n    const sourceNode = getOrCreateNode(\n      sourceName,\n      source,\n      sourceCategoryName,\n      sourceNodeColor,\n    );\n    const targetNode = getOrCreateNode(\n      targetName,\n      target,\n      targetCategoryName,\n      targetNodeColor,\n    );\n\n    sourceNode.value += value;\n    targetNode.value += value;\n\n    echartLinks.push({\n      source: sourceNode.id,\n      target: targetNode.id,\n      value,\n      lineStyle: {\n        color: sourceNodeColor,\n      },\n      emphasis: {},\n      select: {},\n    });\n  });\n\n  normalizeStyles(echartNodes, echartLinks, {\n    showSymbolThreshold,\n    baseEdgeWidth,\n    baseNodeSize,\n  });\n\n  const categoryList = [...categories];\n  const series: GraphSeriesOption[] = [\n    {\n      zoom: DEFAULT_GRAPH_SERIES_OPTION.zoom,\n      type: 'graph',\n      categories: categoryList.map(c => ({\n        name: c,\n        itemStyle: {\n          color: colorFn(c, sliceId),\n        },\n      })),\n      layout,\n      force: {\n        ...DEFAULT_GRAPH_SERIES_OPTION.force,\n        edgeLength,\n        gravity,\n        repulsion,\n        friction,\n      },\n      circular: DEFAULT_GRAPH_SERIES_OPTION.circular,\n      data: echartNodes,\n      links: echartLinks,\n      roam,\n      draggable,\n      edgeSymbol: parseEdgeSymbol(edgeSymbol),\n      edgeSymbolSize: baseEdgeWidth * 2,\n      selectedMode,\n      ...getChartPadding(showLegend, legendOrientation, legendMargin),\n      animation: DEFAULT_GRAPH_SERIES_OPTION.animation,\n      label: DEFAULT_GRAPH_SERIES_OPTION.label,\n      lineStyle: DEFAULT_GRAPH_SERIES_OPTION.lineStyle,\n      emphasis: DEFAULT_GRAPH_SERIES_OPTION.emphasis,\n    },\n  ];\n\n  const echartOptions: EChartsCoreOption = {\n    animationDuration: DEFAULT_GRAPH_SERIES_OPTION.animationDuration,\n    animationEasing: DEFAULT_GRAPH_SERIES_OPTION.animationEasing,\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      show: !inContextMenu,\n      formatter: (params: any): string => {\n        const source = sanitizeHtml(\n          getKeyByValue(nodes, Number(params.data.source)),\n        );\n        const target = sanitizeHtml(\n          getKeyByValue(nodes, Number(params.data.target)),\n        );\n        const title = `${source} > ${target}`;\n        return tooltipHtml([[metricLabel, `${params.value}`]], title);\n      },\n    },\n    legend: {\n      ...getLegendProps(legendType, legendOrientation, showLegend, theme),\n      data: categoryList,\n    },\n    series,\n  };\n\n  const { onContextMenu, setDataMask } = hooks;\n\n  return {\n    width,\n    height,\n    formData,\n    echartOptions,\n    onContextMenu,\n    setDataMask,\n    filterState,\n    refs,\n    emitCrossFilters,\n    coltypeMapping,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}