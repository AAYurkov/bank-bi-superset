{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { createContext, lazy, useEffect, useMemo, useRef } from 'react';\nimport { Global } from '@emotion/react';\nimport { useHistory } from 'react-router-dom';\nimport { t, useTheme } from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport Loading from 'src/components/Loading';\nimport { useDashboard, useDashboardCharts, useDashboardDatasets } from 'src/hooks/apiResources';\nimport { hydrateDashboard } from 'src/dashboard/actions/hydrate';\nimport { setDatasources } from 'src/dashboard/actions/datasources';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { getAllActiveFilters, getRelevantDataMask } from 'src/dashboard/util/activeAllDashboardFilters';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { setDatasetsStatus } from 'src/dashboard/actions/dashboardState';\nimport { getFilterValue, getPermalinkValue } from 'src/dashboard/components/nativeFilters/FilterBar/keyValue';\nimport DashboardContainer from 'src/dashboard/containers/Dashboard';\nimport { nanoid } from 'nanoid';\nimport { chartContextMenuStyles, filterCardPopoverStyle, focusStyle, headerStyles, chartHeaderStyles } from '../styles';\nimport SyncDashboardState, { getDashboardContextLocalStorage } from '../components/SyncDashboardState';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const DashboardPageIdContext = /*#__PURE__*/createContext('');\nconst DashboardBuilder = /*#__PURE__*/lazy(() => import(\n  /* webpackChunkName: \"DashboardContainer\" */\n  /* webpackPreload: true */\n  'src/dashboard/components/DashboardBuilder/DashboardBuilder'));\nconst originalDocumentTitle = document.title;\n// TODO: move to Dashboard.jsx when it's refactored to functional component\nconst selectRelevantDatamask = createSelector((state) => state.dataMask, // the first argument accesses relevant data from global state\n// the first argument accesses relevant data from global state\n(dataMask) => getRelevantDataMask(dataMask, 'ownState'));\nconst selectChartConfiguration = (state) => {var _state$dashboardInfo$;return (_state$dashboardInfo$ = state.dashboardInfo.metadata) == null ? void 0 : _state$dashboardInfo$.chart_configuration;};\nconst selectNativeFilters = (state) => state.nativeFilters.filters;\nconst selectDataMask = (state) => state.dataMask;\nconst selectAllSliceIds = (state) => state.dashboardState.sliceIds;\n// TODO: move to Dashboard.jsx when it's refactored to functional component\nconst selectActiveFilters = createSelector([\nselectChartConfiguration,\nselectNativeFilters,\nselectDataMask,\nselectAllSliceIds],\n(chartConfiguration, nativeFilters, dataMask, allSliceIds) => ({\n  ...getActiveFilters(),\n  ...getAllActiveFilters({\n    // eslint-disable-next-line camelcase\n    chartConfiguration,\n    nativeFilters,\n    dataMask,\n    allSliceIds\n  })\n}));\nexport const DashboardPage = ({ idOrSlug }) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const dashboardPageId = useMemo(() => nanoid(), []);\n  const hasDashboardInfoInitiated = useSelector(({ dashboardInfo }) => dashboardInfo && Object.keys(dashboardInfo).length > 0);\n  const { addDangerToast } = useToasts();\n  const { result: dashboard, error: dashboardApiError } = useDashboard(idOrSlug);\n  const { result: charts, error: chartsApiError } = useDashboardCharts(idOrSlug);\n  const { result: datasets, error: datasetsApiError, status } = useDashboardDatasets(idOrSlug);\n  const isDashboardHydrated = useRef(false);\n  const error = dashboardApiError || chartsApiError;\n  const readyToRender = Boolean(dashboard && charts);\n  const { dashboard_title, css, id = 0 } = dashboard || {};\n  useEffect(() => {\n    // mark tab id as redundant when user closes browser tab - a new id will be\n    // generated next time user opens a dashboard and the old one won't be reused\n    const handleTabClose = () => {\n      const dashboardsContexts = getDashboardContextLocalStorage();\n      setItem(LocalStorageKeys.DashboardExploreContext, {\n        ...dashboardsContexts,\n        [dashboardPageId]: {\n          ...dashboardsContexts[dashboardPageId],\n          isRedundant: true\n        }\n      });\n    };\n    window.addEventListener('beforeunload', handleTabClose);\n    return () => {\n      window.removeEventListener('beforeunload', handleTabClose);\n    };\n  }, [dashboardPageId]);\n  useEffect(() => {\n    dispatch(setDatasetsStatus(status));\n  }, [dispatch, status]);\n  useEffect(() => {\n    // eslint-disable-next-line consistent-return\n    async function getDataMaskApplied() {\n      const permalinkKey = getUrlParam(URL_PARAMS.permalinkKey);\n      const nativeFilterKeyValue = getUrlParam(URL_PARAMS.nativeFiltersKey);\n      const isOldRison = getUrlParam(URL_PARAMS.nativeFilters);\n      let dataMask = nativeFilterKeyValue || {};\n      // activeTabs is initialized with undefined so that it doesn't override\n      // the currently stored value when hydrating\n      let activeTabs;\n      if (permalinkKey) {\n        const permalinkValue = await getPermalinkValue(permalinkKey);\n        if (permalinkValue) {\n          ({ dataMask, activeTabs } = permalinkValue.state);\n        }\n      } else\n      if (nativeFilterKeyValue) {\n        dataMask = await getFilterValue(id, nativeFilterKeyValue);\n      }\n      if (isOldRison) {\n        dataMask = isOldRison;\n      }\n      if (readyToRender) {\n        if (!isDashboardHydrated.current) {\n          isDashboardHydrated.current = true;\n        }\n        dispatch(hydrateDashboard({\n          history,\n          dashboard,\n          charts,\n          activeTabs,\n          dataMask\n        }));\n      }\n      return null;\n    }\n    if (id)\n    getDataMaskApplied();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [readyToRender]);\n  useEffect(() => {\n    if (dashboard_title) {\n      document.title = dashboard_title;\n    }\n    return () => {\n      document.title = originalDocumentTitle;\n    };\n  }, [dashboard_title]);\n  useEffect(() => {\n    if (typeof css === 'string') {\n      // returning will clean up custom css\n      // when dashboard unmounts or changes\n      return injectCustomCss(css);\n    }\n    return () => {};\n  }, [css]);\n  useEffect(() => {\n    if (datasetsApiError) {\n      addDangerToast(t('Error loading chart datasources. Filters may not work correctly.'));\n    } else\n    {\n      dispatch(setDatasources(datasets));\n    }\n  }, [addDangerToast, datasets, datasetsApiError, dispatch]);\n  const relevantDataMask = useSelector(selectRelevantDatamask);\n  const activeFilters = useSelector(selectActiveFilters);\n  if (error)\n  throw error; // caught in error boundary\n  const globalStyles = useMemo(() => [\n  filterCardPopoverStyle(theme),\n  headerStyles(theme),\n  chartContextMenuStyles(theme),\n  focusStyle(theme),\n  chartHeaderStyles(theme)],\n  [theme]);\n  if (error)\n  throw error; // caught in error boundary\n  const DashboardBuilderComponent = useMemo(() => _jsx(DashboardBuilder, {}), []);\n  return _jsxs(_Fragment, { children: [\n    _jsx(Global, { styles: globalStyles }),\n    readyToRender && hasDashboardInfoInitiated ? _jsxs(_Fragment, { children: [\n      _jsx(SyncDashboardState, { dashboardPageId: dashboardPageId }),\n      _jsx(DashboardPageIdContext.Provider, { value: dashboardPageId, children:\n        _jsx(DashboardContainer, { activeFilters: activeFilters, ownDataCharts: relevantDataMask, children:\n          DashboardBuilderComponent }\n        ) }\n      )] }\n    ) : _jsx(Loading, {})] }\n  );\n};__signature__(DashboardPage, \"useTheme{theme}\\nuseDispatch{dispatch}\\nuseHistory{history}\\nuseMemo{dashboardPageId}\\nuseSelector{hasDashboardInfoInitiated}\\nuseToasts{{ addDangerToast }}\\nuseDashboard{{ result: dashboard, error: dashboardApiError }}\\nuseDashboardCharts{{ result: charts, error: chartsApiError }}\\nuseDashboardDatasets{{ result: datasets, error: datasetsApiError, status, }}\\nuseRef{isDashboardHydrated}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseSelector{relevantDataMask}\\nuseSelector{activeFilters}\\nuseMemo{globalStyles}\\nuseMemo{DashboardBuilderComponent}\", () => [useTheme, useDispatch, useHistory, useSelector, useToasts, useDashboard, useDashboardCharts, useDashboardDatasets, useSelector, useSelector]);const _default =\nDashboardPage;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DashboardPageIdContext, \"DashboardPageIdContext\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/containers/DashboardPage.tsx\");reactHotLoader.register(DashboardBuilder, \"DashboardBuilder\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/containers/DashboardPage.tsx\");reactHotLoader.register(originalDocumentTitle, \"originalDocumentTitle\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/containers/DashboardPage.tsx\");reactHotLoader.register(selectRelevantDatamask, \"selectRelevantDatamask\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/containers/DashboardPage.tsx\");reactHotLoader.register(selectChartConfiguration, \"selectChartConfiguration\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/containers/DashboardPage.tsx\");reactHotLoader.register(selectNativeFilters, \"selectNativeFilters\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/containers/DashboardPage.tsx\");reactHotLoader.register(selectDataMask, \"selectDataMask\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/containers/DashboardPage.tsx\");reactHotLoader.register(selectAllSliceIds, \"selectAllSliceIds\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/containers/DashboardPage.tsx\");reactHotLoader.register(selectActiveFilters, \"selectActiveFilters\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/containers/DashboardPage.tsx\");reactHotLoader.register(DashboardPage, \"DashboardPage\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/containers/DashboardPage.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/containers/DashboardPage.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["createContext","lazy","useEffect","useMemo","useRef","Global","useHistory","t","useTheme","useDispatch","useSelector","createSelector","useToasts","Loading","useDashboard","useDashboardCharts","useDashboardDatasets","hydrateDashboard","setDatasources","injectCustomCss","getAllActiveFilters","getRelevantDataMask","getActiveFilters","LocalStorageKeys","setItem","URL_PARAMS","getUrlParam","setDatasetsStatus","getFilterValue","getPermalinkValue","DashboardContainer","nanoid","chartContextMenuStyles","filterCardPopoverStyle","focusStyle","headerStyles","chartHeaderStyles","SyncDashboardState","getDashboardContextLocalStorage","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","DashboardPageIdContext","DashboardBuilder","originalDocumentTitle","document","title","selectRelevantDatamask","state","dataMask","selectChartConfiguration","_state$dashboardInfo$","dashboardInfo","metadata","chart_configuration","selectNativeFilters","nativeFilters","filters","selectDataMask","selectAllSliceIds","dashboardState","sliceIds","selectActiveFilters","chartConfiguration","allSliceIds","DashboardPage","idOrSlug","theme","dispatch","history","dashboardPageId","hasDashboardInfoInitiated","Object","keys","length","addDangerToast","result","dashboard","error","dashboardApiError","charts","chartsApiError","datasets","datasetsApiError","status","isDashboardHydrated","readyToRender","Boolean","dashboard_title","css","id","handleTabClose","dashboardsContexts","DashboardExploreContext","isRedundant","window","addEventListener","removeEventListener","getDataMaskApplied","permalinkKey","nativeFilterKeyValue","nativeFiltersKey","isOldRison","activeTabs","permalinkValue","current","relevantDataMask","activeFilters","globalStyles","DashboardBuilderComponent","children","styles","Provider","value","ownDataCharts","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/dashboard/containers/DashboardPage.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { createContext, lazy, FC, useEffect, useMemo, useRef } from 'react';\nimport { Global } from '@emotion/react';\nimport { useHistory } from 'react-router-dom';\nimport { t, useTheme } from '@superset-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport Loading from 'src/components/Loading';\nimport {\n  useDashboard,\n  useDashboardCharts,\n  useDashboardDatasets,\n} from 'src/hooks/apiResources';\nimport { hydrateDashboard } from 'src/dashboard/actions/hydrate';\nimport { setDatasources } from 'src/dashboard/actions/datasources';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport {\n  getAllActiveFilters,\n  getRelevantDataMask,\n} from 'src/dashboard/util/activeAllDashboardFilters';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { setDatasetsStatus } from 'src/dashboard/actions/dashboardState';\nimport {\n  getFilterValue,\n  getPermalinkValue,\n} from 'src/dashboard/components/nativeFilters/FilterBar/keyValue';\nimport DashboardContainer from 'src/dashboard/containers/Dashboard';\n\nimport { nanoid } from 'nanoid';\nimport { RootState } from '../types';\nimport {\n  chartContextMenuStyles,\n  filterCardPopoverStyle,\n  focusStyle,\n  headerStyles,\n  chartHeaderStyles,\n} from '../styles';\nimport SyncDashboardState, {\n  getDashboardContextLocalStorage,\n} from '../components/SyncDashboardState';\n\nexport const DashboardPageIdContext = createContext('');\n\nconst DashboardBuilder = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"DashboardContainer\" */\n      /* webpackPreload: true */\n      'src/dashboard/components/DashboardBuilder/DashboardBuilder'\n    ),\n);\n\nconst originalDocumentTitle = document.title;\n\ntype PageProps = {\n  idOrSlug: string;\n};\n\n// TODO: move to Dashboard.jsx when it's refactored to functional component\nconst selectRelevantDatamask = createSelector(\n  (state: RootState) => state.dataMask, // the first argument accesses relevant data from global state\n  dataMask => getRelevantDataMask(dataMask, 'ownState'), // the second parameter conducts the transformation\n);\n\nconst selectChartConfiguration = (state: RootState) =>\n  state.dashboardInfo.metadata?.chart_configuration;\nconst selectNativeFilters = (state: RootState) => state.nativeFilters.filters;\nconst selectDataMask = (state: RootState) => state.dataMask;\nconst selectAllSliceIds = (state: RootState) => state.dashboardState.sliceIds;\n// TODO: move to Dashboard.jsx when it's refactored to functional component\nconst selectActiveFilters = createSelector(\n  [\n    selectChartConfiguration,\n    selectNativeFilters,\n    selectDataMask,\n    selectAllSliceIds,\n  ],\n  (chartConfiguration, nativeFilters, dataMask, allSliceIds) => ({\n    ...getActiveFilters(),\n    ...getAllActiveFilters({\n      // eslint-disable-next-line camelcase\n      chartConfiguration,\n      nativeFilters,\n      dataMask,\n      allSliceIds,\n    }),\n  }),\n);\n\nexport const DashboardPage: FC<PageProps> = ({ idOrSlug }: PageProps) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const dashboardPageId = useMemo(() => nanoid(), []);\n  const hasDashboardInfoInitiated = useSelector<RootState, Boolean>(\n    ({ dashboardInfo }) =>\n      dashboardInfo && Object.keys(dashboardInfo).length > 0,\n  );\n  const { addDangerToast } = useToasts();\n  const { result: dashboard, error: dashboardApiError } =\n    useDashboard(idOrSlug);\n  const { result: charts, error: chartsApiError } =\n    useDashboardCharts(idOrSlug);\n  const {\n    result: datasets,\n    error: datasetsApiError,\n    status,\n  } = useDashboardDatasets(idOrSlug);\n  const isDashboardHydrated = useRef(false);\n\n  const error = dashboardApiError || chartsApiError;\n  const readyToRender = Boolean(dashboard && charts);\n  const { dashboard_title, css, id = 0 } = dashboard || {};\n\n  useEffect(() => {\n    // mark tab id as redundant when user closes browser tab - a new id will be\n    // generated next time user opens a dashboard and the old one won't be reused\n    const handleTabClose = () => {\n      const dashboardsContexts = getDashboardContextLocalStorage();\n      setItem(LocalStorageKeys.DashboardExploreContext, {\n        ...dashboardsContexts,\n        [dashboardPageId]: {\n          ...dashboardsContexts[dashboardPageId],\n          isRedundant: true,\n        },\n      });\n    };\n    window.addEventListener('beforeunload', handleTabClose);\n    return () => {\n      window.removeEventListener('beforeunload', handleTabClose);\n    };\n  }, [dashboardPageId]);\n\n  useEffect(() => {\n    dispatch(setDatasetsStatus(status));\n  }, [dispatch, status]);\n\n  useEffect(() => {\n    // eslint-disable-next-line consistent-return\n    async function getDataMaskApplied() {\n      const permalinkKey = getUrlParam(URL_PARAMS.permalinkKey);\n      const nativeFilterKeyValue = getUrlParam(URL_PARAMS.nativeFiltersKey);\n      const isOldRison = getUrlParam(URL_PARAMS.nativeFilters);\n\n      let dataMask = nativeFilterKeyValue || {};\n      // activeTabs is initialized with undefined so that it doesn't override\n      // the currently stored value when hydrating\n      let activeTabs: string[] | undefined;\n      if (permalinkKey) {\n        const permalinkValue = await getPermalinkValue(permalinkKey);\n        if (permalinkValue) {\n          ({ dataMask, activeTabs } = permalinkValue.state);\n        }\n      } else if (nativeFilterKeyValue) {\n        dataMask = await getFilterValue(id, nativeFilterKeyValue);\n      }\n      if (isOldRison) {\n        dataMask = isOldRison;\n      }\n\n      if (readyToRender) {\n        if (!isDashboardHydrated.current) {\n          isDashboardHydrated.current = true;\n        }\n        dispatch(\n          hydrateDashboard({\n            history,\n            dashboard,\n            charts,\n            activeTabs,\n            dataMask,\n          }),\n        );\n      }\n      return null;\n    }\n    if (id) getDataMaskApplied();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [readyToRender]);\n\n  useEffect(() => {\n    if (dashboard_title) {\n      document.title = dashboard_title;\n    }\n    return () => {\n      document.title = originalDocumentTitle;\n    };\n  }, [dashboard_title]);\n\n  useEffect(() => {\n    if (typeof css === 'string') {\n      // returning will clean up custom css\n      // when dashboard unmounts or changes\n      return injectCustomCss(css);\n    }\n    return () => {};\n  }, [css]);\n\n  useEffect(() => {\n    if (datasetsApiError) {\n      addDangerToast(\n        t('Error loading chart datasources. Filters may not work correctly.'),\n      );\n    } else {\n      dispatch(setDatasources(datasets));\n    }\n  }, [addDangerToast, datasets, datasetsApiError, dispatch]);\n\n  const relevantDataMask = useSelector(selectRelevantDatamask);\n  const activeFilters = useSelector(selectActiveFilters);\n\n  if (error) throw error; // caught in error boundary\n\n  const globalStyles = useMemo(\n    () => [\n      filterCardPopoverStyle(theme),\n      headerStyles(theme),\n      chartContextMenuStyles(theme),\n      focusStyle(theme),\n      chartHeaderStyles(theme),\n    ],\n    [theme],\n  );\n\n  if (error) throw error; // caught in error boundary\n\n  const DashboardBuilderComponent = useMemo(() => <DashboardBuilder />, []);\n  return (\n    <>\n      <Global styles={globalStyles} />\n      {readyToRender && hasDashboardInfoInitiated ? (\n        <>\n          <SyncDashboardState dashboardPageId={dashboardPageId} />\n          <DashboardPageIdContext.Provider value={dashboardPageId}>\n            <DashboardContainer\n              activeFilters={activeFilters}\n              ownDataCharts={relevantDataMask}\n            >\n              {DashboardBuilderComponent}\n            </DashboardContainer>\n          </DashboardPageIdContext.Provider>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n};\n\nexport default DashboardPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}