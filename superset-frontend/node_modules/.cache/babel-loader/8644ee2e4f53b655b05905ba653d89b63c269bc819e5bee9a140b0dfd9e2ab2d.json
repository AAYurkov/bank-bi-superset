{"ast":null,"code":"import _omit from \"lodash/omit\";import _isEqual from \"lodash/isEqual\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { normalizeTimestamp, QueryState, t } from '@superset-ui/core';\n\nimport { shallowEqual } from 'react-redux';\nimport * as actions from '../actions/sqlLab';\nimport { now } from '../../utils/dates';\nimport {\n  addToObject,\n  alterInObject,\n  alterInArr,\n  removeFromArr,\n  getFromArr,\n  addToArr,\n  extendArr } from\n'../../reduxUtils';\n\nfunction alterUnsavedQueryEditorState(state, updatedState, id, silent = false) {\n  if (state.tabHistory[state.tabHistory.length - 1] !== id) {\n    const { queryEditors } = alterInArr(\n      state,\n      'queryEditors',\n      { id },\n      updatedState\n    );\n    return {\n      queryEditors\n    };\n  }\n  return {\n    unsavedQueryEditor: {\n      ...(state.unsavedQueryEditor.id === id && state.unsavedQueryEditor),\n      ...(id ? { id, ...updatedState } : state.unsavedQueryEditor),\n      ...(!silent && { updatedAt: new Date().getTime() })\n    }\n  };\n}\n\nexport default function sqlLabReducer(state = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_QUERY_EDITOR]() {\n      const mergeUnsavedState = alterInArr(\n        state,\n        'queryEditors',\n        state.unsavedQueryEditor,\n        {\n          ...state.unsavedQueryEditor\n        }\n      );\n      const newState = {\n        ...mergeUnsavedState,\n        tabHistory: [...state.tabHistory, action.queryEditor.id]\n      };\n      return addToArr(newState, 'queryEditors', {\n        ...action.queryEditor,\n        updatedAt: new Date().getTime()\n      });\n    },\n    [actions.QUERY_EDITOR_SAVED]() {\n      const { query, result, clientId } = action;\n      const existing = state.queryEditors.find((qe) => qe.id === clientId);\n      return alterInArr(\n        state,\n        'queryEditors',\n        existing,\n        {\n          remoteId: result.remoteId,\n          name: query.name\n        },\n        'id'\n      );\n    },\n    [actions.UPDATE_QUERY_EDITOR]() {\n      const id = action.alterations.remoteId;\n      const existing = state.queryEditors.find((qe) => qe.remoteId === id);\n      if (existing == null) return state;\n      return alterInArr(\n        state,\n        'queryEditors',\n        existing,\n        action.alterations,\n        'remoteId'\n      );\n    },\n    [actions.CLONE_QUERY_TO_NEW_TAB]() {\n      const queryEditor = state.queryEditors.find(\n        (qe) => qe.id === state.tabHistory[state.tabHistory.length - 1]\n      );\n      const progenitor = {\n        ...queryEditor,\n        ...(state.unsavedQueryEditor.id === queryEditor.id &&\n        state.unsavedQueryEditor)\n      };\n      const qe = {\n        remoteId: progenitor.remoteId,\n        name: t('Copy of %s', progenitor.name),\n        dbId: action.query.dbId ? action.query.dbId : null,\n        catalog: action.query.catalog ? action.query.catalog : null,\n        schema: action.query.schema ? action.query.schema : null,\n        autorun: true,\n        sql: action.query.sql,\n        queryLimit: action.query.queryLimit,\n        maxRow: action.query.maxRow\n      };\n      const stateWithoutUnsavedState = {\n        ...state,\n        unsavedQueryEditor: {}\n      };\n      return sqlLabReducer(\n        stateWithoutUnsavedState,\n        actions.addQueryEditor(qe)\n      );\n    },\n    [actions.REMOVE_QUERY_EDITOR]() {\n      const queryEditor = {\n        ...action.queryEditor,\n        ...(action.queryEditor.id === state.unsavedQueryEditor.id &&\n        state.unsavedQueryEditor)\n      };\n      let newState = removeFromArr(state, 'queryEditors', queryEditor);\n      // List of remaining queryEditor ids\n      const qeIds = newState.queryEditors.map((qe) => qe.id);\n\n      const queries = {};\n      Object.keys(state.queries).forEach((k) => {\n        const query = state.queries[k];\n        if (qeIds.indexOf(query.sqlEditorId) > -1) {\n          queries[k] = query;\n        }\n      });\n\n      let tabHistory = state.tabHistory.slice();\n      tabHistory = tabHistory.filter((id) => qeIds.indexOf(id) > -1);\n\n      // Remove associated table schemas\n      const tables = state.tables.filter(\n        (table) => table.queryEditorId !== queryEditor.id\n      );\n\n      newState = {\n        ...newState,\n        tabHistory:\n        tabHistory.length === 0 && newState.queryEditors.length > 0 ?\n        newState.queryEditors.slice(-1).map((qe) => qe.id) :\n        tabHistory,\n        tables,\n        queries,\n        unsavedQueryEditor: {\n          ...(action.queryEditor.id !== state.unsavedQueryEditor.id &&\n          state.unsavedQueryEditor)\n        },\n        destroyedQueryEditors: {\n          ...newState.destroyedQueryEditors,\n          [queryEditor.id]: Date.now()\n        }\n      };\n      return newState;\n    },\n    [actions.CLEAR_DESTROYED_QUERY_EDITOR]() {\n      const destroyedQueryEditors = { ...state.destroyedQueryEditors };\n      delete destroyedQueryEditors[action.queryEditorId];\n      return { ...state, destroyedQueryEditors };\n    },\n    [actions.REMOVE_QUERY]() {\n      const newQueries = { ...state.queries };\n      delete newQueries[action.query.id];\n      return { ...state, queries: newQueries };\n    },\n    [actions.RESET_STATE]() {\n      return { ...action.sqlLabInitialState };\n    },\n    [actions.MERGE_TABLE]() {\n      const at = { ...action.table };\n      const existingTableIndex = state.tables.findIndex(\n        (xt) =>\n        xt.dbId === at.dbId &&\n        xt.queryEditorId === at.queryEditorId &&\n        xt.catalog === at.catalog &&\n        xt.schema === at.schema &&\n        xt.name === at.name\n      );\n      if (existingTableIndex >= 0) {\n        if (action.query) {\n          at.dataPreviewQueryId = action.query.id;\n        }\n        return {\n          ...state,\n          tables: [\n          ...state.tables.slice(0, existingTableIndex),\n          {\n            ...state.tables[existingTableIndex],\n            ...at,\n            ...(state.tables[existingTableIndex].initialized && {\n              id: state.tables[existingTableIndex].id\n            })\n          },\n          ...state.tables.slice(existingTableIndex + 1)],\n\n          ...(at.expanded && {\n            activeSouthPaneTab: at.id\n          })\n        };\n      }\n      // for new table, associate Id of query for data preview\n      at.dataPreviewQueryId = null;\n      let newState = addToArr(state, 'tables', at, Boolean(action.prepend));\n      newState.activeSouthPaneTab = at.id;\n      if (action.query) {\n        newState = alterInArr(newState, 'tables', at, {\n          dataPreviewQueryId: action.query.id\n        });\n      }\n      return newState;\n    },\n    [actions.EXPAND_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: true });\n    },\n    [actions.REMOVE_DATA_PREVIEW]() {\n      const queries = { ...state.queries };\n      delete queries[action.table.dataPreviewQueryId];\n      const newState = alterInArr(state, 'tables', action.table, {\n        dataPreviewQueryId: null\n      });\n      return { ...newState, queries };\n    },\n    [actions.CHANGE_DATA_PREVIEW_ID]() {\n      const queries = { ...state.queries };\n      delete queries[action.oldQueryId];\n\n      const newTables = [];\n      state.tables.forEach((xt) => {\n        if (xt.dataPreviewQueryId === action.oldQueryId) {\n          newTables.push({ ...xt, dataPreviewQueryId: action.newQuery.id });\n        } else {\n          newTables.push(xt);\n        }\n      });\n      return {\n        ...state,\n        queries,\n        tables: newTables\n      };\n    },\n    [actions.COLLAPSE_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: false });\n    },\n    [actions.REMOVE_TABLES]() {var _tables$find$id, _tables$find;\n      const tableIds = action.tables.map((table) => table.id);\n      const tables = state.tables.filter((table) => !tableIds.includes(table.id));\n\n      return {\n        ...state,\n        tables,\n        ...(tableIds.includes(state.activeSouthPaneTab) && {\n          activeSouthPaneTab: (_tables$find$id = (_tables$find =\n          tables.find(\n            ({ queryEditorId }) =>\n            queryEditorId === action.tables[0].queryEditorId\n          )) == null ? void 0 : _tables$find.id) != null ? _tables$find$id : 'Results'\n        })\n      };\n    },\n    [actions.COST_ESTIMATE_STARTED]() {\n      return {\n        ...state,\n        queryCostEstimates: {\n          ...state.queryCostEstimates,\n          [action.query.id]: {\n            completed: false,\n            cost: null,\n            error: null\n          }\n        }\n      };\n    },\n    [actions.COST_ESTIMATE_RETURNED]() {\n      return {\n        ...state,\n        queryCostEstimates: {\n          ...state.queryCostEstimates,\n          [action.query.id]: {\n            completed: true,\n            cost: action.json.result,\n            error: null\n          }\n        }\n      };\n    },\n    [actions.COST_ESTIMATE_FAILED]() {\n      return {\n        ...state,\n        queryCostEstimates: {\n          ...state.queryCostEstimates,\n          [action.query.id]: {\n            completed: false,\n            cost: null,\n            error: action.error\n          }\n        }\n      };\n    },\n    [actions.START_QUERY]() {\n      let newState = { ...state };\n      if (action.query.sqlEditorId) {\n        const qe = {\n          ...getFromArr(state.queryEditors, action.query.sqlEditorId),\n          ...(action.query.sqlEditorId === state.unsavedQueryEditor.id &&\n          state.unsavedQueryEditor)\n        };\n        if (qe.latestQueryId && state.queries[qe.latestQueryId]) {\n          const newResults = {\n            ...state.queries[qe.latestQueryId].results,\n            data: [],\n            query: null\n          };\n          const q = { ...state.queries[qe.latestQueryId], results: newResults };\n          const queries = { ...state.queries, [q.id]: q };\n          newState = { ...state, queries };\n        }\n      }\n      newState = addToObject(newState, 'queries', action.query);\n\n      return {\n        ...newState,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            latestQueryId: action.query.id\n          },\n          action.query.sqlEditorId,\n          action.query.isDataPreview\n        )\n      };\n    },\n    [actions.STOP_QUERY]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: QueryState.Stopped,\n        results: []\n      });\n    },\n    [actions.CLEAR_QUERY_RESULTS]() {\n      const newResults = { ...action.query.results };\n      newResults.data = [];\n      return alterInObject(state, 'queries', action.query, {\n        results: newResults,\n        cached: true\n      });\n    },\n    [actions.REQUEST_QUERY_RESULTS]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: QueryState.Fetching\n      });\n    },\n    [actions.QUERY_SUCCESS]() {var _action$results, _action$results$query, _action$results2, _action$results2$quer, _action$results3, _action$results3$quer, _action$results4, _action$results4$quer, _action$results5, _action$results5$quer;\n      // prevent race condition where query succeeds shortly after being canceled\n      // or the final result was unsuccessful\n      if (\n      action.query.state === QueryState.STOPPED ||\n      action.results.status !== QueryState.Success)\n      {\n        return state;\n      }\n      const alts = {\n        endDttm: now(),\n        progress: 100,\n        results: action.results,\n        rows: (action == null ? void 0 : (_action$results = action.results) == null ? void 0 : (_action$results$query = _action$results.query) == null ? void 0 : _action$results$query.rows) || 0,\n        state: QueryState.Success,\n        limitingFactor: action == null ? void 0 : (_action$results2 = action.results) == null ? void 0 : (_action$results2$quer = _action$results2.query) == null ? void 0 : _action$results2$quer.limitingFactor,\n        tempSchema: action == null ? void 0 : (_action$results3 = action.results) == null ? void 0 : (_action$results3$quer = _action$results3.query) == null ? void 0 : _action$results3$quer.tempSchema,\n        tempTable: action == null ? void 0 : (_action$results4 = action.results) == null ? void 0 : (_action$results4$quer = _action$results4.query) == null ? void 0 : _action$results4$quer.tempTable,\n        errorMessage: null,\n        cached: false\n      };\n\n      const resultsKey = action == null ? void 0 : (_action$results5 = action.results) == null ? void 0 : (_action$results5$quer = _action$results5.query) == null ? void 0 : _action$results5$quer.resultsKey;\n      if (resultsKey) {\n        alts.resultsKey = resultsKey;\n      }\n\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.QUERY_FAILED]() {\n      if (action.query.state === QueryState.Stopped) {\n        return state;\n      }\n      const alts = {\n        state: QueryState.Failed,\n        errors: action.errors,\n        errorMessage: action.msg,\n        endDttm: now(),\n        link: action.link\n      };\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.SET_ACTIVE_QUERY_EDITOR]() {var _action$queryEditor;\n      const qeIds = state.queryEditors.map((qe) => qe.id);\n      if (\n      qeIds.indexOf((_action$queryEditor = action.queryEditor) == null ? void 0 : _action$queryEditor.id) > -1 &&\n      state.tabHistory[state.tabHistory.length - 1] !== action.queryEditor.id)\n      {\n        const mergeUnsavedState = {\n          ...alterInArr(state, 'queryEditors', state.unsavedQueryEditor, {\n            ...state.unsavedQueryEditor\n          }),\n          unsavedQueryEditor: {}\n        };\n        return {\n          ...(action.queryEditor.id === state.unsavedQueryEditor.id ?\n          alterInArr(\n            mergeUnsavedState,\n            'queryEditors',\n            action.queryEditor,\n            {\n              ...action.queryEditor,\n              ...state.unsavedQueryEditor\n            }\n          ) :\n          mergeUnsavedState),\n          tabHistory: [...state.tabHistory, action.queryEditor.id]\n        };\n      }\n      return state;\n    },\n    [actions.LOAD_QUERY_EDITOR]() {\n      const mergeUnsavedState = alterInArr(\n        state,\n        'queryEditors',\n        state.unsavedQueryEditor,\n        {\n          ...state.unsavedQueryEditor\n        }\n      );\n      return alterInArr(mergeUnsavedState, 'queryEditors', action.queryEditor, {\n        ...action.queryEditor\n      });\n    },\n    [actions.SET_TABLES]() {\n      return extendArr(state, 'tables', action.tables);\n    },\n    [actions.SET_ACTIVE_SOUTHPANE_TAB]() {\n      return { ...state, activeSouthPaneTab: action.tabId };\n    },\n    [actions.MIGRATE_QUERY_EDITOR]() {\n      try {\n        // remove migrated query editor from localStorage\n        const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n        sqlLab.queryEditors = sqlLab.queryEditors.filter(\n          (qe) => qe.id !== action.oldQueryEditor.id\n        );\n        localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n      } catch (error) {\n\n        // continue regardless of error\n      } // replace localStorage query editor with the server backed one\n      return alterInArr(\n        state,\n        'queryEditors',\n        action.oldQueryEditor,\n        action.newQueryEditor\n      );\n    },\n    [actions.MIGRATE_TABLE]() {\n      try {\n        // remove migrated table from localStorage\n        const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n        sqlLab.tables = sqlLab.tables.filter(\n          (table) => table.id !== action.oldTable.id\n        );\n        localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n      } catch (error) {\n\n        // continue regardless of error\n      }\n      // replace localStorage table with the server backed one\n      return addToArr(\n        removeFromArr(state, 'tables', action.oldTable),\n        'tables',\n        action.newTable\n      );\n    },\n    [actions.MIGRATE_TAB_HISTORY]() {\n      const tabHistory = state.tabHistory.map((tabId) =>\n      tabId === action.oldId ? action.newId : tabId\n      );\n      return { ...state, tabHistory };\n    },\n    [actions.MIGRATE_QUERY]() {\n      const query = {\n        ...state.queries[action.queryId],\n        // point query to migrated query editor\n        sqlEditorId: action.queryEditorId\n      };\n      const queries = { ...state.queries, [query.id]: query };\n      return { ...state, queries };\n    },\n    [actions.QUERY_EDITOR_SETDB]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            dbId: action.dbId\n          },\n          action.queryEditor.id\n        )\n      };\n    },\n    [actions.QUERY_EDITOR_SET_CATALOG]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            catalog: action.catalog\n          },\n          action.queryEditor.id\n        )\n      };\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            schema: action.schema\n          },\n          action.queryEditor.id\n        )\n      };\n    },\n    [actions.QUERY_EDITOR_SET_TITLE]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            name: action.name\n          },\n          action.queryEditor.id\n        )\n      };\n    },\n    [actions.QUERY_EDITOR_SET_SQL]() {\n      const { unsavedQueryEditor } = state;\n      if (\n      (unsavedQueryEditor == null ? void 0 : unsavedQueryEditor.id) === action.queryEditor.id &&\n      unsavedQueryEditor.sql === action.sql)\n      {\n        return state;\n      }\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            sql: action.sql,\n            ...(action.queryId && { latestQueryId: action.queryId })\n          },\n          action.queryEditor.id\n        )\n      };\n    },\n    [actions.QUERY_EDITOR_SET_CURSOR_POSITION]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            cursorPosition: action.position\n          },\n          action.queryEditor.id\n        )\n      };\n    },\n    [actions.QUERY_EDITOR_SET_QUERY_LIMIT]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            queryLimit: action.queryLimit\n          },\n          action.queryEditor.id\n        )\n      };\n    },\n    [actions.QUERY_EDITOR_SET_TEMPLATE_PARAMS]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            templateParams: action.templateParams\n          },\n          action.queryEditor.id\n        )\n      };\n    },\n    [actions.QUERY_EDITOR_SET_SELECTED_TEXT]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            selectedText: action.sql\n          },\n          action.queryEditor.id,\n          true\n        )\n      };\n    },\n    [actions.QUERY_EDITOR_SET_AUTORUN]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            autorun: action.autorun\n          },\n          action.queryEditor.id\n        )\n      };\n    },\n    [actions.QUERY_EDITOR_PERSIST_HEIGHT]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            northPercent: action.northPercent,\n            southPercent: action.southPercent\n          },\n          action.queryEditor.id\n        )\n      };\n    },\n    [actions.QUERY_EDITOR_TOGGLE_LEFT_BAR]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            hideLeftBar: action.hideLeftBar\n          },\n          action.queryEditor.id\n        )\n      };\n    },\n    [actions.SET_DATABASES]() {\n      const databases = {};\n      action.databases.forEach((db) => {\n        databases[db.id] = {\n          ...db,\n          extra_json: JSON.parse(db.extra || '')\n        };\n      });\n      return { ...state, databases };\n    },\n    [actions.REFRESH_QUERIES]() {\n      let newQueries = { ...state.queries };\n      // Fetch the updates to the queries present in the store.\n      let change = false;\n      let { queriesLastUpdate } = state;\n      Object.entries(action.alteredQueries).forEach(([id, changedQuery]) => {\n        if (\n        !state.queries.hasOwnProperty(id) ||\n        state.queries[id].state !== QueryState.Stopped &&\n        state.queries[id].state !== QueryState.Failed)\n        {var _state$queries$id;\n          const changedOn = normalizeTimestamp(changedQuery.changed_on);\n          const timestamp = Date.parse(changedOn);\n          if (timestamp > queriesLastUpdate) {\n            queriesLastUpdate = timestamp;\n          }\n          const prevState = (_state$queries$id = state.queries[id]) == null ? void 0 : _state$queries$id.state;\n          const currentState = changedQuery.state;\n          newQueries[id] = {\n            ...state.queries[id],\n            ...changedQuery,\n            ...(changedQuery.startDttm && {\n              startDttm: Number(changedQuery.startDttm)\n            }),\n            ...(changedQuery.endDttm && {\n              endDttm: Number(changedQuery.endDttm)\n            }),\n            // race condition:\n            // because of async behavior, sql lab may still poll a couple of seconds\n            // when it started fetching or finished rendering results\n            state:\n            currentState === QueryState.Success &&\n            [\n            QueryState.Fetching,\n            QueryState.Success,\n            QueryState.Running].\n            includes(prevState) ?\n            prevState :\n            currentState\n          };\n          if (\n          shallowEqual(\n            _omit(newQueries[id], ['extra']),\n            _omit(state.queries[id], ['extra'])\n          ) &&\n          _isEqual(newQueries[id].extra, state.queries[id].extra))\n          {\n            newQueries[id] = state.queries[id];\n          } else {\n            change = true;\n          }\n        }\n      });\n      if (!change) {\n        newQueries = state.queries;\n      }\n      return { ...state, queries: newQueries, queriesLastUpdate };\n    },\n    [actions.CLEAR_INACTIVE_QUERIES]() {\n      const { queries } = state;\n      const cleanedQueries = Object.fromEntries(\n        Object.entries(queries).\n        filter(([, query]) => {\n          if (\n          ['running', 'pending'].includes(query.state) &&\n          Date.now() - query.startDttm > action.interval &&\n          query.progress === 0)\n          {\n            return false;\n          }\n          return true;\n        }).\n        map(([id, query]) => {var _query$results;return [\n          id,\n          {\n            ...query,\n            state:\n            query.resultsKey && (_query$results = query.results) != null && _query$results.status ?\n            query.results.status :\n            query.state\n          }];}\n        )\n      );\n      return { ...state, queries: cleanedQueries };\n    },\n    [actions.SET_USER_OFFLINE]() {\n      return { ...state, offline: action.offline };\n    },\n    [actions.CREATE_DATASOURCE_STARTED]() {\n      return { ...state, isDatasourceLoading: true, errorMessage: null };\n    },\n    [actions.CREATE_DATASOURCE_SUCCESS]() {\n      return {\n        ...state,\n        isDatasourceLoading: false,\n        errorMessage: null,\n        datasource: action.datasource\n      };\n    },\n    [actions.CREATE_DATASOURCE_FAILED]() {\n      return { ...state, isDatasourceLoading: false, errorMessage: action.err };\n    },\n    [actions.SET_EDITOR_TAB_LAST_UPDATE]() {\n      return { ...state, editorTabLastUpdatedAt: action.timestamp };\n    },\n    [actions.SET_LAST_UPDATED_ACTIVE_TAB]() {\n      return { ...state, lastUpdatedActiveTab: action.queryEditorId };\n    }\n  };\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(alterUnsavedQueryEditorState, \"alterUnsavedQueryEditorState\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/reducers/sqlLab.js\");reactHotLoader.register(sqlLabReducer, \"sqlLabReducer\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/reducers/sqlLab.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["normalizeTimestamp","QueryState","t","shallowEqual","actions","now","addToObject","alterInObject","alterInArr","removeFromArr","getFromArr","addToArr","extendArr","alterUnsavedQueryEditorState","state","updatedState","id","silent","tabHistory","length","queryEditors","unsavedQueryEditor","updatedAt","Date","getTime","sqlLabReducer","action","actionHandlers","ADD_QUERY_EDITOR","mergeUnsavedState","newState","queryEditor","QUERY_EDITOR_SAVED","query","result","clientId","existing","find","qe","remoteId","name","UPDATE_QUERY_EDITOR","alterations","CLONE_QUERY_TO_NEW_TAB","progenitor","dbId","catalog","schema","autorun","sql","queryLimit","maxRow","stateWithoutUnsavedState","addQueryEditor","REMOVE_QUERY_EDITOR","qeIds","map","queries","Object","keys","forEach","k","indexOf","sqlEditorId","slice","filter","tables","table","queryEditorId","destroyedQueryEditors","CLEAR_DESTROYED_QUERY_EDITOR","REMOVE_QUERY","newQueries","RESET_STATE","sqlLabInitialState","MERGE_TABLE","at","existingTableIndex","findIndex","xt","dataPreviewQueryId","initialized","expanded","activeSouthPaneTab","Boolean","prepend","EXPAND_TABLE","REMOVE_DATA_PREVIEW","CHANGE_DATA_PREVIEW_ID","oldQueryId","newTables","push","newQuery","COLLAPSE_TABLE","REMOVE_TABLES","_tables$find$id","_tables$find","tableIds","includes","COST_ESTIMATE_STARTED","queryCostEstimates","completed","cost","error","COST_ESTIMATE_RETURNED","json","COST_ESTIMATE_FAILED","START_QUERY","latestQueryId","newResults","results","data","q","isDataPreview","STOP_QUERY","Stopped","CLEAR_QUERY_RESULTS","cached","REQUEST_QUERY_RESULTS","Fetching","QUERY_SUCCESS","_action$results","_action$results$query","_action$results2","_action$results2$quer","_action$results3","_action$results3$quer","_action$results4","_action$results4$quer","_action$results5","_action$results5$quer","STOPPED","status","Success","alts","endDttm","progress","rows","limitingFactor","tempSchema","tempTable","errorMessage","resultsKey","QUERY_FAILED","Failed","errors","msg","link","SET_ACTIVE_QUERY_EDITOR","_action$queryEditor","LOAD_QUERY_EDITOR","SET_TABLES","SET_ACTIVE_SOUTHPANE_TAB","tabId","MIGRATE_QUERY_EDITOR","sqlLab","JSON","parse","localStorage","getItem","oldQueryEditor","setItem","stringify","newQueryEditor","MIGRATE_TABLE","oldTable","newTable","MIGRATE_TAB_HISTORY","oldId","newId","MIGRATE_QUERY","queryId","QUERY_EDITOR_SETDB","QUERY_EDITOR_SET_CATALOG","QUERY_EDITOR_SET_SCHEMA","QUERY_EDITOR_SET_TITLE","QUERY_EDITOR_SET_SQL","QUERY_EDITOR_SET_CURSOR_POSITION","cursorPosition","position","QUERY_EDITOR_SET_QUERY_LIMIT","QUERY_EDITOR_SET_TEMPLATE_PARAMS","templateParams","QUERY_EDITOR_SET_SELECTED_TEXT","selectedText","QUERY_EDITOR_SET_AUTORUN","QUERY_EDITOR_PERSIST_HEIGHT","northPercent","southPercent","QUERY_EDITOR_TOGGLE_LEFT_BAR","hideLeftBar","SET_DATABASES","databases","db","extra_json","extra","REFRESH_QUERIES","change","queriesLastUpdate","entries","alteredQueries","changedQuery","hasOwnProperty","_state$queries$id","changedOn","changed_on","timestamp","prevState","currentState","startDttm","Number","Running","_omit","_isEqual","CLEAR_INACTIVE_QUERIES","cleanedQueries","fromEntries","interval","_query$results","SET_USER_OFFLINE","offline","CREATE_DATASOURCE_STARTED","isDatasourceLoading","CREATE_DATASOURCE_SUCCESS","datasource","CREATE_DATASOURCE_FAILED","err","SET_EDITOR_TAB_LAST_UPDATE","editorTabLastUpdatedAt","SET_LAST_UPDATED_ACTIVE_TAB","lastUpdatedActiveTab","type","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/SqlLab/reducers/sqlLab.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { normalizeTimestamp, QueryState, t } from '@superset-ui/core';\nimport { isEqual, omit } from 'lodash';\nimport { shallowEqual } from 'react-redux';\nimport * as actions from '../actions/sqlLab';\nimport { now } from '../../utils/dates';\nimport {\n  addToObject,\n  alterInObject,\n  alterInArr,\n  removeFromArr,\n  getFromArr,\n  addToArr,\n  extendArr,\n} from '../../reduxUtils';\n\nfunction alterUnsavedQueryEditorState(state, updatedState, id, silent = false) {\n  if (state.tabHistory[state.tabHistory.length - 1] !== id) {\n    const { queryEditors } = alterInArr(\n      state,\n      'queryEditors',\n      { id },\n      updatedState,\n    );\n    return {\n      queryEditors,\n    };\n  }\n  return {\n    unsavedQueryEditor: {\n      ...(state.unsavedQueryEditor.id === id && state.unsavedQueryEditor),\n      ...(id ? { id, ...updatedState } : state.unsavedQueryEditor),\n      ...(!silent && { updatedAt: new Date().getTime() }),\n    },\n  };\n}\n\nexport default function sqlLabReducer(state = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_QUERY_EDITOR]() {\n      const mergeUnsavedState = alterInArr(\n        state,\n        'queryEditors',\n        state.unsavedQueryEditor,\n        {\n          ...state.unsavedQueryEditor,\n        },\n      );\n      const newState = {\n        ...mergeUnsavedState,\n        tabHistory: [...state.tabHistory, action.queryEditor.id],\n      };\n      return addToArr(newState, 'queryEditors', {\n        ...action.queryEditor,\n        updatedAt: new Date().getTime(),\n      });\n    },\n    [actions.QUERY_EDITOR_SAVED]() {\n      const { query, result, clientId } = action;\n      const existing = state.queryEditors.find(qe => qe.id === clientId);\n      return alterInArr(\n        state,\n        'queryEditors',\n        existing,\n        {\n          remoteId: result.remoteId,\n          name: query.name,\n        },\n        'id',\n      );\n    },\n    [actions.UPDATE_QUERY_EDITOR]() {\n      const id = action.alterations.remoteId;\n      const existing = state.queryEditors.find(qe => qe.remoteId === id);\n      if (existing == null) return state;\n      return alterInArr(\n        state,\n        'queryEditors',\n        existing,\n        action.alterations,\n        'remoteId',\n      );\n    },\n    [actions.CLONE_QUERY_TO_NEW_TAB]() {\n      const queryEditor = state.queryEditors.find(\n        qe => qe.id === state.tabHistory[state.tabHistory.length - 1],\n      );\n      const progenitor = {\n        ...queryEditor,\n        ...(state.unsavedQueryEditor.id === queryEditor.id &&\n          state.unsavedQueryEditor),\n      };\n      const qe = {\n        remoteId: progenitor.remoteId,\n        name: t('Copy of %s', progenitor.name),\n        dbId: action.query.dbId ? action.query.dbId : null,\n        catalog: action.query.catalog ? action.query.catalog : null,\n        schema: action.query.schema ? action.query.schema : null,\n        autorun: true,\n        sql: action.query.sql,\n        queryLimit: action.query.queryLimit,\n        maxRow: action.query.maxRow,\n      };\n      const stateWithoutUnsavedState = {\n        ...state,\n        unsavedQueryEditor: {},\n      };\n      return sqlLabReducer(\n        stateWithoutUnsavedState,\n        actions.addQueryEditor(qe),\n      );\n    },\n    [actions.REMOVE_QUERY_EDITOR]() {\n      const queryEditor = {\n        ...action.queryEditor,\n        ...(action.queryEditor.id === state.unsavedQueryEditor.id &&\n          state.unsavedQueryEditor),\n      };\n      let newState = removeFromArr(state, 'queryEditors', queryEditor);\n      // List of remaining queryEditor ids\n      const qeIds = newState.queryEditors.map(qe => qe.id);\n\n      const queries = {};\n      Object.keys(state.queries).forEach(k => {\n        const query = state.queries[k];\n        if (qeIds.indexOf(query.sqlEditorId) > -1) {\n          queries[k] = query;\n        }\n      });\n\n      let tabHistory = state.tabHistory.slice();\n      tabHistory = tabHistory.filter(id => qeIds.indexOf(id) > -1);\n\n      // Remove associated table schemas\n      const tables = state.tables.filter(\n        table => table.queryEditorId !== queryEditor.id,\n      );\n\n      newState = {\n        ...newState,\n        tabHistory:\n          tabHistory.length === 0 && newState.queryEditors.length > 0\n            ? newState.queryEditors.slice(-1).map(qe => qe.id)\n            : tabHistory,\n        tables,\n        queries,\n        unsavedQueryEditor: {\n          ...(action.queryEditor.id !== state.unsavedQueryEditor.id &&\n            state.unsavedQueryEditor),\n        },\n        destroyedQueryEditors: {\n          ...newState.destroyedQueryEditors,\n          [queryEditor.id]: Date.now(),\n        },\n      };\n      return newState;\n    },\n    [actions.CLEAR_DESTROYED_QUERY_EDITOR]() {\n      const destroyedQueryEditors = { ...state.destroyedQueryEditors };\n      delete destroyedQueryEditors[action.queryEditorId];\n      return { ...state, destroyedQueryEditors };\n    },\n    [actions.REMOVE_QUERY]() {\n      const newQueries = { ...state.queries };\n      delete newQueries[action.query.id];\n      return { ...state, queries: newQueries };\n    },\n    [actions.RESET_STATE]() {\n      return { ...action.sqlLabInitialState };\n    },\n    [actions.MERGE_TABLE]() {\n      const at = { ...action.table };\n      const existingTableIndex = state.tables.findIndex(\n        xt =>\n          xt.dbId === at.dbId &&\n          xt.queryEditorId === at.queryEditorId &&\n          xt.catalog === at.catalog &&\n          xt.schema === at.schema &&\n          xt.name === at.name,\n      );\n      if (existingTableIndex >= 0) {\n        if (action.query) {\n          at.dataPreviewQueryId = action.query.id;\n        }\n        return {\n          ...state,\n          tables: [\n            ...state.tables.slice(0, existingTableIndex),\n            {\n              ...state.tables[existingTableIndex],\n              ...at,\n              ...(state.tables[existingTableIndex].initialized && {\n                id: state.tables[existingTableIndex].id,\n              }),\n            },\n            ...state.tables.slice(existingTableIndex + 1),\n          ],\n          ...(at.expanded && {\n            activeSouthPaneTab: at.id,\n          }),\n        };\n      }\n      // for new table, associate Id of query for data preview\n      at.dataPreviewQueryId = null;\n      let newState = addToArr(state, 'tables', at, Boolean(action.prepend));\n      newState.activeSouthPaneTab = at.id;\n      if (action.query) {\n        newState = alterInArr(newState, 'tables', at, {\n          dataPreviewQueryId: action.query.id,\n        });\n      }\n      return newState;\n    },\n    [actions.EXPAND_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: true });\n    },\n    [actions.REMOVE_DATA_PREVIEW]() {\n      const queries = { ...state.queries };\n      delete queries[action.table.dataPreviewQueryId];\n      const newState = alterInArr(state, 'tables', action.table, {\n        dataPreviewQueryId: null,\n      });\n      return { ...newState, queries };\n    },\n    [actions.CHANGE_DATA_PREVIEW_ID]() {\n      const queries = { ...state.queries };\n      delete queries[action.oldQueryId];\n\n      const newTables = [];\n      state.tables.forEach(xt => {\n        if (xt.dataPreviewQueryId === action.oldQueryId) {\n          newTables.push({ ...xt, dataPreviewQueryId: action.newQuery.id });\n        } else {\n          newTables.push(xt);\n        }\n      });\n      return {\n        ...state,\n        queries,\n        tables: newTables,\n      };\n    },\n    [actions.COLLAPSE_TABLE]() {\n      return alterInArr(state, 'tables', action.table, { expanded: false });\n    },\n    [actions.REMOVE_TABLES]() {\n      const tableIds = action.tables.map(table => table.id);\n      const tables = state.tables.filter(table => !tableIds.includes(table.id));\n\n      return {\n        ...state,\n        tables,\n        ...(tableIds.includes(state.activeSouthPaneTab) && {\n          activeSouthPaneTab:\n            tables.find(\n              ({ queryEditorId }) =>\n                queryEditorId === action.tables[0].queryEditorId,\n            )?.id ?? 'Results',\n        }),\n      };\n    },\n    [actions.COST_ESTIMATE_STARTED]() {\n      return {\n        ...state,\n        queryCostEstimates: {\n          ...state.queryCostEstimates,\n          [action.query.id]: {\n            completed: false,\n            cost: null,\n            error: null,\n          },\n        },\n      };\n    },\n    [actions.COST_ESTIMATE_RETURNED]() {\n      return {\n        ...state,\n        queryCostEstimates: {\n          ...state.queryCostEstimates,\n          [action.query.id]: {\n            completed: true,\n            cost: action.json.result,\n            error: null,\n          },\n        },\n      };\n    },\n    [actions.COST_ESTIMATE_FAILED]() {\n      return {\n        ...state,\n        queryCostEstimates: {\n          ...state.queryCostEstimates,\n          [action.query.id]: {\n            completed: false,\n            cost: null,\n            error: action.error,\n          },\n        },\n      };\n    },\n    [actions.START_QUERY]() {\n      let newState = { ...state };\n      if (action.query.sqlEditorId) {\n        const qe = {\n          ...getFromArr(state.queryEditors, action.query.sqlEditorId),\n          ...(action.query.sqlEditorId === state.unsavedQueryEditor.id &&\n            state.unsavedQueryEditor),\n        };\n        if (qe.latestQueryId && state.queries[qe.latestQueryId]) {\n          const newResults = {\n            ...state.queries[qe.latestQueryId].results,\n            data: [],\n            query: null,\n          };\n          const q = { ...state.queries[qe.latestQueryId], results: newResults };\n          const queries = { ...state.queries, [q.id]: q };\n          newState = { ...state, queries };\n        }\n      }\n      newState = addToObject(newState, 'queries', action.query);\n\n      return {\n        ...newState,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            latestQueryId: action.query.id,\n          },\n          action.query.sqlEditorId,\n          action.query.isDataPreview,\n        ),\n      };\n    },\n    [actions.STOP_QUERY]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: QueryState.Stopped,\n        results: [],\n      });\n    },\n    [actions.CLEAR_QUERY_RESULTS]() {\n      const newResults = { ...action.query.results };\n      newResults.data = [];\n      return alterInObject(state, 'queries', action.query, {\n        results: newResults,\n        cached: true,\n      });\n    },\n    [actions.REQUEST_QUERY_RESULTS]() {\n      return alterInObject(state, 'queries', action.query, {\n        state: QueryState.Fetching,\n      });\n    },\n    [actions.QUERY_SUCCESS]() {\n      // prevent race condition where query succeeds shortly after being canceled\n      // or the final result was unsuccessful\n      if (\n        action.query.state === QueryState.STOPPED ||\n        action.results.status !== QueryState.Success\n      ) {\n        return state;\n      }\n      const alts = {\n        endDttm: now(),\n        progress: 100,\n        results: action.results,\n        rows: action?.results?.query?.rows || 0,\n        state: QueryState.Success,\n        limitingFactor: action?.results?.query?.limitingFactor,\n        tempSchema: action?.results?.query?.tempSchema,\n        tempTable: action?.results?.query?.tempTable,\n        errorMessage: null,\n        cached: false,\n      };\n\n      const resultsKey = action?.results?.query?.resultsKey;\n      if (resultsKey) {\n        alts.resultsKey = resultsKey;\n      }\n\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.QUERY_FAILED]() {\n      if (action.query.state === QueryState.Stopped) {\n        return state;\n      }\n      const alts = {\n        state: QueryState.Failed,\n        errors: action.errors,\n        errorMessage: action.msg,\n        endDttm: now(),\n        link: action.link,\n      };\n      return alterInObject(state, 'queries', action.query, alts);\n    },\n    [actions.SET_ACTIVE_QUERY_EDITOR]() {\n      const qeIds = state.queryEditors.map(qe => qe.id);\n      if (\n        qeIds.indexOf(action.queryEditor?.id) > -1 &&\n        state.tabHistory[state.tabHistory.length - 1] !== action.queryEditor.id\n      ) {\n        const mergeUnsavedState = {\n          ...alterInArr(state, 'queryEditors', state.unsavedQueryEditor, {\n            ...state.unsavedQueryEditor,\n          }),\n          unsavedQueryEditor: {},\n        };\n        return {\n          ...(action.queryEditor.id === state.unsavedQueryEditor.id\n            ? alterInArr(\n                mergeUnsavedState,\n                'queryEditors',\n                action.queryEditor,\n                {\n                  ...action.queryEditor,\n                  ...state.unsavedQueryEditor,\n                },\n              )\n            : mergeUnsavedState),\n          tabHistory: [...state.tabHistory, action.queryEditor.id],\n        };\n      }\n      return state;\n    },\n    [actions.LOAD_QUERY_EDITOR]() {\n      const mergeUnsavedState = alterInArr(\n        state,\n        'queryEditors',\n        state.unsavedQueryEditor,\n        {\n          ...state.unsavedQueryEditor,\n        },\n      );\n      return alterInArr(mergeUnsavedState, 'queryEditors', action.queryEditor, {\n        ...action.queryEditor,\n      });\n    },\n    [actions.SET_TABLES]() {\n      return extendArr(state, 'tables', action.tables);\n    },\n    [actions.SET_ACTIVE_SOUTHPANE_TAB]() {\n      return { ...state, activeSouthPaneTab: action.tabId };\n    },\n    [actions.MIGRATE_QUERY_EDITOR]() {\n      try {\n        // remove migrated query editor from localStorage\n        const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n        sqlLab.queryEditors = sqlLab.queryEditors.filter(\n          qe => qe.id !== action.oldQueryEditor.id,\n        );\n        localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n      } catch (error) {\n        // continue regardless of error\n      }\n      // replace localStorage query editor with the server backed one\n      return alterInArr(\n        state,\n        'queryEditors',\n        action.oldQueryEditor,\n        action.newQueryEditor,\n      );\n    },\n    [actions.MIGRATE_TABLE]() {\n      try {\n        // remove migrated table from localStorage\n        const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n        sqlLab.tables = sqlLab.tables.filter(\n          table => table.id !== action.oldTable.id,\n        );\n        localStorage.setItem('redux', JSON.stringify({ sqlLab }));\n      } catch (error) {\n        // continue regardless of error\n      }\n\n      // replace localStorage table with the server backed one\n      return addToArr(\n        removeFromArr(state, 'tables', action.oldTable),\n        'tables',\n        action.newTable,\n      );\n    },\n    [actions.MIGRATE_TAB_HISTORY]() {\n      const tabHistory = state.tabHistory.map(tabId =>\n        tabId === action.oldId ? action.newId : tabId,\n      );\n      return { ...state, tabHistory };\n    },\n    [actions.MIGRATE_QUERY]() {\n      const query = {\n        ...state.queries[action.queryId],\n        // point query to migrated query editor\n        sqlEditorId: action.queryEditorId,\n      };\n      const queries = { ...state.queries, [query.id]: query };\n      return { ...state, queries };\n    },\n    [actions.QUERY_EDITOR_SETDB]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            dbId: action.dbId,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_CATALOG]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            catalog: action.catalog,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_SCHEMA]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            schema: action.schema,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_TITLE]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            name: action.name,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_SQL]() {\n      const { unsavedQueryEditor } = state;\n      if (\n        unsavedQueryEditor?.id === action.queryEditor.id &&\n        unsavedQueryEditor.sql === action.sql\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            sql: action.sql,\n            ...(action.queryId && { latestQueryId: action.queryId }),\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_CURSOR_POSITION]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            cursorPosition: action.position,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_QUERY_LIMIT]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            queryLimit: action.queryLimit,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_TEMPLATE_PARAMS]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            templateParams: action.templateParams,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_SELECTED_TEXT]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            selectedText: action.sql,\n          },\n          action.queryEditor.id,\n          true,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_SET_AUTORUN]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            autorun: action.autorun,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_PERSIST_HEIGHT]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            northPercent: action.northPercent,\n            southPercent: action.southPercent,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.QUERY_EDITOR_TOGGLE_LEFT_BAR]() {\n      return {\n        ...state,\n        ...alterUnsavedQueryEditorState(\n          state,\n          {\n            hideLeftBar: action.hideLeftBar,\n          },\n          action.queryEditor.id,\n        ),\n      };\n    },\n    [actions.SET_DATABASES]() {\n      const databases = {};\n      action.databases.forEach(db => {\n        databases[db.id] = {\n          ...db,\n          extra_json: JSON.parse(db.extra || ''),\n        };\n      });\n      return { ...state, databases };\n    },\n    [actions.REFRESH_QUERIES]() {\n      let newQueries = { ...state.queries };\n      // Fetch the updates to the queries present in the store.\n      let change = false;\n      let { queriesLastUpdate } = state;\n      Object.entries(action.alteredQueries).forEach(([id, changedQuery]) => {\n        if (\n          !state.queries.hasOwnProperty(id) ||\n          (state.queries[id].state !== QueryState.Stopped &&\n            state.queries[id].state !== QueryState.Failed)\n        ) {\n          const changedOn = normalizeTimestamp(changedQuery.changed_on);\n          const timestamp = Date.parse(changedOn);\n          if (timestamp > queriesLastUpdate) {\n            queriesLastUpdate = timestamp;\n          }\n          const prevState = state.queries[id]?.state;\n          const currentState = changedQuery.state;\n          newQueries[id] = {\n            ...state.queries[id],\n            ...changedQuery,\n            ...(changedQuery.startDttm && {\n              startDttm: Number(changedQuery.startDttm),\n            }),\n            ...(changedQuery.endDttm && {\n              endDttm: Number(changedQuery.endDttm),\n            }),\n            // race condition:\n            // because of async behavior, sql lab may still poll a couple of seconds\n            // when it started fetching or finished rendering results\n            state:\n              currentState === QueryState.Success &&\n              [\n                QueryState.Fetching,\n                QueryState.Success,\n                QueryState.Running,\n              ].includes(prevState)\n                ? prevState\n                : currentState,\n          };\n          if (\n            shallowEqual(\n              omit(newQueries[id], ['extra']),\n              omit(state.queries[id], ['extra']),\n            ) &&\n            isEqual(newQueries[id].extra, state.queries[id].extra)\n          ) {\n            newQueries[id] = state.queries[id];\n          } else {\n            change = true;\n          }\n        }\n      });\n      if (!change) {\n        newQueries = state.queries;\n      }\n      return { ...state, queries: newQueries, queriesLastUpdate };\n    },\n    [actions.CLEAR_INACTIVE_QUERIES]() {\n      const { queries } = state;\n      const cleanedQueries = Object.fromEntries(\n        Object.entries(queries)\n          .filter(([, query]) => {\n            if (\n              ['running', 'pending'].includes(query.state) &&\n              Date.now() - query.startDttm > action.interval &&\n              query.progress === 0\n            ) {\n              return false;\n            }\n            return true;\n          })\n          .map(([id, query]) => [\n            id,\n            {\n              ...query,\n              state:\n                query.resultsKey && query.results?.status\n                  ? query.results.status\n                  : query.state,\n            },\n          ]),\n      );\n      return { ...state, queries: cleanedQueries };\n    },\n    [actions.SET_USER_OFFLINE]() {\n      return { ...state, offline: action.offline };\n    },\n    [actions.CREATE_DATASOURCE_STARTED]() {\n      return { ...state, isDatasourceLoading: true, errorMessage: null };\n    },\n    [actions.CREATE_DATASOURCE_SUCCESS]() {\n      return {\n        ...state,\n        isDatasourceLoading: false,\n        errorMessage: null,\n        datasource: action.datasource,\n      };\n    },\n    [actions.CREATE_DATASOURCE_FAILED]() {\n      return { ...state, isDatasourceLoading: false, errorMessage: action.err };\n    },\n    [actions.SET_EDITOR_TAB_LAST_UPDATE]() {\n      return { ...state, editorTabLastUpdatedAt: action.timestamp };\n    },\n    [actions.SET_LAST_UPDATED_ACTIVE_TAB]() {\n      return { ...state, lastUpdatedActiveTab: action.queryEditorId };\n    },\n  };\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n}\n"],"mappings":"8WAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,kBAAkB,EAAEC,UAAU,EAAEC,CAAC,QAAQ,mBAAmB;;AAErE,SAASC,YAAY,QAAQ,aAAa;AAC1C,OAAO,KAAKC,OAAO,MAAM,mBAAmB;AAC5C,SAASC,GAAG,QAAQ,mBAAmB;AACvC;EACEC,WAAW;EACXC,aAAa;EACbC,UAAU;EACVC,aAAa;EACbC,UAAU;EACVC,QAAQ;EACRC,SAAS;AACJ,kBAAkB;;AAEzB,SAASC,4BAA4BA,CAACC,KAAK,EAAEC,YAAY,EAAEC,EAAE,EAAEC,MAAM,GAAG,KAAK,EAAE;EAC7E,IAAIH,KAAK,CAACI,UAAU,CAACJ,KAAK,CAACI,UAAU,CAACC,MAAM,GAAG,CAAC,CAAC,KAAKH,EAAE,EAAE;IACxD,MAAM,EAAEI,YAAY,CAAC,CAAC,GAAGZ,UAAU;MACjCM,KAAK;MACL,cAAc;MACd,EAAEE,EAAE,CAAC,CAAC;MACND;IACF,CAAC;IACD,OAAO;MACLK;IACF,CAAC;EACH;EACA,OAAO;IACLC,kBAAkB,EAAE;MAClB,IAAIP,KAAK,CAACO,kBAAkB,CAACL,EAAE,KAAKA,EAAE,IAAIF,KAAK,CAACO,kBAAkB,CAAC;MACnE,IAAIL,EAAE,GAAG,EAAEA,EAAE,EAAE,GAAGD,YAAY,CAAC,CAAC,GAAGD,KAAK,CAACO,kBAAkB,CAAC;MAC5D,IAAI,CAACJ,MAAM,IAAI,EAAEK,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;IACpD;EACF,CAAC;AACH;;AAEA,eAAe,SAASC,aAAaA,CAACX,KAAK,GAAG,CAAC,CAAC,EAAEY,MAAM,EAAE;EACxD,MAAMC,cAAc,GAAG;IACrB,CAACvB,OAAO,CAACwB,gBAAgB,IAAI;MAC3B,MAAMC,iBAAiB,GAAGrB,UAAU;QAClCM,KAAK;QACL,cAAc;QACdA,KAAK,CAACO,kBAAkB;QACxB;UACE,GAAGP,KAAK,CAACO;QACX;MACF,CAAC;MACD,MAAMS,QAAQ,GAAG;QACf,GAAGD,iBAAiB;QACpBX,UAAU,EAAE,CAAC,GAAGJ,KAAK,CAACI,UAAU,EAAEQ,MAAM,CAACK,WAAW,CAACf,EAAE;MACzD,CAAC;MACD,OAAOL,QAAQ,CAACmB,QAAQ,EAAE,cAAc,EAAE;QACxC,GAAGJ,MAAM,CAACK,WAAW;QACrBT,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC;MAChC,CAAC,CAAC;IACJ,CAAC;IACD,CAACpB,OAAO,CAAC4B,kBAAkB,IAAI;MAC7B,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,CAAC,CAAC,GAAGT,MAAM;MAC1C,MAAMU,QAAQ,GAAGtB,KAAK,CAACM,YAAY,CAACiB,IAAI,CAAC,CAAAC,EAAE,KAAIA,EAAE,CAACtB,EAAE,KAAKmB,QAAQ,CAAC;MAClE,OAAO3B,UAAU;QACfM,KAAK;QACL,cAAc;QACdsB,QAAQ;QACR;UACEG,QAAQ,EAAEL,MAAM,CAACK,QAAQ;UACzBC,IAAI,EAAEP,KAAK,CAACO;QACd,CAAC;QACD;MACF,CAAC;IACH,CAAC;IACD,CAACpC,OAAO,CAACqC,mBAAmB,IAAI;MAC9B,MAAMzB,EAAE,GAAGU,MAAM,CAACgB,WAAW,CAACH,QAAQ;MACtC,MAAMH,QAAQ,GAAGtB,KAAK,CAACM,YAAY,CAACiB,IAAI,CAAC,CAAAC,EAAE,KAAIA,EAAE,CAACC,QAAQ,KAAKvB,EAAE,CAAC;MAClE,IAAIoB,QAAQ,IAAI,IAAI,EAAE,OAAOtB,KAAK;MAClC,OAAON,UAAU;QACfM,KAAK;QACL,cAAc;QACdsB,QAAQ;QACRV,MAAM,CAACgB,WAAW;QAClB;MACF,CAAC;IACH,CAAC;IACD,CAACtC,OAAO,CAACuC,sBAAsB,IAAI;MACjC,MAAMZ,WAAW,GAAGjB,KAAK,CAACM,YAAY,CAACiB,IAAI;QACzC,CAAAC,EAAE,KAAIA,EAAE,CAACtB,EAAE,KAAKF,KAAK,CAACI,UAAU,CAACJ,KAAK,CAACI,UAAU,CAACC,MAAM,GAAG,CAAC;MAC9D,CAAC;MACD,MAAMyB,UAAU,GAAG;QACjB,GAAGb,WAAW;QACd,IAAIjB,KAAK,CAACO,kBAAkB,CAACL,EAAE,KAAKe,WAAW,CAACf,EAAE;QAChDF,KAAK,CAACO,kBAAkB;MAC5B,CAAC;MACD,MAAMiB,EAAE,GAAG;QACTC,QAAQ,EAAEK,UAAU,CAACL,QAAQ;QAC7BC,IAAI,EAAEtC,CAAC,CAAC,YAAY,EAAE0C,UAAU,CAACJ,IAAI,CAAC;QACtCK,IAAI,EAAEnB,MAAM,CAACO,KAAK,CAACY,IAAI,GAAGnB,MAAM,CAACO,KAAK,CAACY,IAAI,GAAG,IAAI;QAClDC,OAAO,EAAEpB,MAAM,CAACO,KAAK,CAACa,OAAO,GAAGpB,MAAM,CAACO,KAAK,CAACa,OAAO,GAAG,IAAI;QAC3DC,MAAM,EAAErB,MAAM,CAACO,KAAK,CAACc,MAAM,GAAGrB,MAAM,CAACO,KAAK,CAACc,MAAM,GAAG,IAAI;QACxDC,OAAO,EAAE,IAAI;QACbC,GAAG,EAAEvB,MAAM,CAACO,KAAK,CAACgB,GAAG;QACrBC,UAAU,EAAExB,MAAM,CAACO,KAAK,CAACiB,UAAU;QACnCC,MAAM,EAAEzB,MAAM,CAACO,KAAK,CAACkB;MACvB,CAAC;MACD,MAAMC,wBAAwB,GAAG;QAC/B,GAAGtC,KAAK;QACRO,kBAAkB,EAAE,CAAC;MACvB,CAAC;MACD,OAAOI,aAAa;QAClB2B,wBAAwB;QACxBhD,OAAO,CAACiD,cAAc,CAACf,EAAE;MAC3B,CAAC;IACH,CAAC;IACD,CAAClC,OAAO,CAACkD,mBAAmB,IAAI;MAC9B,MAAMvB,WAAW,GAAG;QAClB,GAAGL,MAAM,CAACK,WAAW;QACrB,IAAIL,MAAM,CAACK,WAAW,CAACf,EAAE,KAAKF,KAAK,CAACO,kBAAkB,CAACL,EAAE;QACvDF,KAAK,CAACO,kBAAkB;MAC5B,CAAC;MACD,IAAIS,QAAQ,GAAGrB,aAAa,CAACK,KAAK,EAAE,cAAc,EAAEiB,WAAW,CAAC;MAChE;MACA,MAAMwB,KAAK,GAAGzB,QAAQ,CAACV,YAAY,CAACoC,GAAG,CAAC,CAAAlB,EAAE,KAAIA,EAAE,CAACtB,EAAE,CAAC;;MAEpD,MAAMyC,OAAO,GAAG,CAAC,CAAC;MAClBC,MAAM,CAACC,IAAI,CAAC7C,KAAK,CAAC2C,OAAO,CAAC,CAACG,OAAO,CAAC,CAAAC,CAAC,KAAI;QACtC,MAAM5B,KAAK,GAAGnB,KAAK,CAAC2C,OAAO,CAACI,CAAC,CAAC;QAC9B,IAAIN,KAAK,CAACO,OAAO,CAAC7B,KAAK,CAAC8B,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;UACzCN,OAAO,CAACI,CAAC,CAAC,GAAG5B,KAAK;QACpB;MACF,CAAC,CAAC;;MAEF,IAAIf,UAAU,GAAGJ,KAAK,CAACI,UAAU,CAAC8C,KAAK,CAAC,CAAC;MACzC9C,UAAU,GAAGA,UAAU,CAAC+C,MAAM,CAAC,CAAAjD,EAAE,KAAIuC,KAAK,CAACO,OAAO,CAAC9C,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;;MAE5D;MACA,MAAMkD,MAAM,GAAGpD,KAAK,CAACoD,MAAM,CAACD,MAAM;QAChC,CAAAE,KAAK,KAAIA,KAAK,CAACC,aAAa,KAAKrC,WAAW,CAACf;MAC/C,CAAC;;MAEDc,QAAQ,GAAG;QACT,GAAGA,QAAQ;QACXZ,UAAU;QACRA,UAAU,CAACC,MAAM,KAAK,CAAC,IAAIW,QAAQ,CAACV,YAAY,CAACD,MAAM,GAAG,CAAC;QACvDW,QAAQ,CAACV,YAAY,CAAC4C,KAAK,CAAC,CAAC,CAAC,CAAC,CAACR,GAAG,CAAC,CAAAlB,EAAE,KAAIA,EAAE,CAACtB,EAAE,CAAC;QAChDE,UAAU;QAChBgD,MAAM;QACNT,OAAO;QACPpC,kBAAkB,EAAE;UAClB,IAAIK,MAAM,CAACK,WAAW,CAACf,EAAE,KAAKF,KAAK,CAACO,kBAAkB,CAACL,EAAE;UACvDF,KAAK,CAACO,kBAAkB;QAC5B,CAAC;QACDgD,qBAAqB,EAAE;UACrB,GAAGvC,QAAQ,CAACuC,qBAAqB;UACjC,CAACtC,WAAW,CAACf,EAAE,GAAGO,IAAI,CAAClB,GAAG,CAAC;QAC7B;MACF,CAAC;MACD,OAAOyB,QAAQ;IACjB,CAAC;IACD,CAAC1B,OAAO,CAACkE,4BAA4B,IAAI;MACvC,MAAMD,qBAAqB,GAAG,EAAE,GAAGvD,KAAK,CAACuD,qBAAqB,CAAC,CAAC;MAChE,OAAOA,qBAAqB,CAAC3C,MAAM,CAAC0C,aAAa,CAAC;MAClD,OAAO,EAAE,GAAGtD,KAAK,EAAEuD,qBAAqB,CAAC,CAAC;IAC5C,CAAC;IACD,CAACjE,OAAO,CAACmE,YAAY,IAAI;MACvB,MAAMC,UAAU,GAAG,EAAE,GAAG1D,KAAK,CAAC2C,OAAO,CAAC,CAAC;MACvC,OAAOe,UAAU,CAAC9C,MAAM,CAACO,KAAK,CAACjB,EAAE,CAAC;MAClC,OAAO,EAAE,GAAGF,KAAK,EAAE2C,OAAO,EAAEe,UAAU,CAAC,CAAC;IAC1C,CAAC;IACD,CAACpE,OAAO,CAACqE,WAAW,IAAI;MACtB,OAAO,EAAE,GAAG/C,MAAM,CAACgD,kBAAkB,CAAC,CAAC;IACzC,CAAC;IACD,CAACtE,OAAO,CAACuE,WAAW,IAAI;MACtB,MAAMC,EAAE,GAAG,EAAE,GAAGlD,MAAM,CAACyC,KAAK,CAAC,CAAC;MAC9B,MAAMU,kBAAkB,GAAG/D,KAAK,CAACoD,MAAM,CAACY,SAAS;QAC/C,CAAAC,EAAE;QACAA,EAAE,CAAClC,IAAI,KAAK+B,EAAE,CAAC/B,IAAI;QACnBkC,EAAE,CAACX,aAAa,KAAKQ,EAAE,CAACR,aAAa;QACrCW,EAAE,CAACjC,OAAO,KAAK8B,EAAE,CAAC9B,OAAO;QACzBiC,EAAE,CAAChC,MAAM,KAAK6B,EAAE,CAAC7B,MAAM;QACvBgC,EAAE,CAACvC,IAAI,KAAKoC,EAAE,CAACpC;MACnB,CAAC;MACD,IAAIqC,kBAAkB,IAAI,CAAC,EAAE;QAC3B,IAAInD,MAAM,CAACO,KAAK,EAAE;UAChB2C,EAAE,CAACI,kBAAkB,GAAGtD,MAAM,CAACO,KAAK,CAACjB,EAAE;QACzC;QACA,OAAO;UACL,GAAGF,KAAK;UACRoD,MAAM,EAAE;UACN,GAAGpD,KAAK,CAACoD,MAAM,CAACF,KAAK,CAAC,CAAC,EAAEa,kBAAkB,CAAC;UAC5C;YACE,GAAG/D,KAAK,CAACoD,MAAM,CAACW,kBAAkB,CAAC;YACnC,GAAGD,EAAE;YACL,IAAI9D,KAAK,CAACoD,MAAM,CAACW,kBAAkB,CAAC,CAACI,WAAW,IAAI;cAClDjE,EAAE,EAAEF,KAAK,CAACoD,MAAM,CAACW,kBAAkB,CAAC,CAAC7D;YACvC,CAAC;UACH,CAAC;UACD,GAAGF,KAAK,CAACoD,MAAM,CAACF,KAAK,CAACa,kBAAkB,GAAG,CAAC,CAAC,CAC9C;;UACD,IAAID,EAAE,CAACM,QAAQ,IAAI;YACjBC,kBAAkB,EAAEP,EAAE,CAAC5D;UACzB,CAAC;QACH,CAAC;MACH;MACA;MACA4D,EAAE,CAACI,kBAAkB,GAAG,IAAI;MAC5B,IAAIlD,QAAQ,GAAGnB,QAAQ,CAACG,KAAK,EAAE,QAAQ,EAAE8D,EAAE,EAAEQ,OAAO,CAAC1D,MAAM,CAAC2D,OAAO,CAAC,CAAC;MACrEvD,QAAQ,CAACqD,kBAAkB,GAAGP,EAAE,CAAC5D,EAAE;MACnC,IAAIU,MAAM,CAACO,KAAK,EAAE;QAChBH,QAAQ,GAAGtB,UAAU,CAACsB,QAAQ,EAAE,QAAQ,EAAE8C,EAAE,EAAE;UAC5CI,kBAAkB,EAAEtD,MAAM,CAACO,KAAK,CAACjB;QACnC,CAAC,CAAC;MACJ;MACA,OAAOc,QAAQ;IACjB,CAAC;IACD,CAAC1B,OAAO,CAACkF,YAAY,IAAI;MACvB,OAAO9E,UAAU,CAACM,KAAK,EAAE,QAAQ,EAAEY,MAAM,CAACyC,KAAK,EAAE,EAAEe,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;IACtE,CAAC;IACD,CAAC9E,OAAO,CAACmF,mBAAmB,IAAI;MAC9B,MAAM9B,OAAO,GAAG,EAAE,GAAG3C,KAAK,CAAC2C,OAAO,CAAC,CAAC;MACpC,OAAOA,OAAO,CAAC/B,MAAM,CAACyC,KAAK,CAACa,kBAAkB,CAAC;MAC/C,MAAMlD,QAAQ,GAAGtB,UAAU,CAACM,KAAK,EAAE,QAAQ,EAAEY,MAAM,CAACyC,KAAK,EAAE;QACzDa,kBAAkB,EAAE;MACtB,CAAC,CAAC;MACF,OAAO,EAAE,GAAGlD,QAAQ,EAAE2B,OAAO,CAAC,CAAC;IACjC,CAAC;IACD,CAACrD,OAAO,CAACoF,sBAAsB,IAAI;MACjC,MAAM/B,OAAO,GAAG,EAAE,GAAG3C,KAAK,CAAC2C,OAAO,CAAC,CAAC;MACpC,OAAOA,OAAO,CAAC/B,MAAM,CAAC+D,UAAU,CAAC;;MAEjC,MAAMC,SAAS,GAAG,EAAE;MACpB5E,KAAK,CAACoD,MAAM,CAACN,OAAO,CAAC,CAAAmB,EAAE,KAAI;QACzB,IAAIA,EAAE,CAACC,kBAAkB,KAAKtD,MAAM,CAAC+D,UAAU,EAAE;UAC/CC,SAAS,CAACC,IAAI,CAAC,EAAE,GAAGZ,EAAE,EAAEC,kBAAkB,EAAEtD,MAAM,CAACkE,QAAQ,CAAC5E,EAAE,CAAC,CAAC,CAAC;QACnE,CAAC,MAAM;UACL0E,SAAS,CAACC,IAAI,CAACZ,EAAE,CAAC;QACpB;MACF,CAAC,CAAC;MACF,OAAO;QACL,GAAGjE,KAAK;QACR2C,OAAO;QACPS,MAAM,EAAEwB;MACV,CAAC;IACH,CAAC;IACD,CAACtF,OAAO,CAACyF,cAAc,IAAI;MACzB,OAAOrF,UAAU,CAACM,KAAK,EAAE,QAAQ,EAAEY,MAAM,CAACyC,KAAK,EAAE,EAAEe,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;IACvE,CAAC;IACD,CAAC9E,OAAO,CAAC0F,aAAa,IAAI,KAAAC,eAAA,EAAAC,YAAA;MACxB,MAAMC,QAAQ,GAAGvE,MAAM,CAACwC,MAAM,CAACV,GAAG,CAAC,CAAAW,KAAK,KAAIA,KAAK,CAACnD,EAAE,CAAC;MACrD,MAAMkD,MAAM,GAAGpD,KAAK,CAACoD,MAAM,CAACD,MAAM,CAAC,CAAAE,KAAK,KAAI,CAAC8B,QAAQ,CAACC,QAAQ,CAAC/B,KAAK,CAACnD,EAAE,CAAC,CAAC;;MAEzE,OAAO;QACL,GAAGF,KAAK;QACRoD,MAAM;QACN,IAAI+B,QAAQ,CAACC,QAAQ,CAACpF,KAAK,CAACqE,kBAAkB,CAAC,IAAI;UACjDA,kBAAkB,GAAAY,eAAA,IAAAC,YAAA;UAChB9B,MAAM,CAAC7B,IAAI;YACT,CAAC,EAAE+B,aAAa,CAAC,CAAC;YAChBA,aAAa,KAAK1C,MAAM,CAACwC,MAAM,CAAC,CAAC,CAAC,CAACE;UACvC,CAAC,qBAHD4B,YAAA,CAGGhF,EAAE,YAAA+E,eAAA,GAAI;QACb,CAAC;MACH,CAAC;IACH,CAAC;IACD,CAAC3F,OAAO,CAAC+F,qBAAqB,IAAI;MAChC,OAAO;QACL,GAAGrF,KAAK;QACRsF,kBAAkB,EAAE;UAClB,GAAGtF,KAAK,CAACsF,kBAAkB;UAC3B,CAAC1E,MAAM,CAACO,KAAK,CAACjB,EAAE,GAAG;YACjBqF,SAAS,EAAE,KAAK;YAChBC,IAAI,EAAE,IAAI;YACVC,KAAK,EAAE;UACT;QACF;MACF,CAAC;IACH,CAAC;IACD,CAACnG,OAAO,CAACoG,sBAAsB,IAAI;MACjC,OAAO;QACL,GAAG1F,KAAK;QACRsF,kBAAkB,EAAE;UAClB,GAAGtF,KAAK,CAACsF,kBAAkB;UAC3B,CAAC1E,MAAM,CAACO,KAAK,CAACjB,EAAE,GAAG;YACjBqF,SAAS,EAAE,IAAI;YACfC,IAAI,EAAE5E,MAAM,CAAC+E,IAAI,CAACvE,MAAM;YACxBqE,KAAK,EAAE;UACT;QACF;MACF,CAAC;IACH,CAAC;IACD,CAACnG,OAAO,CAACsG,oBAAoB,IAAI;MAC/B,OAAO;QACL,GAAG5F,KAAK;QACRsF,kBAAkB,EAAE;UAClB,GAAGtF,KAAK,CAACsF,kBAAkB;UAC3B,CAAC1E,MAAM,CAACO,KAAK,CAACjB,EAAE,GAAG;YACjBqF,SAAS,EAAE,KAAK;YAChBC,IAAI,EAAE,IAAI;YACVC,KAAK,EAAE7E,MAAM,CAAC6E;UAChB;QACF;MACF,CAAC;IACH,CAAC;IACD,CAACnG,OAAO,CAACuG,WAAW,IAAI;MACtB,IAAI7E,QAAQ,GAAG,EAAE,GAAGhB,KAAK,CAAC,CAAC;MAC3B,IAAIY,MAAM,CAACO,KAAK,CAAC8B,WAAW,EAAE;QAC5B,MAAMzB,EAAE,GAAG;UACT,GAAG5B,UAAU,CAACI,KAAK,CAACM,YAAY,EAAEM,MAAM,CAACO,KAAK,CAAC8B,WAAW,CAAC;UAC3D,IAAIrC,MAAM,CAACO,KAAK,CAAC8B,WAAW,KAAKjD,KAAK,CAACO,kBAAkB,CAACL,EAAE;UAC1DF,KAAK,CAACO,kBAAkB;QAC5B,CAAC;QACD,IAAIiB,EAAE,CAACsE,aAAa,IAAI9F,KAAK,CAAC2C,OAAO,CAACnB,EAAE,CAACsE,aAAa,CAAC,EAAE;UACvD,MAAMC,UAAU,GAAG;YACjB,GAAG/F,KAAK,CAAC2C,OAAO,CAACnB,EAAE,CAACsE,aAAa,CAAC,CAACE,OAAO;YAC1CC,IAAI,EAAE,EAAE;YACR9E,KAAK,EAAE;UACT,CAAC;UACD,MAAM+E,CAAC,GAAG,EAAE,GAAGlG,KAAK,CAAC2C,OAAO,CAACnB,EAAE,CAACsE,aAAa,CAAC,EAAEE,OAAO,EAAED,UAAU,CAAC,CAAC;UACrE,MAAMpD,OAAO,GAAG,EAAE,GAAG3C,KAAK,CAAC2C,OAAO,EAAE,CAACuD,CAAC,CAAChG,EAAE,GAAGgG,CAAC,CAAC,CAAC;UAC/ClF,QAAQ,GAAG,EAAE,GAAGhB,KAAK,EAAE2C,OAAO,CAAC,CAAC;QAClC;MACF;MACA3B,QAAQ,GAAGxB,WAAW,CAACwB,QAAQ,EAAE,SAAS,EAAEJ,MAAM,CAACO,KAAK,CAAC;;MAEzD,OAAO;QACL,GAAGH,QAAQ;QACX,GAAGjB,4BAA4B;UAC7BC,KAAK;UACL;YACE8F,aAAa,EAAElF,MAAM,CAACO,KAAK,CAACjB;UAC9B,CAAC;UACDU,MAAM,CAACO,KAAK,CAAC8B,WAAW;UACxBrC,MAAM,CAACO,KAAK,CAACgF;QACf;MACF,CAAC;IACH,CAAC;IACD,CAAC7G,OAAO,CAAC8G,UAAU,IAAI;MACrB,OAAO3G,aAAa,CAACO,KAAK,EAAE,SAAS,EAAEY,MAAM,CAACO,KAAK,EAAE;QACnDnB,KAAK,EAAEb,UAAU,CAACkH,OAAO;QACzBL,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC;IACD,CAAC1G,OAAO,CAACgH,mBAAmB,IAAI;MAC9B,MAAMP,UAAU,GAAG,EAAE,GAAGnF,MAAM,CAACO,KAAK,CAAC6E,OAAO,CAAC,CAAC;MAC9CD,UAAU,CAACE,IAAI,GAAG,EAAE;MACpB,OAAOxG,aAAa,CAACO,KAAK,EAAE,SAAS,EAAEY,MAAM,CAACO,KAAK,EAAE;QACnD6E,OAAO,EAAED,UAAU;QACnBQ,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC;IACD,CAACjH,OAAO,CAACkH,qBAAqB,IAAI;MAChC,OAAO/G,aAAa,CAACO,KAAK,EAAE,SAAS,EAAEY,MAAM,CAACO,KAAK,EAAE;QACnDnB,KAAK,EAAEb,UAAU,CAACsH;MACpB,CAAC,CAAC;IACJ,CAAC;IACD,CAACnH,OAAO,CAACoH,aAAa,IAAI,KAAAC,eAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACxB;MACA;MACA;MACExG,MAAM,CAACO,KAAK,CAACnB,KAAK,KAAKb,UAAU,CAACkI,OAAO;MACzCzG,MAAM,CAACoF,OAAO,CAACsB,MAAM,KAAKnI,UAAU,CAACoI,OAAO;MAC5C;QACA,OAAOvH,KAAK;MACd;MACA,MAAMwH,IAAI,GAAG;QACXC,OAAO,EAAElI,GAAG,CAAC,CAAC;QACdmI,QAAQ,EAAE,GAAG;QACb1B,OAAO,EAAEpF,MAAM,CAACoF,OAAO;QACvB2B,IAAI,EAAE,CAAA/G,MAAM,qBAAA+F,eAAA,GAAN/F,MAAM,CAAEoF,OAAO,sBAAAY,qBAAA,GAAfD,eAAA,CAAiBxF,KAAK,qBAAtByF,qBAAA,CAAwBe,IAAI,KAAI,CAAC;QACvC3H,KAAK,EAAEb,UAAU,CAACoI,OAAO;QACzBK,cAAc,EAAEhH,MAAM,qBAAAiG,gBAAA,GAANjG,MAAM,CAAEoF,OAAO,sBAAAc,qBAAA,GAAfD,gBAAA,CAAiB1F,KAAK,qBAAtB2F,qBAAA,CAAwBc,cAAc;QACtDC,UAAU,EAAEjH,MAAM,qBAAAmG,gBAAA,GAANnG,MAAM,CAAEoF,OAAO,sBAAAgB,qBAAA,GAAfD,gBAAA,CAAiB5F,KAAK,qBAAtB6F,qBAAA,CAAwBa,UAAU;QAC9CC,SAAS,EAAElH,MAAM,qBAAAqG,gBAAA,GAANrG,MAAM,CAAEoF,OAAO,sBAAAkB,qBAAA,GAAfD,gBAAA,CAAiB9F,KAAK,qBAAtB+F,qBAAA,CAAwBY,SAAS;QAC5CC,YAAY,EAAE,IAAI;QAClBxB,MAAM,EAAE;MACV,CAAC;;MAED,MAAMyB,UAAU,GAAGpH,MAAM,qBAAAuG,gBAAA,GAANvG,MAAM,CAAEoF,OAAO,sBAAAoB,qBAAA,GAAfD,gBAAA,CAAiBhG,KAAK,qBAAtBiG,qBAAA,CAAwBY,UAAU;MACrD,IAAIA,UAAU,EAAE;QACdR,IAAI,CAACQ,UAAU,GAAGA,UAAU;MAC9B;;MAEA,OAAOvI,aAAa,CAACO,KAAK,EAAE,SAAS,EAAEY,MAAM,CAACO,KAAK,EAAEqG,IAAI,CAAC;IAC5D,CAAC;IACD,CAAClI,OAAO,CAAC2I,YAAY,IAAI;MACvB,IAAIrH,MAAM,CAACO,KAAK,CAACnB,KAAK,KAAKb,UAAU,CAACkH,OAAO,EAAE;QAC7C,OAAOrG,KAAK;MACd;MACA,MAAMwH,IAAI,GAAG;QACXxH,KAAK,EAAEb,UAAU,CAAC+I,MAAM;QACxBC,MAAM,EAAEvH,MAAM,CAACuH,MAAM;QACrBJ,YAAY,EAAEnH,MAAM,CAACwH,GAAG;QACxBX,OAAO,EAAElI,GAAG,CAAC,CAAC;QACd8I,IAAI,EAAEzH,MAAM,CAACyH;MACf,CAAC;MACD,OAAO5I,aAAa,CAACO,KAAK,EAAE,SAAS,EAAEY,MAAM,CAACO,KAAK,EAAEqG,IAAI,CAAC;IAC5D,CAAC;IACD,CAAClI,OAAO,CAACgJ,uBAAuB,IAAI,KAAAC,mBAAA;MAClC,MAAM9F,KAAK,GAAGzC,KAAK,CAACM,YAAY,CAACoC,GAAG,CAAC,CAAAlB,EAAE,KAAIA,EAAE,CAACtB,EAAE,CAAC;MACjD;MACEuC,KAAK,CAACO,OAAO,EAAAuF,mBAAA,GAAC3H,MAAM,CAACK,WAAW,qBAAlBsH,mBAAA,CAAoBrI,EAAE,CAAC,GAAG,CAAC,CAAC;MAC1CF,KAAK,CAACI,UAAU,CAACJ,KAAK,CAACI,UAAU,CAACC,MAAM,GAAG,CAAC,CAAC,KAAKO,MAAM,CAACK,WAAW,CAACf,EAAE;MACvE;QACA,MAAMa,iBAAiB,GAAG;UACxB,GAAGrB,UAAU,CAACM,KAAK,EAAE,cAAc,EAAEA,KAAK,CAACO,kBAAkB,EAAE;YAC7D,GAAGP,KAAK,CAACO;UACX,CAAC,CAAC;UACFA,kBAAkB,EAAE,CAAC;QACvB,CAAC;QACD,OAAO;UACL,IAAIK,MAAM,CAACK,WAAW,CAACf,EAAE,KAAKF,KAAK,CAACO,kBAAkB,CAACL,EAAE;UACrDR,UAAU;YACRqB,iBAAiB;YACjB,cAAc;YACdH,MAAM,CAACK,WAAW;YAClB;cACE,GAAGL,MAAM,CAACK,WAAW;cACrB,GAAGjB,KAAK,CAACO;YACX;UACF,CAAC;UACDQ,iBAAiB,CAAC;UACtBX,UAAU,EAAE,CAAC,GAAGJ,KAAK,CAACI,UAAU,EAAEQ,MAAM,CAACK,WAAW,CAACf,EAAE;QACzD,CAAC;MACH;MACA,OAAOF,KAAK;IACd,CAAC;IACD,CAACV,OAAO,CAACkJ,iBAAiB,IAAI;MAC5B,MAAMzH,iBAAiB,GAAGrB,UAAU;QAClCM,KAAK;QACL,cAAc;QACdA,KAAK,CAACO,kBAAkB;QACxB;UACE,GAAGP,KAAK,CAACO;QACX;MACF,CAAC;MACD,OAAOb,UAAU,CAACqB,iBAAiB,EAAE,cAAc,EAAEH,MAAM,CAACK,WAAW,EAAE;QACvE,GAAGL,MAAM,CAACK;MACZ,CAAC,CAAC;IACJ,CAAC;IACD,CAAC3B,OAAO,CAACmJ,UAAU,IAAI;MACrB,OAAO3I,SAAS,CAACE,KAAK,EAAE,QAAQ,EAAEY,MAAM,CAACwC,MAAM,CAAC;IAClD,CAAC;IACD,CAAC9D,OAAO,CAACoJ,wBAAwB,IAAI;MACnC,OAAO,EAAE,GAAG1I,KAAK,EAAEqE,kBAAkB,EAAEzD,MAAM,CAAC+H,KAAK,CAAC,CAAC;IACvD,CAAC;IACD,CAACrJ,OAAO,CAACsJ,oBAAoB,IAAI;MAC/B,IAAI;QACF;QACA,MAAM,EAAEC,MAAM,CAAC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC5DJ,MAAM,CAACvI,YAAY,GAAGuI,MAAM,CAACvI,YAAY,CAAC6C,MAAM;UAC9C,CAAA3B,EAAE,KAAIA,EAAE,CAACtB,EAAE,KAAKU,MAAM,CAACsI,cAAc,CAAChJ;QACxC,CAAC;QACD8I,YAAY,CAACG,OAAO,CAAC,OAAO,EAAEL,IAAI,CAACM,SAAS,CAAC,EAAEP,MAAM,CAAC,CAAC,CAAC,CAAC;MAC3D,CAAC,CAAC,OAAOpD,KAAK,EAAE;;QACd;MAAA,CACD,CACD;MACA,OAAO/F,UAAU;QACfM,KAAK;QACL,cAAc;QACdY,MAAM,CAACsI,cAAc;QACrBtI,MAAM,CAACyI;MACT,CAAC;IACH,CAAC;IACD,CAAC/J,OAAO,CAACgK,aAAa,IAAI;MACxB,IAAI;QACF;QACA,MAAM,EAAET,MAAM,CAAC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC5DJ,MAAM,CAACzF,MAAM,GAAGyF,MAAM,CAACzF,MAAM,CAACD,MAAM;UAClC,CAAAE,KAAK,KAAIA,KAAK,CAACnD,EAAE,KAAKU,MAAM,CAAC2I,QAAQ,CAACrJ;QACxC,CAAC;QACD8I,YAAY,CAACG,OAAO,CAAC,OAAO,EAAEL,IAAI,CAACM,SAAS,CAAC,EAAEP,MAAM,CAAC,CAAC,CAAC,CAAC;MAC3D,CAAC,CAAC,OAAOpD,KAAK,EAAE;;QACd;MAAA;MAGF;MACA,OAAO5F,QAAQ;QACbF,aAAa,CAACK,KAAK,EAAE,QAAQ,EAAEY,MAAM,CAAC2I,QAAQ,CAAC;QAC/C,QAAQ;QACR3I,MAAM,CAAC4I;MACT,CAAC;IACH,CAAC;IACD,CAAClK,OAAO,CAACmK,mBAAmB,IAAI;MAC9B,MAAMrJ,UAAU,GAAGJ,KAAK,CAACI,UAAU,CAACsC,GAAG,CAAC,CAAAiG,KAAK;MAC3CA,KAAK,KAAK/H,MAAM,CAAC8I,KAAK,GAAG9I,MAAM,CAAC+I,KAAK,GAAGhB;MAC1C,CAAC;MACD,OAAO,EAAE,GAAG3I,KAAK,EAAEI,UAAU,CAAC,CAAC;IACjC,CAAC;IACD,CAACd,OAAO,CAACsK,aAAa,IAAI;MACxB,MAAMzI,KAAK,GAAG;QACZ,GAAGnB,KAAK,CAAC2C,OAAO,CAAC/B,MAAM,CAACiJ,OAAO,CAAC;QAChC;QACA5G,WAAW,EAAErC,MAAM,CAAC0C;MACtB,CAAC;MACD,MAAMX,OAAO,GAAG,EAAE,GAAG3C,KAAK,CAAC2C,OAAO,EAAE,CAACxB,KAAK,CAACjB,EAAE,GAAGiB,KAAK,CAAC,CAAC;MACvD,OAAO,EAAE,GAAGnB,KAAK,EAAE2C,OAAO,CAAC,CAAC;IAC9B,CAAC;IACD,CAACrD,OAAO,CAACwK,kBAAkB,IAAI;MAC7B,OAAO;QACL,GAAG9J,KAAK;QACR,GAAGD,4BAA4B;UAC7BC,KAAK;UACL;YACE+B,IAAI,EAAEnB,MAAM,CAACmB;UACf,CAAC;UACDnB,MAAM,CAACK,WAAW,CAACf;QACrB;MACF,CAAC;IACH,CAAC;IACD,CAACZ,OAAO,CAACyK,wBAAwB,IAAI;MACnC,OAAO;QACL,GAAG/J,KAAK;QACR,GAAGD,4BAA4B;UAC7BC,KAAK;UACL;YACEgC,OAAO,EAAEpB,MAAM,CAACoB;UAClB,CAAC;UACDpB,MAAM,CAACK,WAAW,CAACf;QACrB;MACF,CAAC;IACH,CAAC;IACD,CAACZ,OAAO,CAAC0K,uBAAuB,IAAI;MAClC,OAAO;QACL,GAAGhK,KAAK;QACR,GAAGD,4BAA4B;UAC7BC,KAAK;UACL;YACEiC,MAAM,EAAErB,MAAM,CAACqB;UACjB,CAAC;UACDrB,MAAM,CAACK,WAAW,CAACf;QACrB;MACF,CAAC;IACH,CAAC;IACD,CAACZ,OAAO,CAAC2K,sBAAsB,IAAI;MACjC,OAAO;QACL,GAAGjK,KAAK;QACR,GAAGD,4BAA4B;UAC7BC,KAAK;UACL;YACE0B,IAAI,EAAEd,MAAM,CAACc;UACf,CAAC;UACDd,MAAM,CAACK,WAAW,CAACf;QACrB;MACF,CAAC;IACH,CAAC;IACD,CAACZ,OAAO,CAAC4K,oBAAoB,IAAI;MAC/B,MAAM,EAAE3J,kBAAkB,CAAC,CAAC,GAAGP,KAAK;MACpC;MACE,CAAAO,kBAAkB,oBAAlBA,kBAAkB,CAAEL,EAAE,MAAKU,MAAM,CAACK,WAAW,CAACf,EAAE;MAChDK,kBAAkB,CAAC4B,GAAG,KAAKvB,MAAM,CAACuB,GAAG;MACrC;QACA,OAAOnC,KAAK;MACd;MACA,OAAO;QACL,GAAGA,KAAK;QACR,GAAGD,4BAA4B;UAC7BC,KAAK;UACL;YACEmC,GAAG,EAAEvB,MAAM,CAACuB,GAAG;YACf,IAAIvB,MAAM,CAACiJ,OAAO,IAAI,EAAE/D,aAAa,EAAElF,MAAM,CAACiJ,OAAO,CAAC,CAAC;UACzD,CAAC;UACDjJ,MAAM,CAACK,WAAW,CAACf;QACrB;MACF,CAAC;IACH,CAAC;IACD,CAACZ,OAAO,CAAC6K,gCAAgC,IAAI;MAC3C,OAAO;QACL,GAAGnK,KAAK;QACR,GAAGD,4BAA4B;UAC7BC,KAAK;UACL;YACEoK,cAAc,EAAExJ,MAAM,CAACyJ;UACzB,CAAC;UACDzJ,MAAM,CAACK,WAAW,CAACf;QACrB;MACF,CAAC;IACH,CAAC;IACD,CAACZ,OAAO,CAACgL,4BAA4B,IAAI;MACvC,OAAO;QACL,GAAGtK,KAAK;QACR,GAAGD,4BAA4B;UAC7BC,KAAK;UACL;YACEoC,UAAU,EAAExB,MAAM,CAACwB;UACrB,CAAC;UACDxB,MAAM,CAACK,WAAW,CAACf;QACrB;MACF,CAAC;IACH,CAAC;IACD,CAACZ,OAAO,CAACiL,gCAAgC,IAAI;MAC3C,OAAO;QACL,GAAGvK,KAAK;QACR,GAAGD,4BAA4B;UAC7BC,KAAK;UACL;YACEwK,cAAc,EAAE5J,MAAM,CAAC4J;UACzB,CAAC;UACD5J,MAAM,CAACK,WAAW,CAACf;QACrB;MACF,CAAC;IACH,CAAC;IACD,CAACZ,OAAO,CAACmL,8BAA8B,IAAI;MACzC,OAAO;QACL,GAAGzK,KAAK;QACR,GAAGD,4BAA4B;UAC7BC,KAAK;UACL;YACE0K,YAAY,EAAE9J,MAAM,CAACuB;UACvB,CAAC;UACDvB,MAAM,CAACK,WAAW,CAACf,EAAE;UACrB;QACF;MACF,CAAC;IACH,CAAC;IACD,CAACZ,OAAO,CAACqL,wBAAwB,IAAI;MACnC,OAAO;QACL,GAAG3K,KAAK;QACR,GAAGD,4BAA4B;UAC7BC,KAAK;UACL;YACEkC,OAAO,EAAEtB,MAAM,CAACsB;UAClB,CAAC;UACDtB,MAAM,CAACK,WAAW,CAACf;QACrB;MACF,CAAC;IACH,CAAC;IACD,CAACZ,OAAO,CAACsL,2BAA2B,IAAI;MACtC,OAAO;QACL,GAAG5K,KAAK;QACR,GAAGD,4BAA4B;UAC7BC,KAAK;UACL;YACE6K,YAAY,EAAEjK,MAAM,CAACiK,YAAY;YACjCC,YAAY,EAAElK,MAAM,CAACkK;UACvB,CAAC;UACDlK,MAAM,CAACK,WAAW,CAACf;QACrB;MACF,CAAC;IACH,CAAC;IACD,CAACZ,OAAO,CAACyL,4BAA4B,IAAI;MACvC,OAAO;QACL,GAAG/K,KAAK;QACR,GAAGD,4BAA4B;UAC7BC,KAAK;UACL;YACEgL,WAAW,EAAEpK,MAAM,CAACoK;UACtB,CAAC;UACDpK,MAAM,CAACK,WAAW,CAACf;QACrB;MACF,CAAC;IACH,CAAC;IACD,CAACZ,OAAO,CAAC2L,aAAa,IAAI;MACxB,MAAMC,SAAS,GAAG,CAAC,CAAC;MACpBtK,MAAM,CAACsK,SAAS,CAACpI,OAAO,CAAC,CAAAqI,EAAE,KAAI;QAC7BD,SAAS,CAACC,EAAE,CAACjL,EAAE,CAAC,GAAG;UACjB,GAAGiL,EAAE;UACLC,UAAU,EAAEtC,IAAI,CAACC,KAAK,CAACoC,EAAE,CAACE,KAAK,IAAI,EAAE;QACvC,CAAC;MACH,CAAC,CAAC;MACF,OAAO,EAAE,GAAGrL,KAAK,EAAEkL,SAAS,CAAC,CAAC;IAChC,CAAC;IACD,CAAC5L,OAAO,CAACgM,eAAe,IAAI;MAC1B,IAAI5H,UAAU,GAAG,EAAE,GAAG1D,KAAK,CAAC2C,OAAO,CAAC,CAAC;MACrC;MACA,IAAI4I,MAAM,GAAG,KAAK;MAClB,IAAI,EAAEC,iBAAiB,CAAC,CAAC,GAAGxL,KAAK;MACjC4C,MAAM,CAAC6I,OAAO,CAAC7K,MAAM,CAAC8K,cAAc,CAAC,CAAC5I,OAAO,CAAC,CAAC,CAAC5C,EAAE,EAAEyL,YAAY,CAAC,KAAK;QACpE;QACE,CAAC3L,KAAK,CAAC2C,OAAO,CAACiJ,cAAc,CAAC1L,EAAE,CAAC;QAChCF,KAAK,CAAC2C,OAAO,CAACzC,EAAE,CAAC,CAACF,KAAK,KAAKb,UAAU,CAACkH,OAAO;QAC7CrG,KAAK,CAAC2C,OAAO,CAACzC,EAAE,CAAC,CAACF,KAAK,KAAKb,UAAU,CAAC+I,MAAO;QAChD,KAAA2D,iBAAA;UACA,MAAMC,SAAS,GAAG5M,kBAAkB,CAACyM,YAAY,CAACI,UAAU,CAAC;UAC7D,MAAMC,SAAS,GAAGvL,IAAI,CAACsI,KAAK,CAAC+C,SAAS,CAAC;UACvC,IAAIE,SAAS,GAAGR,iBAAiB,EAAE;YACjCA,iBAAiB,GAAGQ,SAAS;UAC/B;UACA,MAAMC,SAAS,IAAAJ,iBAAA,GAAG7L,KAAK,CAAC2C,OAAO,CAACzC,EAAE,CAAC,qBAAjB2L,iBAAA,CAAmB7L,KAAK;UAC1C,MAAMkM,YAAY,GAAGP,YAAY,CAAC3L,KAAK;UACvC0D,UAAU,CAACxD,EAAE,CAAC,GAAG;YACf,GAAGF,KAAK,CAAC2C,OAAO,CAACzC,EAAE,CAAC;YACpB,GAAGyL,YAAY;YACf,IAAIA,YAAY,CAACQ,SAAS,IAAI;cAC5BA,SAAS,EAAEC,MAAM,CAACT,YAAY,CAACQ,SAAS;YAC1C,CAAC,CAAC;YACF,IAAIR,YAAY,CAAClE,OAAO,IAAI;cAC1BA,OAAO,EAAE2E,MAAM,CAACT,YAAY,CAAClE,OAAO;YACtC,CAAC,CAAC;YACF;YACA;YACA;YACAzH,KAAK;YACHkM,YAAY,KAAK/M,UAAU,CAACoI,OAAO;YACnC;YACEpI,UAAU,CAACsH,QAAQ;YACnBtH,UAAU,CAACoI,OAAO;YAClBpI,UAAU,CAACkN,OAAO,CACnB;YAACjH,QAAQ,CAAC6G,SAAS,CAAC;YACjBA,SAAS;YACTC;UACR,CAAC;UACD;UACE7M,YAAY;YACViN,KAAA,CAAK5I,UAAU,CAACxD,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;YAC/BoM,KAAA,CAAKtM,KAAK,CAAC2C,OAAO,CAACzC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC;UACnC,CAAC;UACDqM,QAAA,CAAQ7I,UAAU,CAACxD,EAAE,CAAC,CAACmL,KAAK,EAAErL,KAAK,CAAC2C,OAAO,CAACzC,EAAE,CAAC,CAACmL,KAAK,CAAC;UACtD;YACA3H,UAAU,CAACxD,EAAE,CAAC,GAAGF,KAAK,CAAC2C,OAAO,CAACzC,EAAE,CAAC;UACpC,CAAC,MAAM;YACLqL,MAAM,GAAG,IAAI;UACf;QACF;MACF,CAAC,CAAC;MACF,IAAI,CAACA,MAAM,EAAE;QACX7H,UAAU,GAAG1D,KAAK,CAAC2C,OAAO;MAC5B;MACA,OAAO,EAAE,GAAG3C,KAAK,EAAE2C,OAAO,EAAEe,UAAU,EAAE8H,iBAAiB,CAAC,CAAC;IAC7D,CAAC;IACD,CAAClM,OAAO,CAACkN,sBAAsB,IAAI;MACjC,MAAM,EAAE7J,OAAO,CAAC,CAAC,GAAG3C,KAAK;MACzB,MAAMyM,cAAc,GAAG7J,MAAM,CAAC8J,WAAW;QACvC9J,MAAM,CAAC6I,OAAO,CAAC9I,OAAO,CAAC;QACpBQ,MAAM,CAAC,CAAC,GAAGhC,KAAK,CAAC,KAAK;UACrB;UACE,CAAC,SAAS,EAAE,SAAS,CAAC,CAACiE,QAAQ,CAACjE,KAAK,CAACnB,KAAK,CAAC;UAC5CS,IAAI,CAAClB,GAAG,CAAC,CAAC,GAAG4B,KAAK,CAACgL,SAAS,GAAGvL,MAAM,CAAC+L,QAAQ;UAC9CxL,KAAK,CAACuG,QAAQ,KAAK,CAAC;UACpB;YACA,OAAO,KAAK;UACd;UACA,OAAO,IAAI;QACb,CAAC,CAAC;QACDhF,GAAG,CAAC,CAAC,CAACxC,EAAE,EAAEiB,KAAK,CAAC,UAAAyL,cAAA,QAAK;UACpB1M,EAAE;UACF;YACE,GAAGiB,KAAK;YACRnB,KAAK;YACHmB,KAAK,CAAC6G,UAAU,KAAA4E,cAAA,GAAIzL,KAAK,CAAC6E,OAAO,aAAb4G,cAAA,CAAetF,MAAM;YACrCnG,KAAK,CAAC6E,OAAO,CAACsB,MAAM;YACpBnG,KAAK,CAACnB;UACd,CAAC,CACF;QAAA;MACL,CAAC;MACD,OAAO,EAAE,GAAGA,KAAK,EAAE2C,OAAO,EAAE8J,cAAc,CAAC,CAAC;IAC9C,CAAC;IACD,CAACnN,OAAO,CAACuN,gBAAgB,IAAI;MAC3B,OAAO,EAAE,GAAG7M,KAAK,EAAE8M,OAAO,EAAElM,MAAM,CAACkM,OAAO,CAAC,CAAC;IAC9C,CAAC;IACD,CAACxN,OAAO,CAACyN,yBAAyB,IAAI;MACpC,OAAO,EAAE,GAAG/M,KAAK,EAAEgN,mBAAmB,EAAE,IAAI,EAAEjF,YAAY,EAAE,IAAI,CAAC,CAAC;IACpE,CAAC;IACD,CAACzI,OAAO,CAAC2N,yBAAyB,IAAI;MACpC,OAAO;QACL,GAAGjN,KAAK;QACRgN,mBAAmB,EAAE,KAAK;QAC1BjF,YAAY,EAAE,IAAI;QAClBmF,UAAU,EAAEtM,MAAM,CAACsM;MACrB,CAAC;IACH,CAAC;IACD,CAAC5N,OAAO,CAAC6N,wBAAwB,IAAI;MACnC,OAAO,EAAE,GAAGnN,KAAK,EAAEgN,mBAAmB,EAAE,KAAK,EAAEjF,YAAY,EAAEnH,MAAM,CAACwM,GAAG,CAAC,CAAC;IAC3E,CAAC;IACD,CAAC9N,OAAO,CAAC+N,0BAA0B,IAAI;MACrC,OAAO,EAAE,GAAGrN,KAAK,EAAEsN,sBAAsB,EAAE1M,MAAM,CAACoL,SAAS,CAAC,CAAC;IAC/D,CAAC;IACD,CAAC1M,OAAO,CAACiO,2BAA2B,IAAI;MACtC,OAAO,EAAE,GAAGvN,KAAK,EAAEwN,oBAAoB,EAAE5M,MAAM,CAAC0C,aAAa,CAAC,CAAC;IACjE;EACF,CAAC;EACD,IAAI1C,MAAM,CAAC6M,IAAI,IAAI5M,cAAc,EAAE;IACjC,OAAOA,cAAc,CAACD,MAAM,CAAC6M,IAAI,CAAC,CAAC,CAAC;EACtC;EACA,OAAOzN,KAAK;AACd,CAAC,mBAAA0N,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CApvBQ/N,4BAA4B,8GAAA2N,cAAA,CAAAI,QAAA,CAqBbnN,aAAa,uHAAAoN,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}