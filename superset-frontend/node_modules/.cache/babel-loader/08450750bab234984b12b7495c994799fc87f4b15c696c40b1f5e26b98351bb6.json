{"ast":null,"code":"import { css as _css } from \"@emotion/react\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { PureComponent, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Radio } from 'src/components/Radio';\nimport Card from 'src/components/Card';\nimport Alert from 'src/components/Alert';\nimport Badge from 'src/components/Badge';\nimport {\n  css,\n  isFeatureEnabled,\n  getCurrencySymbol,\n  ensureIsArray,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  t,\n  withTheme,\n  getClientErrorObject } from\n'@superset-ui/core';\nimport { Select, AsyncSelect, Row, Col } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Button from 'src/components/Button';\nimport Tabs from 'src/components/Tabs';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport Label from 'src/components/Label';\nimport Loading from 'src/components/Loading';\nimport TableSelector from 'src/components/TableSelector';\nimport EditableTitle from 'src/components/EditableTitle';\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport SpatialControl from 'src/explore/components/controls/SpatialControl';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Icons } from 'src/components/Icons';\nimport CurrencyControl from 'src/explore/components/controls/CurrencyControl';\nimport CollectionTable from './CollectionTable';\nimport Fieldset from './Fieldset';\nimport Field from './Field';\nimport { fetchSyncedColumns, updateColumns } from './utils';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\n\nconst DatasourceContainer = styled.div`\n  .change-warning {\n    margin: 16px 10px 0;\n    color: ${({ theme }) => theme.colors.warning.base};\n  }\n\n  .change-warning .bold {\n    font-weight: ${({ theme }) => theme.typography.weights.bold};\n  }\n\n  .form-group.has-feedback > .help-block {\n    margin-top: 8px;\n  }\n\n  .form-group.form-group-md {\n    margin-bottom: 8px;\n  }\n`;\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledTableTabs = styled(Tabs)`\n  overflow: visible;\n  .ant-tabs-content-holder {\n    overflow: visible;\n  }\n`;\n\nconst StyledBadge = styled(Badge)`\n  .antd5-badge-count {\n    line-height: ${({ theme }) => theme.gridUnit * 4}px;\n    height: ${({ theme }) => theme.gridUnit * 4}px;\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst EditLockContainer = styled.div`\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  display: flex;\n  align-items: center;\n  a {\n    padding: 0 10px;\n  }\n`;\n\nconst ColumnButtonWrapper = styled.div`\n  text-align: right;\n  ${({ theme }) => `margin-bottom: ${theme.gridUnit * 2}px`}\n`;\n\nconst StyledLabelWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  span {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledColumnsTabWrapper = styled.div`\n  .table > tbody > tr > td {\n    vertical-align: middle;\n  }\n\n  .ant-tag {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledButtonWrapper = styled.span`\n  ${({ theme }) => `\n    margin-top: ${theme.gridUnit * 3}px;\n    margin-left: ${theme.gridUnit * 3}px;\n    button>span>:first-of-type {\n      margin-right: 0;\n    }\n  `}\n`;\n\nconst sqlTooltipOptions = {\n  placement: 'topRight',\n  title: t(\n    'If changes are made to your SQL query, ' +\n    'columns in your dataset will be synced when saving the dataset.'\n  )\n};\n\nconst checkboxGenerator = (d, onChange) =>\n_jsx(CheckboxControl, { value: d, onChange: onChange });\n\nconst DATA_TYPES = [\n{ value: 'STRING', label: t('STRING') },\n{ value: 'NUMERIC', label: t('NUMERIC') },\n{ value: 'DATETIME', label: t('DATETIME') },\n{ value: 'BOOLEAN', label: t('BOOLEAN') }];\n\n\nconst DATASOURCE_TYPES_ARR = [\n{ key: 'physical', label: t('Physical (table or view)') },\n{ key: 'virtual', label: t('Virtual (SQL)') }];\n\nconst DATASOURCE_TYPES = {};\nDATASOURCE_TYPES_ARR.forEach((o) => {\n  DATASOURCE_TYPES[o.key] = o;\n});var _ref = process.env.NODE_ENV === \"production\" ? { name: \"s5xdrg\", styles: \"display:flex;align-items:center\" } : { name: \"l0hchv-CollectionTabTitle\", styles: \"display:flex;align-items:center;label:CollectionTabTitle;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\n\nfunction CollectionTabTitle({ title, collection }) {\n  return (\n    _jsxs(\"div\", {\n      css: _ref,\n      \"data-test\": `collection-tab-${title}`, children: [\n\n      title, ' ',\n      _jsx(StyledBadge, { count: collection ? collection.length : 0, showZero: true })] }\n    ));\n\n}\n\nCollectionTabTitle.propTypes = {\n  title: PropTypes.string,\n  collection: PropTypes.array\n};\n\nfunction ColumnCollectionTable({\n  columns,\n  datasource,\n  onColumnsChange,\n  onDatasourceChange,\n  editableColumnName,\n  showExpression,\n  allowAddItem,\n  allowEditDataType,\n  itemGenerator,\n  columnLabelTooltips\n}) {\n  return (\n    _jsx(CollectionTable, {\n      tableColumns:\n      isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes) ?\n      [\n      'column_name',\n      'advanced_data_type',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'] :\n\n      [\n      'column_name',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'],\n\n\n      sortColumns:\n      isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes) ?\n      [\n      'column_name',\n      'advanced_data_type',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'] :\n\n      [\n      'column_name',\n      'type',\n      'is_dttm',\n      'main_dttm_col',\n      'filterable',\n      'groupby'],\n\n\n      allowDeletes: true,\n      allowAddItem: allowAddItem,\n      itemGenerator: itemGenerator,\n      collection: columns,\n      columnLabelTooltips: columnLabelTooltips,\n      stickyHeader: true,\n      expandFieldset:\n      _jsx(FormContainer, { children:\n        _jsxs(Fieldset, { compact: true, children: [\n          showExpression &&\n          _jsx(Field, {\n            fieldKey: \"expression\",\n            label: t('SQL expression'),\n            control:\n            _jsx(TextAreaControl, {\n              language: \"markdown\",\n              offerEditInModal: false,\n              resize: \"vertical\" }\n            ) }\n\n          ),\n\n          _jsx(Field, {\n            fieldKey: \"verbose_name\",\n            label: t('Label'),\n            control:\n            _jsx(TextControl, {\n              controlId: \"verbose_name\",\n              placeholder: t('Label') }\n            ) }\n\n          ),\n          _jsx(Field, {\n            fieldKey: \"description\",\n            label: t('Description'),\n            control:\n            _jsx(TextControl, {\n              controlId: \"description\",\n              placeholder: t('Description') }\n            ) }\n\n          ),\n          allowEditDataType &&\n          _jsx(Field, {\n            fieldKey: \"type\",\n            label: t('Data type'),\n            control:\n            _jsx(Select, {\n              ariaLabel: t('Data type'),\n              options: DATA_TYPES,\n              name: \"type\",\n              allowNewOptions: true,\n              allowClear: true }\n            ) }\n\n          ),\n\n          isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes) ?\n          _jsx(Field, {\n            fieldKey: \"advanced_data_type\",\n            label: t('Advanced data type'),\n            control:\n            _jsx(TextControl, {\n              controlId: \"advanced_data_type\",\n              placeholder: t('Advanced Data type') }\n            ) }\n\n          ) :\n\n          _jsx(_Fragment, {}),\n\n          _jsx(Field, {\n            fieldKey: \"python_date_format\",\n            label: t('Datetime format'),\n            description:\n            /* Note the fragmented translations may not work. */\n            _jsxs(\"div\", { children: [\n              t('The pattern of timestamp format. For strings use '),\n              _jsx(\"a\", { href: \"https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior\", children:\n                t('Python datetime string pattern') }\n              ),\n              t(' expression which needs to adhere to the '),\n              _jsx(\"a\", { href: \"https://en.wikipedia.org/wiki/ISO_8601\", children:\n                t('ISO 8601') }\n              ),\n              t(` standard to ensure that the lexicographical ordering\n                      coincides with the chronological ordering. If the\n                      timestamp format does not adhere to the ISO 8601 standard\n                      you will need to define an expression and type for\n                      transforming the string into a date or timestamp. Note\n                      currently time zones are not supported. If time is stored\n                      in epoch format, put \\`epoch_s\\` or \\`epoch_ms\\`. If no pattern\n                      is specified we fall back to using the optional defaults on a per\n                      database/column name level via the extra parameter.`)] }\n            ),\n\n            control:\n            _jsx(TextControl, {\n              controlId: \"python_date_format\",\n              placeholder: \"%Y-%m-%d\" }\n            ) }\n\n          ),\n          _jsx(Field, {\n            fieldKey: \"certified_by\",\n            label: t('Certified By'),\n            description: t('Person or group that has certified this metric'),\n            control:\n            _jsx(TextControl, {\n              controlId: \"certified\",\n              placeholder: t('Certified by') }\n            ) }\n\n          ),\n          _jsx(Field, {\n            fieldKey: \"certification_details\",\n            label: t('Certification details'),\n            description: t('Details of the certification'),\n            control:\n            _jsx(TextControl, {\n              controlId: \"certificationDetails\",\n              placeholder: t('Certification details') }\n            ) }\n\n          )] }\n        ) }\n      ),\n\n      columnLabels:\n      isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes) ?\n      {\n        column_name: t('Column'),\n        advanced_data_type: t('Advanced data type'),\n        type: t('Data type'),\n        groupby: t('Is dimension'),\n        is_dttm: t('Is temporal'),\n        main_dttm_col: t('Default datetime'),\n        filterable: t('Is filterable')\n      } :\n      {\n        column_name: t('Column'),\n        type: t('Data type'),\n        groupby: t('Is dimension'),\n        is_dttm: t('Is temporal'),\n        main_dttm_col: t('Default datetime'),\n        filterable: t('Is filterable')\n      },\n\n      onChange: onColumnsChange,\n      itemRenderers:\n      isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes) ?\n      {\n        column_name: (v, onItemChange, _, record) =>\n        editableColumnName ?\n        _jsxs(StyledLabelWrapper, { children: [\n          record.is_certified &&\n          _jsx(CertifiedBadge, {\n            certifiedBy: record.certified_by,\n            details: record.certification_details }\n          ),\n\n          _jsx(EditableTitle, {\n            canEdit: true,\n            title: v,\n            onSaveTitle: onItemChange }\n          )] }\n        ) :\n\n        _jsxs(StyledLabelWrapper, { children: [\n          record.is_certified &&\n          _jsx(CertifiedBadge, {\n            certifiedBy: record.certified_by,\n            details: record.certification_details }\n          ),\n\n          v] }\n        ),\n\n        main_dttm_col: (value, _onItemChange, _label, record) => {\n          const checked = datasource.main_dttm_col === record.column_name;\n          const disabled = !columns.find(\n            (column) => column.column_name === record.column_name\n          ).is_dttm;\n          return (\n            _jsx(Radio, {\n              \"data-test\": `radio-default-dttm-${record.column_name}`,\n              checked: checked,\n              disabled: disabled,\n              onChange: () =>\n              onDatasourceChange({\n                ...datasource,\n                main_dttm_col: record.column_name\n              }) }\n\n            ));\n\n        },\n        type: (d) => d ? _jsx(Label, { children: d }) : null,\n        advanced_data_type: (d) =>\n        _jsx(Label, { onChange: onColumnsChange, children: d }),\n\n        is_dttm: checkboxGenerator,\n        filterable: checkboxGenerator,\n        groupby: checkboxGenerator\n      } :\n      {\n        column_name: (v, onItemChange, _, record) =>\n        editableColumnName ?\n        _jsxs(StyledLabelWrapper, { children: [\n          record.is_certified &&\n          _jsx(CertifiedBadge, {\n            certifiedBy: record.certified_by,\n            details: record.certification_details }\n          ),\n\n          _jsx(TextControl, { value: v, onChange: onItemChange })] }\n        ) :\n\n        _jsxs(StyledLabelWrapper, { children: [\n          record.is_certified &&\n          _jsx(CertifiedBadge, {\n            certifiedBy: record.certified_by,\n            details: record.certification_details }\n          ),\n\n          v] }\n        ),\n\n        main_dttm_col: (value, _onItemChange, _label, record) => {\n          const checked = datasource.main_dttm_col === record.column_name;\n          const disabled = !columns.find(\n            (column) => column.column_name === record.column_name\n          ).is_dttm;\n          return (\n            _jsx(Radio, {\n              \"data-test\": `radio-default-dttm-${record.column_name}`,\n              checked: checked,\n              disabled: disabled,\n              onChange: () =>\n              onDatasourceChange({\n                ...datasource,\n                main_dttm_col: record.column_name\n              }) }\n\n            ));\n\n        },\n        type: (d) => d ? _jsx(Label, { children: d }) : null,\n        is_dttm: checkboxGenerator,\n        filterable: checkboxGenerator,\n        groupby: checkboxGenerator\n      } }\n\n    ));\n\n}\nColumnCollectionTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  datasource: PropTypes.object.isRequired,\n  onColumnsChange: PropTypes.func.isRequired,\n  onDatasourceChange: PropTypes.func.isRequired,\n  editableColumnName: PropTypes.bool,\n  showExpression: PropTypes.bool,\n  allowAddItem: PropTypes.bool,\n  allowEditDataType: PropTypes.bool,\n  itemGenerator: PropTypes.func\n};\nColumnCollectionTable.defaultProps = {\n  editableColumnName: false,\n  showExpression: false,\n  allowAddItem: false,\n  allowEditDataType: false,\n  itemGenerator: () => ({\n    column_name: t('<new column>'),\n    filterable: true,\n    groupby: true\n  })\n};\n\nfunction StackedField({ label, formElement }) {\n  return (\n    _jsxs(\"div\", { children: [\n      _jsx(\"div\", { children:\n        _jsx(\"strong\", { children: label }) }\n      ),\n      _jsx(\"div\", { children: formElement })] }\n    ));\n\n}\n\nStackedField.propTypes = {\n  label: PropTypes.string,\n  formElement: PropTypes.node\n};\n\nfunction FormContainer({ children }) {\n  return _jsx(Card, { padded: true, children: children });\n}\n\nFormContainer.propTypes = {\n  children: PropTypes.node\n};\n\nconst propTypes = {\n  datasource: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  setIsEditing: PropTypes.func\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  setIsEditing: () => {}\n};\n\nfunction OwnersSelector({ datasource, onChange }) {\n  const loadOptions = useCallback((search = '', page, pageSize) => {\n    const query = rison.encode({ filter: search, page, page_size: pageSize });\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/related/owners?q=${query}`\n    }).then((response) => ({\n      data: response.json.result.\n      filter((item) => item.extra.active).\n      map((item) => ({\n        value: item.value,\n        label: item.text\n      })),\n      totalCount: response.json.count\n    }));\n  }, []);\n\n  return (\n    _jsx(AsyncSelect, {\n      ariaLabel: t('Select owners'),\n      mode: \"multiple\",\n      name: \"owners\",\n      value: datasource.owners,\n      options: loadOptions,\n      onChange: onChange,\n      header: _jsx(FormLabel, { children: t('Owners') }),\n      allowClear: true }\n    ));\n\n}__signature__(OwnersSelector, \"useCallback{loadOptions}\");var _ref2 = process.env.NODE_ENV === \"production\" ? { name: \"hkh81z\", styles: \"margin-top:8px\" } : { name: \"17jm38f-DatasourceEditor\", styles: \"margin-top:8px;label:DatasourceEditor;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };var _ref3 = process.env.NODE_ENV === \"production\" ? { name: \"hkh81z\", styles: \"margin-top:8px\" } : { name: \"17jm38f-DatasourceEditor\", styles: \"margin-top:8px;label:DatasourceEditor;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\n\nclass DatasourceEditor extends PureComponent {\n  constructor(props) {var _props$datasource$met;\n    super(props);\n    this.state = {\n      datasource: {\n        ...props.datasource,\n        owners: props.datasource.owners.map((owner) => ({\n          value: owner.value || owner.id,\n          label: owner.label || `${owner.first_name} ${owner.last_name}`\n        })),\n        metrics: (_props$datasource$met = props.datasource.metrics) == null ? void 0 : _props$datasource$met.map((metric) => {\n          const {\n            certified_by: certifiedByMetric,\n            certification_details: certificationDetails\n          } = metric;\n          const {\n            certification: { details, certified_by: certifiedBy } = {},\n            warning_markdown: warningMarkdown\n          } = JSON.parse(metric.extra || '{}') || {};\n          return {\n            ...metric,\n            certification_details: certificationDetails || details,\n            warning_markdown: warningMarkdown || '',\n            certified_by: certifiedBy || certifiedByMetric\n          };\n        })\n      },\n      errors: [],\n      isSqla:\n      props.datasource.datasource_type === 'table' ||\n      props.datasource.type === 'table',\n      isEditMode: false,\n      databaseColumns: props.datasource.columns.filter((col) => !col.expression),\n      calculatedColumns: props.datasource.columns.filter(\n        (col) => !!col.expression\n      ),\n      metadataLoading: false,\n      activeTabKey: 0,\n      datasourceType: props.datasource.sql ?\n      DATASOURCE_TYPES.virtual.key :\n      DATASOURCE_TYPES.physical.key\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onChangeEditMode = this.onChangeEditMode.bind(this);\n    this.onDatasourcePropChange = this.onDatasourcePropChange.bind(this);\n    this.onDatasourceChange = this.onDatasourceChange.bind(this);\n    this.tableChangeAndSyncMetadata =\n    this.tableChangeAndSyncMetadata.bind(this);\n    this.syncMetadata = this.syncMetadata.bind(this);\n    this.setColumns = this.setColumns.bind(this);\n    this.validateAndChange = this.validateAndChange.bind(this);\n    this.handleTabSelect = this.handleTabSelect.bind(this);\n    this.currencies = ensureIsArray(props.currencies).map((currencyCode) => ({\n      value: currencyCode,\n      label: `${getCurrencySymbol({\n        symbol: currencyCode\n      })} (${currencyCode})`\n    }));\n  }\n\n  onChange() {\n    // Emptying SQL if \"Physical\" radio button is selected\n    // Currently the logic to know whether the source is\n    // physical or virtual is based on whether SQL is empty or not.\n    const { datasourceType, datasource } = this.state;\n    const sql =\n    datasourceType === DATASOURCE_TYPES.physical.key ? '' : datasource.sql;\n    const newDatasource = {\n      ...this.state.datasource,\n      sql,\n      columns: [...this.state.databaseColumns, ...this.state.calculatedColumns]\n    };\n    this.props.onChange(newDatasource, this.state.errors);\n  }\n\n  onChangeEditMode() {\n    this.props.setIsEditing(!this.state.isEditMode);\n    this.setState((prevState) => ({ isEditMode: !prevState.isEditMode }));\n  }\n\n  onDatasourceChange(datasource, callback = this.validateAndChange) {\n    this.setState({ datasource }, callback);\n  }\n\n  onDatasourcePropChange(attr, value) {\n    if (value === undefined) return; // if value is undefined do not update state\n    const datasource = { ...this.state.datasource, [attr]: value };\n    this.setState(\n      (prevState) => ({\n        datasource: { ...prevState.datasource, [attr]: value }\n      }),\n      attr === 'table_name' ?\n      this.onDatasourceChange(datasource, this.tableChangeAndSyncMetadata) :\n      this.onDatasourceChange(datasource, this.validateAndChange)\n    );\n  }\n\n  onDatasourceTypeChange(datasourceType) {\n    this.setState({ datasourceType });\n  }\n\n  setColumns(obj) {\n    // update calculatedColumns or databaseColumns\n    this.setState(obj, this.validateAndChange);\n  }\n\n  validateAndChange() {\n    this.validate(this.onChange);\n  }\n\n  tableChangeAndSyncMetadata() {\n    this.validate(() => {\n      this.syncMetadata();\n      this.onChange();\n    });\n  }\n\n  async syncMetadata() {\n    const { datasource } = this.state;\n    this.setState({ metadataLoading: true });\n    try {\n      const newCols = await fetchSyncedColumns(datasource);\n      const columnChanges = updateColumns(\n        datasource.columns,\n        newCols,\n        this.props.addSuccessToast\n      );\n      this.setColumns({\n        databaseColumns: columnChanges.finalColumns.filter(\n          (col) => !col.expression // remove calculated columns\n        )\n      });\n      this.props.addSuccessToast(t('Metadata has been synced'));\n      this.setState({ metadataLoading: false });\n    } catch (error) {\n      const { error: clientError, statusText } =\n      await getClientErrorObject(error);\n      this.props.addDangerToast(\n        clientError || statusText || t('An error has occurred')\n      );\n      this.setState({ metadataLoading: false });\n    }\n  }\n\n  findDuplicates(arr, accessor) {\n    const seen = {};\n    const dups = [];\n    arr.forEach((obj) => {\n      const item = accessor(obj);\n      if (item in seen) {\n        dups.push(item);\n      } else {\n        seen[item] = null;\n      }\n    });\n    return dups;\n  }\n\n  validate(callback) {\n    let errors = [];\n    let dups;\n    const { datasource } = this.state;\n\n    // Looking for duplicate column_name\n    dups = this.findDuplicates(datasource.columns, (obj) => obj.column_name);\n    errors = errors.concat(\n      dups.map((name) => t('Column name [%s] is duplicated', name))\n    );\n\n    // Looking for duplicate metric_name\n    dups = this.findDuplicates(datasource.metrics, (obj) => obj.metric_name);\n    errors = errors.concat(\n      dups.map((name) => t('Metric name [%s] is duplicated', name))\n    );\n\n    // Making sure calculatedColumns have an expression defined\n    const noFilterCalcCols = this.state.calculatedColumns.filter(\n      (col) => !col.expression && !col.json\n    );\n    errors = errors.concat(\n      noFilterCalcCols.map((col) =>\n      t('Calculated column [%s] requires an expression', col.column_name)\n      )\n    );\n\n    // validate currency code\n    try {var _this$state$datasourc;\n      (_this$state$datasourc = this.state.datasource.metrics) == null ? void 0 : _this$state$datasourc.forEach(\n        (metric) => {var _metric$currency;return (\n            ((_metric$currency = metric.currency) == null ? void 0 : _metric$currency.symbol) &&\n            new Intl.NumberFormat('en-US', {\n              style: 'currency',\n              currency: metric.currency.symbol\n            }));}\n      );\n    } catch {\n      errors = errors.concat([t('Invalid currency code in saved metrics')]);\n    }\n\n    this.setState({ errors }, callback);\n  }\n\n  handleTabSelect(activeTabKey) {\n    this.setState({ activeTabKey });\n  }\n\n  sortMetrics(metrics) {\n    return metrics.sort(({ id: a }, { id: b }) => b - a);\n  }\n\n  renderSettingsFieldset() {\n    const { datasource } = this.state;\n    return (\n      _jsxs(Fieldset, {\n        title: t('Basic'),\n        item: datasource,\n        onChange: this.onDatasourceChange, children: [\n\n        _jsx(Field, {\n          fieldKey: \"description\",\n          label: t('Description'),\n          control:\n          _jsx(TextAreaControl, {\n            language: \"markdown\",\n            offerEditInModal: false,\n            resize: \"vertical\" }\n          ) }\n\n        ),\n        _jsx(Field, {\n          fieldKey: \"default_endpoint\",\n          label: t('Default URL'),\n          description: t(\n            `Default URL to redirect to when accessing from the dataset list page.\n            Accepts relative URLs such as <span style=„white-space: nowrap;”>/superset/dashboard/{id}/</span>`\n          ),\n          control: _jsx(TextControl, { controlId: \"default_endpoint\" }) }\n        ),\n        _jsx(Field, {\n          inline: true,\n          fieldKey: \"filter_select_enabled\",\n          label: t('Autocomplete filters'),\n          description: t('Whether to populate autocomplete filters options'),\n          control: _jsx(CheckboxControl, {}) }\n        ),\n        this.state.isSqla &&\n        _jsx(Field, {\n          fieldKey: \"fetch_values_predicate\",\n          label: t('Autocomplete query predicate'),\n          description: t(\n            'When using \"Autocomplete filters\", this can be used to improve performance ' +\n            'of the query fetching the values. Use this option to apply a ' +\n            'predicate (WHERE clause) to the query selecting the distinct ' +\n            'values from the table. Typically the intent would be to limit the scan ' +\n            'by applying a relative time filter on a partitioned or indexed time-related field.'\n          ),\n          control:\n          _jsx(TextAreaControl, {\n            language: \"sql\",\n            controlId: \"fetch_values_predicate\",\n            minLines: 5,\n            resize: \"vertical\" }\n          ) }\n\n        ),\n\n        this.state.isSqla &&\n        _jsx(Field, {\n          fieldKey: \"extra\",\n          label: t('Extra'),\n          description: t(\n            'Extra data to specify table metadata. Currently supports ' +\n            'metadata of the format: `{ \"certification\": { \"certified_by\": ' +\n            '\"Data Platform Team\", \"details\": \"This table is the source of truth.\" ' +\n            '}, \"warning_markdown\": \"This is a warning.\" }`.'\n          ),\n          control:\n          _jsx(TextAreaControl, {\n            controlId: \"extra\",\n            language: \"json\",\n            offerEditInModal: false,\n            resize: \"vertical\" }\n          ) }\n\n        ),\n\n        _jsx(OwnersSelector, {\n          datasource: datasource,\n          onChange: (newOwners) => {\n            this.onDatasourceChange({ ...datasource, owners: newOwners });\n          } }\n        )] }\n      ));\n\n  }\n\n  renderAdvancedFieldset() {\n    const { datasource } = this.state;\n    return (\n      _jsxs(Fieldset, {\n        title: t('Advanced'),\n        item: datasource,\n        onChange: this.onDatasourceChange, children: [\n\n        _jsx(Field, {\n          fieldKey: \"cache_timeout\",\n          label: t('Cache timeout'),\n          description: t(\n            'The duration of time in seconds before the cache is invalidated. Set to -1 to bypass the cache.'\n          ),\n          control: _jsx(TextControl, { controlId: \"cache_timeout\" }) }\n        ),\n        _jsx(Field, {\n          fieldKey: \"offset\",\n          label: t('Hours offset'),\n          control: _jsx(TextControl, { controlId: \"offset\" }),\n          description: t(\n            'The number of hours, negative or positive, to shift the time column. This can be used to move UTC time to local time.'\n          ) }\n        ),\n        this.state.isSqla &&\n        _jsx(Field, {\n          fieldKey: \"template_params\",\n          label: t('Template parameters'),\n          description: t(\n            'A set of parameters that become available in the query using Jinja templating syntax'\n          ),\n          control: _jsx(TextControl, { controlId: \"template_params\" }) }\n        ),\n\n        _jsx(Field, {\n          inline: true,\n          fieldKey: \"normalize_columns\",\n          label: t('Normalize column names'),\n          description: t(\n            'Allow column names to be changed to case insensitive format, if supported (e.g. Oracle, Snowflake).'\n          ),\n          control: _jsx(CheckboxControl, { controlId: \"normalize_columns\" }) }\n        ),\n        _jsx(Field, {\n          inline: true,\n          fieldKey: \"always_filter_main_dttm\",\n          label: t('Always filter main datetime column'),\n          description: t(\n            `When the secondary temporal columns are filtered, apply the same filter to the main datetime column.`\n          ),\n          control: _jsx(CheckboxControl, { controlId: \"always_filter_main_dttm\" }) }\n        )] }\n      ));\n\n  }\n\n  renderSpatialTab() {\n    const { datasource } = this.state;\n    const { spatials, all_cols: allCols } = datasource;\n    return (\n      _jsx(Tabs.TabPane, {\n        tab: _jsx(CollectionTabTitle, { collection: spatials, title: t('Spatial') }), children:\n\n\n        _jsx(CollectionTable, {\n          tableColumns: ['name', 'config'],\n          onChange: this.onDatasourcePropChange.bind(this, 'spatials'),\n          itemGenerator: () => ({\n            name: t('<new spatial>'),\n            type: t('<no type>'),\n            config: null\n          }),\n          collection: spatials,\n          allowDeletes: true,\n          itemRenderers: {\n            name: (d, onChange) =>\n            _jsx(EditableTitle, { canEdit: true, title: d, onSaveTitle: onChange }),\n\n            config: (v, onChange) =>\n            _jsx(SpatialControl, { value: v, onChange: onChange, choices: allCols })\n\n          } }\n        ) }, 4\n      ));\n\n  }\n\n  renderSourceFieldset() {var _datasource$database, _datasource$database2, _datasource$database3;\n    const { datasource } = this.state;\n    return (\n      _jsxs(\"div\", { children: [\n        _jsxs(EditLockContainer, { children: [\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, onClick: this.onChangeEditMode, children:\n            this.state.isEditMode ?\n            _jsx(Icons.UnlockOutlined, {\n              iconSize: \"xl\",\n              css: (theme) => css`\n                  margin: auto ${theme.gridUnit}px auto 0;\n                ` }\n            ) :\n\n            _jsx(Icons.LockOutlined, {\n              iconSize: \"xl\",\n              css: (theme) => ({\n                margin: `auto ${theme.gridUnit}px auto 0`\n              }) }\n            ) }\n\n          ),\n          !this.state.isEditMode &&\n          _jsx(\"div\", { children: t('Click the lock to make changes.') }),\n\n          this.state.isEditMode &&\n          _jsx(\"div\", { children: t('Click the lock to prevent further changes.') })] }\n\n        ),\n        _jsx(\"div\", { className: \"m-l-10 m-t-20 m-b-10\", children:\n          DATASOURCE_TYPES_ARR.map((type) =>\n          _jsx(Radio, {\n\n            value: type.key,\n            inline: true,\n            onChange: this.onDatasourceTypeChange.bind(this, type.key),\n            checked: this.state.datasourceType === type.key,\n            disabled: !this.state.isEditMode, children:\n\n            type.label }, type.key\n          )\n          ) }\n        ),\n        _jsx(\"hr\", {}),\n        _jsxs(Fieldset, { item: datasource, onChange: this.onDatasourceChange, compact: true, children: [\n          this.state.datasourceType === DATASOURCE_TYPES.virtual.key &&\n          _jsx(\"div\", { children:\n            this.state.isSqla &&\n            _jsxs(_Fragment, { children: [\n              _jsxs(Col, { xs: 24, md: 12, children: [\n                _jsx(Field, {\n                  fieldKey: \"databaseSelector\",\n                  label: t('Virtual'),\n                  control:\n                  _jsx(\"div\", { css: _ref2, children:\n                    _jsx(DatabaseSelector, {\n                      db: datasource == null ? void 0 : datasource.database,\n                      catalog: datasource.catalog,\n                      schema: datasource.schema,\n                      onCatalogChange: (catalog) =>\n                      this.state.isEditMode &&\n                      this.onDatasourcePropChange('catalog', catalog),\n\n                      onSchemaChange: (schema) =>\n                      this.state.isEditMode &&\n                      this.onDatasourcePropChange('schema', schema),\n\n                      onDbChange: (database) =>\n                      this.state.isEditMode &&\n                      this.onDatasourcePropChange('database', database),\n\n                      formMode: false,\n                      handleError: this.props.addDangerToast,\n                      readOnly: !this.state.isEditMode }\n                    ) }\n                  ) }\n\n                ),\n                _jsx(\"div\", { css: /*#__PURE__*/_css({ width: 'calc(100% - 34px)', marginTop: -16 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:DatasourceEditor;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), children:\n                  _jsx(Field, {\n                    fieldKey: \"table_name\",\n                    label: t('Name'),\n                    control:\n                    _jsx(TextControl, {\n                      controlId: \"table_name\",\n                      onChange: (table) => {\n                        this.onDatasourcePropChange('table_name', table);\n                      },\n                      placeholder: t('Dataset name'),\n                      disabled: !this.state.isEditMode }\n                    ) }\n\n                  ) }\n                )] }\n              ),\n              _jsx(Field, {\n                fieldKey: \"sql\",\n                label: t('SQL'),\n                description: t(\n                  'When specifying SQL, the datasource acts as a view. ' +\n                  'Superset will use this statement as a subquery while grouping and filtering ' +\n                  'on the generated parent queries.'\n                ),\n                control:\n                _jsx(TextAreaControl, {\n                  language: \"sql\",\n                  offerEditInModal: false,\n                  minLines: 20,\n                  maxLines: Infinity,\n                  readOnly: !this.state.isEditMode,\n                  resize: \"both\",\n                  tooltipOptions: sqlTooltipOptions }\n                ) }\n\n              )] }\n            ) }\n\n          ),\n\n          this.state.datasourceType === DATASOURCE_TYPES.physical.key &&\n          _jsx(Col, { xs: 24, md: 12, children:\n            this.state.isSqla &&\n            _jsx(Field, {\n              fieldKey: \"tableSelector\",\n              label: t('Physical'),\n              control:\n              _jsx(\"div\", { css: _ref3, children:\n                _jsx(TableSelector, {\n                  clearable: false,\n                  database: {\n                    ...datasource.database,\n                    database_name:\n                    ((_datasource$database = datasource.database) == null ? void 0 : _datasource$database.database_name) || ((_datasource$database2 =\n                    datasource.database) == null ? void 0 : _datasource$database2.name)\n                  },\n                  dbId: (_datasource$database3 = datasource.database) == null ? void 0 : _datasource$database3.id,\n                  handleError: this.props.addDangerToast,\n                  catalog: datasource.catalog,\n                  schema: datasource.schema,\n                  sqlLabMode: false,\n                  tableValue: datasource.table_name,\n                  onCatalogChange:\n                  this.state.isEditMode ?\n                  (catalog) =>\n                  this.onDatasourcePropChange('catalog', catalog) :\n                  undefined,\n\n                  onSchemaChange:\n                  this.state.isEditMode ?\n                  (schema) =>\n                  this.onDatasourcePropChange('schema', schema) :\n                  undefined,\n\n                  onDbChange:\n                  this.state.isEditMode ?\n                  (database) =>\n                  this.onDatasourcePropChange(\n                    'database',\n                    database\n                  ) :\n                  undefined,\n\n                  onTableSelectChange:\n                  this.state.isEditMode ?\n                  (table) =>\n                  this.onDatasourcePropChange('table_name', table) :\n                  undefined,\n\n                  readOnly: !this.state.isEditMode }\n                ) }\n              ),\n\n              description: t(\n                'The pointer to a physical table (or view). Keep in mind that the chart is ' +\n                'associated to this Superset logical table, and this logical table points ' +\n                'the physical table referenced here.'\n              ) }\n            ) }\n\n          )] }\n\n        )] }\n      ));\n\n  }\n\n  renderErrors() {\n    if (this.state.errors.length > 0) {\n      return (\n        _jsx(Alert, {\n          css: (theme) => ({ marginBottom: theme.gridUnit * 4 }),\n          type: \"error\",\n          message:\n          _jsx(_Fragment, { children:\n            this.state.errors.map((err) =>\n            _jsx(\"div\", { children: err }, err)\n            ) }\n          ) }\n\n        ));\n\n    }\n    return null;\n  }\n\n  renderMetricCollection() {\n    const { datasource } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics != null && metrics.length ? this.sortMetrics(metrics) : [];\n    return (\n      _jsx(CollectionTable, {\n        tableColumns: ['metric_name', 'verbose_name', 'expression'],\n        sortColumns: ['metric_name', 'verbose_name', 'expression'],\n        columnLabels: {\n          metric_name: t('Metric Key'),\n          verbose_name: t('Label'),\n          expression: t('SQL expression')\n        },\n        columnLabelTooltips: {\n          metric_name: t(\n            'This field is used as a unique identifier to attach ' +\n            'the metric to charts. It is also used as the alias in the ' +\n            'SQL query.'\n          )\n        },\n        expandFieldset:\n        _jsx(FormContainer, { children:\n          _jsxs(Fieldset, { compact: true, children: [\n            _jsx(Field, {\n              fieldKey: \"description\",\n              label: t('Description'),\n              control:\n              _jsx(TextControl, {\n                controlId: \"description\",\n                placeholder: t('Description') }\n              ) }\n\n            ),\n            _jsx(Field, {\n              fieldKey: \"d3format\",\n              label: t('D3 format'),\n              control:\n              _jsx(TextControl, { controlId: \"d3format\", placeholder: \"%y/%m/%d\" }) }\n\n            ),\n            _jsx(Field, {\n              fieldKey: \"currency\",\n              label: t('Metric currency'),\n              control:\n              _jsx(CurrencyControl, {\n                currencySelectOverrideProps: {\n                  placeholder: t('Select or type currency symbol')\n                },\n                symbolSelectAdditionalStyles: css`\n                      max-width: 30%;\n                    ` }\n              ) }\n\n            ),\n            _jsx(Field, {\n              label: t('Certified by'),\n              fieldKey: \"certified_by\",\n              description: t(\n                'Person or group that has certified this metric'\n              ),\n              control:\n              _jsx(TextControl, {\n                controlId: \"certified_by\",\n                placeholder: t('Certified by') }\n              ) }\n\n            ),\n            _jsx(Field, {\n              label: t('Certification details'),\n              fieldKey: \"certification_details\",\n              description: t('Details of the certification'),\n              control:\n              _jsx(TextControl, {\n                controlId: \"certification_details\",\n                placeholder: t('Certification details') }\n              ) }\n\n            ),\n            _jsx(Field, {\n              label: t('Warning'),\n              fieldKey: \"warning_markdown\",\n              description: t('Optional warning about use of this metric'),\n              control:\n              _jsx(TextAreaControl, {\n                controlId: \"warning_markdown\",\n                language: \"markdown\",\n                offerEditInModal: false,\n                resize: \"vertical\" }\n              ) }\n\n            )] }\n          ) }\n        ),\n\n        collection: sortedMetrics,\n        allowAddItem: true,\n        onChange: this.onDatasourcePropChange.bind(this, 'metrics'),\n        itemGenerator: () => ({\n          metric_name: t('<new metric>'),\n          verbose_name: '',\n          expression: ''\n        }),\n        itemCellProps: {\n          expression: () => ({\n            width: '240px'\n          })\n        },\n        itemRenderers: {\n          metric_name: (v, onChange, _, record) =>\n          _jsxs(FlexRowContainer, { children: [\n            record.is_certified &&\n            _jsx(CertifiedBadge, {\n              certifiedBy: record.certified_by,\n              details: record.certification_details }\n            ),\n\n            record.warning_markdown &&\n            _jsx(WarningIconWithTooltip, {\n              warningMarkdown: record.warning_markdown }\n            ),\n\n            _jsx(EditableTitle, { canEdit: true, title: v, onSaveTitle: onChange })] }\n          ),\n\n          verbose_name: (v, onChange) =>\n          _jsx(TextControl, { canEdit: true, value: v, onChange: onChange }),\n\n          expression: (v, onChange) =>\n          _jsx(TextAreaControl, {\n            canEdit: true,\n            initialValue: v,\n            onChange: onChange,\n            extraClasses: ['datasource-sql-expression'],\n            language: \"sql\",\n            offerEditInModal: false,\n            minLines: 5,\n            textAreaStyles: { minWidth: '200px', maxWidth: '450px' },\n            resize: \"both\" }\n          ),\n\n          description: (v, onChange, label) =>\n          _jsx(StackedField, {\n            label: label,\n            formElement: _jsx(TextControl, { value: v, onChange: onChange }) }\n          ),\n\n          d3format: (v, onChange, label) =>\n          _jsx(StackedField, {\n            label: label,\n            formElement: _jsx(TextControl, { value: v, onChange: onChange }) }\n          )\n\n        },\n        allowDeletes: true,\n        stickyHeader: true }\n      ));\n\n  }\n\n  render() {\n    const { datasource, activeTabKey } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics != null && metrics.length ? this.sortMetrics(metrics) : [];\n    const { theme } = this.props;\n\n    return (\n      _jsxs(DatasourceContainer, { \"data-test\": \"datasource-editor\", children: [\n        this.renderErrors(),\n        _jsx(Alert, {\n          css: (theme) => ({ marginBottom: theme.gridUnit * 4 }),\n          type: \"warning\",\n          message:\n          _jsxs(_Fragment, { children: [\n            ' ',\n            _jsxs(\"strong\", { children: [t('Be careful.'), \" \"] }),\n            t(\n              'Changing these settings will affect all charts using this dataset, including charts owned by other people.'\n            )] }\n          ) }\n\n        ),\n        _jsxs(StyledTableTabs, {\n          fullWidth: false,\n          id: \"table-tabs\",\n          \"data-test\": \"edit-dataset-tabs\",\n          onChange: this.handleTabSelect,\n          defaultActiveKey: activeTabKey, children: [\n\n          _jsx(Tabs.TabPane, { tab: t('Source'), children:\n            this.renderSourceFieldset(theme) }, 0\n          ),\n          _jsx(Tabs.TabPane, {\n            tab:\n            _jsx(CollectionTabTitle, {\n              collection: sortedMetrics,\n              title: t('Metrics') }\n            ), children:\n\n\n\n            this.renderMetricCollection() }, 1\n          ),\n          _jsx(Tabs.TabPane, {\n            tab:\n            _jsx(CollectionTabTitle, {\n              collection: this.state.databaseColumns,\n              title: t('Columns') }\n            ), children:\n\n\n\n            _jsxs(StyledColumnsTabWrapper, { children: [\n              _jsx(ColumnButtonWrapper, { children:\n                _jsx(StyledButtonWrapper, { children:\n                  _jsxs(Button, {\n                    buttonSize: \"small\",\n                    buttonStyle: \"tertiary\",\n                    onClick: this.syncMetadata,\n                    className: \"sync-from-source\",\n                    disabled: this.state.isEditMode, children: [\n\n                    _jsx(Icons.DatabaseOutlined, { iconSize: \"m\" }),\n                    t('Sync columns from source')] }\n                  ) }\n                ) }\n              ),\n              _jsx(ColumnCollectionTable, {\n                className: \"columns-table\",\n                columns: this.state.databaseColumns,\n                datasource: datasource,\n                onColumnsChange: (databaseColumns) =>\n                this.setColumns({ databaseColumns }),\n\n                onDatasourceChange: this.onDatasourceChange }\n              ),\n              this.state.metadataLoading && _jsx(Loading, {})] }\n            ) }, 2\n          ),\n          _jsx(Tabs.TabPane, {\n            tab:\n            _jsx(CollectionTabTitle, {\n              collection: this.state.calculatedColumns,\n              title: t('Calculated columns') }\n            ), children:\n\n\n\n            _jsx(StyledColumnsTabWrapper, { children:\n              _jsx(ColumnCollectionTable, {\n                columns: this.state.calculatedColumns,\n                onColumnsChange: (calculatedColumns) =>\n                this.setColumns({ calculatedColumns }),\n\n                columnLabelTooltips: {\n                  column_name: t(\n                    'This field is used as a unique identifier to attach ' +\n                    'the calculated dimension to charts. It is also used ' +\n                    'as the alias in the SQL query.'\n                  )\n                },\n                onDatasourceChange: this.onDatasourceChange,\n                datasource: datasource,\n                editableColumnName: true,\n                showExpression: true,\n                allowAddItem: true,\n                allowEditDataType: true,\n                itemGenerator: () => ({\n                  column_name: t('<new column>'),\n                  filterable: true,\n                  groupby: true,\n                  expression: t('<enter SQL expression here>'),\n                  __expanded: true\n                }) }\n              ) }\n            ) }, 3\n          ),\n          _jsx(Tabs.TabPane, { tab: t('Settings'), children:\n            _jsxs(Row, { gutter: 16, children: [\n              _jsx(Col, { xs: 24, md: 12, children:\n                _jsx(FormContainer, { children: this.renderSettingsFieldset() }) }\n              ),\n              _jsx(Col, { xs: 24, md: 12, children:\n                _jsx(FormContainer, { children: this.renderAdvancedFieldset() }) }\n              )] }\n            ) }, 4\n          )] }\n        )] }\n      ));\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nDatasourceEditor.defaultProps = defaultProps;\nDatasourceEditor.propTypes = propTypes;\n\nconst DataSourceComponent = withTheme(DatasourceEditor);const _default =\n\nwithToasts(DataSourceComponent);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DatasourceContainer, \"DatasourceContainer\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(FlexRowContainer, \"FlexRowContainer\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledTableTabs, \"StyledTableTabs\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledBadge, \"StyledBadge\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(EditLockContainer, \"EditLockContainer\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(ColumnButtonWrapper, \"ColumnButtonWrapper\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledLabelWrapper, \"StyledLabelWrapper\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledColumnsTabWrapper, \"StyledColumnsTabWrapper\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StyledButtonWrapper, \"StyledButtonWrapper\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(sqlTooltipOptions, \"sqlTooltipOptions\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(checkboxGenerator, \"checkboxGenerator\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATA_TYPES, \"DATA_TYPES\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATASOURCE_TYPES_ARR, \"DATASOURCE_TYPES_ARR\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DATASOURCE_TYPES, \"DATASOURCE_TYPES\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(CollectionTabTitle, \"CollectionTabTitle\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(ColumnCollectionTable, \"ColumnCollectionTable\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(StackedField, \"StackedField\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(FormContainer, \"FormContainer\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(OwnersSelector, \"OwnersSelector\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DatasourceEditor, \"DatasourceEditor\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(DataSourceComponent, \"DataSourceComponent\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["rison","PureComponent","useCallback","PropTypes","Radio","Card","Alert","Badge","css","isFeatureEnabled","getCurrencySymbol","ensureIsArray","FeatureFlag","styled","SupersetClient","t","withTheme","getClientErrorObject","Select","AsyncSelect","Row","Col","FormLabel","Button","Tabs","CertifiedBadge","WarningIconWithTooltip","DatabaseSelector","Label","Loading","TableSelector","EditableTitle","CheckboxControl","TextControl","TextAreaControl","SpatialControl","withToasts","Icons","CurrencyControl","CollectionTable","Fieldset","Field","fetchSyncedColumns","updateColumns","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","DatasourceContainer","div","theme","colors","warning","base","typography","weights","bold","FlexRowContainer","gridUnit","StyledTableTabs","StyledBadge","EditLockContainer","sizes","s","ColumnButtonWrapper","StyledLabelWrapper","StyledColumnsTabWrapper","StyledButtonWrapper","span","sqlTooltipOptions","placement","title","checkboxGenerator","d","onChange","value","DATA_TYPES","label","DATASOURCE_TYPES_ARR","key","DATASOURCE_TYPES","forEach","o","_ref","process","env","NODE_ENV","name","styles","toString","_EMOTION_STRINGIFIED_CSS_ERROR__","CollectionTabTitle","collection","children","count","length","showZero","propTypes","string","array","ColumnCollectionTable","columns","datasource","onColumnsChange","onDatasourceChange","editableColumnName","showExpression","allowAddItem","allowEditDataType","itemGenerator","columnLabelTooltips","tableColumns","EnableAdvancedDataTypes","sortColumns","allowDeletes","stickyHeader","expandFieldset","FormContainer","compact","fieldKey","control","language","offerEditInModal","resize","controlId","placeholder","ariaLabel","options","allowNewOptions","allowClear","description","href","columnLabels","column_name","advanced_data_type","type","groupby","is_dttm","main_dttm_col","filterable","itemRenderers","v","onItemChange","_","record","is_certified","certifiedBy","certified_by","details","certification_details","canEdit","onSaveTitle","_onItemChange","_label","checked","disabled","find","column","isRequired","object","func","bool","defaultProps","StackedField","formElement","node","padded","addSuccessToast","addDangerToast","setIsEditing","OwnersSelector","loadOptions","search","page","pageSize","query","encode","filter","page_size","get","endpoint","then","response","data","json","result","item","extra","active","map","text","totalCount","mode","owners","header","__signature__","_ref2","_ref3","DatasourceEditor","constructor","props","_props$datasource$met","state","owner","id","first_name","last_name","metrics","metric","certifiedByMetric","certificationDetails","certification","warning_markdown","warningMarkdown","JSON","parse","errors","isSqla","datasource_type","isEditMode","databaseColumns","col","expression","calculatedColumns","metadataLoading","activeTabKey","datasourceType","sql","virtual","physical","bind","onChangeEditMode","onDatasourcePropChange","tableChangeAndSyncMetadata","syncMetadata","setColumns","validateAndChange","handleTabSelect","currencies","currencyCode","symbol","newDatasource","setState","prevState","callback","attr","undefined","onDatasourceTypeChange","obj","validate","newCols","columnChanges","finalColumns","error","clientError","statusText","findDuplicates","arr","accessor","seen","dups","push","concat","metric_name","noFilterCalcCols","_this$state$datasourc","_metric$currency","currency","Intl","NumberFormat","style","sortMetrics","sort","a","b","renderSettingsFieldset","inline","minLines","newOwners","renderAdvancedFieldset","renderSpatialTab","spatials","all_cols","allCols","TabPane","tab","config","choices","renderSourceFieldset","_datasource$database","_datasource$database2","_datasource$database3","role","tabIndex","onClick","UnlockOutlined","iconSize","LockOutlined","margin","className","xs","md","db","database","catalog","schema","onCatalogChange","onSchemaChange","onDbChange","formMode","handleError","readOnly","_css","width","marginTop","table","maxLines","Infinity","tooltipOptions","clearable","database_name","dbId","sqlLabMode","tableValue","table_name","onTableSelectChange","renderErrors","marginBottom","message","err","renderMetricCollection","sortedMetrics","verbose_name","currencySelectOverrideProps","symbolSelectAdditionalStyles","itemCellProps","initialValue","extraClasses","textAreaStyles","minWidth","maxWidth","d3format","render","fullWidth","defaultActiveKey","buttonSize","buttonStyle","DatabaseOutlined","__expanded","gutter","__reactstandin__regenerateByEval","code","eval","DataSourceComponent","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/components/Datasource/DatasourceEditor.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { PureComponent, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Radio } from 'src/components/Radio';\nimport Card from 'src/components/Card';\nimport Alert from 'src/components/Alert';\nimport Badge from 'src/components/Badge';\nimport {\n  css,\n  isFeatureEnabled,\n  getCurrencySymbol,\n  ensureIsArray,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  t,\n  withTheme,\n  getClientErrorObject,\n} from '@superset-ui/core';\nimport { Select, AsyncSelect, Row, Col } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Button from 'src/components/Button';\nimport Tabs from 'src/components/Tabs';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport DatabaseSelector from 'src/components/DatabaseSelector';\nimport Label from 'src/components/Label';\nimport Loading from 'src/components/Loading';\nimport TableSelector from 'src/components/TableSelector';\nimport EditableTitle from 'src/components/EditableTitle';\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport SpatialControl from 'src/explore/components/controls/SpatialControl';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { Icons } from 'src/components/Icons';\nimport CurrencyControl from 'src/explore/components/controls/CurrencyControl';\nimport CollectionTable from './CollectionTable';\nimport Fieldset from './Fieldset';\nimport Field from './Field';\nimport { fetchSyncedColumns, updateColumns } from './utils';\n\nconst DatasourceContainer = styled.div`\n  .change-warning {\n    margin: 16px 10px 0;\n    color: ${({ theme }) => theme.colors.warning.base};\n  }\n\n  .change-warning .bold {\n    font-weight: ${({ theme }) => theme.typography.weights.bold};\n  }\n\n  .form-group.has-feedback > .help-block {\n    margin-top: 8px;\n  }\n\n  .form-group.form-group-md {\n    margin-bottom: 8px;\n  }\n`;\n\nconst FlexRowContainer = styled.div`\n  align-items: center;\n  display: flex;\n\n  svg {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledTableTabs = styled(Tabs)`\n  overflow: visible;\n  .ant-tabs-content-holder {\n    overflow: visible;\n  }\n`;\n\nconst StyledBadge = styled(Badge)`\n  .antd5-badge-count {\n    line-height: ${({ theme }) => theme.gridUnit * 4}px;\n    height: ${({ theme }) => theme.gridUnit * 4}px;\n    margin-left: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst EditLockContainer = styled.div`\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  display: flex;\n  align-items: center;\n  a {\n    padding: 0 10px;\n  }\n`;\n\nconst ColumnButtonWrapper = styled.div`\n  text-align: right;\n  ${({ theme }) => `margin-bottom: ${theme.gridUnit * 2}px`}\n`;\n\nconst StyledLabelWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  span {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledColumnsTabWrapper = styled.div`\n  .table > tbody > tr > td {\n    vertical-align: middle;\n  }\n\n  .ant-tag {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nconst StyledButtonWrapper = styled.span`\n  ${({ theme }) => `\n    margin-top: ${theme.gridUnit * 3}px;\n    margin-left: ${theme.gridUnit * 3}px;\n    button>span>:first-of-type {\n      margin-right: 0;\n    }\n  `}\n`;\n\nconst sqlTooltipOptions = {\n  placement: 'topRight',\n  title: t(\n    'If changes are made to your SQL query, ' +\n      'columns in your dataset will be synced when saving the dataset.',\n  ),\n};\n\nconst checkboxGenerator = (d, onChange) => (\n  <CheckboxControl value={d} onChange={onChange} />\n);\nconst DATA_TYPES = [\n  { value: 'STRING', label: t('STRING') },\n  { value: 'NUMERIC', label: t('NUMERIC') },\n  { value: 'DATETIME', label: t('DATETIME') },\n  { value: 'BOOLEAN', label: t('BOOLEAN') },\n];\n\nconst DATASOURCE_TYPES_ARR = [\n  { key: 'physical', label: t('Physical (table or view)') },\n  { key: 'virtual', label: t('Virtual (SQL)') },\n];\nconst DATASOURCE_TYPES = {};\nDATASOURCE_TYPES_ARR.forEach(o => {\n  DATASOURCE_TYPES[o.key] = o;\n});\n\nfunction CollectionTabTitle({ title, collection }) {\n  return (\n    <div\n      css={{ display: 'flex', alignItems: 'center' }}\n      data-test={`collection-tab-${title}`}\n    >\n      {title}{' '}\n      <StyledBadge count={collection ? collection.length : 0} showZero />\n    </div>\n  );\n}\n\nCollectionTabTitle.propTypes = {\n  title: PropTypes.string,\n  collection: PropTypes.array,\n};\n\nfunction ColumnCollectionTable({\n  columns,\n  datasource,\n  onColumnsChange,\n  onDatasourceChange,\n  editableColumnName,\n  showExpression,\n  allowAddItem,\n  allowEditDataType,\n  itemGenerator,\n  columnLabelTooltips,\n}) {\n  return (\n    <CollectionTable\n      tableColumns={\n        isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)\n          ? [\n              'column_name',\n              'advanced_data_type',\n              'type',\n              'is_dttm',\n              'main_dttm_col',\n              'filterable',\n              'groupby',\n            ]\n          : [\n              'column_name',\n              'type',\n              'is_dttm',\n              'main_dttm_col',\n              'filterable',\n              'groupby',\n            ]\n      }\n      sortColumns={\n        isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)\n          ? [\n              'column_name',\n              'advanced_data_type',\n              'type',\n              'is_dttm',\n              'main_dttm_col',\n              'filterable',\n              'groupby',\n            ]\n          : [\n              'column_name',\n              'type',\n              'is_dttm',\n              'main_dttm_col',\n              'filterable',\n              'groupby',\n            ]\n      }\n      allowDeletes\n      allowAddItem={allowAddItem}\n      itemGenerator={itemGenerator}\n      collection={columns}\n      columnLabelTooltips={columnLabelTooltips}\n      stickyHeader\n      expandFieldset={\n        <FormContainer>\n          <Fieldset compact>\n            {showExpression && (\n              <Field\n                fieldKey=\"expression\"\n                label={t('SQL expression')}\n                control={\n                  <TextAreaControl\n                    language=\"markdown\"\n                    offerEditInModal={false}\n                    resize=\"vertical\"\n                  />\n                }\n              />\n            )}\n            <Field\n              fieldKey=\"verbose_name\"\n              label={t('Label')}\n              control={\n                <TextControl\n                  controlId=\"verbose_name\"\n                  placeholder={t('Label')}\n                />\n              }\n            />\n            <Field\n              fieldKey=\"description\"\n              label={t('Description')}\n              control={\n                <TextControl\n                  controlId=\"description\"\n                  placeholder={t('Description')}\n                />\n              }\n            />\n            {allowEditDataType && (\n              <Field\n                fieldKey=\"type\"\n                label={t('Data type')}\n                control={\n                  <Select\n                    ariaLabel={t('Data type')}\n                    options={DATA_TYPES}\n                    name=\"type\"\n                    allowNewOptions\n                    allowClear\n                  />\n                }\n              />\n            )}\n            {isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes) ? (\n              <Field\n                fieldKey=\"advanced_data_type\"\n                label={t('Advanced data type')}\n                control={\n                  <TextControl\n                    controlId=\"advanced_data_type\"\n                    placeholder={t('Advanced Data type')}\n                  />\n                }\n              />\n            ) : (\n              <></>\n            )}\n            <Field\n              fieldKey=\"python_date_format\"\n              label={t('Datetime format')}\n              description={\n                /* Note the fragmented translations may not work. */\n                <div>\n                  {t('The pattern of timestamp format. For strings use ')}\n                  <a href=\"https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior\">\n                    {t('Python datetime string pattern')}\n                  </a>\n                  {t(' expression which needs to adhere to the ')}\n                  <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">\n                    {t('ISO 8601')}\n                  </a>\n                  {t(` standard to ensure that the lexicographical ordering\n                      coincides with the chronological ordering. If the\n                      timestamp format does not adhere to the ISO 8601 standard\n                      you will need to define an expression and type for\n                      transforming the string into a date or timestamp. Note\n                      currently time zones are not supported. If time is stored\n                      in epoch format, put \\`epoch_s\\` or \\`epoch_ms\\`. If no pattern\n                      is specified we fall back to using the optional defaults on a per\n                      database/column name level via the extra parameter.`)}\n                </div>\n              }\n              control={\n                <TextControl\n                  controlId=\"python_date_format\"\n                  placeholder=\"%Y-%m-%d\"\n                />\n              }\n            />\n            <Field\n              fieldKey=\"certified_by\"\n              label={t('Certified By')}\n              description={t('Person or group that has certified this metric')}\n              control={\n                <TextControl\n                  controlId=\"certified\"\n                  placeholder={t('Certified by')}\n                />\n              }\n            />\n            <Field\n              fieldKey=\"certification_details\"\n              label={t('Certification details')}\n              description={t('Details of the certification')}\n              control={\n                <TextControl\n                  controlId=\"certificationDetails\"\n                  placeholder={t('Certification details')}\n                />\n              }\n            />\n          </Fieldset>\n        </FormContainer>\n      }\n      columnLabels={\n        isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)\n          ? {\n              column_name: t('Column'),\n              advanced_data_type: t('Advanced data type'),\n              type: t('Data type'),\n              groupby: t('Is dimension'),\n              is_dttm: t('Is temporal'),\n              main_dttm_col: t('Default datetime'),\n              filterable: t('Is filterable'),\n            }\n          : {\n              column_name: t('Column'),\n              type: t('Data type'),\n              groupby: t('Is dimension'),\n              is_dttm: t('Is temporal'),\n              main_dttm_col: t('Default datetime'),\n              filterable: t('Is filterable'),\n            }\n      }\n      onChange={onColumnsChange}\n      itemRenderers={\n        isFeatureEnabled(FeatureFlag.EnableAdvancedDataTypes)\n          ? {\n              column_name: (v, onItemChange, _, record) =>\n                editableColumnName ? (\n                  <StyledLabelWrapper>\n                    {record.is_certified && (\n                      <CertifiedBadge\n                        certifiedBy={record.certified_by}\n                        details={record.certification_details}\n                      />\n                    )}\n                    <EditableTitle\n                      canEdit\n                      title={v}\n                      onSaveTitle={onItemChange}\n                    />\n                  </StyledLabelWrapper>\n                ) : (\n                  <StyledLabelWrapper>\n                    {record.is_certified && (\n                      <CertifiedBadge\n                        certifiedBy={record.certified_by}\n                        details={record.certification_details}\n                      />\n                    )}\n                    {v}\n                  </StyledLabelWrapper>\n                ),\n              main_dttm_col: (value, _onItemChange, _label, record) => {\n                const checked = datasource.main_dttm_col === record.column_name;\n                const disabled = !columns.find(\n                  column => column.column_name === record.column_name,\n                ).is_dttm;\n                return (\n                  <Radio\n                    data-test={`radio-default-dttm-${record.column_name}`}\n                    checked={checked}\n                    disabled={disabled}\n                    onChange={() =>\n                      onDatasourceChange({\n                        ...datasource,\n                        main_dttm_col: record.column_name,\n                      })\n                    }\n                  />\n                );\n              },\n              type: d => (d ? <Label>{d}</Label> : null),\n              advanced_data_type: d => (\n                <Label onChange={onColumnsChange}>{d}</Label>\n              ),\n              is_dttm: checkboxGenerator,\n              filterable: checkboxGenerator,\n              groupby: checkboxGenerator,\n            }\n          : {\n              column_name: (v, onItemChange, _, record) =>\n                editableColumnName ? (\n                  <StyledLabelWrapper>\n                    {record.is_certified && (\n                      <CertifiedBadge\n                        certifiedBy={record.certified_by}\n                        details={record.certification_details}\n                      />\n                    )}\n                    <TextControl value={v} onChange={onItemChange} />\n                  </StyledLabelWrapper>\n                ) : (\n                  <StyledLabelWrapper>\n                    {record.is_certified && (\n                      <CertifiedBadge\n                        certifiedBy={record.certified_by}\n                        details={record.certification_details}\n                      />\n                    )}\n                    {v}\n                  </StyledLabelWrapper>\n                ),\n              main_dttm_col: (value, _onItemChange, _label, record) => {\n                const checked = datasource.main_dttm_col === record.column_name;\n                const disabled = !columns.find(\n                  column => column.column_name === record.column_name,\n                ).is_dttm;\n                return (\n                  <Radio\n                    data-test={`radio-default-dttm-${record.column_name}`}\n                    checked={checked}\n                    disabled={disabled}\n                    onChange={() =>\n                      onDatasourceChange({\n                        ...datasource,\n                        main_dttm_col: record.column_name,\n                      })\n                    }\n                  />\n                );\n              },\n              type: d => (d ? <Label>{d}</Label> : null),\n              is_dttm: checkboxGenerator,\n              filterable: checkboxGenerator,\n              groupby: checkboxGenerator,\n            }\n      }\n    />\n  );\n}\nColumnCollectionTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  datasource: PropTypes.object.isRequired,\n  onColumnsChange: PropTypes.func.isRequired,\n  onDatasourceChange: PropTypes.func.isRequired,\n  editableColumnName: PropTypes.bool,\n  showExpression: PropTypes.bool,\n  allowAddItem: PropTypes.bool,\n  allowEditDataType: PropTypes.bool,\n  itemGenerator: PropTypes.func,\n};\nColumnCollectionTable.defaultProps = {\n  editableColumnName: false,\n  showExpression: false,\n  allowAddItem: false,\n  allowEditDataType: false,\n  itemGenerator: () => ({\n    column_name: t('<new column>'),\n    filterable: true,\n    groupby: true,\n  }),\n};\n\nfunction StackedField({ label, formElement }) {\n  return (\n    <div>\n      <div>\n        <strong>{label}</strong>\n      </div>\n      <div>{formElement}</div>\n    </div>\n  );\n}\n\nStackedField.propTypes = {\n  label: PropTypes.string,\n  formElement: PropTypes.node,\n};\n\nfunction FormContainer({ children }) {\n  return <Card padded>{children}</Card>;\n}\n\nFormContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nconst propTypes = {\n  datasource: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  setIsEditing: PropTypes.func,\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  setIsEditing: () => {},\n};\n\nfunction OwnersSelector({ datasource, onChange }) {\n  const loadOptions = useCallback((search = '', page, pageSize) => {\n    const query = rison.encode({ filter: search, page, page_size: pageSize });\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/related/owners?q=${query}`,\n    }).then(response => ({\n      data: response.json.result\n        .filter(item => item.extra.active)\n        .map(item => ({\n          value: item.value,\n          label: item.text,\n        })),\n      totalCount: response.json.count,\n    }));\n  }, []);\n\n  return (\n    <AsyncSelect\n      ariaLabel={t('Select owners')}\n      mode=\"multiple\"\n      name=\"owners\"\n      value={datasource.owners}\n      options={loadOptions}\n      onChange={onChange}\n      header={<FormLabel>{t('Owners')}</FormLabel>}\n      allowClear\n    />\n  );\n}\n\nclass DatasourceEditor extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      datasource: {\n        ...props.datasource,\n        owners: props.datasource.owners.map(owner => ({\n          value: owner.value || owner.id,\n          label: owner.label || `${owner.first_name} ${owner.last_name}`,\n        })),\n        metrics: props.datasource.metrics?.map(metric => {\n          const {\n            certified_by: certifiedByMetric,\n            certification_details: certificationDetails,\n          } = metric;\n          const {\n            certification: { details, certified_by: certifiedBy } = {},\n            warning_markdown: warningMarkdown,\n          } = JSON.parse(metric.extra || '{}') || {};\n          return {\n            ...metric,\n            certification_details: certificationDetails || details,\n            warning_markdown: warningMarkdown || '',\n            certified_by: certifiedBy || certifiedByMetric,\n          };\n        }),\n      },\n      errors: [],\n      isSqla:\n        props.datasource.datasource_type === 'table' ||\n        props.datasource.type === 'table',\n      isEditMode: false,\n      databaseColumns: props.datasource.columns.filter(col => !col.expression),\n      calculatedColumns: props.datasource.columns.filter(\n        col => !!col.expression,\n      ),\n      metadataLoading: false,\n      activeTabKey: 0,\n      datasourceType: props.datasource.sql\n        ? DATASOURCE_TYPES.virtual.key\n        : DATASOURCE_TYPES.physical.key,\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onChangeEditMode = this.onChangeEditMode.bind(this);\n    this.onDatasourcePropChange = this.onDatasourcePropChange.bind(this);\n    this.onDatasourceChange = this.onDatasourceChange.bind(this);\n    this.tableChangeAndSyncMetadata =\n      this.tableChangeAndSyncMetadata.bind(this);\n    this.syncMetadata = this.syncMetadata.bind(this);\n    this.setColumns = this.setColumns.bind(this);\n    this.validateAndChange = this.validateAndChange.bind(this);\n    this.handleTabSelect = this.handleTabSelect.bind(this);\n    this.currencies = ensureIsArray(props.currencies).map(currencyCode => ({\n      value: currencyCode,\n      label: `${getCurrencySymbol({\n        symbol: currencyCode,\n      })} (${currencyCode})`,\n    }));\n  }\n\n  onChange() {\n    // Emptying SQL if \"Physical\" radio button is selected\n    // Currently the logic to know whether the source is\n    // physical or virtual is based on whether SQL is empty or not.\n    const { datasourceType, datasource } = this.state;\n    const sql =\n      datasourceType === DATASOURCE_TYPES.physical.key ? '' : datasource.sql;\n    const newDatasource = {\n      ...this.state.datasource,\n      sql,\n      columns: [...this.state.databaseColumns, ...this.state.calculatedColumns],\n    };\n    this.props.onChange(newDatasource, this.state.errors);\n  }\n\n  onChangeEditMode() {\n    this.props.setIsEditing(!this.state.isEditMode);\n    this.setState(prevState => ({ isEditMode: !prevState.isEditMode }));\n  }\n\n  onDatasourceChange(datasource, callback = this.validateAndChange) {\n    this.setState({ datasource }, callback);\n  }\n\n  onDatasourcePropChange(attr, value) {\n    if (value === undefined) return; // if value is undefined do not update state\n    const datasource = { ...this.state.datasource, [attr]: value };\n    this.setState(\n      prevState => ({\n        datasource: { ...prevState.datasource, [attr]: value },\n      }),\n      attr === 'table_name'\n        ? this.onDatasourceChange(datasource, this.tableChangeAndSyncMetadata)\n        : this.onDatasourceChange(datasource, this.validateAndChange),\n    );\n  }\n\n  onDatasourceTypeChange(datasourceType) {\n    this.setState({ datasourceType });\n  }\n\n  setColumns(obj) {\n    // update calculatedColumns or databaseColumns\n    this.setState(obj, this.validateAndChange);\n  }\n\n  validateAndChange() {\n    this.validate(this.onChange);\n  }\n\n  tableChangeAndSyncMetadata() {\n    this.validate(() => {\n      this.syncMetadata();\n      this.onChange();\n    });\n  }\n\n  async syncMetadata() {\n    const { datasource } = this.state;\n    this.setState({ metadataLoading: true });\n    try {\n      const newCols = await fetchSyncedColumns(datasource);\n      const columnChanges = updateColumns(\n        datasource.columns,\n        newCols,\n        this.props.addSuccessToast,\n      );\n      this.setColumns({\n        databaseColumns: columnChanges.finalColumns.filter(\n          col => !col.expression, // remove calculated columns\n        ),\n      });\n      this.props.addSuccessToast(t('Metadata has been synced'));\n      this.setState({ metadataLoading: false });\n    } catch (error) {\n      const { error: clientError, statusText } =\n        await getClientErrorObject(error);\n      this.props.addDangerToast(\n        clientError || statusText || t('An error has occurred'),\n      );\n      this.setState({ metadataLoading: false });\n    }\n  }\n\n  findDuplicates(arr, accessor) {\n    const seen = {};\n    const dups = [];\n    arr.forEach(obj => {\n      const item = accessor(obj);\n      if (item in seen) {\n        dups.push(item);\n      } else {\n        seen[item] = null;\n      }\n    });\n    return dups;\n  }\n\n  validate(callback) {\n    let errors = [];\n    let dups;\n    const { datasource } = this.state;\n\n    // Looking for duplicate column_name\n    dups = this.findDuplicates(datasource.columns, obj => obj.column_name);\n    errors = errors.concat(\n      dups.map(name => t('Column name [%s] is duplicated', name)),\n    );\n\n    // Looking for duplicate metric_name\n    dups = this.findDuplicates(datasource.metrics, obj => obj.metric_name);\n    errors = errors.concat(\n      dups.map(name => t('Metric name [%s] is duplicated', name)),\n    );\n\n    // Making sure calculatedColumns have an expression defined\n    const noFilterCalcCols = this.state.calculatedColumns.filter(\n      col => !col.expression && !col.json,\n    );\n    errors = errors.concat(\n      noFilterCalcCols.map(col =>\n        t('Calculated column [%s] requires an expression', col.column_name),\n      ),\n    );\n\n    // validate currency code\n    try {\n      this.state.datasource.metrics?.forEach(\n        metric =>\n          metric.currency?.symbol &&\n          new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: metric.currency.symbol,\n          }),\n      );\n    } catch {\n      errors = errors.concat([t('Invalid currency code in saved metrics')]);\n    }\n\n    this.setState({ errors }, callback);\n  }\n\n  handleTabSelect(activeTabKey) {\n    this.setState({ activeTabKey });\n  }\n\n  sortMetrics(metrics) {\n    return metrics.sort(({ id: a }, { id: b }) => b - a);\n  }\n\n  renderSettingsFieldset() {\n    const { datasource } = this.state;\n    return (\n      <Fieldset\n        title={t('Basic')}\n        item={datasource}\n        onChange={this.onDatasourceChange}\n      >\n        <Field\n          fieldKey=\"description\"\n          label={t('Description')}\n          control={\n            <TextAreaControl\n              language=\"markdown\"\n              offerEditInModal={false}\n              resize=\"vertical\"\n            />\n          }\n        />\n        <Field\n          fieldKey=\"default_endpoint\"\n          label={t('Default URL')}\n          description={t(\n            `Default URL to redirect to when accessing from the dataset list page.\n            Accepts relative URLs such as <span style=„white-space: nowrap;”>/superset/dashboard/{id}/</span>`,\n          )}\n          control={<TextControl controlId=\"default_endpoint\" />}\n        />\n        <Field\n          inline\n          fieldKey=\"filter_select_enabled\"\n          label={t('Autocomplete filters')}\n          description={t('Whether to populate autocomplete filters options')}\n          control={<CheckboxControl />}\n        />\n        {this.state.isSqla && (\n          <Field\n            fieldKey=\"fetch_values_predicate\"\n            label={t('Autocomplete query predicate')}\n            description={t(\n              'When using \"Autocomplete filters\", this can be used to improve performance ' +\n                'of the query fetching the values. Use this option to apply a ' +\n                'predicate (WHERE clause) to the query selecting the distinct ' +\n                'values from the table. Typically the intent would be to limit the scan ' +\n                'by applying a relative time filter on a partitioned or indexed time-related field.',\n            )}\n            control={\n              <TextAreaControl\n                language=\"sql\"\n                controlId=\"fetch_values_predicate\"\n                minLines={5}\n                resize=\"vertical\"\n              />\n            }\n          />\n        )}\n        {this.state.isSqla && (\n          <Field\n            fieldKey=\"extra\"\n            label={t('Extra')}\n            description={t(\n              'Extra data to specify table metadata. Currently supports ' +\n                'metadata of the format: `{ \"certification\": { \"certified_by\": ' +\n                '\"Data Platform Team\", \"details\": \"This table is the source of truth.\" ' +\n                '}, \"warning_markdown\": \"This is a warning.\" }`.',\n            )}\n            control={\n              <TextAreaControl\n                controlId=\"extra\"\n                language=\"json\"\n                offerEditInModal={false}\n                resize=\"vertical\"\n              />\n            }\n          />\n        )}\n        <OwnersSelector\n          datasource={datasource}\n          onChange={newOwners => {\n            this.onDatasourceChange({ ...datasource, owners: newOwners });\n          }}\n        />\n      </Fieldset>\n    );\n  }\n\n  renderAdvancedFieldset() {\n    const { datasource } = this.state;\n    return (\n      <Fieldset\n        title={t('Advanced')}\n        item={datasource}\n        onChange={this.onDatasourceChange}\n      >\n        <Field\n          fieldKey=\"cache_timeout\"\n          label={t('Cache timeout')}\n          description={t(\n            'The duration of time in seconds before the cache is invalidated. Set to -1 to bypass the cache.',\n          )}\n          control={<TextControl controlId=\"cache_timeout\" />}\n        />\n        <Field\n          fieldKey=\"offset\"\n          label={t('Hours offset')}\n          control={<TextControl controlId=\"offset\" />}\n          description={t(\n            'The number of hours, negative or positive, to shift the time column. This can be used to move UTC time to local time.',\n          )}\n        />\n        {this.state.isSqla && (\n          <Field\n            fieldKey=\"template_params\"\n            label={t('Template parameters')}\n            description={t(\n              'A set of parameters that become available in the query using Jinja templating syntax',\n            )}\n            control={<TextControl controlId=\"template_params\" />}\n          />\n        )}\n        <Field\n          inline\n          fieldKey=\"normalize_columns\"\n          label={t('Normalize column names')}\n          description={t(\n            'Allow column names to be changed to case insensitive format, if supported (e.g. Oracle, Snowflake).',\n          )}\n          control={<CheckboxControl controlId=\"normalize_columns\" />}\n        />\n        <Field\n          inline\n          fieldKey=\"always_filter_main_dttm\"\n          label={t('Always filter main datetime column')}\n          description={t(\n            `When the secondary temporal columns are filtered, apply the same filter to the main datetime column.`,\n          )}\n          control={<CheckboxControl controlId=\"always_filter_main_dttm\" />}\n        />\n      </Fieldset>\n    );\n  }\n\n  renderSpatialTab() {\n    const { datasource } = this.state;\n    const { spatials, all_cols: allCols } = datasource;\n    return (\n      <Tabs.TabPane\n        tab={<CollectionTabTitle collection={spatials} title={t('Spatial')} />}\n        key={4}\n      >\n        <CollectionTable\n          tableColumns={['name', 'config']}\n          onChange={this.onDatasourcePropChange.bind(this, 'spatials')}\n          itemGenerator={() => ({\n            name: t('<new spatial>'),\n            type: t('<no type>'),\n            config: null,\n          })}\n          collection={spatials}\n          allowDeletes\n          itemRenderers={{\n            name: (d, onChange) => (\n              <EditableTitle canEdit title={d} onSaveTitle={onChange} />\n            ),\n            config: (v, onChange) => (\n              <SpatialControl value={v} onChange={onChange} choices={allCols} />\n            ),\n          }}\n        />\n      </Tabs.TabPane>\n    );\n  }\n\n  renderSourceFieldset() {\n    const { datasource } = this.state;\n    return (\n      <div>\n        <EditLockContainer>\n          <span role=\"button\" tabIndex={0} onClick={this.onChangeEditMode}>\n            {this.state.isEditMode ? (\n              <Icons.UnlockOutlined\n                iconSize=\"xl\"\n                css={theme => css`\n                  margin: auto ${theme.gridUnit}px auto 0;\n                `}\n              />\n            ) : (\n              <Icons.LockOutlined\n                iconSize=\"xl\"\n                css={theme => ({\n                  margin: `auto ${theme.gridUnit}px auto 0`,\n                })}\n              />\n            )}\n          </span>\n          {!this.state.isEditMode && (\n            <div>{t('Click the lock to make changes.')}</div>\n          )}\n          {this.state.isEditMode && (\n            <div>{t('Click the lock to prevent further changes.')}</div>\n          )}\n        </EditLockContainer>\n        <div className=\"m-l-10 m-t-20 m-b-10\">\n          {DATASOURCE_TYPES_ARR.map(type => (\n            <Radio\n              key={type.key}\n              value={type.key}\n              inline\n              onChange={this.onDatasourceTypeChange.bind(this, type.key)}\n              checked={this.state.datasourceType === type.key}\n              disabled={!this.state.isEditMode}\n            >\n              {type.label}\n            </Radio>\n          ))}\n        </div>\n        <hr />\n        <Fieldset item={datasource} onChange={this.onDatasourceChange} compact>\n          {this.state.datasourceType === DATASOURCE_TYPES.virtual.key && (\n            <div>\n              {this.state.isSqla && (\n                <>\n                  <Col xs={24} md={12}>\n                    <Field\n                      fieldKey=\"databaseSelector\"\n                      label={t('Virtual')}\n                      control={\n                        <div css={{ marginTop: 8 }}>\n                          <DatabaseSelector\n                            db={datasource?.database}\n                            catalog={datasource.catalog}\n                            schema={datasource.schema}\n                            onCatalogChange={catalog =>\n                              this.state.isEditMode &&\n                              this.onDatasourcePropChange('catalog', catalog)\n                            }\n                            onSchemaChange={schema =>\n                              this.state.isEditMode &&\n                              this.onDatasourcePropChange('schema', schema)\n                            }\n                            onDbChange={database =>\n                              this.state.isEditMode &&\n                              this.onDatasourcePropChange('database', database)\n                            }\n                            formMode={false}\n                            handleError={this.props.addDangerToast}\n                            readOnly={!this.state.isEditMode}\n                          />\n                        </div>\n                      }\n                    />\n                    <div css={{ width: 'calc(100% - 34px)', marginTop: -16 }}>\n                      <Field\n                        fieldKey=\"table_name\"\n                        label={t('Name')}\n                        control={\n                          <TextControl\n                            controlId=\"table_name\"\n                            onChange={table => {\n                              this.onDatasourcePropChange('table_name', table);\n                            }}\n                            placeholder={t('Dataset name')}\n                            disabled={!this.state.isEditMode}\n                          />\n                        }\n                      />\n                    </div>\n                  </Col>\n                  <Field\n                    fieldKey=\"sql\"\n                    label={t('SQL')}\n                    description={t(\n                      'When specifying SQL, the datasource acts as a view. ' +\n                        'Superset will use this statement as a subquery while grouping and filtering ' +\n                        'on the generated parent queries.',\n                    )}\n                    control={\n                      <TextAreaControl\n                        language=\"sql\"\n                        offerEditInModal={false}\n                        minLines={20}\n                        maxLines={Infinity}\n                        readOnly={!this.state.isEditMode}\n                        resize=\"both\"\n                        tooltipOptions={sqlTooltipOptions}\n                      />\n                    }\n                  />\n                </>\n              )}\n            </div>\n          )}\n          {this.state.datasourceType === DATASOURCE_TYPES.physical.key && (\n            <Col xs={24} md={12}>\n              {this.state.isSqla && (\n                <Field\n                  fieldKey=\"tableSelector\"\n                  label={t('Physical')}\n                  control={\n                    <div css={{ marginTop: 8 }}>\n                      <TableSelector\n                        clearable={false}\n                        database={{\n                          ...datasource.database,\n                          database_name:\n                            datasource.database?.database_name ||\n                            datasource.database?.name,\n                        }}\n                        dbId={datasource.database?.id}\n                        handleError={this.props.addDangerToast}\n                        catalog={datasource.catalog}\n                        schema={datasource.schema}\n                        sqlLabMode={false}\n                        tableValue={datasource.table_name}\n                        onCatalogChange={\n                          this.state.isEditMode\n                            ? catalog =>\n                                this.onDatasourcePropChange('catalog', catalog)\n                            : undefined\n                        }\n                        onSchemaChange={\n                          this.state.isEditMode\n                            ? schema =>\n                                this.onDatasourcePropChange('schema', schema)\n                            : undefined\n                        }\n                        onDbChange={\n                          this.state.isEditMode\n                            ? database =>\n                                this.onDatasourcePropChange(\n                                  'database',\n                                  database,\n                                )\n                            : undefined\n                        }\n                        onTableSelectChange={\n                          this.state.isEditMode\n                            ? table =>\n                                this.onDatasourcePropChange('table_name', table)\n                            : undefined\n                        }\n                        readOnly={!this.state.isEditMode}\n                      />\n                    </div>\n                  }\n                  description={t(\n                    'The pointer to a physical table (or view). Keep in mind that the chart is ' +\n                      'associated to this Superset logical table, and this logical table points ' +\n                      'the physical table referenced here.',\n                  )}\n                />\n              )}\n            </Col>\n          )}\n        </Fieldset>\n      </div>\n    );\n  }\n\n  renderErrors() {\n    if (this.state.errors.length > 0) {\n      return (\n        <Alert\n          css={theme => ({ marginBottom: theme.gridUnit * 4 })}\n          type=\"error\"\n          message={\n            <>\n              {this.state.errors.map(err => (\n                <div key={err}>{err}</div>\n              ))}\n            </>\n          }\n        />\n      );\n    }\n    return null;\n  }\n\n  renderMetricCollection() {\n    const { datasource } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics?.length ? this.sortMetrics(metrics) : [];\n    return (\n      <CollectionTable\n        tableColumns={['metric_name', 'verbose_name', 'expression']}\n        sortColumns={['metric_name', 'verbose_name', 'expression']}\n        columnLabels={{\n          metric_name: t('Metric Key'),\n          verbose_name: t('Label'),\n          expression: t('SQL expression'),\n        }}\n        columnLabelTooltips={{\n          metric_name: t(\n            'This field is used as a unique identifier to attach ' +\n              'the metric to charts. It is also used as the alias in the ' +\n              'SQL query.',\n          ),\n        }}\n        expandFieldset={\n          <FormContainer>\n            <Fieldset compact>\n              <Field\n                fieldKey=\"description\"\n                label={t('Description')}\n                control={\n                  <TextControl\n                    controlId=\"description\"\n                    placeholder={t('Description')}\n                  />\n                }\n              />\n              <Field\n                fieldKey=\"d3format\"\n                label={t('D3 format')}\n                control={\n                  <TextControl controlId=\"d3format\" placeholder=\"%y/%m/%d\" />\n                }\n              />\n              <Field\n                fieldKey=\"currency\"\n                label={t('Metric currency')}\n                control={\n                  <CurrencyControl\n                    currencySelectOverrideProps={{\n                      placeholder: t('Select or type currency symbol'),\n                    }}\n                    symbolSelectAdditionalStyles={css`\n                      max-width: 30%;\n                    `}\n                  />\n                }\n              />\n              <Field\n                label={t('Certified by')}\n                fieldKey=\"certified_by\"\n                description={t(\n                  'Person or group that has certified this metric',\n                )}\n                control={\n                  <TextControl\n                    controlId=\"certified_by\"\n                    placeholder={t('Certified by')}\n                  />\n                }\n              />\n              <Field\n                label={t('Certification details')}\n                fieldKey=\"certification_details\"\n                description={t('Details of the certification')}\n                control={\n                  <TextControl\n                    controlId=\"certification_details\"\n                    placeholder={t('Certification details')}\n                  />\n                }\n              />\n              <Field\n                label={t('Warning')}\n                fieldKey=\"warning_markdown\"\n                description={t('Optional warning about use of this metric')}\n                control={\n                  <TextAreaControl\n                    controlId=\"warning_markdown\"\n                    language=\"markdown\"\n                    offerEditInModal={false}\n                    resize=\"vertical\"\n                  />\n                }\n              />\n            </Fieldset>\n          </FormContainer>\n        }\n        collection={sortedMetrics}\n        allowAddItem\n        onChange={this.onDatasourcePropChange.bind(this, 'metrics')}\n        itemGenerator={() => ({\n          metric_name: t('<new metric>'),\n          verbose_name: '',\n          expression: '',\n        })}\n        itemCellProps={{\n          expression: () => ({\n            width: '240px',\n          }),\n        }}\n        itemRenderers={{\n          metric_name: (v, onChange, _, record) => (\n            <FlexRowContainer>\n              {record.is_certified && (\n                <CertifiedBadge\n                  certifiedBy={record.certified_by}\n                  details={record.certification_details}\n                />\n              )}\n              {record.warning_markdown && (\n                <WarningIconWithTooltip\n                  warningMarkdown={record.warning_markdown}\n                />\n              )}\n              <EditableTitle canEdit title={v} onSaveTitle={onChange} />\n            </FlexRowContainer>\n          ),\n          verbose_name: (v, onChange) => (\n            <TextControl canEdit value={v} onChange={onChange} />\n          ),\n          expression: (v, onChange) => (\n            <TextAreaControl\n              canEdit\n              initialValue={v}\n              onChange={onChange}\n              extraClasses={['datasource-sql-expression']}\n              language=\"sql\"\n              offerEditInModal={false}\n              minLines={5}\n              textAreaStyles={{ minWidth: '200px', maxWidth: '450px' }}\n              resize=\"both\"\n            />\n          ),\n          description: (v, onChange, label) => (\n            <StackedField\n              label={label}\n              formElement={<TextControl value={v} onChange={onChange} />}\n            />\n          ),\n          d3format: (v, onChange, label) => (\n            <StackedField\n              label={label}\n              formElement={<TextControl value={v} onChange={onChange} />}\n            />\n          ),\n        }}\n        allowDeletes\n        stickyHeader\n      />\n    );\n  }\n\n  render() {\n    const { datasource, activeTabKey } = this.state;\n    const { metrics } = datasource;\n    const sortedMetrics = metrics?.length ? this.sortMetrics(metrics) : [];\n    const { theme } = this.props;\n\n    return (\n      <DatasourceContainer data-test=\"datasource-editor\">\n        {this.renderErrors()}\n        <Alert\n          css={theme => ({ marginBottom: theme.gridUnit * 4 })}\n          type=\"warning\"\n          message={\n            <>\n              {' '}\n              <strong>{t('Be careful.')} </strong>\n              {t(\n                'Changing these settings will affect all charts using this dataset, including charts owned by other people.',\n              )}\n            </>\n          }\n        />\n        <StyledTableTabs\n          fullWidth={false}\n          id=\"table-tabs\"\n          data-test=\"edit-dataset-tabs\"\n          onChange={this.handleTabSelect}\n          defaultActiveKey={activeTabKey}\n        >\n          <Tabs.TabPane key={0} tab={t('Source')}>\n            {this.renderSourceFieldset(theme)}\n          </Tabs.TabPane>\n          <Tabs.TabPane\n            tab={\n              <CollectionTabTitle\n                collection={sortedMetrics}\n                title={t('Metrics')}\n              />\n            }\n            key={1}\n          >\n            {this.renderMetricCollection()}\n          </Tabs.TabPane>\n          <Tabs.TabPane\n            tab={\n              <CollectionTabTitle\n                collection={this.state.databaseColumns}\n                title={t('Columns')}\n              />\n            }\n            key={2}\n          >\n            <StyledColumnsTabWrapper>\n              <ColumnButtonWrapper>\n                <StyledButtonWrapper>\n                  <Button\n                    buttonSize=\"small\"\n                    buttonStyle=\"tertiary\"\n                    onClick={this.syncMetadata}\n                    className=\"sync-from-source\"\n                    disabled={this.state.isEditMode}\n                  >\n                    <Icons.DatabaseOutlined iconSize=\"m\" />\n                    {t('Sync columns from source')}\n                  </Button>\n                </StyledButtonWrapper>\n              </ColumnButtonWrapper>\n              <ColumnCollectionTable\n                className=\"columns-table\"\n                columns={this.state.databaseColumns}\n                datasource={datasource}\n                onColumnsChange={databaseColumns =>\n                  this.setColumns({ databaseColumns })\n                }\n                onDatasourceChange={this.onDatasourceChange}\n              />\n              {this.state.metadataLoading && <Loading />}\n            </StyledColumnsTabWrapper>\n          </Tabs.TabPane>\n          <Tabs.TabPane\n            tab={\n              <CollectionTabTitle\n                collection={this.state.calculatedColumns}\n                title={t('Calculated columns')}\n              />\n            }\n            key={3}\n          >\n            <StyledColumnsTabWrapper>\n              <ColumnCollectionTable\n                columns={this.state.calculatedColumns}\n                onColumnsChange={calculatedColumns =>\n                  this.setColumns({ calculatedColumns })\n                }\n                columnLabelTooltips={{\n                  column_name: t(\n                    'This field is used as a unique identifier to attach ' +\n                      'the calculated dimension to charts. It is also used ' +\n                      'as the alias in the SQL query.',\n                  ),\n                }}\n                onDatasourceChange={this.onDatasourceChange}\n                datasource={datasource}\n                editableColumnName\n                showExpression\n                allowAddItem\n                allowEditDataType\n                itemGenerator={() => ({\n                  column_name: t('<new column>'),\n                  filterable: true,\n                  groupby: true,\n                  expression: t('<enter SQL expression here>'),\n                  __expanded: true,\n                })}\n              />\n            </StyledColumnsTabWrapper>\n          </Tabs.TabPane>\n          <Tabs.TabPane key={4} tab={t('Settings')}>\n            <Row gutter={16}>\n              <Col xs={24} md={12}>\n                <FormContainer>{this.renderSettingsFieldset()}</FormContainer>\n              </Col>\n              <Col xs={24} md={12}>\n                <FormContainer>{this.renderAdvancedFieldset()}</FormContainer>\n              </Col>\n            </Row>\n          </Tabs.TabPane>\n        </StyledTableTabs>\n      </DatasourceContainer>\n    );\n  }\n}\n\nDatasourceEditor.defaultProps = defaultProps;\nDatasourceEditor.propTypes = propTypes;\n\nconst DataSourceComponent = withTheme(DatasourceEditor);\n\nexport default withToasts(DataSourceComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}