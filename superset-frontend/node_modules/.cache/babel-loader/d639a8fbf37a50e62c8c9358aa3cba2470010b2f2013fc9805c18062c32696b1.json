{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Menu } from 'src/components/Menu';\nimport { t } from '@superset-ui/core';\n\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport DownloadMenuItems from 'src/dashboard/components/menu/DownloadMenuItems';\nimport CssEditor from 'src/dashboard/components/CssEditor';\nimport RefreshIntervalModal from 'src/dashboard/components/RefreshIntervalModal';\nimport SaveModal from 'src/dashboard/components/SaveModal';\nimport HeaderReportDropdown from 'src/features/reports/ReportModal/HeaderReportDropdown';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';\nimport FilterScopeModal from 'src/dashboard/components/filterscope/FilterScopeModal';\nimport getDashboardUrl from 'src/dashboard/util/getDashboardUrl';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { MenuKeys } from 'src/dashboard/types';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const useHeaderActionsMenu = ({ customCss, dashboardId, dashboardInfo, refreshFrequency, shouldPersistRefreshFrequency, editMode, colorNamespace, colorScheme, layout, expandedSlices, onSave, userCanEdit, userCanShare, userCanSave, userCanCurate, isLoading, refreshLimit, refreshWarning, lastModifiedTime, addSuccessToast, addDangerToast, forceRefreshAllCharts, showPropertiesModal, showReportModal, manageEmbedded, onChange, updateCss, startPeriodicRender, setRefreshFrequency, dashboardTitle, logEvent, setCurrentReportDeleting }) => {\n  const [css, setCss] = useState(customCss || '');\n  const [showReportSubMenu, setShowReportSubMenu] = useState(null);\n  const [isDropdownVisible, setIsDropdownVisible] = useState(false);\n  const directPathToChild = useSelector((state) => state.dashboardState.directPathToChild);\n  useEffect(() => {\n    if (customCss !== css) {\n      setCss(customCss || '');\n      injectCustomCss(customCss);\n    }\n  }, [css, customCss]);\n  const handleMenuClick = useCallback(({ key }) => {\n    switch (key) {\n      case MenuKeys.RefreshDashboard:\n        forceRefreshAllCharts();\n        addSuccessToast(t('Refreshing charts'));\n        break;\n      case MenuKeys.EditProperties:\n        showPropertiesModal();\n        break;\n      case MenuKeys.ToggleFullscreen:{\n          const isCurrentlyStandalone = Number(getUrlParam(URL_PARAMS.standalone)) === 1;\n          const url = getDashboardUrl({\n            pathname: window.location.pathname,\n            filters: getActiveFilters(),\n            hash: window.location.hash,\n            standalone: isCurrentlyStandalone ? null : 1\n          });\n          window.location.replace(url);\n          break;\n        }\n      case MenuKeys.ManageEmbedded:\n        manageEmbedded();\n        break;\n      default:\n        break;\n    }\n    setIsDropdownVisible(false);\n  }, [\n  forceRefreshAllCharts,\n  addSuccessToast,\n  showPropertiesModal,\n  manageEmbedded]\n  );\n  const changeCss = useCallback((newCss) => {\n    onChange();\n    updateCss(newCss);\n  }, [onChange, updateCss]);\n  const changeRefreshInterval = useCallback((refreshInterval, isPersistent) => {\n    setRefreshFrequency(refreshInterval, isPersistent);\n    startPeriodicRender(refreshInterval * 1000);\n  }, [setRefreshFrequency, startPeriodicRender]);\n  const emailSubject = useMemo(() => `${t('Superset dashboard')} ${dashboardTitle}`, [dashboardTitle]);\n  const url = useMemo(() => getDashboardUrl({\n    pathname: window.location.pathname,\n    filters: getActiveFilters(),\n    hash: window.location.hash\n  }), []);\n  const dashboardComponentId = useMemo(() => [...(directPathToChild || [])].pop(), [directPathToChild]);\n  const menu = useMemo(() => {var _dashboardInfo$common, _dashboardInfo$common2, _dashboardInfo$metada;\n    const isEmbedded = !(dashboardInfo != null && dashboardInfo.userId);\n    const refreshIntervalOptions = (_dashboardInfo$common = dashboardInfo.common) == null ? void 0 : (_dashboardInfo$common2 = _dashboardInfo$common.conf) == null ? void 0 : _dashboardInfo$common2.DASHBOARD_AUTO_REFRESH_INTERVALS;\n    return _jsxs(Menu, { selectable: false, \"data-test\": \"header-actions-menu\", onClick: handleMenuClick, children: [\n      !editMode && _jsx(Menu.Item, { \"data-test\": \"refresh-dashboard-menu-item\", disabled: isLoading, children:\n        t('Refresh dashboard') }, MenuKeys.RefreshDashboard\n      ),\n      !editMode && !isEmbedded && _jsx(Menu.Item, { children:\n        getUrlParam(URL_PARAMS.standalone) ?\n        t('Exit fullscreen') :\n        t('Enter fullscreen') }, MenuKeys.ToggleFullscreen\n      ),\n      editMode && _jsx(Menu.Item, { children:\n        t('Edit properties') }, MenuKeys.EditProperties\n      ),\n      editMode && _jsx(Menu.Item, { children:\n        _jsx(CssEditor, { triggerNode: _jsx(\"div\", { children: t('Edit CSS') }), initialCss: css, onChange: changeCss, addDangerToast: addDangerToast }) }, MenuKeys.EditCss\n      ),\n      _jsx(Menu.Divider, {}),\n      userCanSave && _jsx(Menu.Item, { children:\n        _jsx(SaveModal, { addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, dashboardId: dashboardId, dashboardTitle: dashboardTitle, dashboardInfo: dashboardInfo, saveType: SAVE_TYPE_NEWDASHBOARD, layout: layout, expandedSlices: expandedSlices, refreshFrequency: refreshFrequency, shouldPersistRefreshFrequency: shouldPersistRefreshFrequency, lastModifiedTime: lastModifiedTime, customCss: customCss, colorNamespace: colorNamespace, colorScheme: colorScheme, onSave: onSave, triggerNode: _jsx(\"div\", { \"data-test\": \"save-as-menu-item\", children: t('Save as') }), canOverwrite: userCanEdit }) }, MenuKeys.SaveModal\n      ),\n      _jsx(DownloadMenuItems, { submenuKey: MenuKeys.Download, disabled: isLoading, title: t('Download'), pdfMenuItemTitle: t('Export to PDF'), imageMenuItemTitle: t('Download as Image'), dashboardTitle: dashboardTitle, dashboardId: dashboardId, logEvent: logEvent }),\n      userCanShare && _jsx(ShareMenuItems, { disabled: isLoading, \"data-test\": \"share-dashboard-menu-item\", title: t('Share'), url: url, copyMenuItemTitle: t('Copy permalink to clipboard'), emailMenuItemTitle: t('Share permalink by email'), emailSubject: emailSubject, emailBody: t('Check out this dashboard: '), addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, dashboardId: dashboardId, dashboardComponentId: dashboardComponentId }),\n      !editMode && userCanCurate && _jsx(Menu.Item, { children:\n        t('Embed dashboard') }, MenuKeys.ManageEmbedded\n      ),\n      _jsx(Menu.Divider, {}),\n      !editMode ? showReportSubMenu ? _jsxs(_Fragment, { children: [\n        _jsx(HeaderReportDropdown, { submenuTitle: t('Manage email report'), dashboardId: dashboardInfo.id, setShowReportSubMenu: setShowReportSubMenu, showReportModal: showReportModal, showReportSubMenu: showReportSubMenu, setCurrentReportDeleting: setCurrentReportDeleting, useTextMenu: true }),\n        _jsx(Menu.Divider, {})] }\n      ) : _jsx(HeaderReportDropdown, { dashboardId: dashboardInfo.id, setShowReportSubMenu: setShowReportSubMenu, showReportModal: showReportModal, setCurrentReportDeleting: setCurrentReportDeleting, useTextMenu: true }) : null,\n      editMode && !_isEmpty(dashboardInfo == null ? void 0 : (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.filter_scopes) && _jsx(Menu.Item, { children:\n        _jsx(FilterScopeModal, { triggerNode: _jsx(\"div\", { className: \"m-r-5\", children: t('Set filter mapping') }) }) }, MenuKeys.SetFilterMapping\n      ),\n      _jsx(Menu.Item, { children:\n        _jsx(RefreshIntervalModal, { addSuccessToast: addSuccessToast, refreshFrequency: refreshFrequency, refreshLimit: refreshLimit, refreshWarning: refreshWarning, onChange: changeRefreshInterval, editMode: editMode, refreshIntervalOptions: refreshIntervalOptions, triggerNode: _jsx(\"div\", { children: t('Set auto-refresh interval') }) }) }, MenuKeys.AutorefreshModal\n      )] }\n    );\n  }, [\n  css,\n  showReportSubMenu,\n  isDropdownVisible,\n  directPathToChild,\n  handleMenuClick,\n  changeCss,\n  changeRefreshInterval,\n  emailSubject,\n  url,\n  dashboardComponentId]\n  );\n  return [menu, isDropdownVisible, setIsDropdownVisible];\n};__signature__(useHeaderActionsMenu, \"useState{[css, setCss](customCss || '')}\\nuseState{[showReportSubMenu, setShowReportSubMenu](null)}\\nuseState{[isDropdownVisible, setIsDropdownVisible](false)}\\nuseSelector{directPathToChild}\\nuseEffect{}\\nuseCallback{handleMenuClick}\\nuseCallback{changeCss}\\nuseCallback{changeRefreshInterval}\\nuseMemo{emailSubject}\\nuseMemo{url}\\nuseMemo{dashboardComponentId}\\nuseMemo{menu}\", () => [useSelector]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(useHeaderActionsMenu, \"useHeaderActionsMenu\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/Header/useHeaderActionsDropdownMenu.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","useSelector","Menu","t","URL_PARAMS","ShareMenuItems","DownloadMenuItems","CssEditor","RefreshIntervalModal","SaveModal","HeaderReportDropdown","injectCustomCss","SAVE_TYPE_NEWDASHBOARD","FilterScopeModal","getDashboardUrl","getActiveFilters","getUrlParam","MenuKeys","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","useHeaderActionsMenu","customCss","dashboardId","dashboardInfo","refreshFrequency","shouldPersistRefreshFrequency","editMode","colorNamespace","colorScheme","layout","expandedSlices","onSave","userCanEdit","userCanShare","userCanSave","userCanCurate","isLoading","refreshLimit","refreshWarning","lastModifiedTime","addSuccessToast","addDangerToast","forceRefreshAllCharts","showPropertiesModal","showReportModal","manageEmbedded","onChange","updateCss","startPeriodicRender","setRefreshFrequency","dashboardTitle","logEvent","setCurrentReportDeleting","css","setCss","showReportSubMenu","setShowReportSubMenu","isDropdownVisible","setIsDropdownVisible","directPathToChild","state","dashboardState","handleMenuClick","key","RefreshDashboard","EditProperties","ToggleFullscreen","isCurrentlyStandalone","Number","standalone","url","pathname","window","location","filters","hash","replace","ManageEmbedded","changeCss","newCss","changeRefreshInterval","refreshInterval","isPersistent","emailSubject","dashboardComponentId","pop","menu","_dashboardInfo$common","_dashboardInfo$common2","_dashboardInfo$metada","isEmbedded","userId","refreshIntervalOptions","common","conf","DASHBOARD_AUTO_REFRESH_INTERVALS","selectable","onClick","children","Item","disabled","triggerNode","initialCss","EditCss","Divider","saveType","canOverwrite","submenuKey","Download","title","pdfMenuItemTitle","imageMenuItemTitle","copyMenuItemTitle","emailMenuItemTitle","emailBody","submenuTitle","id","useTextMenu","_isEmpty","metadata","filter_scopes","className","SetFilterMapping","AutorefreshModal","__signature__","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/dashboard/components/Header/useHeaderActionsDropdownMenu.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Menu } from 'src/components/Menu';\nimport { t } from '@superset-ui/core';\nimport { isEmpty } from 'lodash';\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport DownloadMenuItems from 'src/dashboard/components/menu/DownloadMenuItems';\nimport CssEditor from 'src/dashboard/components/CssEditor';\nimport RefreshIntervalModal from 'src/dashboard/components/RefreshIntervalModal';\nimport SaveModal from 'src/dashboard/components/SaveModal';\nimport HeaderReportDropdown from 'src/features/reports/ReportModal/HeaderReportDropdown';\nimport injectCustomCss from 'src/dashboard/util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from 'src/dashboard/util/constants';\nimport FilterScopeModal from 'src/dashboard/components/filterscope/FilterScopeModal';\nimport getDashboardUrl from 'src/dashboard/util/getDashboardUrl';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { MenuKeys, RootState } from 'src/dashboard/types';\nimport { HeaderDropdownProps } from 'src/dashboard/components/Header/types';\n\nexport const useHeaderActionsMenu = ({\n  customCss,\n  dashboardId,\n  dashboardInfo,\n  refreshFrequency,\n  shouldPersistRefreshFrequency,\n  editMode,\n  colorNamespace,\n  colorScheme,\n  layout,\n  expandedSlices,\n  onSave,\n  userCanEdit,\n  userCanShare,\n  userCanSave,\n  userCanCurate,\n  isLoading,\n  refreshLimit,\n  refreshWarning,\n  lastModifiedTime,\n  addSuccessToast,\n  addDangerToast,\n  forceRefreshAllCharts,\n  showPropertiesModal,\n  showReportModal,\n  manageEmbedded,\n  onChange,\n  updateCss,\n  startPeriodicRender,\n  setRefreshFrequency,\n  dashboardTitle,\n  logEvent,\n  setCurrentReportDeleting,\n}: HeaderDropdownProps) => {\n  const [css, setCss] = useState(customCss || '');\n  const [showReportSubMenu, setShowReportSubMenu] = useState<boolean | null>(\n    null,\n  );\n  const [isDropdownVisible, setIsDropdownVisible] = useState(false);\n  const directPathToChild = useSelector(\n    (state: RootState) => state.dashboardState.directPathToChild,\n  );\n  useEffect(() => {\n    if (customCss !== css) {\n      setCss(customCss || '');\n      injectCustomCss(customCss);\n    }\n  }, [css, customCss]);\n\n  const handleMenuClick = useCallback(\n    ({ key }: { key: string }) => {\n      switch (key) {\n        case MenuKeys.RefreshDashboard:\n          forceRefreshAllCharts();\n          addSuccessToast(t('Refreshing charts'));\n          break;\n        case MenuKeys.EditProperties:\n          showPropertiesModal();\n          break;\n        case MenuKeys.ToggleFullscreen: {\n          const isCurrentlyStandalone =\n            Number(getUrlParam(URL_PARAMS.standalone)) === 1;\n          const url = getDashboardUrl({\n            pathname: window.location.pathname,\n            filters: getActiveFilters(),\n            hash: window.location.hash,\n            standalone: isCurrentlyStandalone ? null : 1,\n          });\n          window.location.replace(url);\n          break;\n        }\n        case MenuKeys.ManageEmbedded:\n          manageEmbedded();\n          break;\n        default:\n          break;\n      }\n      setIsDropdownVisible(false);\n    },\n    [\n      forceRefreshAllCharts,\n      addSuccessToast,\n      showPropertiesModal,\n      manageEmbedded,\n    ],\n  );\n\n  const changeCss = useCallback(\n    (newCss: string) => {\n      onChange();\n      updateCss(newCss);\n    },\n    [onChange, updateCss],\n  );\n\n  const changeRefreshInterval = useCallback(\n    (refreshInterval: number, isPersistent: boolean) => {\n      setRefreshFrequency(refreshInterval, isPersistent);\n      startPeriodicRender(refreshInterval * 1000);\n    },\n    [setRefreshFrequency, startPeriodicRender],\n  );\n\n  const emailSubject = useMemo(\n    () => `${t('Superset dashboard')} ${dashboardTitle}`,\n    [dashboardTitle],\n  );\n\n  const url = useMemo(\n    () =>\n      getDashboardUrl({\n        pathname: window.location.pathname,\n        filters: getActiveFilters(),\n        hash: window.location.hash,\n      }),\n    [],\n  );\n\n  const dashboardComponentId = useMemo(\n    () => [...(directPathToChild || [])].pop(),\n    [directPathToChild],\n  );\n\n  const menu = useMemo(() => {\n    const isEmbedded = !dashboardInfo?.userId;\n    const refreshIntervalOptions =\n      dashboardInfo.common?.conf?.DASHBOARD_AUTO_REFRESH_INTERVALS;\n\n    return (\n      <Menu\n        selectable={false}\n        data-test=\"header-actions-menu\"\n        onClick={handleMenuClick}\n      >\n        {!editMode && (\n          <Menu.Item\n            key={MenuKeys.RefreshDashboard}\n            data-test=\"refresh-dashboard-menu-item\"\n            disabled={isLoading}\n          >\n            {t('Refresh dashboard')}\n          </Menu.Item>\n        )}\n        {!editMode && !isEmbedded && (\n          <Menu.Item key={MenuKeys.ToggleFullscreen}>\n            {getUrlParam(URL_PARAMS.standalone)\n              ? t('Exit fullscreen')\n              : t('Enter fullscreen')}\n          </Menu.Item>\n        )}\n        {editMode && (\n          <Menu.Item key={MenuKeys.EditProperties}>\n            {t('Edit properties')}\n          </Menu.Item>\n        )}\n        {editMode && (\n          <Menu.Item key={MenuKeys.EditCss}>\n            <CssEditor\n              triggerNode={<div>{t('Edit CSS')}</div>}\n              initialCss={css}\n              onChange={changeCss}\n              addDangerToast={addDangerToast}\n            />\n          </Menu.Item>\n        )}\n        <Menu.Divider />\n        {userCanSave && (\n          <Menu.Item key={MenuKeys.SaveModal}>\n            <SaveModal\n              addSuccessToast={addSuccessToast}\n              addDangerToast={addDangerToast}\n              dashboardId={dashboardId}\n              dashboardTitle={dashboardTitle}\n              dashboardInfo={dashboardInfo}\n              saveType={SAVE_TYPE_NEWDASHBOARD}\n              layout={layout}\n              expandedSlices={expandedSlices}\n              refreshFrequency={refreshFrequency}\n              shouldPersistRefreshFrequency={shouldPersistRefreshFrequency}\n              lastModifiedTime={lastModifiedTime}\n              customCss={customCss}\n              colorNamespace={colorNamespace}\n              colorScheme={colorScheme}\n              onSave={onSave}\n              triggerNode={\n                <div data-test=\"save-as-menu-item\">{t('Save as')}</div>\n              }\n              canOverwrite={userCanEdit}\n            />\n          </Menu.Item>\n        )}\n        <DownloadMenuItems\n          submenuKey={MenuKeys.Download}\n          disabled={isLoading}\n          title={t('Download')}\n          pdfMenuItemTitle={t('Export to PDF')}\n          imageMenuItemTitle={t('Download as Image')}\n          dashboardTitle={dashboardTitle}\n          dashboardId={dashboardId}\n          logEvent={logEvent}\n        />\n        {userCanShare && (\n          <ShareMenuItems\n            disabled={isLoading}\n            data-test=\"share-dashboard-menu-item\"\n            title={t('Share')}\n            url={url}\n            copyMenuItemTitle={t('Copy permalink to clipboard')}\n            emailMenuItemTitle={t('Share permalink by email')}\n            emailSubject={emailSubject}\n            emailBody={t('Check out this dashboard: ')}\n            addSuccessToast={addSuccessToast}\n            addDangerToast={addDangerToast}\n            dashboardId={dashboardId}\n            dashboardComponentId={dashboardComponentId}\n          />\n        )}\n        {!editMode && userCanCurate && (\n          <Menu.Item key={MenuKeys.ManageEmbedded}>\n            {t('Embed dashboard')}\n          </Menu.Item>\n        )}\n        <Menu.Divider />\n        {!editMode ? (\n          showReportSubMenu ? (\n            <>\n              <HeaderReportDropdown\n                submenuTitle={t('Manage email report')}\n                dashboardId={dashboardInfo.id}\n                setShowReportSubMenu={setShowReportSubMenu}\n                showReportModal={showReportModal}\n                showReportSubMenu={showReportSubMenu}\n                setCurrentReportDeleting={setCurrentReportDeleting}\n                useTextMenu\n              />\n              <Menu.Divider />\n            </>\n          ) : (\n            <HeaderReportDropdown\n              dashboardId={dashboardInfo.id}\n              setShowReportSubMenu={setShowReportSubMenu}\n              showReportModal={showReportModal}\n              setCurrentReportDeleting={setCurrentReportDeleting}\n              useTextMenu\n            />\n          )\n        ) : null}\n        {editMode && !isEmpty(dashboardInfo?.metadata?.filter_scopes) && (\n          <Menu.Item key={MenuKeys.SetFilterMapping}>\n            <FilterScopeModal\n              triggerNode={\n                <div className=\"m-r-5\">{t('Set filter mapping')}</div>\n              }\n            />\n          </Menu.Item>\n        )}\n        <Menu.Item key={MenuKeys.AutorefreshModal}>\n          <RefreshIntervalModal\n            addSuccessToast={addSuccessToast}\n            refreshFrequency={refreshFrequency}\n            refreshLimit={refreshLimit}\n            refreshWarning={refreshWarning}\n            onChange={changeRefreshInterval}\n            editMode={editMode}\n            refreshIntervalOptions={refreshIntervalOptions}\n            triggerNode={<div>{t('Set auto-refresh interval')}</div>}\n          />\n        </Menu.Item>\n      </Menu>\n    );\n  }, [\n    css,\n    showReportSubMenu,\n    isDropdownVisible,\n    directPathToChild,\n    handleMenuClick,\n    changeCss,\n    changeRefreshInterval,\n    emailSubject,\n    url,\n    dashboardComponentId,\n  ]);\n\n  return [menu, isDropdownVisible, setIsDropdownVisible];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}