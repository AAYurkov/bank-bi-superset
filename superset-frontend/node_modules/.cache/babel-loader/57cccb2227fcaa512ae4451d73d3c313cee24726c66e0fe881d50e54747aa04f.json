{"ast":null,"code":"import _pickBy from \"lodash/pickBy\";import _pick from \"lodash/pick\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect } from 'react';\n\nimport { useSelector } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { getItem, LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { enforceSharedLabelsColorsArray } from 'src/utils/colorScheme';\nconst EMPTY_OBJECT = {};\nexport const getDashboardContextLocalStorage = () => {\n  const dashboardsContexts = getItem(LocalStorageKeys.DashboardExploreContext, {});\n  // A new dashboard tab id is generated on each dashboard page opening.\n  // We mark ids as redundant when user leaves the dashboard, because they won't be reused.\n  // Then we remove redundant dashboard contexts from local storage in order not to clutter it\n  return _pickBy(dashboardsContexts, (value) => !value.isRedundant);\n};\nconst updateDashboardTabLocalStorage = (dashboardPageId, dashboardContext) => {\n  const dashboardsContexts = getDashboardContextLocalStorage();\n  setItem(LocalStorageKeys.DashboardExploreContext, {\n    ...dashboardsContexts,\n    [dashboardPageId]: { ...dashboardContext, dashboardPageId }\n  });\n};\nconst selectDashboardContextForExplore = createSelector([\n(state) => state.dashboardInfo.metadata,\n(state) => state.dashboardInfo.id,\n(state) => {var _state$dashboardState;return (_state$dashboardState = state.dashboardState) == null ? void 0 : _state$dashboardState.colorScheme;},\n(state) => {var _state$nativeFilters;return (_state$nativeFilters = state.nativeFilters) == null ? void 0 : _state$nativeFilters.filters;},\n(state) => state.dataMask],\n(metadata, dashboardId, colorScheme, filters, dataMask) => {\n  const nativeFilters = Object.keys(filters).reduce((acc, key) => {\n    acc[key] = _pick(filters[key], ['chartsInScope']);\n    return acc;\n  }, {});\n  return {\n    labelsColor: (metadata == null ? void 0 : metadata.label_colors) || EMPTY_OBJECT,\n    labelsColorMap: (metadata == null ? void 0 : metadata.map_label_colors) || EMPTY_OBJECT,\n    sharedLabelsColors: enforceSharedLabelsColorsArray(metadata == null ? void 0 : metadata.shared_label_colors),\n    colorScheme,\n    chartConfiguration: (metadata == null ? void 0 : metadata.chart_configuration) || EMPTY_OBJECT,\n    nativeFilters,\n    dataMask,\n    dashboardId,\n    filterBoxFilters: getActiveFilters()\n  };\n});\nconst SyncDashboardState = ({ dashboardPageId }) => {\n  const dashboardContextForExplore = useSelector(selectDashboardContextForExplore);\n  useEffect(() => {\n    updateDashboardTabLocalStorage(dashboardPageId, dashboardContextForExplore);\n    return () => {\n      // mark tab id as redundant when dashboard unmounts - case when user opens\n      // Explore in the same tab\n      updateDashboardTabLocalStorage(dashboardPageId, {\n        ...dashboardContextForExplore,\n        isRedundant: true\n      });\n    };\n  }, [dashboardContextForExplore, dashboardPageId]);\n  return null;\n};__signature__(SyncDashboardState, \"useSelector{dashboardContextForExplore}\\nuseEffect{}\", () => [useSelector]);const _default =\nSyncDashboardState;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EMPTY_OBJECT, \"EMPTY_OBJECT\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/SyncDashboardState/index.tsx\");reactHotLoader.register(getDashboardContextLocalStorage, \"getDashboardContextLocalStorage\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/SyncDashboardState/index.tsx\");reactHotLoader.register(updateDashboardTabLocalStorage, \"updateDashboardTabLocalStorage\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/SyncDashboardState/index.tsx\");reactHotLoader.register(selectDashboardContextForExplore, \"selectDashboardContextForExplore\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/SyncDashboardState/index.tsx\");reactHotLoader.register(SyncDashboardState, \"SyncDashboardState\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/SyncDashboardState/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/SyncDashboardState/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useEffect","useSelector","createSelector","getItem","LocalStorageKeys","setItem","getActiveFilters","enforceSharedLabelsColorsArray","EMPTY_OBJECT","getDashboardContextLocalStorage","dashboardsContexts","DashboardExploreContext","_pickBy","value","isRedundant","updateDashboardTabLocalStorage","dashboardPageId","dashboardContext","selectDashboardContextForExplore","state","dashboardInfo","metadata","id","_state$dashboardState","dashboardState","colorScheme","_state$nativeFilters","nativeFilters","filters","dataMask","dashboardId","Object","keys","reduce","acc","key","_pick","labelsColor","label_colors","labelsColorMap","map_label_colors","sharedLabelsColors","shared_label_colors","chartConfiguration","chart_configuration","filterBoxFilters","SyncDashboardState","dashboardContextForExplore","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/dashboard/components/SyncDashboardState/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FC, useEffect } from 'react';\n\nimport { pick, pickBy } from 'lodash';\nimport { useSelector } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { DashboardContextForExplore } from 'src/types/DashboardContextForExplore';\nimport {\n  getItem,\n  LocalStorageKeys,\n  setItem,\n} from 'src/utils/localStorageHelpers';\nimport { RootState } from 'src/dashboard/types';\nimport { getActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport { enforceSharedLabelsColorsArray } from 'src/utils/colorScheme';\nimport { Divider, Filter } from '@superset-ui/core';\n\ntype Props = { dashboardPageId: string };\n\nconst EMPTY_OBJECT = {};\n\nexport const getDashboardContextLocalStorage = () => {\n  const dashboardsContexts = getItem(\n    LocalStorageKeys.DashboardExploreContext,\n    {},\n  );\n  // A new dashboard tab id is generated on each dashboard page opening.\n  // We mark ids as redundant when user leaves the dashboard, because they won't be reused.\n  // Then we remove redundant dashboard contexts from local storage in order not to clutter it\n  return pickBy(dashboardsContexts, value => !value.isRedundant);\n};\n\nconst updateDashboardTabLocalStorage = (\n  dashboardPageId: string,\n  dashboardContext: DashboardContextForExplore,\n) => {\n  const dashboardsContexts = getDashboardContextLocalStorage();\n  setItem(LocalStorageKeys.DashboardExploreContext, {\n    ...dashboardsContexts,\n    [dashboardPageId]: { ...dashboardContext, dashboardPageId },\n  });\n};\n\nconst selectDashboardContextForExplore = createSelector(\n  [\n    (state: RootState) => state.dashboardInfo.metadata,\n    (state: RootState) => state.dashboardInfo.id,\n    (state: RootState) => state.dashboardState?.colorScheme,\n    (state: RootState) => state.nativeFilters?.filters,\n    (state: RootState) => state.dataMask,\n  ],\n  (metadata, dashboardId, colorScheme, filters, dataMask) => {\n    const nativeFilters = Object.keys(filters).reduce<\n      Record<string, Pick<Filter | Divider, 'chartsInScope'>>\n    >((acc, key) => {\n      acc[key] = pick(filters[key], ['chartsInScope']);\n      return acc;\n    }, {});\n\n    return {\n      labelsColor: metadata?.label_colors || EMPTY_OBJECT,\n      labelsColorMap: metadata?.map_label_colors || EMPTY_OBJECT,\n      sharedLabelsColors: enforceSharedLabelsColorsArray(\n        metadata?.shared_label_colors,\n      ),\n      colorScheme,\n      chartConfiguration: metadata?.chart_configuration || EMPTY_OBJECT,\n      nativeFilters,\n      dataMask,\n      dashboardId,\n      filterBoxFilters: getActiveFilters(),\n    };\n  },\n);\n\nconst SyncDashboardState: FC<Props> = ({ dashboardPageId }) => {\n  const dashboardContextForExplore = useSelector<\n    RootState,\n    DashboardContextForExplore\n  >(selectDashboardContextForExplore);\n\n  useEffect(() => {\n    updateDashboardTabLocalStorage(dashboardPageId, dashboardContextForExplore);\n    return () => {\n      // mark tab id as redundant when dashboard unmounts - case when user opens\n      // Explore in the same tab\n      updateDashboardTabLocalStorage(dashboardPageId, {\n        ...dashboardContextForExplore,\n        isRedundant: true,\n      });\n    };\n  }, [dashboardContextForExplore, dashboardPageId]);\n\n  return null;\n};\n\nexport default SyncDashboardState;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}