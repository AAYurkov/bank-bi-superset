{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled } from '@superset-ui/core';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport Alert from 'src/components/Alert';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport { Icons } from 'src/components/Icons';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport Pagination from 'src/components/Pagination';\nimport TableCollection from 'src/components/TableCollection';\nimport BulkTagModal from 'src/features/tags/BulkTagModal';\nimport CardCollection from './CardCollection';\nimport FilterControls from './Filters';\nimport { CardSortSelect } from './CardSortSelect';\nimport { ListViewError, useListViewState } from './utils';\nimport { EmptyState } from '../EmptyState';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst ListViewStyles = styled.div`\n  text-align: center;\n\n  .superset-list-view {\n    text-align: left;\n    border-radius: 4px 0;\n    margin: 0 ${({ theme }) => theme.gridUnit * 4}px;\n\n    .header {\n      display: flex;\n      padding-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n\n      & .controls {\n        display: flex;\n        flex-wrap: wrap;\n        column-gap: ${({ theme }) => theme.gridUnit * 6}px;\n        row-gap: ${({ theme }) => theme.gridUnit * 4}px;\n      }\n    }\n\n    .body.empty table {\n      margin-bottom: 0;\n    }\n\n    .body {\n      overflow-x: auto;\n    }\n\n    .antd5-empty {\n      .antd5-empty-image {\n        height: auto;\n      }\n    }\n  }\n\n  .pagination-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n  }\n\n  .row-count-container {\n    margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n`;\nconst BulkSelectWrapper = styled(Alert)`\n  ${({ theme }) => `\n    border-radius: 0;\n    margin-bottom: 0;\n    color: ${theme.colors.grayscale.dark1};\n    background-color: ${theme.colors.primary.light4};\n\n    .selectedCopy {\n      display: inline-block;\n      padding: ${theme.gridUnit * 2}px 0;\n    }\n\n    .deselect-all, .tag-btn {\n      color: ${theme.colors.primary.base};\n      margin-left: ${theme.gridUnit * 4}px;\n    }\n\n    .divider {\n      margin: ${`${-theme.gridUnit * 2}px 0 ${-theme.gridUnit * 2}px ${theme.gridUnit * 4}px`};\n      width: 1px;\n      height: ${theme.gridUnit * 8}px;\n      box-shadow: inset -1px 0px 0px ${theme.colors.grayscale.light2};\n      display: inline-flex;\n      vertical-align: middle;\n      position: relative;\n    }\n\n    .ant-alert-close-icon {\n      margin-top: ${theme.gridUnit * 1.5}px;\n    }\n  `}\n`;\nconst bulkSelectColumnConfig = {\n  Cell: ({ row }) => _jsx(IndeterminateCheckbox, { ...row.getToggleRowSelectedProps(), id: row.id }),\n  Header: ({ getToggleAllRowsSelectedProps }) => _jsx(IndeterminateCheckbox, { ...getToggleAllRowsSelectedProps(), id: \"header-toggle-all\", \"data-test\": \"header-toggle-all\" }),\n  id: 'selection',\n  size: 'sm'\n};\nconst ViewModeContainer = styled.div`\n  padding-right: ${({ theme }) => theme.gridUnit * 4}px;\n  margin-top: ${({ theme }) => theme.gridUnit * 5 + 1}px;\n  white-space: nowrap;\n  display: inline-block;\n\n  .toggle-button {\n    display: inline-block;\n    border-radius: ${({ theme }) => theme.gridUnit / 2}px;\n    padding: ${({ theme }) => theme.gridUnit}px;\n    padding-bottom: ${({ theme }) => theme.gridUnit * 0.5}px;\n\n    &:first-of-type {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n\n  .active {\n    background-color: ${({ theme }) => theme.colors.grayscale.base};\n    svg {\n      color: ${({ theme }) => theme.colors.grayscale.light5};\n    }\n  }\n`;\nconst EmptyWrapper = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 40}px 0;\n\n  &.table {\n    background: ${({ theme }) => theme.colors.grayscale.light5};\n  }\n`;\nconst ViewModeToggle = ({ mode, setMode }) => _jsxs(ViewModeContainer, { children: [\n  _jsx(\"div\", { role: \"button\", tabIndex: 0, onClick: (e) => {\n      e.currentTarget.blur();\n      setMode('card');\n    }, className: cx('toggle-button', { active: mode === 'card' }), children:\n    _jsx(Icons.AppstoreOutlined, { iconSize: \"xl\" }) }\n  ),\n  _jsx(\"div\", { role: \"button\", tabIndex: 0, onClick: (e) => {\n      e.currentTarget.blur();\n      setMode('table');\n    }, className: cx('toggle-button', { active: mode === 'table' }), children:\n    _jsx(Icons.UnorderedListOutlined, { iconSize: \"xl\" }) }\n  )] }\n);\nfunction ListView({ columns, data, count, pageSize: initialPageSize, fetchData, refreshData, loading, initialSort = [], className = '', filters = [], bulkActions = [], bulkSelectEnabled = false, disableBulkSelect = () => {}, renderBulkSelectCopy = (selected) => t('%s Selected', selected.length), renderCard, showThumbnails, cardSortSelectOptions, defaultViewMode = 'card', highlightRowId, emptyState, columnsForWrapText, enableBulkTag = false, bulkTagResourceName, addSuccessToast, addDangerToast }) {\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, pageCount = 1, gotoPage, applyFilterValue, setSortBy, selectedFlatRows, toggleAllRowsSelected, setViewMode, state: { pageIndex, pageSize, internalFilters, sortBy, viewMode }, query } = useListViewState({\n    bulkSelectColumnConfig,\n    bulkSelectMode: bulkSelectEnabled && Boolean(bulkActions.length),\n    columns,\n    count,\n    data,\n    fetchData,\n    initialPageSize,\n    initialSort,\n    initialFilters: filters,\n    renderCard: Boolean(renderCard),\n    defaultViewMode\n  });\n  const allowBulkTagActions = bulkTagResourceName && enableBulkTag;\n  const filterable = Boolean(filters.length);\n  if (filterable) {\n    const columnAccessors = columns.reduce((acc, col) => ({ ...acc, [col.id || col.accessor]: true }), {});\n    filters.forEach((f) => {\n      if (!columnAccessors[f.id]) {\n        throw new ListViewError(`Invalid filter config, ${f.id} is not present in columns`);\n      }\n    });\n  }\n  const filterControlsRef = useRef(null);\n  const handleClearFilterControls = useCallback(() => {\n    if (query.filters) {var _filterControlsRef$cu;\n      (_filterControlsRef$cu = filterControlsRef.current) == null ? void 0 : _filterControlsRef$cu.clearFilters();\n    }\n  }, [query.filters]);\n  const cardViewEnabled = Boolean(renderCard);\n  const [showBulkTagModal, setShowBulkTagModal] = useState(false);\n  useEffect(() => {\n    // discard selections if bulk select is disabled\n    if (!bulkSelectEnabled)\n    toggleAllRowsSelected(false);\n  }, [bulkSelectEnabled, toggleAllRowsSelected]);\n  useEffect(() => {\n    if (!loading && pageIndex > pageCount - 1 && pageCount > 0) {\n      gotoPage(0);\n    }\n  }, [gotoPage, loading, pageCount, pageIndex]);\n  return _jsxs(ListViewStyles, { children: [\n    allowBulkTagActions && _jsx(BulkTagModal, { show: showBulkTagModal, selected: selectedFlatRows, refreshData: refreshData, resourceName: bulkTagResourceName, addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, onHide: () => setShowBulkTagModal(false) }),\n    _jsxs(\"div\", { \"data-test\": className, className: `superset-list-view ${className}`, children: [\n      _jsxs(\"div\", { className: \"header\", children: [\n        cardViewEnabled && _jsx(ViewModeToggle, { mode: viewMode, setMode: setViewMode }),\n        _jsxs(\"div\", { className: \"controls\", \"data-test\": \"filters-select\", children: [\n          filterable && _jsx(FilterControls, { ref: filterControlsRef, filters: filters, internalFilters: internalFilters, updateFilterValue: applyFilterValue }),\n          viewMode === 'card' && cardSortSelectOptions && _jsx(CardSortSelect, { initialSort: sortBy, onChange: (value) => setSortBy(value), options: cardSortSelectOptions })] }\n        )] }\n      ),\n      _jsxs(\"div\", { className: `body ${rows.length === 0 ? 'empty' : ''}`, children: [\n        bulkSelectEnabled && _jsx(BulkSelectWrapper, { \"data-test\": \"bulk-select-controls\", type: \"info\", closable: true, showIcon: false, onClose: disableBulkSelect, message: _jsxs(_Fragment, { children: [\n            _jsx(\"div\", { className: \"selectedCopy\", \"data-test\": \"bulk-select-copy\", children:\n              renderBulkSelectCopy(selectedFlatRows) }\n            ),\n            Boolean(selectedFlatRows.length) && _jsxs(_Fragment, { children: [\n              _jsx(\"span\", { \"data-test\": \"bulk-select-deselect-all\", role: \"button\", tabIndex: 0, className: \"deselect-all\", onClick: () => toggleAllRowsSelected(false), children:\n                t('Deselect all') }\n              ),\n              _jsx(\"div\", { className: \"divider\" }),\n              bulkActions.map((action) => _jsx(Button, { \"data-test\": \"bulk-select-action\", buttonStyle: action.type, cta: true, onClick: () => action.onSelect(selectedFlatRows.map((r) => r.original)), children:\n                action.name }, action.key\n              )),\n              enableBulkTag && _jsx(\"span\", { \"data-test\": \"bulk-select-tag-btn\", role: \"button\", tabIndex: 0, className: \"tag-btn\", onClick: () => setShowBulkTagModal(true), children:\n                t('Add Tag') }\n              )] }\n            )] }\n          ) }),\n        viewMode === 'card' && _jsx(CardCollection, { bulkSelectEnabled: bulkSelectEnabled, prepareRow: prepareRow, renderCard: renderCard, rows: rows, loading: loading, showThumbnails: showThumbnails }),\n        viewMode === 'table' && _jsx(TableCollection, { getTableProps: getTableProps, getTableBodyProps: getTableBodyProps, prepareRow: prepareRow, headerGroups: headerGroups, rows: rows, columns: columns, loading: loading, highlightRowId: highlightRowId, columnsForWrapText: columnsForWrapText }),\n        !loading && rows.length === 0 && _jsx(EmptyWrapper, { className: viewMode, \"data-test\": \"empty-state\", children:\n          query.filters ? _jsx(EmptyState, { title: t('No results match your filter criteria'), description: t('Try different criteria to display results.'), size: \"large\", image: \"filter-results.svg\", buttonAction: () => handleClearFilterControls(), buttonText: t('clear all filters') }) : _jsx(EmptyState, { ...emptyState, title: (emptyState == null ? void 0 : emptyState.title) || t('No Data'), size: \"large\", image: (emptyState == null ? void 0 : emptyState.image) || 'filter-results.svg' }) }\n        )] }\n      )] }\n    ),\n    rows.length > 0 && _jsxs(\"div\", { className: \"pagination-container\", children: [\n      _jsx(Pagination, { totalPages: pageCount || 0, currentPage: pageCount && pageIndex < pageCount ? pageIndex + 1 : 0, onChange: (p) => gotoPage(p - 1), hideFirstAndLastPageLinks: true }),\n      _jsx(\"div\", { className: \"row-count-container\", children:\n        !loading &&\n        t('%s-%s of %s', pageSize * pageIndex + (rows.length && 1), pageSize * pageIndex + rows.length, count) }\n      )] }\n    )] }\n  );\n}__signature__(ListView, \"useListViewState{{ getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, pageCount = 1, gotoPage, applyFilterValue, setSortBy, selectedFlatRows, toggleAllRowsSelected, setViewMode, state: { pageIndex, pageSize, internalFilters, sortBy, viewMode }, query, }}\\nuseRef{filterControlsRef}\\nuseCallback{handleClearFilterControls}\\nuseState{[showBulkTagModal, setShowBulkTagModal](false)}\\nuseEffect{}\\nuseEffect{}\", () => [useListViewState]);const _default =\nListView;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ListViewStyles, \"ListViewStyles\", \"/Users/aryurkov/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(BulkSelectWrapper, \"BulkSelectWrapper\", \"/Users/aryurkov/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(bulkSelectColumnConfig, \"bulkSelectColumnConfig\", \"/Users/aryurkov/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(ViewModeContainer, \"ViewModeContainer\", \"/Users/aryurkov/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(EmptyWrapper, \"EmptyWrapper\", \"/Users/aryurkov/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(ViewModeToggle, \"ViewModeToggle\", \"/Users/aryurkov/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(ListView, \"ListView\", \"/Users/aryurkov/superset/superset-frontend/src/components/ListView/ListView.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/components/ListView/ListView.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["t","styled","useCallback","useEffect","useRef","useState","Alert","cx","Button","Icons","IndeterminateCheckbox","Pagination","TableCollection","BulkTagModal","CardCollection","FilterControls","CardSortSelect","ListViewError","useListViewState","EmptyState","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ListViewStyles","div","theme","gridUnit","colors","grayscale","base","BulkSelectWrapper","dark1","primary","light4","light2","bulkSelectColumnConfig","Cell","row","getToggleRowSelectedProps","id","Header","getToggleAllRowsSelectedProps","size","ViewModeContainer","light5","EmptyWrapper","ViewModeToggle","mode","setMode","children","role","tabIndex","onClick","e","currentTarget","blur","className","active","AppstoreOutlined","iconSize","UnorderedListOutlined","ListView","columns","data","count","pageSize","initialPageSize","fetchData","refreshData","loading","initialSort","filters","bulkActions","bulkSelectEnabled","disableBulkSelect","renderBulkSelectCopy","selected","length","renderCard","showThumbnails","cardSortSelectOptions","defaultViewMode","highlightRowId","emptyState","columnsForWrapText","enableBulkTag","bulkTagResourceName","addSuccessToast","addDangerToast","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","pageCount","gotoPage","applyFilterValue","setSortBy","selectedFlatRows","toggleAllRowsSelected","setViewMode","state","pageIndex","internalFilters","sortBy","viewMode","query","bulkSelectMode","Boolean","initialFilters","allowBulkTagActions","filterable","columnAccessors","reduce","acc","col","accessor","forEach","f","filterControlsRef","handleClearFilterControls","_filterControlsRef$cu","current","clearFilters","cardViewEnabled","showBulkTagModal","setShowBulkTagModal","show","resourceName","onHide","ref","updateFilterValue","onChange","value","options","type","closable","showIcon","onClose","message","map","action","buttonStyle","cta","onSelect","r","original","name","key","title","description","image","buttonAction","buttonText","totalPages","currentPage","p","hideFirstAndLastPageLinks","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/components/ListView/ListView.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, styled } from '@superset-ui/core';\nimport { useCallback, useEffect, useRef, useState, ReactNode } from 'react';\nimport Alert from 'src/components/Alert';\nimport cx from 'classnames';\nimport Button from 'src/components/Button';\nimport { Icons } from 'src/components/Icons';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport Pagination from 'src/components/Pagination';\nimport TableCollection from 'src/components/TableCollection';\nimport BulkTagModal from 'src/features/tags/BulkTagModal';\nimport CardCollection from './CardCollection';\nimport FilterControls from './Filters';\nimport { CardSortSelect } from './CardSortSelect';\nimport {\n  FetchDataConfig,\n  Filters,\n  SortColumn,\n  CardSortSelectOption,\n  ViewModeType,\n} from './types';\nimport { ListViewError, useListViewState } from './utils';\nimport { EmptyState, EmptyStateProps } from '../EmptyState';\n\nconst ListViewStyles = styled.div`\n  text-align: center;\n\n  .superset-list-view {\n    text-align: left;\n    border-radius: 4px 0;\n    margin: 0 ${({ theme }) => theme.gridUnit * 4}px;\n\n    .header {\n      display: flex;\n      padding-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n\n      & .controls {\n        display: flex;\n        flex-wrap: wrap;\n        column-gap: ${({ theme }) => theme.gridUnit * 6}px;\n        row-gap: ${({ theme }) => theme.gridUnit * 4}px;\n      }\n    }\n\n    .body.empty table {\n      margin-bottom: 0;\n    }\n\n    .body {\n      overflow-x: auto;\n    }\n\n    .antd5-empty {\n      .antd5-empty-image {\n        height: auto;\n      }\n    }\n  }\n\n  .pagination-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n  }\n\n  .row-count-container {\n    margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n  }\n`;\n\nconst BulkSelectWrapper = styled(Alert)`\n  ${({ theme }) => `\n    border-radius: 0;\n    margin-bottom: 0;\n    color: ${theme.colors.grayscale.dark1};\n    background-color: ${theme.colors.primary.light4};\n\n    .selectedCopy {\n      display: inline-block;\n      padding: ${theme.gridUnit * 2}px 0;\n    }\n\n    .deselect-all, .tag-btn {\n      color: ${theme.colors.primary.base};\n      margin-left: ${theme.gridUnit * 4}px;\n    }\n\n    .divider {\n      margin: ${`${-theme.gridUnit * 2}px 0 ${-theme.gridUnit * 2}px ${\n        theme.gridUnit * 4\n      }px`};\n      width: 1px;\n      height: ${theme.gridUnit * 8}px;\n      box-shadow: inset -1px 0px 0px ${theme.colors.grayscale.light2};\n      display: inline-flex;\n      vertical-align: middle;\n      position: relative;\n    }\n\n    .ant-alert-close-icon {\n      margin-top: ${theme.gridUnit * 1.5}px;\n    }\n  `}\n`;\n\nconst bulkSelectColumnConfig = {\n  Cell: ({ row }: any) => (\n    <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} id={row.id} />\n  ),\n  Header: ({ getToggleAllRowsSelectedProps }: any) => (\n    <IndeterminateCheckbox\n      {...getToggleAllRowsSelectedProps()}\n      id=\"header-toggle-all\"\n      data-test=\"header-toggle-all\"\n    />\n  ),\n  id: 'selection',\n  size: 'sm',\n};\n\nconst ViewModeContainer = styled.div`\n  padding-right: ${({ theme }) => theme.gridUnit * 4}px;\n  margin-top: ${({ theme }) => theme.gridUnit * 5 + 1}px;\n  white-space: nowrap;\n  display: inline-block;\n\n  .toggle-button {\n    display: inline-block;\n    border-radius: ${({ theme }) => theme.gridUnit / 2}px;\n    padding: ${({ theme }) => theme.gridUnit}px;\n    padding-bottom: ${({ theme }) => theme.gridUnit * 0.5}px;\n\n    &:first-of-type {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n\n  .active {\n    background-color: ${({ theme }) => theme.colors.grayscale.base};\n    svg {\n      color: ${({ theme }) => theme.colors.grayscale.light5};\n    }\n  }\n`;\n\nconst EmptyWrapper = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 40}px 0;\n\n  &.table {\n    background: ${({ theme }) => theme.colors.grayscale.light5};\n  }\n`;\n\nconst ViewModeToggle = ({\n  mode,\n  setMode,\n}: {\n  mode: 'table' | 'card';\n  setMode: (mode: 'table' | 'card') => void;\n}) => (\n  <ViewModeContainer>\n    <div\n      role=\"button\"\n      tabIndex={0}\n      onClick={e => {\n        e.currentTarget.blur();\n        setMode('card');\n      }}\n      className={cx('toggle-button', { active: mode === 'card' })}\n    >\n      <Icons.AppstoreOutlined iconSize=\"xl\" />\n    </div>\n    <div\n      role=\"button\"\n      tabIndex={0}\n      onClick={e => {\n        e.currentTarget.blur();\n        setMode('table');\n      }}\n      className={cx('toggle-button', { active: mode === 'table' })}\n    >\n      <Icons.UnorderedListOutlined iconSize=\"xl\" />\n    </div>\n  </ViewModeContainer>\n);\n\nexport interface ListViewProps<T extends object = any> {\n  columns: any[];\n  data: T[];\n  count: number;\n  pageSize: number;\n  fetchData: (conf: FetchDataConfig) => any;\n  refreshData: () => void;\n  addSuccessToast: (msg: string) => void;\n  addDangerToast: (msg: string) => void;\n  loading: boolean;\n  className?: string;\n  initialSort?: SortColumn[];\n  filters?: Filters;\n  bulkActions?: Array<{\n    key: string;\n    name: ReactNode;\n    onSelect: (rows: any[]) => any;\n    type?: 'primary' | 'secondary' | 'danger';\n  }>;\n  bulkSelectEnabled?: boolean;\n  disableBulkSelect?: () => void;\n  renderBulkSelectCopy?: (selects: any[]) => ReactNode;\n  renderCard?: (row: T & { loading: boolean }) => ReactNode;\n  cardSortSelectOptions?: Array<CardSortSelectOption>;\n  defaultViewMode?: ViewModeType;\n  highlightRowId?: number;\n  showThumbnails?: boolean;\n  emptyState?: EmptyStateProps;\n  columnsForWrapText?: string[];\n  enableBulkTag?: boolean;\n  bulkTagResourceName?: string;\n}\n\nfunction ListView<T extends object = any>({\n  columns,\n  data,\n  count,\n  pageSize: initialPageSize,\n  fetchData,\n  refreshData,\n  loading,\n  initialSort = [],\n  className = '',\n  filters = [],\n  bulkActions = [],\n  bulkSelectEnabled = false,\n  disableBulkSelect = () => {},\n  renderBulkSelectCopy = selected => t('%s Selected', selected.length),\n  renderCard,\n  showThumbnails,\n  cardSortSelectOptions,\n  defaultViewMode = 'card',\n  highlightRowId,\n  emptyState,\n  columnsForWrapText,\n  enableBulkTag = false,\n  bulkTagResourceName,\n  addSuccessToast,\n  addDangerToast,\n}: ListViewProps<T>) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    pageCount = 1,\n    gotoPage,\n    applyFilterValue,\n    setSortBy,\n    selectedFlatRows,\n    toggleAllRowsSelected,\n    setViewMode,\n    state: { pageIndex, pageSize, internalFilters, sortBy, viewMode },\n    query,\n  } = useListViewState({\n    bulkSelectColumnConfig,\n    bulkSelectMode: bulkSelectEnabled && Boolean(bulkActions.length),\n    columns,\n    count,\n    data,\n    fetchData,\n    initialPageSize,\n    initialSort,\n    initialFilters: filters,\n    renderCard: Boolean(renderCard),\n    defaultViewMode,\n  });\n  const allowBulkTagActions = bulkTagResourceName && enableBulkTag;\n  const filterable = Boolean(filters.length);\n  if (filterable) {\n    const columnAccessors = columns.reduce(\n      (acc, col) => ({ ...acc, [col.id || col.accessor]: true }),\n      {},\n    );\n    filters.forEach(f => {\n      if (!columnAccessors[f.id]) {\n        throw new ListViewError(\n          `Invalid filter config, ${f.id} is not present in columns`,\n        );\n      }\n    });\n  }\n\n  const filterControlsRef = useRef<{ clearFilters: () => void }>(null);\n\n  const handleClearFilterControls = useCallback(() => {\n    if (query.filters) {\n      filterControlsRef.current?.clearFilters();\n    }\n  }, [query.filters]);\n\n  const cardViewEnabled = Boolean(renderCard);\n  const [showBulkTagModal, setShowBulkTagModal] = useState<boolean>(false);\n\n  useEffect(() => {\n    // discard selections if bulk select is disabled\n    if (!bulkSelectEnabled) toggleAllRowsSelected(false);\n  }, [bulkSelectEnabled, toggleAllRowsSelected]);\n\n  useEffect(() => {\n    if (!loading && pageIndex > pageCount - 1 && pageCount > 0) {\n      gotoPage(0);\n    }\n  }, [gotoPage, loading, pageCount, pageIndex]);\n\n  return (\n    <ListViewStyles>\n      {allowBulkTagActions && (\n        <BulkTagModal\n          show={showBulkTagModal}\n          selected={selectedFlatRows}\n          refreshData={refreshData}\n          resourceName={bulkTagResourceName}\n          addSuccessToast={addSuccessToast}\n          addDangerToast={addDangerToast}\n          onHide={() => setShowBulkTagModal(false)}\n        />\n      )}\n      <div data-test={className} className={`superset-list-view ${className}`}>\n        <div className=\"header\">\n          {cardViewEnabled && (\n            <ViewModeToggle mode={viewMode} setMode={setViewMode} />\n          )}\n          <div className=\"controls\" data-test=\"filters-select\">\n            {filterable && (\n              <FilterControls\n                ref={filterControlsRef}\n                filters={filters}\n                internalFilters={internalFilters}\n                updateFilterValue={applyFilterValue}\n              />\n            )}\n            {viewMode === 'card' && cardSortSelectOptions && (\n              <CardSortSelect\n                initialSort={sortBy}\n                onChange={(value: SortColumn[]) => setSortBy(value)}\n                options={cardSortSelectOptions}\n              />\n            )}\n          </div>\n        </div>\n        <div className={`body ${rows.length === 0 ? 'empty' : ''}`}>\n          {bulkSelectEnabled && (\n            <BulkSelectWrapper\n              data-test=\"bulk-select-controls\"\n              type=\"info\"\n              closable\n              showIcon={false}\n              onClose={disableBulkSelect}\n              message={\n                <>\n                  <div className=\"selectedCopy\" data-test=\"bulk-select-copy\">\n                    {renderBulkSelectCopy(selectedFlatRows)}\n                  </div>\n                  {Boolean(selectedFlatRows.length) && (\n                    <>\n                      <span\n                        data-test=\"bulk-select-deselect-all\"\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"deselect-all\"\n                        onClick={() => toggleAllRowsSelected(false)}\n                      >\n                        {t('Deselect all')}\n                      </span>\n                      <div className=\"divider\" />\n                      {bulkActions.map(action => (\n                        <Button\n                          data-test=\"bulk-select-action\"\n                          key={action.key}\n                          buttonStyle={action.type}\n                          cta\n                          onClick={() =>\n                            action.onSelect(\n                              selectedFlatRows.map(r => r.original),\n                            )\n                          }\n                        >\n                          {action.name}\n                        </Button>\n                      ))}\n                      {enableBulkTag && (\n                        <span\n                          data-test=\"bulk-select-tag-btn\"\n                          role=\"button\"\n                          tabIndex={0}\n                          className=\"tag-btn\"\n                          onClick={() => setShowBulkTagModal(true)}\n                        >\n                          {t('Add Tag')}\n                        </span>\n                      )}\n                    </>\n                  )}\n                </>\n              }\n            />\n          )}\n          {viewMode === 'card' && (\n            <CardCollection\n              bulkSelectEnabled={bulkSelectEnabled}\n              prepareRow={prepareRow}\n              renderCard={renderCard}\n              rows={rows}\n              loading={loading}\n              showThumbnails={showThumbnails}\n            />\n          )}\n          {viewMode === 'table' && (\n            <TableCollection\n              getTableProps={getTableProps}\n              getTableBodyProps={getTableBodyProps}\n              prepareRow={prepareRow}\n              headerGroups={headerGroups}\n              rows={rows}\n              columns={columns}\n              loading={loading}\n              highlightRowId={highlightRowId}\n              columnsForWrapText={columnsForWrapText}\n            />\n          )}\n          {!loading && rows.length === 0 && (\n            <EmptyWrapper className={viewMode} data-test=\"empty-state\">\n              {query.filters ? (\n                <EmptyState\n                  title={t('No results match your filter criteria')}\n                  description={t('Try different criteria to display results.')}\n                  size=\"large\"\n                  image=\"filter-results.svg\"\n                  buttonAction={() => handleClearFilterControls()}\n                  buttonText={t('clear all filters')}\n                />\n              ) : (\n                <EmptyState\n                  {...emptyState}\n                  title={emptyState?.title || t('No Data')}\n                  size=\"large\"\n                  image={emptyState?.image || 'filter-results.svg'}\n                />\n              )}\n            </EmptyWrapper>\n          )}\n        </div>\n      </div>\n      {rows.length > 0 && (\n        <div className=\"pagination-container\">\n          <Pagination\n            totalPages={pageCount || 0}\n            currentPage={pageCount && pageIndex < pageCount ? pageIndex + 1 : 0}\n            onChange={(p: number) => gotoPage(p - 1)}\n            hideFirstAndLastPageLinks\n          />\n          <div className=\"row-count-container\">\n            {!loading &&\n              t(\n                '%s-%s of %s',\n                pageSize * pageIndex + (rows.length && 1),\n                pageSize * pageIndex + rows.length,\n                count,\n              )}\n          </div>\n        </div>\n      )}\n    </ListViewStyles>\n  );\n}\n\nexport default ListView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}