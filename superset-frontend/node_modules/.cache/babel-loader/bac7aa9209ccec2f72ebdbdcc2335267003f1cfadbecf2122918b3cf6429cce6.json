{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useRef } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { css, styled, usePrevious, useTheme } from '@superset-ui/core';\nimport { Global } from '@emotion/react';\nimport { SQL_EDITOR_LEFTBAR_WIDTH } from 'src/SqlLab/constants';\nimport { queryEditorSetSelectedText } from 'src/SqlLab/actions/sqlLab';\nimport { FullSQLEditor as AceEditor } from 'src/components/AsyncAceEditor';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport { useAnnotations } from './useAnnotations';\nimport { useKeywords } from './useKeywords';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst StyledAceEditor = styled(AceEditor)`\n  ${({ theme }) => css`\n    && {\n      // double class is better than !important\n      border: 1px solid ${theme.colors.grayscale.light2};\n      font-feature-settings:\n        'liga' off,\n        'calt' off;\n    }\n  `}\n`;\nconst AceEditorWrapper = ({ autocomplete, onBlur = () => {}, onChange = () => {}, queryEditorId, onCursorPositionChange, height, hotkeys }) => {var _queryEditor$sql;\n  const dispatch = useDispatch();\n  const queryEditor = useQueryEditor(queryEditorId, [\n  'id',\n  'dbId',\n  'sql',\n  'catalog',\n  'schema',\n  'templateParams']\n  );\n  // Prevent a maximum update depth exceeded error\n  // by skipping access the unsaved query editor state\n  const cursorPosition = useSelector(({ sqlLab: { queryEditors } }) => {\n    const { cursorPosition } = {\n      ...queryEditors.find(({ id }) => id === queryEditorId)\n    };\n    return cursorPosition != null ? cursorPosition : { row: 0, column: 0 };\n  }, shallowEqual);\n  const currentSql = (_queryEditor$sql = queryEditor.sql) != null ? _queryEditor$sql : '';\n  const [sql, setSql] = useState(currentSql);\n  // The editor changeSelection is called multiple times in a row,\n  // faster than React reconciliation process, so the selected text\n  // needs to be stored out of the state to ensure changes to it\n  // get saved immediately\n  const currentSelectionCache = useRef('');\n  useEffect(() => {\n    // Making sure no text is selected from previous mount\n    dispatch(queryEditorSetSelectedText(queryEditor, null));\n  }, []);\n  const prevSql = usePrevious(currentSql);\n  useEffect(() => {\n    if (currentSql !== prevSql) {\n      setSql(currentSql);\n    }\n  }, [currentSql]);\n  const onBlurSql = () => {\n    onBlur(sql);\n  };\n  const onAltEnter = () => {\n    onBlur(sql);\n  };\n  const onEditorLoad = (editor) => {\n    editor.commands.addCommand({\n      name: 'runQuery',\n      bindKey: { win: 'Alt-enter', mac: 'Alt-enter' },\n      exec: () => {\n        onAltEnter();\n      }\n    });\n    hotkeys.forEach((keyConfig) => {\n      editor.commands.addCommand({\n        name: keyConfig.name,\n        bindKey: { win: keyConfig.key, mac: keyConfig.key },\n        exec: keyConfig.func\n      });\n    });\n    editor.$blockScrolling = Infinity; // eslint-disable-line no-param-reassign\n    editor.selection.on('changeSelection', () => {\n      const selectedText = editor.getSelectedText();\n      // Backspace trigger 1 character selection, ignoring\n      if (selectedText !== currentSelectionCache.current &&\n      selectedText.length !== 1) {\n        dispatch(queryEditorSetSelectedText(queryEditor, selectedText));\n      }\n      currentSelectionCache.current = selectedText;\n    });\n    editor.selection.on('changeCursor', () => {\n      const cursor = editor.getCursorPosition();\n      onCursorPositionChange(cursor);\n    });\n    const { row, column } = cursorPosition;\n    editor.moveCursorToPosition({ row, column });\n    editor.focus();\n    editor.scrollToLine(row, true, true);\n  };\n  const onChangeText = (text) => {\n    if (text !== sql) {\n      setSql(text);\n      onChange(text);\n    }\n  };\n  const { data: annotations } = useAnnotations({\n    dbId: queryEditor.dbId,\n    catalog: queryEditor.catalog,\n    schema: queryEditor.schema,\n    sql: currentSql,\n    templateParams: queryEditor.templateParams\n  });\n  const keywords = useKeywords({\n    queryEditorId,\n    dbId: queryEditor.dbId,\n    catalog: queryEditor.catalog,\n    schema: queryEditor.schema\n  }, !autocomplete);\n  const theme = useTheme();\n  return _jsxs(_Fragment, { children: [\n    _jsx(Global, { styles: css`\n          .ace_text-layer {\n            width: 100% !important;\n          }\n\n          .ace_autocomplete {\n            // Use !important because Ace Editor applies extra CSS at the last second\n            // when opening the autocomplete.\n            width: ${theme.gridUnit * 130}px !important;\n          }\n\n          .ace_tooltip {\n            max-width: ${SQL_EDITOR_LEFTBAR_WIDTH}px;\n          }\n\n          .ace_scroller {\n            background-color: ${theme.colors.grayscale.light4};\n          }\n        ` }),\n    _jsx(StyledAceEditor, { keywords: keywords, onLoad: onEditorLoad, onBlur: onBlurSql, height: height, onChange: onChangeText, width: \"100%\", editorProps: { $blockScrolling: true }, enableLiveAutocompletion: autocomplete, value: sql, annotations: annotations })] }\n  );\n};__signature__(AceEditorWrapper, \"useDispatch{dispatch}\\nuseQueryEditor{queryEditor}\\nuseSelector{cursorPosition}\\nuseState{[sql, setSql](currentSql)}\\nuseRef{currentSelectionCache}\\nuseEffect{}\\nusePrevious{prevSql}\\nuseEffect{}\\nuseAnnotations{{ data: annotations }}\\nuseKeywords{keywords}\\nuseTheme{theme}\", () => [useDispatch, useQueryEditor, useSelector, usePrevious, useAnnotations, useKeywords, useTheme]);const _default =\nAceEditorWrapper;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledAceEditor, \"StyledAceEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/index.tsx\");reactHotLoader.register(AceEditorWrapper, \"AceEditorWrapper\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useState","useEffect","useRef","shallowEqual","useDispatch","useSelector","css","styled","usePrevious","useTheme","Global","SQL_EDITOR_LEFTBAR_WIDTH","queryEditorSetSelectedText","FullSQLEditor","AceEditor","useQueryEditor","useAnnotations","useKeywords","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","StyledAceEditor","theme","colors","grayscale","light2","AceEditorWrapper","autocomplete","onBlur","onChange","queryEditorId","onCursorPositionChange","height","hotkeys","_queryEditor$sql","dispatch","queryEditor","cursorPosition","sqlLab","queryEditors","find","id","row","column","currentSql","sql","setSql","currentSelectionCache","prevSql","onBlurSql","onAltEnter","onEditorLoad","editor","commands","addCommand","name","bindKey","win","mac","exec","forEach","keyConfig","key","func","$blockScrolling","Infinity","selection","on","selectedText","getSelectedText","current","length","cursor","getCursorPosition","moveCursorToPosition","focus","scrollToLine","onChangeText","text","data","annotations","dbId","catalog","schema","templateParams","keywords","children","styles","gridUnit","light4","onLoad","width","editorProps","enableLiveAutocompletion","value","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/AceEditorWrapper/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useRef } from 'react';\nimport type { IAceEditor } from 'react-ace/lib/types';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { css, styled, usePrevious, useTheme } from '@superset-ui/core';\nimport { Global } from '@emotion/react';\n\nimport { SQL_EDITOR_LEFTBAR_WIDTH } from 'src/SqlLab/constants';\nimport { queryEditorSetSelectedText } from 'src/SqlLab/actions/sqlLab';\nimport { FullSQLEditor as AceEditor } from 'src/components/AsyncAceEditor';\nimport type { KeyboardShortcut } from 'src/SqlLab/components/KeyboardShortcutButton';\nimport useQueryEditor from 'src/SqlLab/hooks/useQueryEditor';\nimport { SqlLabRootState, type CursorPosition } from 'src/SqlLab/types';\nimport { useAnnotations } from './useAnnotations';\nimport { useKeywords } from './useKeywords';\n\ntype HotKey = {\n  key: KeyboardShortcut;\n  descr?: string;\n  name: string;\n  func: (aceEditor: IAceEditor) => void;\n};\n\ntype AceEditorWrapperProps = {\n  autocomplete: boolean;\n  onBlur: (sql: string) => void;\n  onChange: (sql: string) => void;\n  queryEditorId: string;\n  onCursorPositionChange: (position: CursorPosition) => void;\n  height: string;\n  hotkeys: HotKey[];\n};\n\nconst StyledAceEditor = styled(AceEditor)`\n  ${({ theme }) => css`\n    && {\n      // double class is better than !important\n      border: 1px solid ${theme.colors.grayscale.light2};\n      font-feature-settings:\n        'liga' off,\n        'calt' off;\n    }\n  `}\n`;\n\nconst AceEditorWrapper = ({\n  autocomplete,\n  onBlur = () => {},\n  onChange = () => {},\n  queryEditorId,\n  onCursorPositionChange,\n  height,\n  hotkeys,\n}: AceEditorWrapperProps) => {\n  const dispatch = useDispatch();\n  const queryEditor = useQueryEditor(queryEditorId, [\n    'id',\n    'dbId',\n    'sql',\n    'catalog',\n    'schema',\n    'templateParams',\n  ]);\n  // Prevent a maximum update depth exceeded error\n  // by skipping access the unsaved query editor state\n  const cursorPosition = useSelector<SqlLabRootState, CursorPosition>(\n    ({ sqlLab: { queryEditors } }) => {\n      const { cursorPosition } = {\n        ...queryEditors.find(({ id }) => id === queryEditorId),\n      };\n      return cursorPosition ?? { row: 0, column: 0 };\n    },\n    shallowEqual,\n  );\n\n  const currentSql = queryEditor.sql ?? '';\n  const [sql, setSql] = useState(currentSql);\n\n  // The editor changeSelection is called multiple times in a row,\n  // faster than React reconciliation process, so the selected text\n  // needs to be stored out of the state to ensure changes to it\n  // get saved immediately\n  const currentSelectionCache = useRef('');\n\n  useEffect(() => {\n    // Making sure no text is selected from previous mount\n    dispatch(queryEditorSetSelectedText(queryEditor, null));\n  }, []);\n\n  const prevSql = usePrevious(currentSql);\n\n  useEffect(() => {\n    if (currentSql !== prevSql) {\n      setSql(currentSql);\n    }\n  }, [currentSql]);\n\n  const onBlurSql = () => {\n    onBlur(sql);\n  };\n\n  const onAltEnter = () => {\n    onBlur(sql);\n  };\n\n  const onEditorLoad = (editor: any) => {\n    editor.commands.addCommand({\n      name: 'runQuery',\n      bindKey: { win: 'Alt-enter', mac: 'Alt-enter' },\n      exec: () => {\n        onAltEnter();\n      },\n    });\n\n    hotkeys.forEach(keyConfig => {\n      editor.commands.addCommand({\n        name: keyConfig.name,\n        bindKey: { win: keyConfig.key, mac: keyConfig.key },\n        exec: keyConfig.func,\n      });\n    });\n\n    editor.$blockScrolling = Infinity; // eslint-disable-line no-param-reassign\n    editor.selection.on('changeSelection', () => {\n      const selectedText = editor.getSelectedText();\n\n      // Backspace trigger 1 character selection, ignoring\n      if (\n        selectedText !== currentSelectionCache.current &&\n        selectedText.length !== 1\n      ) {\n        dispatch(queryEditorSetSelectedText(queryEditor, selectedText));\n      }\n\n      currentSelectionCache.current = selectedText;\n    });\n\n    editor.selection.on('changeCursor', () => {\n      const cursor = editor.getCursorPosition();\n      onCursorPositionChange(cursor);\n    });\n\n    const { row, column } = cursorPosition;\n    editor.moveCursorToPosition({ row, column });\n    editor.focus();\n    editor.scrollToLine(row, true, true);\n  };\n\n  const onChangeText = (text: string) => {\n    if (text !== sql) {\n      setSql(text);\n      onChange(text);\n    }\n  };\n\n  const { data: annotations } = useAnnotations({\n    dbId: queryEditor.dbId,\n    catalog: queryEditor.catalog,\n    schema: queryEditor.schema,\n    sql: currentSql,\n    templateParams: queryEditor.templateParams,\n  });\n\n  const keywords = useKeywords(\n    {\n      queryEditorId,\n      dbId: queryEditor.dbId,\n      catalog: queryEditor.catalog,\n      schema: queryEditor.schema,\n    },\n    !autocomplete,\n  );\n  const theme = useTheme();\n\n  return (\n    <>\n      <Global\n        styles={css`\n          .ace_text-layer {\n            width: 100% !important;\n          }\n\n          .ace_autocomplete {\n            // Use !important because Ace Editor applies extra CSS at the last second\n            // when opening the autocomplete.\n            width: ${theme.gridUnit * 130}px !important;\n          }\n\n          .ace_tooltip {\n            max-width: ${SQL_EDITOR_LEFTBAR_WIDTH}px;\n          }\n\n          .ace_scroller {\n            background-color: ${theme.colors.grayscale.light4};\n          }\n        `}\n      />\n      <StyledAceEditor\n        keywords={keywords}\n        onLoad={onEditorLoad}\n        onBlur={onBlurSql}\n        height={height}\n        onChange={onChangeText}\n        width=\"100%\"\n        editorProps={{ $blockScrolling: true }}\n        enableLiveAutocompletion={autocomplete}\n        value={sql}\n        annotations={annotations}\n      />\n    </>\n  );\n};\n\nexport default AceEditorWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}