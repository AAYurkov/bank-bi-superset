{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { makeSingleton } from '../utils';\nexport var LabelsColorMapSource;\n(function (LabelsColorMapSource) {\n  LabelsColorMapSource[LabelsColorMapSource[\"Dashboard\"] = 0] = \"Dashboard\";\n  LabelsColorMapSource[LabelsColorMapSource[\"Explore\"] = 1] = \"Explore\";\n})(LabelsColorMapSource || (LabelsColorMapSource = {}));\nexport class LabelsColorMap {\n\n\n\n  constructor() {this.chartsLabelsMap = void 0;this.colorMap = void 0;this.source = void 0;\n    // holds labels and original color schemes for each chart in context\n    this.chartsLabelsMap = new Map();\n    this.colorMap = new Map();\n    this.source = LabelsColorMapSource.Dashboard;\n  }\n  /**\n   * Wipes out the color map and updates it with the new color scheme.\n   *\n   * @param categoricalNamespace - the namespace to use for color mapping\n   * @param colorScheme - color scheme\n   */\n  updateColorMap(categoricalNamespace, colorScheme, merge = false) {\n    const newColorMap = this.colorMap;\n    if (!merge) {\n      newColorMap.clear();\n    }\n    this.chartsLabelsMap.forEach((chartConfig, sliceId) => {\n      const { labels, ownScheme } = chartConfig;\n      const appliedColorScheme = colorScheme || ownScheme;\n      const colorScale = categoricalNamespace.getScale(appliedColorScheme);\n      labels.forEach((label) => {\n        // if merge, apply the scheme only to new labels in the map\n        if (!merge || !this.colorMap.has(label)) {\n          const newColor = colorScale.getColor(label, sliceId, appliedColorScheme);\n          newColorMap.set(label, newColor);\n        }\n      });\n    });\n    this.colorMap = newColorMap;\n  }\n  getColorMap() {\n    return this.colorMap;\n  }\n  /**\n   *\n   * Called individually by each plugin via getColor fn.\n   *\n   * @param label - the label name\n   * @param color - the color\n   * @param sliceId - the chart id\n   * @param colorScheme - the color scheme\n   *\n   */\n  addSlice(label, color, sliceId, colorScheme) {\n    const chartConfig = this.chartsLabelsMap.get(sliceId) || {\n      labels: [],\n      scheme: undefined,\n      ownScheme: undefined\n    };\n    const { labels } = chartConfig;\n    if (!labels.includes(label)) {\n      labels.push(label);\n      this.chartsLabelsMap.set(sliceId, {\n        labels,\n        scheme: colorScheme,\n        ownScheme: chartConfig.ownScheme\n      });\n    }\n    if (this.source === LabelsColorMapSource.Dashboard) {\n      this.colorMap.set(label, color);\n    }\n  }\n  /**\n   * Used to make sure all slices respect their original scheme.\n   *\n   * @param sliceId - the chart id\n   * @param ownScheme - the color scheme\n   */\n  setOwnColorScheme(sliceId, ownScheme) {\n    const chartConfig = this.chartsLabelsMap.get(sliceId);\n    if (chartConfig) {\n      this.chartsLabelsMap.set(sliceId, {\n        ...chartConfig,\n        ownScheme\n      });\n    }\n  }\n  /**\n   * Remove a slice from the color map.\n   *\n   * @param sliceId - the chart\n   */\n  removeSlice(sliceId) {\n    if (this.source !== LabelsColorMapSource.Dashboard)\n    return;\n    this.chartsLabelsMap.delete(sliceId);\n    const newColorMap = new Map();\n    this.chartsLabelsMap.forEach((chartConfig) => {\n      const { labels } = chartConfig;\n      labels.forEach((label) => {\n        newColorMap.set(label, this.colorMap.get(label));\n      });\n    });\n    this.colorMap = newColorMap;\n  }\n  /**\n   * Clear the shared labels color map.\n   */\n  clear() {\n    this.colorMap.clear();\n  }\n  /**\n   * Clears all maps\n   */\n  reset() {\n    this.clear();\n    this.chartsLabelsMap.clear();\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}const getInstance = makeSingleton(LabelsColorMap);const _default =\ngetInstance;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(LabelsColorMapSource, \"LabelsColorMapSource\", \"/Users/aryurkov/superset/superset-frontend/packages/superset-ui-core/src/color/LabelsColorMapSingleton.ts\");reactHotLoader.register(LabelsColorMap, \"LabelsColorMap\", \"/Users/aryurkov/superset/superset-frontend/packages/superset-ui-core/src/color/LabelsColorMapSingleton.ts\");reactHotLoader.register(getInstance, \"getInstance\", \"/Users/aryurkov/superset/superset-frontend/packages/superset-ui-core/src/color/LabelsColorMapSingleton.ts\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/packages/superset-ui-core/src/color/LabelsColorMapSingleton.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["makeSingleton","LabelsColorMapSource","LabelsColorMap","constructor","chartsLabelsMap","colorMap","source","Map","Dashboard","updateColorMap","categoricalNamespace","colorScheme","merge","newColorMap","clear","forEach","chartConfig","sliceId","labels","ownScheme","appliedColorScheme","colorScale","getScale","label","has","newColor","getColor","set","getColorMap","addSlice","color","get","scheme","undefined","includes","push","setOwnColorScheme","removeSlice","delete","reset","__reactstandin__regenerateByEval","key","code","eval","getInstance","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/packages/superset-ui-core/src/color/LabelsColorMapSingleton.ts"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { makeSingleton } from '../utils';\nimport CategoricalColorNamespace from './CategoricalColorNamespace';\n\nexport enum LabelsColorMapSource {\n  Dashboard,\n  Explore,\n}\n\nexport class LabelsColorMap {\n  chartsLabelsMap: Map<\n    number,\n    { labels: string[]; scheme?: string; ownScheme?: string }\n  >;\n\n  colorMap: Map<string, string>;\n\n  source: LabelsColorMapSource;\n\n  constructor() {\n    // holds labels and original color schemes for each chart in context\n    this.chartsLabelsMap = new Map();\n    this.colorMap = new Map();\n    this.source = LabelsColorMapSource.Dashboard;\n  }\n\n  /**\n   * Wipes out the color map and updates it with the new color scheme.\n   *\n   * @param categoricalNamespace - the namespace to use for color mapping\n   * @param colorScheme - color scheme\n   */\n  updateColorMap(\n    categoricalNamespace: CategoricalColorNamespace,\n    colorScheme?: string,\n    merge = false,\n  ) {\n    const newColorMap = this.colorMap;\n\n    if (!merge) {\n      newColorMap.clear();\n    }\n\n    this.chartsLabelsMap.forEach((chartConfig, sliceId) => {\n      const { labels, ownScheme } = chartConfig;\n      const appliedColorScheme = colorScheme || ownScheme;\n      const colorScale = categoricalNamespace.getScale(appliedColorScheme);\n\n      labels.forEach(label => {\n        // if merge, apply the scheme only to new labels in the map\n        if (!merge || !this.colorMap.has(label)) {\n          const newColor = colorScale.getColor(\n            label,\n            sliceId,\n            appliedColorScheme,\n          );\n          newColorMap.set(label, newColor);\n        }\n      });\n    });\n    this.colorMap = newColorMap;\n  }\n\n  getColorMap() {\n    return this.colorMap;\n  }\n\n  /**\n   *\n   * Called individually by each plugin via getColor fn.\n   *\n   * @param label - the label name\n   * @param color - the color\n   * @param sliceId - the chart id\n   * @param colorScheme - the color scheme\n   *\n   */\n  addSlice(\n    label: string,\n    color: string,\n    sliceId: number,\n    colorScheme?: string,\n  ) {\n    const chartConfig = this.chartsLabelsMap.get(sliceId) || {\n      labels: [],\n      scheme: undefined,\n      ownScheme: undefined,\n    };\n\n    const { labels } = chartConfig;\n    if (!labels.includes(label)) {\n      labels.push(label);\n      this.chartsLabelsMap.set(sliceId, {\n        labels,\n        scheme: colorScheme,\n        ownScheme: chartConfig.ownScheme,\n      });\n    }\n    if (this.source === LabelsColorMapSource.Dashboard) {\n      this.colorMap.set(label, color);\n    }\n  }\n\n  /**\n   * Used to make sure all slices respect their original scheme.\n   *\n   * @param sliceId - the chart id\n   * @param ownScheme - the color scheme\n   */\n  setOwnColorScheme(sliceId: number, ownScheme: string) {\n    const chartConfig = this.chartsLabelsMap.get(sliceId);\n    if (chartConfig) {\n      this.chartsLabelsMap.set(sliceId, {\n        ...chartConfig,\n        ownScheme,\n      });\n    }\n  }\n\n  /**\n   * Remove a slice from the color map.\n   *\n   * @param sliceId - the chart\n   */\n  removeSlice(sliceId: number) {\n    if (this.source !== LabelsColorMapSource.Dashboard) return;\n\n    this.chartsLabelsMap.delete(sliceId);\n    const newColorMap = new Map();\n\n    this.chartsLabelsMap.forEach(chartConfig => {\n      const { labels } = chartConfig;\n      labels.forEach(label => {\n        newColorMap.set(label, this.colorMap.get(label));\n      });\n    });\n    this.colorMap = newColorMap;\n  }\n\n  /**\n   * Clear the shared labels color map.\n   */\n  clear() {\n    this.colorMap.clear();\n  }\n\n  /**\n   * Clears all maps\n   */\n  reset() {\n    this.clear();\n    this.chartsLabelsMap.clear();\n  }\n}\n\nconst getInstance = makeSingleton(LabelsColorMap);\n\nexport default getInstance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}