{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { css, styled, t } from '@superset-ui/core';\n// eslint-disable-next-line no-restricted-imports\nimport { Button, Form, Tabs } from 'antd'; // TODO: Remove antd\nimport { mix } from 'polished';\nimport WfsDataParser from 'geostyler-wfs-parser';\nimport { useEffect, useState } from 'react';\nimport { isWfsLayerConf, isWmsLayerConf, isXyzLayerConf } from './typeguards';\nimport { getServiceVersions, hasAllRequiredWfsParams } from './serviceUtil';\nimport { ControlFormItem } from '../ColumnConfigControl/ControlForm';\nimport GeoStylerWrapper from './GeoStylerWrapper';\n// Enum for the different tabs\nimport { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";const LAYER_CONFIG_TABS = {\n  LAYER: '1',\n  GEOSTYLER: '2'\n};\nexport const StyledButtonContainer = styled.div`\n  display: flex;\n  margin: 8px;\n`;\nexport const StyledCloseButton = styled(Button)`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-right: 4px;\n    line-height: 1.5715;\n    border-radius: ${theme.borderRadius}px;\n    background-color: ${theme.colors.primary.light4};\n    color: ${theme.colors.primary.dark1};\n    font-size: ${theme.typography.sizes.s}px;\n    font-weight: ${theme.typography.weights.bold};\n    text-transform: uppercase;\n    min-width: ${theme.gridUnit * 36};\n    min-height: ${theme.gridUnit * 8};\n    box-shadow: none;\n    border-width: 0px;\n    border-style: none;\n    border-color: transparent;\n    &:hover {\n      background-color: ${mix(0.1, theme.colors.primary.base, theme.colors.primary.light4)};\n      color: ${theme.colors.primary.dark1};\n    }\n  `}\n`;\nexport const StyledControlFormItem = styled(ControlFormItem)`\n  ${({ theme }) => css`\n    border-radius: ${theme.borderRadius}px;\n  `}\n`;\nexport const StyledControlNumberFormItem = styled(ControlFormItem)`\n  ${({ theme }) => css`\n    border-radius: ${theme.borderRadius}px;\n    width: 100%;\n  `}\n`;\nexport const StyledGeoStyler = styled(GeoStylerWrapper)`\n  ${({ theme }) => css`\n    h2 {\n      font-weight: ${theme.typography.weights.normal};\n      font-size: ${theme.typography.sizes.xl}px;\n    }\n    .ant-form-item-control {\n      flex: unset;\n    }\n  `}\n`;\nexport const StyledSaveButton = styled(Button)`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-left: 4px;\n    line-height: 1.5715;\n    border-radius: ${theme.borderRadius}px;\n    background-color: ${theme.colors.primary.base};\n    color: ${theme.colors.grayscale.light5};\n    font-size: ${theme.typography.sizes.s}px;\n    font-weight: ${theme.typography.weights.bold};\n    text-transform: uppercase;\n    min-width: ${theme.gridUnit * 36};\n    min-height: ${theme.gridUnit * 8};\n    box-shadow: none;\n    border-width: 0px;\n    border-style: none;\n    border-color: transparent;\n    &:hover {\n      background-color: ${theme.colors.primary.dark1};\n    }\n  `}\n`;\nexport const LayerConfigsPopoverContent = ({ onClose = () => {}, onSave = () => {}, layerConf }) => {\n  const [currentLayerConf, setCurrentLayerConf] = useState(layerConf);\n  const initialWmsVersion = layerConf.type === 'WMS' ? layerConf.version : undefined;\n  const [wmsVersion, setWmsVersion] = useState(initialWmsVersion);\n  const initialWfsVersion = layerConf.type === 'WFS' ? layerConf.version : undefined;\n  const [wfsVersion, setWfsVersion] = useState(initialWfsVersion);\n  const [geostylerData, setGeoStylerData] = useState(undefined);\n  const serviceVersions = getServiceVersions();\n  // This is needed to force mounting the form every time\n  // we get a new layerConf prop. Otherwise the input fields\n  // will not be updated properly, since ControlFormItem only\n  // recognises the `value` property once and then handles the\n  // values in its on state. Remounting creates a new component\n  // and thereby starts with a fresh state.\n  const [formKey, setFormKey] = useState(0);\n  useEffect(() => {\n    setCurrentLayerConf({ ...layerConf });\n    setFormKey((oldFormKey) => oldFormKey + 1);\n  }, [layerConf]);\n  const onFieldValueChange = (value, key) => {\n    setCurrentLayerConf({\n      ...currentLayerConf,\n      [key]: value\n    });\n  };\n  const onLayerTypeChange = (value) => {\n    if (value === 'WFS') {\n      setCurrentLayerConf({\n        ...currentLayerConf,\n        type: value,\n        version: serviceVersions[value][0],\n        style: {\n          name: 'Default Style',\n          rules: [\n          {\n            name: 'Default Rule',\n            symbolizers: [\n            {\n              kind: 'Line',\n              // eslint-disable-next-line theme-colors/no-literal-colors\n              color: '#000000',\n              width: 2\n            },\n            {\n              kind: 'Mark',\n              wellKnownName: 'circle',\n              // eslint-disable-next-line theme-colors/no-literal-colors\n              color: '#000000'\n            },\n            {\n              kind: 'Fill',\n              // eslint-disable-next-line theme-colors/no-literal-colors\n              color: '#000000'\n            }]\n\n          }]\n\n        }\n      });\n    } else\n    if (value === 'XYZ') {\n      setCurrentLayerConf({\n        ...currentLayerConf,\n        type: value\n      });\n    } else\n    {\n      setCurrentLayerConf({\n        ...currentLayerConf,\n        type: value,\n        version: serviceVersions[value][0]\n      });\n    }\n  };\n  const onLayerTitleChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'title');\n  };\n  const onLayerUrlChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'url');\n  };\n  const onLayersParamChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'layersParam');\n  };\n  const onTypeNameChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'typeName');\n  };\n  const onWmsVersionChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'version');\n    setWmsVersion(fieldValue);\n  };\n  const onWfsVersionChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'version');\n    setWfsVersion(fieldValue);\n  };\n  const onMaxFeaturesChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'maxFeatures');\n  };\n  const onStyleChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'style');\n  };\n  const onAttributionChange = (fieldValue) => {\n    onFieldValueChange(fieldValue, 'attribution');\n  };\n  const onCloseClick = () => {\n    onClose();\n  };\n  const onSaveClick = () => {\n    const baseConfs = {\n      title: currentLayerConf.title,\n      url: currentLayerConf.url,\n      type: currentLayerConf.type,\n      attribution: currentLayerConf.attribution\n    };\n    let conf;\n    if (isWmsLayerConf(currentLayerConf)) {\n      conf = {\n        ...baseConfs,\n        version: currentLayerConf.version,\n        type: currentLayerConf.type,\n        layersParam: currentLayerConf.layersParam\n      };\n    } else\n    if (isXyzLayerConf(currentLayerConf)) {\n      conf = {\n        ...baseConfs,\n        type: currentLayerConf.type\n      };\n    } else\n    {\n      conf = {\n        ...baseConfs,\n        type: currentLayerConf.type,\n        version: currentLayerConf.version,\n        typeName: currentLayerConf.typeName,\n        maxFeatures: currentLayerConf.maxFeatures,\n        style: currentLayerConf.style\n      };\n    }\n    onSave(conf);\n  };\n  useEffect(() => {\n    if (!isWfsLayerConf(currentLayerConf) ||\n    !hasAllRequiredWfsParams(currentLayerConf)) {\n      setGeoStylerData(undefined);\n      return undefined;\n    }\n    const readWfsData = async (conf) => {\n      const wfsParser = new WfsDataParser();\n      try {\n        let requestParams = {};\n        if (conf.version.startsWith('1.')) {\n          requestParams = {\n            version: conf.version,\n            maxFeatures: conf.maxFeatures,\n            typeName: conf.typeName\n          };\n        }\n        if (conf.version.startsWith('2.')) {\n          requestParams = {\n            version: conf.version,\n            count: conf.maxFeatures,\n            typeNames: conf.typeName\n          };\n        }\n        const gsData = await wfsParser.readData({\n          url: conf.url,\n          requestParams\n        });\n        setGeoStylerData(gsData);\n      }\n      catch {\n        console.warn('Could not read geostyler data');\n        setGeoStylerData(undefined);\n      }\n    };\n    // debounce function\n    const timer = setTimeout(() => readWfsData(currentLayerConf), 500);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [currentLayerConf]);\n  const layerTabLabel = t('Layer');\n  const styleTabLabel = t('Style');\n  const layerTypeLabel = t('Layer type');\n  const layerTypeDescription = t('The type of the layer');\n  const serviceVersionLabel = t('Service version');\n  const serviceVersionDescription = t('The version of the service');\n  const layersParamLabel = t('Layer Name');\n  const layersParamDescription = t('The name of the layer as described in GetCapabilities');\n  const layersParamPlaceholder = t('Layer Name');\n  const layerTitleLabel = t('Layer title');\n  const layerTitleDescription = t('The visible title of the layer');\n  const layerTitlePlaceholder = t('Insert Layer title');\n  const layerUrlLabel = t('Layer URL');\n  const layerUrlDescription = t('The service url of the layer');\n  const layerUrlPlaceholder = t('Insert Layer URL');\n  const maxFeaturesLabel = t('Max. features');\n  const maxFeaturesDescription = t('Maximum number of features to fetch from service');\n  const maxFeaturesPlaceholder = t('10000');\n  const attributionLabel = t('Attribution');\n  const attributionDescription = t('The layer attribution');\n  const attributionPlaceholder = t('© Layer attribution');\n  const wmsVersionOptions = serviceVersions.WMS.map((version) => ({ value: version, label: version }));\n  const wfsVersionOptions = serviceVersions.WFS.map((version) => ({ value: version, label: version }));\n  return _jsx(\"div\", { children:\n    _jsxs(Form, { children: [\n      _jsxs(Tabs, { defaultActiveKey: LAYER_CONFIG_TABS.LAYER, children: [\n        _jsxs(Tabs.TabPane, { tab: layerTabLabel, children: [\n          _jsx(StyledControlFormItem, { controlType: \"Input\", label: layerUrlLabel, description: layerUrlDescription, placeholder: layerUrlPlaceholder, value: currentLayerConf.url, name: \"url\", onChange: onLayerUrlChange }),\n          _jsx(StyledControlFormItem, { controlType: \"Select\", label: layerTypeLabel, description: layerTypeDescription, options: [\n            { value: 'WMS', label: t('WMS') },\n            { value: 'WFS', label: t('WFS') },\n            { value: 'XYZ', label: t('XYZ') }],\n            value: currentLayerConf.type, defaultValue: currentLayerConf.type, name: \"type\", onChange: onLayerTypeChange }),\n          isWmsLayerConf(currentLayerConf) && _jsx(StyledControlFormItem, { controlType: \"Select\", label: serviceVersionLabel, description: serviceVersionDescription, options: wmsVersionOptions, value: wmsVersion, defaultValue: wmsVersionOptions[0].value, name: \"wmsVersion\", onChange: onWmsVersionChange }),\n          isWfsLayerConf(currentLayerConf) && _jsx(StyledControlFormItem, { controlType: \"Select\", label: serviceVersionLabel, description: serviceVersionDescription, options: wfsVersionOptions, value: wfsVersion, defaultValue: wfsVersionOptions[0].value, name: \"wfsVersion\", onChange: onWfsVersionChange }),\n          isWmsLayerConf(currentLayerConf) && _jsx(StyledControlFormItem, { controlType: \"Input\", label: layersParamLabel, description: layersParamDescription, placeholder: layersParamPlaceholder, value: currentLayerConf.layersParam, name: \"layersParam\", onChange: onLayersParamChange }),\n          isWfsLayerConf(currentLayerConf) && _jsx(StyledControlFormItem, { controlType: \"Input\", label: layersParamLabel, description: layersParamDescription, placeholder: layersParamPlaceholder, value: currentLayerConf.typeName, name: \"typeName\", onChange: onTypeNameChange }),\n          _jsx(StyledControlFormItem, { controlType: \"Input\", label: layerTitleLabel, description: layerTitleDescription, placeholder: layerTitlePlaceholder, value: currentLayerConf.title, name: \"title\", onChange: onLayerTitleChange }),\n          isWfsLayerConf(currentLayerConf) && _jsx(StyledControlNumberFormItem, { controlType: \"InputNumber\", label: maxFeaturesLabel, description: maxFeaturesDescription, placeholder: maxFeaturesPlaceholder, value: currentLayerConf.maxFeatures, name: \"maxFeatures\", onChange: onMaxFeaturesChange }),\n          _jsx(StyledControlFormItem, { controlType: \"Input\", label: attributionLabel, description: attributionDescription, placeholder: attributionPlaceholder, value: currentLayerConf.attribution, name: \"attribution\", onChange: onAttributionChange })] }, LAYER_CONFIG_TABS.LAYER\n        ),\n        _jsx(Tabs.TabPane, { tab: styleTabLabel, disabled: !isWfsLayerConf(currentLayerConf), children:\n          isWfsLayerConf(currentLayerConf) && _jsx(StyledGeoStyler, { style: currentLayerConf.style, onStyleChange: onStyleChange, data: geostylerData }) }, LAYER_CONFIG_TABS.GEOSTYLER\n        )] }\n      ),\n      _jsxs(StyledButtonContainer, { children: [\n        _jsx(StyledCloseButton, { type: \"default\", onClick: onCloseClick, children:\n          t('Close') }\n        ),\n        _jsx(StyledSaveButton, { type: \"primary\", onClick: onSaveClick, children:\n          t('Save') }\n        )] }\n      )] }, JSON.stringify(formKey)\n    ) }\n  );\n};__signature__(LayerConfigsPopoverContent, \"useState{[currentLayerConf, setCurrentLayerConf](layerConf)}\\nuseState{[wmsVersion, setWmsVersion](initialWmsVersion)}\\nuseState{[wfsVersion, setWfsVersion](initialWfsVersion)}\\nuseState{[geostylerData, setGeoStylerData](undefined)}\\nuseState{[formKey, setFormKey](0)}\\nuseEffect{}\\nuseEffect{}\");const _default =\nLayerConfigsPopoverContent;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(LAYER_CONFIG_TABS, \"LAYER_CONFIG_TABS\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/LayerConfigsControl/LayerConfigsPopoverContent.tsx\");reactHotLoader.register(StyledButtonContainer, \"StyledButtonContainer\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/LayerConfigsControl/LayerConfigsPopoverContent.tsx\");reactHotLoader.register(StyledCloseButton, \"StyledCloseButton\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/LayerConfigsControl/LayerConfigsPopoverContent.tsx\");reactHotLoader.register(StyledControlFormItem, \"StyledControlFormItem\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/LayerConfigsControl/LayerConfigsPopoverContent.tsx\");reactHotLoader.register(StyledControlNumberFormItem, \"StyledControlNumberFormItem\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/LayerConfigsControl/LayerConfigsPopoverContent.tsx\");reactHotLoader.register(StyledGeoStyler, \"StyledGeoStyler\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/LayerConfigsControl/LayerConfigsPopoverContent.tsx\");reactHotLoader.register(StyledSaveButton, \"StyledSaveButton\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/LayerConfigsControl/LayerConfigsPopoverContent.tsx\");reactHotLoader.register(LayerConfigsPopoverContent, \"LayerConfigsPopoverContent\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/LayerConfigsControl/LayerConfigsPopoverContent.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/LayerConfigsControl/LayerConfigsPopoverContent.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["css","styled","t","Button","Form","Tabs","mix","WfsDataParser","useEffect","useState","isWfsLayerConf","isWmsLayerConf","isXyzLayerConf","getServiceVersions","hasAllRequiredWfsParams","ControlFormItem","GeoStylerWrapper","jsx","_jsx","jsxs","_jsxs","LAYER_CONFIG_TABS","LAYER","GEOSTYLER","StyledButtonContainer","div","StyledCloseButton","theme","borderRadius","colors","primary","light4","dark1","typography","sizes","s","weights","bold","gridUnit","base","StyledControlFormItem","StyledControlNumberFormItem","StyledGeoStyler","normal","xl","StyledSaveButton","grayscale","light5","LayerConfigsPopoverContent","onClose","onSave","layerConf","currentLayerConf","setCurrentLayerConf","initialWmsVersion","type","version","undefined","wmsVersion","setWmsVersion","initialWfsVersion","wfsVersion","setWfsVersion","geostylerData","setGeoStylerData","serviceVersions","formKey","setFormKey","oldFormKey","onFieldValueChange","value","key","onLayerTypeChange","style","name","rules","symbolizers","kind","color","width","wellKnownName","onLayerTitleChange","fieldValue","onLayerUrlChange","onLayersParamChange","onTypeNameChange","onWmsVersionChange","onWfsVersionChange","onMaxFeaturesChange","onStyleChange","onAttributionChange","onCloseClick","onSaveClick","baseConfs","title","url","attribution","conf","layersParam","typeName","maxFeatures","readWfsData","wfsParser","requestParams","startsWith","count","typeNames","gsData","readData","console","warn","timer","setTimeout","clearTimeout","layerTabLabel","styleTabLabel","layerTypeLabel","layerTypeDescription","serviceVersionLabel","serviceVersionDescription","layersParamLabel","layersParamDescription","layersParamPlaceholder","layerTitleLabel","layerTitleDescription","layerTitlePlaceholder","layerUrlLabel","layerUrlDescription","layerUrlPlaceholder","maxFeaturesLabel","maxFeaturesDescription","maxFeaturesPlaceholder","attributionLabel","attributionDescription","attributionPlaceholder","wmsVersionOptions","WMS","map","label","wfsVersionOptions","WFS","children","defaultActiveKey","TabPane","tab","controlType","description","placeholder","onChange","options","defaultValue","disabled","data","onClick","JSON","stringify","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/LayerConfigsControl/LayerConfigsPopoverContent.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { css, JsonValue, styled, t } from '@superset-ui/core';\n// eslint-disable-next-line no-restricted-imports\nimport { Button, Form, Tabs } from 'antd'; // TODO: Remove antd\nimport { mix } from 'polished';\nimport { Data as GsData } from 'geostyler-data';\nimport { Style as GsStyle } from 'geostyler-style';\nimport WfsDataParser, {\n  RequestParams1_1_0,\n  RequestParams2_0_0,\n} from 'geostyler-wfs-parser';\nimport { FC, useEffect, useState } from 'react';\nimport { isWfsLayerConf, isWmsLayerConf, isXyzLayerConf } from './typeguards';\nimport {\n  BaseLayerConf,\n  LayerConf,\n  LayerConfigsPopoverContentProps,\n  WfsLayerConf,\n  WmsLayerConf,\n  XyzLayerConf,\n} from './types';\nimport { getServiceVersions, hasAllRequiredWfsParams } from './serviceUtil';\nimport { ControlFormItem } from '../ColumnConfigControl/ControlForm';\nimport GeoStylerWrapper from './GeoStylerWrapper';\n\n// Enum for the different tabs\nconst LAYER_CONFIG_TABS = {\n  LAYER: '1',\n  GEOSTYLER: '2',\n};\n\nexport const StyledButtonContainer = styled.div`\n  display: flex;\n  margin: 8px;\n`;\n\nexport const StyledCloseButton = styled(Button)`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-right: 4px;\n    line-height: 1.5715;\n    border-radius: ${theme.borderRadius}px;\n    background-color: ${theme.colors.primary.light4};\n    color: ${theme.colors.primary.dark1};\n    font-size: ${theme.typography.sizes.s}px;\n    font-weight: ${theme.typography.weights.bold};\n    text-transform: uppercase;\n    min-width: ${theme.gridUnit * 36};\n    min-height: ${theme.gridUnit * 8};\n    box-shadow: none;\n    border-width: 0px;\n    border-style: none;\n    border-color: transparent;\n    &:hover {\n      background-color: ${mix(\n        0.1,\n        theme.colors.primary.base,\n        theme.colors.primary.light4,\n      )};\n      color: ${theme.colors.primary.dark1};\n    }\n  `}\n`;\n\nexport const StyledControlFormItem = styled(ControlFormItem)`\n  ${({ theme }) => css`\n    border-radius: ${theme.borderRadius}px;\n  `}\n`;\n\nexport const StyledControlNumberFormItem = styled(ControlFormItem)`\n  ${({ theme }) => css`\n    border-radius: ${theme.borderRadius}px;\n    width: 100%;\n  `}\n`;\n\nexport const StyledGeoStyler = styled(GeoStylerWrapper)`\n  ${({ theme }) => css`\n    h2 {\n      font-weight: ${theme.typography.weights.normal};\n      font-size: ${theme.typography.sizes.xl}px;\n    }\n    .ant-form-item-control {\n      flex: unset;\n    }\n  `}\n`;\n\nexport const StyledSaveButton = styled(Button)`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-left: 4px;\n    line-height: 1.5715;\n    border-radius: ${theme.borderRadius}px;\n    background-color: ${theme.colors.primary.base};\n    color: ${theme.colors.grayscale.light5};\n    font-size: ${theme.typography.sizes.s}px;\n    font-weight: ${theme.typography.weights.bold};\n    text-transform: uppercase;\n    min-width: ${theme.gridUnit * 36};\n    min-height: ${theme.gridUnit * 8};\n    box-shadow: none;\n    border-width: 0px;\n    border-style: none;\n    border-color: transparent;\n    &:hover {\n      background-color: ${theme.colors.primary.dark1};\n    }\n  `}\n`;\n\nexport const LayerConfigsPopoverContent: FC<\n  LayerConfigsPopoverContentProps\n> = ({ onClose = () => {}, onSave = () => {}, layerConf }) => {\n  const [currentLayerConf, setCurrentLayerConf] =\n    useState<LayerConf>(layerConf);\n  const initialWmsVersion =\n    layerConf.type === 'WMS' ? layerConf.version : undefined;\n  const [wmsVersion, setWmsVersion] = useState<string | undefined>(\n    initialWmsVersion,\n  );\n  const initialWfsVersion =\n    layerConf.type === 'WFS' ? layerConf.version : undefined;\n  const [wfsVersion, setWfsVersion] = useState<string | undefined>(\n    initialWfsVersion,\n  );\n  const [geostylerData, setGeoStylerData] = useState<GsData | undefined>(\n    undefined,\n  );\n\n  const serviceVersions = getServiceVersions();\n\n  // This is needed to force mounting the form every time\n  // we get a new layerConf prop. Otherwise the input fields\n  // will not be updated properly, since ControlFormItem only\n  // recognises the `value` property once and then handles the\n  // values in its on state. Remounting creates a new component\n  // and thereby starts with a fresh state.\n  const [formKey, setFormKey] = useState<number>(0);\n\n  useEffect(() => {\n    setCurrentLayerConf({ ...layerConf });\n    setFormKey(oldFormKey => oldFormKey + 1);\n  }, [layerConf]);\n\n  const onFieldValueChange = (value: JsonValue, key: string) => {\n    setCurrentLayerConf({\n      ...currentLayerConf,\n      [key]: value,\n    });\n  };\n\n  const onLayerTypeChange = (value: LayerConf['type']) => {\n    if (value === 'WFS') {\n      setCurrentLayerConf({\n        ...currentLayerConf,\n        type: value,\n        version: serviceVersions[value][0],\n        style: {\n          name: 'Default Style',\n          rules: [\n            {\n              name: 'Default Rule',\n              symbolizers: [\n                {\n                  kind: 'Line',\n                  // eslint-disable-next-line theme-colors/no-literal-colors\n                  color: '#000000',\n                  width: 2,\n                },\n                {\n                  kind: 'Mark',\n                  wellKnownName: 'circle',\n                  // eslint-disable-next-line theme-colors/no-literal-colors\n                  color: '#000000',\n                },\n                {\n                  kind: 'Fill',\n                  // eslint-disable-next-line theme-colors/no-literal-colors\n                  color: '#000000',\n                },\n              ],\n            },\n          ],\n        },\n      } as WfsLayerConf);\n    } else if (value === 'XYZ') {\n      setCurrentLayerConf({\n        ...currentLayerConf,\n        type: value,\n      } as XyzLayerConf);\n    } else {\n      setCurrentLayerConf({\n        ...currentLayerConf,\n        type: value,\n        version: serviceVersions[value][0],\n      } as WmsLayerConf);\n    }\n  };\n\n  const onLayerTitleChange = (fieldValue: string) => {\n    onFieldValueChange(fieldValue, 'title');\n  };\n\n  const onLayerUrlChange = (fieldValue: string) => {\n    onFieldValueChange(fieldValue, 'url');\n  };\n\n  const onLayersParamChange = (fieldValue: string) => {\n    onFieldValueChange(fieldValue, 'layersParam');\n  };\n\n  const onTypeNameChange = (fieldValue: string) => {\n    onFieldValueChange(fieldValue, 'typeName');\n  };\n\n  const onWmsVersionChange = (fieldValue: string) => {\n    onFieldValueChange(fieldValue, 'version');\n    setWmsVersion(fieldValue);\n  };\n\n  const onWfsVersionChange = (fieldValue: string) => {\n    onFieldValueChange(fieldValue, 'version');\n    setWfsVersion(fieldValue);\n  };\n\n  const onMaxFeaturesChange = (fieldValue: number) => {\n    onFieldValueChange(fieldValue, 'maxFeatures');\n  };\n\n  const onStyleChange = (fieldValue: GsStyle) => {\n    onFieldValueChange(fieldValue, 'style');\n  };\n\n  const onAttributionChange = (fieldValue: string) => {\n    onFieldValueChange(fieldValue, 'attribution');\n  };\n\n  const onCloseClick = () => {\n    onClose();\n  };\n\n  const onSaveClick = () => {\n    const baseConfs: BaseLayerConf = {\n      title: currentLayerConf.title,\n      url: currentLayerConf.url,\n      type: currentLayerConf.type,\n      attribution: currentLayerConf.attribution,\n    };\n\n    let conf: LayerConf;\n    if (isWmsLayerConf(currentLayerConf)) {\n      conf = {\n        ...baseConfs,\n        version: currentLayerConf.version,\n        type: currentLayerConf.type,\n        layersParam: currentLayerConf.layersParam,\n      };\n    } else if (isXyzLayerConf(currentLayerConf)) {\n      conf = {\n        ...baseConfs,\n        type: currentLayerConf.type,\n      };\n    } else {\n      conf = {\n        ...baseConfs,\n        type: currentLayerConf.type,\n        version: currentLayerConf.version,\n        typeName: currentLayerConf.typeName,\n        maxFeatures: currentLayerConf.maxFeatures,\n        style: currentLayerConf.style,\n      };\n    }\n\n    onSave(conf);\n  };\n\n  useEffect(() => {\n    if (\n      !isWfsLayerConf(currentLayerConf) ||\n      !hasAllRequiredWfsParams(currentLayerConf)\n    ) {\n      setGeoStylerData(undefined);\n      return undefined;\n    }\n\n    const readWfsData = async (conf: WfsLayerConf) => {\n      const wfsParser = new WfsDataParser();\n      try {\n        let requestParams: RequestParams1_1_0 | RequestParams2_0_0 = {} as\n          | RequestParams1_1_0\n          | RequestParams2_0_0;\n        if (conf.version.startsWith('1.')) {\n          requestParams = {\n            version: conf.version as RequestParams1_1_0['version'],\n            maxFeatures: conf.maxFeatures,\n            typeName: conf.typeName,\n          };\n        }\n        if (conf.version.startsWith('2.')) {\n          requestParams = {\n            version: conf.version as RequestParams2_0_0['version'],\n            count: conf.maxFeatures,\n            typeNames: conf.typeName,\n          };\n        }\n\n        const gsData = await wfsParser.readData({\n          url: conf.url,\n          requestParams,\n        });\n        setGeoStylerData(gsData);\n      } catch {\n        console.warn('Could not read geostyler data');\n        setGeoStylerData(undefined);\n      }\n    };\n\n    // debounce function\n    const timer = setTimeout(() => readWfsData(currentLayerConf), 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [currentLayerConf]);\n\n  const layerTabLabel = t('Layer');\n  const styleTabLabel = t('Style');\n  const layerTypeLabel = t('Layer type');\n  const layerTypeDescription = t('The type of the layer');\n  const serviceVersionLabel = t('Service version');\n  const serviceVersionDescription = t('The version of the service');\n  const layersParamLabel = t('Layer Name');\n  const layersParamDescription = t(\n    'The name of the layer as described in GetCapabilities',\n  );\n  const layersParamPlaceholder = t('Layer Name');\n  const layerTitleLabel = t('Layer title');\n  const layerTitleDescription = t('The visible title of the layer');\n  const layerTitlePlaceholder = t('Insert Layer title');\n  const layerUrlLabel = t('Layer URL');\n  const layerUrlDescription = t('The service url of the layer');\n  const layerUrlPlaceholder = t('Insert Layer URL');\n  const maxFeaturesLabel = t('Max. features');\n  const maxFeaturesDescription = t(\n    'Maximum number of features to fetch from service',\n  );\n  const maxFeaturesPlaceholder = t('10000');\n  const attributionLabel = t('Attribution');\n  const attributionDescription = t('The layer attribution');\n  const attributionPlaceholder = t('© Layer attribution');\n\n  const wmsVersionOptions: { value: any; label: string }[] =\n    serviceVersions.WMS.map(version => ({ value: version, label: version }));\n  const wfsVersionOptions: { value: any; label: string }[] =\n    serviceVersions.WFS.map(version => ({ value: version, label: version }));\n\n  return (\n    <div>\n      <Form key={JSON.stringify(formKey)}>\n        <Tabs defaultActiveKey={LAYER_CONFIG_TABS.LAYER}>\n          <Tabs.TabPane tab={layerTabLabel} key={LAYER_CONFIG_TABS.LAYER}>\n            <StyledControlFormItem\n              controlType=\"Input\"\n              label={layerUrlLabel}\n              description={layerUrlDescription}\n              placeholder={layerUrlPlaceholder}\n              value={currentLayerConf.url}\n              name=\"url\"\n              onChange={onLayerUrlChange}\n            />\n            <StyledControlFormItem\n              controlType=\"Select\"\n              label={layerTypeLabel}\n              description={layerTypeDescription}\n              options={[\n                { value: 'WMS', label: t('WMS') },\n                { value: 'WFS', label: t('WFS') },\n                { value: 'XYZ', label: t('XYZ') },\n              ]}\n              value={currentLayerConf.type}\n              defaultValue={currentLayerConf.type}\n              name=\"type\"\n              onChange={onLayerTypeChange}\n            />\n            {isWmsLayerConf(currentLayerConf) && (\n              <StyledControlFormItem\n                controlType=\"Select\"\n                label={serviceVersionLabel}\n                description={serviceVersionDescription}\n                options={wmsVersionOptions}\n                value={wmsVersion}\n                defaultValue={wmsVersionOptions[0].value as string}\n                name=\"wmsVersion\"\n                onChange={onWmsVersionChange}\n              />\n            )}\n            {isWfsLayerConf(currentLayerConf) && (\n              <StyledControlFormItem\n                controlType=\"Select\"\n                label={serviceVersionLabel}\n                description={serviceVersionDescription}\n                options={wfsVersionOptions}\n                value={wfsVersion}\n                defaultValue={wfsVersionOptions[0].value as string}\n                name=\"wfsVersion\"\n                onChange={onWfsVersionChange}\n              />\n            )}\n            {isWmsLayerConf(currentLayerConf) && (\n              <StyledControlFormItem\n                controlType=\"Input\"\n                label={layersParamLabel}\n                description={layersParamDescription}\n                placeholder={layersParamPlaceholder}\n                value={currentLayerConf.layersParam}\n                name=\"layersParam\"\n                onChange={onLayersParamChange}\n              />\n            )}\n            {isWfsLayerConf(currentLayerConf) && (\n              <StyledControlFormItem\n                controlType=\"Input\"\n                label={layersParamLabel}\n                description={layersParamDescription}\n                placeholder={layersParamPlaceholder}\n                value={currentLayerConf.typeName}\n                name=\"typeName\"\n                onChange={onTypeNameChange}\n              />\n            )}\n            <StyledControlFormItem\n              controlType=\"Input\"\n              label={layerTitleLabel}\n              description={layerTitleDescription}\n              placeholder={layerTitlePlaceholder}\n              value={currentLayerConf.title}\n              name=\"title\"\n              onChange={onLayerTitleChange}\n            />\n            {isWfsLayerConf(currentLayerConf) && (\n              <StyledControlNumberFormItem\n                controlType=\"InputNumber\"\n                label={maxFeaturesLabel}\n                description={maxFeaturesDescription}\n                placeholder={maxFeaturesPlaceholder}\n                value={currentLayerConf.maxFeatures}\n                name=\"maxFeatures\"\n                onChange={onMaxFeaturesChange}\n              />\n            )}\n            <StyledControlFormItem\n              controlType=\"Input\"\n              label={attributionLabel}\n              description={attributionDescription}\n              placeholder={attributionPlaceholder}\n              value={currentLayerConf.attribution}\n              name=\"attribution\"\n              onChange={onAttributionChange}\n            />\n          </Tabs.TabPane>\n          <Tabs.TabPane\n            tab={styleTabLabel}\n            key={LAYER_CONFIG_TABS.GEOSTYLER}\n            disabled={!isWfsLayerConf(currentLayerConf)}\n          >\n            {isWfsLayerConf(currentLayerConf) && (\n              <StyledGeoStyler\n                style={currentLayerConf.style}\n                onStyleChange={onStyleChange}\n                data={geostylerData}\n              />\n            )}\n          </Tabs.TabPane>\n        </Tabs>\n        <StyledButtonContainer>\n          <StyledCloseButton type=\"default\" onClick={onCloseClick}>\n            {t('Close')}\n          </StyledCloseButton>\n          <StyledSaveButton type=\"primary\" onClick={onSaveClick}>\n            {t('Save')}\n          </StyledSaveButton>\n        </StyledButtonContainer>\n      </Form>\n    </div>\n  );\n};\n\nexport default LayerConfigsPopoverContent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}