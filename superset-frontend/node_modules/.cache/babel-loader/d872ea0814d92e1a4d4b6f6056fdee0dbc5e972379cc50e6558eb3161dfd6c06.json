{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo, useRef, useCallback } from 'react';\nimport { styled } from '@superset-ui/core';\nimport { useCellContentParser } from './useCellContentParser';\nimport { renderResultCell } from './utils';\nimport GridTable, { GridSize } from '../GridTable';\n// This regex handles all possible number formats in javascript, including ints, floats,\n// exponential notation, NaN, and Infinity.\n// See https://stackoverflow.com/a/30987109 for more details\nimport { jsx as _jsx } from \"@emotion/react/jsx-runtime\";const ONLY_NUMBER_REGEX = /^(NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity))$/;\nconst StyledFilterableTable = styled.div`\n  height: 100%;\n  overflow: hidden;\n`;\nconst parseNumberFromString = (value) => {\n  if (typeof value === 'string' && ONLY_NUMBER_REGEX.test(value)) {\n    return parseFloat(value);\n  }\n  return value;\n};\nconst sortResults = (valueA, valueB) => {\n  const aValue = parseNumberFromString(valueA);\n  const bValue = parseNumberFromString(valueB);\n  // equal items sort equally\n  if (aValue === bValue) {\n    return 0;\n  }\n  // nulls sort after anything else\n  if (aValue === null) {\n    return 1;\n  }\n  if (bValue === null) {\n    return -1;\n  }\n  return aValue < bValue ? -1 : 1;\n};\nconst FilterableTable = ({ orderedColumnKeys, data, height, filterText = '', expandedColumns = [], allowHTML = true, striped }) => {\n  const getCellContent = useCellContentParser({\n    columnKeys: orderedColumnKeys,\n    expandedColumns\n  });\n  const hasMatch = (text, row) => {\n    const values = [];\n    Object.keys(row).forEach((key) => {\n      if (row.hasOwnProperty(key)) {\n        const cellValue = row[key];\n        if (typeof cellValue === 'string') {\n          values.push(cellValue.toLowerCase());\n        } else\n        if (cellValue !== null &&\n        typeof cellValue.toString === 'function') {\n          values.push(cellValue.toString());\n        }\n      }\n    });\n    const lowerCaseText = text.toLowerCase();\n    return values.some((v) => v.includes(lowerCaseText));\n  };\n  const columns = useMemo(() => orderedColumnKeys.map((key) => ({\n    key,\n    label: key,\n    fieldName: key,\n    headerName: key,\n    comparator: sortResults,\n    render: ({ value, colDef }) => renderResultCell({\n      cellData: value,\n      columnKey: colDef.field,\n      allowHTML,\n      getCellContent\n    })\n  })), [orderedColumnKeys, allowHTML, getCellContent]);\n  const keyword = useRef(filterText);\n  keyword.current = filterText;\n  const keywordFilter = useCallback((node) => {\n    if (keyword.current && node.data) {\n      return hasMatch(keyword.current, node.data);\n    }\n    return true;\n  }, []);\n  return _jsx(StyledFilterableTable, { className: \"filterable-table-container\", \"data-test\": \"table-container\", children:\n    _jsx(GridTable, { size: GridSize.Small, height: height, usePagination: false, columns: columns, data: data, externalFilter: keywordFilter, showRowNumber: true, striped: striped, enableActions: true, columnReorderable: true }) }\n  );\n};__signature__(FilterableTable, \"useCellContentParser{getCellContent}\\nuseMemo{columns}\\nuseRef{keyword}\\nuseCallback{keywordFilter}\", () => [useCellContentParser]);const _default =\nFilterableTable;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ONLY_NUMBER_REGEX, \"ONLY_NUMBER_REGEX\", \"/Users/aryurkov/superset/superset-frontend/src/components/FilterableTable/index.tsx\");reactHotLoader.register(StyledFilterableTable, \"StyledFilterableTable\", \"/Users/aryurkov/superset/superset-frontend/src/components/FilterableTable/index.tsx\");reactHotLoader.register(parseNumberFromString, \"parseNumberFromString\", \"/Users/aryurkov/superset/superset-frontend/src/components/FilterableTable/index.tsx\");reactHotLoader.register(sortResults, \"sortResults\", \"/Users/aryurkov/superset/superset-frontend/src/components/FilterableTable/index.tsx\");reactHotLoader.register(FilterableTable, \"FilterableTable\", \"/Users/aryurkov/superset/superset-frontend/src/components/FilterableTable/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/components/FilterableTable/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useMemo","useRef","useCallback","styled","useCellContentParser","renderResultCell","GridTable","GridSize","jsx","_jsx","ONLY_NUMBER_REGEX","StyledFilterableTable","div","parseNumberFromString","value","test","parseFloat","sortResults","valueA","valueB","aValue","bValue","FilterableTable","orderedColumnKeys","data","height","filterText","expandedColumns","allowHTML","striped","getCellContent","columnKeys","hasMatch","text","row","values","Object","keys","forEach","key","hasOwnProperty","cellValue","push","toLowerCase","toString","lowerCaseText","some","v","includes","columns","map","label","fieldName","headerName","comparator","render","colDef","cellData","columnKey","field","keyword","current","keywordFilter","node","className","children","size","Small","usePagination","externalFilter","showRowNumber","enableActions","columnReorderable","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/components/FilterableTable/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo, useRef, useCallback } from 'react';\nimport { styled } from '@superset-ui/core';\nimport { useCellContentParser } from './useCellContentParser';\nimport { renderResultCell } from './utils';\nimport GridTable, { GridSize, ColDef } from '../GridTable';\n\n// This regex handles all possible number formats in javascript, including ints, floats,\n// exponential notation, NaN, and Infinity.\n// See https://stackoverflow.com/a/30987109 for more details\nconst ONLY_NUMBER_REGEX = /^(NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity))$/;\n\nconst StyledFilterableTable = styled.div`\n  height: 100%;\n  overflow: hidden;\n`;\n\ntype CellDataType = string | number | null;\ntype Datum = Record<string, CellDataType>;\n\nexport interface FilterableTableProps {\n  orderedColumnKeys: string[];\n  data: Record<string, unknown>[];\n  height: number;\n  filterText?: string;\n  headerHeight?: number;\n  overscanColumnCount?: number;\n  overscanRowCount?: number;\n  rowHeight?: number;\n  striped?: boolean;\n  expandedColumns?: string[];\n  allowHTML?: boolean;\n}\n\nconst parseNumberFromString = (value: string | number | null) => {\n  if (typeof value === 'string' && ONLY_NUMBER_REGEX.test(value)) {\n    return parseFloat(value);\n  }\n  return value;\n};\n\nconst sortResults = (valueA: string | number, valueB: string | number) => {\n  const aValue = parseNumberFromString(valueA);\n  const bValue = parseNumberFromString(valueB);\n\n  // equal items sort equally\n  if (aValue === bValue) {\n    return 0;\n  }\n\n  // nulls sort after anything else\n  if (aValue === null) {\n    return 1;\n  }\n  if (bValue === null) {\n    return -1;\n  }\n\n  return aValue < bValue ? -1 : 1;\n};\n\nconst FilterableTable = ({\n  orderedColumnKeys,\n  data,\n  height,\n  filterText = '',\n  expandedColumns = [],\n  allowHTML = true,\n  striped,\n}: FilterableTableProps) => {\n  const getCellContent = useCellContentParser({\n    columnKeys: orderedColumnKeys,\n    expandedColumns,\n  });\n\n  const hasMatch = (text: string, row: Datum) => {\n    const values: string[] = [];\n    Object.keys(row).forEach(key => {\n      if (row.hasOwnProperty(key)) {\n        const cellValue = row[key];\n        if (typeof cellValue === 'string') {\n          values.push(cellValue.toLowerCase());\n        } else if (\n          cellValue !== null &&\n          typeof cellValue.toString === 'function'\n        ) {\n          values.push(cellValue.toString());\n        }\n      }\n    });\n    const lowerCaseText = text.toLowerCase();\n    return values.some(v => v.includes(lowerCaseText));\n  };\n\n  const columns = useMemo(\n    () =>\n      orderedColumnKeys.map(key => ({\n        key,\n        label: key,\n        fieldName: key,\n        headerName: key,\n        comparator: sortResults,\n        render: ({ value, colDef }: { value: CellDataType; colDef: ColDef }) =>\n          renderResultCell({\n            cellData: value,\n            columnKey: colDef.field,\n            allowHTML,\n            getCellContent,\n          }),\n      })),\n    [orderedColumnKeys, allowHTML, getCellContent],\n  );\n\n  const keyword = useRef<string | undefined>(filterText);\n  keyword.current = filterText;\n\n  const keywordFilter = useCallback(node => {\n    if (keyword.current && node.data) {\n      return hasMatch(keyword.current, node.data);\n    }\n    return true;\n  }, []);\n\n  return (\n    <StyledFilterableTable\n      className=\"filterable-table-container\"\n      data-test=\"table-container\"\n    >\n      <GridTable\n        size={GridSize.Small}\n        height={height}\n        usePagination={false}\n        columns={columns}\n        data={data}\n        externalFilter={keywordFilter}\n        showRowNumber\n        striped={striped}\n        enableActions\n        columnReorderable\n      />\n    </StyledFilterableTable>\n  );\n};\n\nexport default FilterableTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}