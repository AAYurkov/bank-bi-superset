{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { css, logging, SupersetClient, t, useTheme } from '@superset-ui/core';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport AlteredSliceTag from 'src/components/AlteredSliceTag';\nimport Button from 'src/components/Button';\nimport { Icons } from 'src/components/Icons';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport { sliceUpdated } from 'src/explore/actions/exploreActions';\nimport { PageHeaderWithActions } from 'src/components/PageHeaderWithActions';\nimport { setSaveChartModalVisibility } from 'src/explore/actions/saveModalActions';\nimport { applyColors, resetColors } from 'src/utils/colorScheme';\nimport ReportModal from 'src/features/reports/ReportModal';\nimport DeleteModal from 'src/components/DeleteModal';\nimport { deleteActiveReport } from 'src/features/reports/ReportModal/actions';\nimport { useExploreAdditionalActionsMenu } from '../useExploreAdditionalActionsMenu';\nimport { useExploreMetadataBar } from './useExploreMetadataBar';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  canOverwrite: PropTypes.bool.isRequired,\n  canDownload: PropTypes.bool.isRequired,\n  dashboardId: PropTypes.number,\n  colorScheme: PropTypes.string,\n  isStarred: PropTypes.bool.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  table_name: PropTypes.string,\n  formData: PropTypes.object,\n  ownState: PropTypes.object,\n  timeout: PropTypes.number,\n  chart: chartPropShape,\n  saveDisabled: PropTypes.bool\n};\n\nconst saveButtonStyles = (theme) => css`\n  color: ${theme.colors.primary.dark2};\n  & > span[role='img'] {\n    margin-right: 0;\n  }\n`;\n\nconst additionalItemsStyles = (theme) => css`\n  display: flex;\n  align-items: center;\n  margin-left: ${theme.gridUnit}px;\n  & > span {\n    margin-right: ${theme.gridUnit * 3}px;\n  }\n`;\n\nexport const ExploreChartHeader = ({\n  dashboardId,\n  colorScheme: dashboardColorScheme,\n  slice,\n  actions,\n  formData,\n  ownState,\n  chart,\n  user,\n  canOverwrite,\n  canDownload,\n  isStarred,\n  sliceName,\n  saveDisabled,\n  metadata\n}) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const { latestQueryFormData, sliceFormData } = chart;\n  const [isPropertiesModalOpen, setIsPropertiesModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [currentReportDeleting, setCurrentReportDeleting] = useState(null);\n  const updateCategoricalNamespace = async () => {\n    const { dashboards } = metadata || {};\n    const dashboard =\n    dashboardId && dashboards && dashboards.find((d) => d.id === dashboardId);\n\n    if (!dashboard || !dashboardColorScheme) {\n      // clean up color namespace and shared color maps\n      // to avoid colors spill outside of dashboard context\n      resetColors(metadata == null ? void 0 : metadata.color_namespace);\n    }\n\n    if (dashboard) {\n      try {var _response$json;\n        // Dashboards from metadata don't contain the json_metadata field\n        // to avoid unnecessary payload. Here we query for the dashboard json_metadata.\n        const response = await SupersetClient.get({\n          endpoint: `/api/v1/dashboard/${dashboard.id}`\n        });\n        const result = response == null ? void 0 : (_response$json = response.json) == null ? void 0 : _response$json.result;\n\n        // setting the chart to use the dashboard custom label colors if any\n        const dashboardMetadata = JSON.parse(result.json_metadata);\n        // ensure consistency with the dashboard\n        applyColors(dashboardMetadata);\n      } catch (error) {\n        logging.info(t('Unable to retrieve dashboard colors'));\n      }\n    }\n  };\n\n  useEffect(() => {\n    updateCategoricalNamespace();\n  }, []);\n\n  const openPropertiesModal = () => {\n    setIsPropertiesModalOpen(true);\n  };\n\n  const closePropertiesModal = () => {\n    setIsPropertiesModalOpen(false);\n  };\n\n  const showReportModal = () => {\n    setIsReportModalOpen(true);\n  };\n\n  const closeReportModal = () => {\n    setIsReportModalOpen(false);\n  };\n\n  const showModal = useCallback(() => {\n    dispatch(setSaveChartModalVisibility(true));\n  }, [dispatch]);\n\n  const updateSlice = useCallback(\n    (slice) => {\n      dispatch(sliceUpdated(slice));\n    },\n    [dispatch]\n  );\n\n  const handleReportDelete = async (report) => {\n    await dispatch(deleteActiveReport(report));\n    setCurrentReportDeleting(null);\n  };\n\n  const history = useHistory();\n  const { redirectSQLLab } = actions;\n\n  const redirectToSQLLab = useCallback(\n    (formData, openNewWindow = false) => {\n      redirectSQLLab(formData, !openNewWindow && history);\n    },\n    [redirectSQLLab, history]\n  );\n\n  const [menu, isDropdownVisible, setIsDropdownVisible] =\n  useExploreAdditionalActionsMenu(\n    latestQueryFormData,\n    canDownload,\n    slice,\n    redirectToSQLLab,\n    openPropertiesModal,\n    ownState,\n    metadata == null ? void 0 : metadata.dashboards,\n    showReportModal,\n    setCurrentReportDeleting\n  );\n\n  const metadataBar = useExploreMetadataBar(metadata, slice);\n\n  const oldSliceName = slice == null ? void 0 : slice.slice_name;\n  return (\n    _jsxs(_Fragment, { children: [\n      _jsx(PageHeaderWithActions, {\n        editableTitleProps: {\n          title: sliceName != null ? sliceName : '',\n          canEdit:\n          !slice ||\n          canOverwrite ||\n          ((slice == null ? void 0 : slice.owners) || []).includes(user == null ? void 0 : user.userId),\n          onSave: actions.updateChartTitle,\n          placeholder: t('Add the name of the chart'),\n          label: t('Chart title')\n        },\n        showTitlePanelItems: !!slice,\n        certificatiedBadgeProps: {\n          certifiedBy: slice == null ? void 0 : slice.certified_by,\n          details: slice == null ? void 0 : slice.certification_details\n        },\n        showFaveStar: !!(user != null && user.userId),\n        faveStarProps: {\n          itemId: slice == null ? void 0 : slice.slice_id,\n          fetchFaveStar: actions.fetchFaveStar,\n          saveFaveStar: actions.saveFaveStar,\n          isStarred,\n          showTooltip: true\n        },\n        titlePanelAdditionalItems:\n        _jsxs(\"div\", { css: additionalItemsStyles, children: [\n          sliceFormData ?\n          _jsx(AlteredSliceTag, {\n            className: \"altered\",\n            origFormData: {\n              ...sliceFormData,\n              chartTitle: oldSliceName\n            },\n            currentFormData: { ...formData, chartTitle: sliceName } }\n          ) :\n          null,\n          metadataBar] }\n        ),\n\n        rightPanelAdditionalItems:\n        _jsx(Tooltip, {\n          title:\n          saveDisabled ?\n          t('Add required control values to save chart') :\n          null, children:\n\n\n\n          _jsx(\"div\", { children:\n            _jsxs(Button, {\n              buttonStyle: \"secondary\",\n              onClick: showModal,\n              disabled: saveDisabled,\n              \"data-test\": \"query-save-button\",\n              css: saveButtonStyles, children: [\n\n              _jsx(Icons.SaveOutlined, {\n                iconSize: \"l\",\n                iconColor: theme.colors.primary.dark2 }\n              ),\n              t('Save')] }\n            ) }\n          ) }\n        ),\n\n        additionalActionsMenu: menu,\n        menuDropdownProps: {\n          open: isDropdownVisible,\n          onOpenChange: setIsDropdownVisible\n        } }\n      ),\n      isPropertiesModalOpen &&\n      _jsx(PropertiesModal, {\n        show: isPropertiesModalOpen,\n        onHide: closePropertiesModal,\n        onSave: updateSlice,\n        slice: slice }\n      ),\n\n\n      _jsx(ReportModal, {\n        userId: user.userId,\n        show: isReportModalOpen,\n        onHide: closeReportModal,\n        userEmail: user.email,\n        dashboardId: dashboardId,\n        chart: chart,\n        creationMethod: \"charts\" }\n      ),\n\n      currentReportDeleting &&\n      _jsx(DeleteModal, {\n        description: t(\n          'This action will permanently delete %s.',\n          currentReportDeleting == null ? void 0 : currentReportDeleting.name\n        ),\n        onConfirm: () => {\n          if (currentReportDeleting) {\n            handleReportDelete(currentReportDeleting);\n          }\n        },\n        onHide: () => setCurrentReportDeleting(null),\n        open: true,\n        title: t('Delete Report?') }\n      )] }\n\n    ));\n\n};__signature__(ExploreChartHeader, \"useTheme{theme}\\nuseDispatch{dispatch}\\nuseState{[isPropertiesModalOpen, setIsPropertiesModalOpen](false)}\\nuseState{[isReportModalOpen, setIsReportModalOpen](false)}\\nuseState{[currentReportDeleting, setCurrentReportDeleting](null)}\\nuseEffect{}\\nuseCallback{showModal}\\nuseCallback{updateSlice}\\nuseHistory{history}\\nuseCallback{redirectToSQLLab}\\nuseExploreAdditionalActionsMenu{[menu, isDropdownVisible, setIsDropdownVisible]}\\nuseExploreMetadataBar{metadataBar}\", () => [useTheme, useDispatch, useHistory, useExploreAdditionalActionsMenu, useExploreMetadataBar]);\n\nExploreChartHeader.propTypes = propTypes;const _default =\n\nExploreChartHeader;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");reactHotLoader.register(saveButtonStyles, \"saveButtonStyles\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");reactHotLoader.register(additionalItemsStyles, \"additionalItemsStyles\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");reactHotLoader.register(ExploreChartHeader, \"ExploreChartHeader\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useCallback","useEffect","useState","useHistory","useDispatch","PropTypes","Tooltip","css","logging","SupersetClient","t","useTheme","chartPropShape","AlteredSliceTag","Button","Icons","PropertiesModal","sliceUpdated","PageHeaderWithActions","setSaveChartModalVisibility","applyColors","resetColors","ReportModal","DeleteModal","deleteActiveReport","useExploreAdditionalActionsMenu","useExploreMetadataBar","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","propTypes","actions","object","isRequired","canOverwrite","bool","canDownload","dashboardId","number","colorScheme","string","isStarred","slice","sliceName","table_name","formData","ownState","timeout","chart","saveDisabled","saveButtonStyles","theme","colors","primary","dark2","additionalItemsStyles","gridUnit","ExploreChartHeader","dashboardColorScheme","user","metadata","dispatch","latestQueryFormData","sliceFormData","isPropertiesModalOpen","setIsPropertiesModalOpen","isReportModalOpen","setIsReportModalOpen","currentReportDeleting","setCurrentReportDeleting","updateCategoricalNamespace","dashboards","dashboard","find","d","id","color_namespace","_response$json","response","get","endpoint","result","json","dashboardMetadata","JSON","parse","json_metadata","error","info","openPropertiesModal","closePropertiesModal","showReportModal","closeReportModal","showModal","updateSlice","handleReportDelete","report","history","redirectSQLLab","redirectToSQLLab","openNewWindow","menu","isDropdownVisible","setIsDropdownVisible","metadataBar","oldSliceName","slice_name","children","editableTitleProps","title","canEdit","owners","includes","userId","onSave","updateChartTitle","placeholder","label","showTitlePanelItems","certificatiedBadgeProps","certifiedBy","certified_by","details","certification_details","showFaveStar","faveStarProps","itemId","slice_id","fetchFaveStar","saveFaveStar","showTooltip","titlePanelAdditionalItems","className","origFormData","chartTitle","currentFormData","rightPanelAdditionalItems","buttonStyle","onClick","disabled","SaveOutlined","iconSize","iconColor","additionalActionsMenu","menuDropdownProps","open","onOpenChange","show","onHide","userEmail","email","creationMethod","description","name","onConfirm","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/explore/components/ExploreChartHeader/index.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { css, logging, SupersetClient, t, useTheme } from '@superset-ui/core';\nimport { chartPropShape } from 'src/dashboard/util/propShapes';\nimport AlteredSliceTag from 'src/components/AlteredSliceTag';\nimport Button from 'src/components/Button';\nimport { Icons } from 'src/components/Icons';\nimport PropertiesModal from 'src/explore/components/PropertiesModal';\nimport { sliceUpdated } from 'src/explore/actions/exploreActions';\nimport { PageHeaderWithActions } from 'src/components/PageHeaderWithActions';\nimport { setSaveChartModalVisibility } from 'src/explore/actions/saveModalActions';\nimport { applyColors, resetColors } from 'src/utils/colorScheme';\nimport ReportModal from 'src/features/reports/ReportModal';\nimport DeleteModal from 'src/components/DeleteModal';\nimport { deleteActiveReport } from 'src/features/reports/ReportModal/actions';\nimport { useExploreAdditionalActionsMenu } from '../useExploreAdditionalActionsMenu';\nimport { useExploreMetadataBar } from './useExploreMetadataBar';\n\nconst propTypes = {\n  actions: PropTypes.object.isRequired,\n  canOverwrite: PropTypes.bool.isRequired,\n  canDownload: PropTypes.bool.isRequired,\n  dashboardId: PropTypes.number,\n  colorScheme: PropTypes.string,\n  isStarred: PropTypes.bool.isRequired,\n  slice: PropTypes.object,\n  sliceName: PropTypes.string,\n  table_name: PropTypes.string,\n  formData: PropTypes.object,\n  ownState: PropTypes.object,\n  timeout: PropTypes.number,\n  chart: chartPropShape,\n  saveDisabled: PropTypes.bool,\n};\n\nconst saveButtonStyles = theme => css`\n  color: ${theme.colors.primary.dark2};\n  & > span[role='img'] {\n    margin-right: 0;\n  }\n`;\n\nconst additionalItemsStyles = theme => css`\n  display: flex;\n  align-items: center;\n  margin-left: ${theme.gridUnit}px;\n  & > span {\n    margin-right: ${theme.gridUnit * 3}px;\n  }\n`;\n\nexport const ExploreChartHeader = ({\n  dashboardId,\n  colorScheme: dashboardColorScheme,\n  slice,\n  actions,\n  formData,\n  ownState,\n  chart,\n  user,\n  canOverwrite,\n  canDownload,\n  isStarred,\n  sliceName,\n  saveDisabled,\n  metadata,\n}) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const { latestQueryFormData, sliceFormData } = chart;\n  const [isPropertiesModalOpen, setIsPropertiesModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [currentReportDeleting, setCurrentReportDeleting] = useState(null);\n  const updateCategoricalNamespace = async () => {\n    const { dashboards } = metadata || {};\n    const dashboard =\n      dashboardId && dashboards && dashboards.find(d => d.id === dashboardId);\n\n    if (!dashboard || !dashboardColorScheme) {\n      // clean up color namespace and shared color maps\n      // to avoid colors spill outside of dashboard context\n      resetColors(metadata?.color_namespace);\n    }\n\n    if (dashboard) {\n      try {\n        // Dashboards from metadata don't contain the json_metadata field\n        // to avoid unnecessary payload. Here we query for the dashboard json_metadata.\n        const response = await SupersetClient.get({\n          endpoint: `/api/v1/dashboard/${dashboard.id}`,\n        });\n        const result = response?.json?.result;\n\n        // setting the chart to use the dashboard custom label colors if any\n        const dashboardMetadata = JSON.parse(result.json_metadata);\n        // ensure consistency with the dashboard\n        applyColors(dashboardMetadata);\n      } catch (error) {\n        logging.info(t('Unable to retrieve dashboard colors'));\n      }\n    }\n  };\n\n  useEffect(() => {\n    updateCategoricalNamespace();\n  }, []);\n\n  const openPropertiesModal = () => {\n    setIsPropertiesModalOpen(true);\n  };\n\n  const closePropertiesModal = () => {\n    setIsPropertiesModalOpen(false);\n  };\n\n  const showReportModal = () => {\n    setIsReportModalOpen(true);\n  };\n\n  const closeReportModal = () => {\n    setIsReportModalOpen(false);\n  };\n\n  const showModal = useCallback(() => {\n    dispatch(setSaveChartModalVisibility(true));\n  }, [dispatch]);\n\n  const updateSlice = useCallback(\n    slice => {\n      dispatch(sliceUpdated(slice));\n    },\n    [dispatch],\n  );\n\n  const handleReportDelete = async report => {\n    await dispatch(deleteActiveReport(report));\n    setCurrentReportDeleting(null);\n  };\n\n  const history = useHistory();\n  const { redirectSQLLab } = actions;\n\n  const redirectToSQLLab = useCallback(\n    (formData, openNewWindow = false) => {\n      redirectSQLLab(formData, !openNewWindow && history);\n    },\n    [redirectSQLLab, history],\n  );\n\n  const [menu, isDropdownVisible, setIsDropdownVisible] =\n    useExploreAdditionalActionsMenu(\n      latestQueryFormData,\n      canDownload,\n      slice,\n      redirectToSQLLab,\n      openPropertiesModal,\n      ownState,\n      metadata?.dashboards,\n      showReportModal,\n      setCurrentReportDeleting,\n    );\n\n  const metadataBar = useExploreMetadataBar(metadata, slice);\n\n  const oldSliceName = slice?.slice_name;\n  return (\n    <>\n      <PageHeaderWithActions\n        editableTitleProps={{\n          title: sliceName ?? '',\n          canEdit:\n            !slice ||\n            canOverwrite ||\n            (slice?.owners || []).includes(user?.userId),\n          onSave: actions.updateChartTitle,\n          placeholder: t('Add the name of the chart'),\n          label: t('Chart title'),\n        }}\n        showTitlePanelItems={!!slice}\n        certificatiedBadgeProps={{\n          certifiedBy: slice?.certified_by,\n          details: slice?.certification_details,\n        }}\n        showFaveStar={!!user?.userId}\n        faveStarProps={{\n          itemId: slice?.slice_id,\n          fetchFaveStar: actions.fetchFaveStar,\n          saveFaveStar: actions.saveFaveStar,\n          isStarred,\n          showTooltip: true,\n        }}\n        titlePanelAdditionalItems={\n          <div css={additionalItemsStyles}>\n            {sliceFormData ? (\n              <AlteredSliceTag\n                className=\"altered\"\n                origFormData={{\n                  ...sliceFormData,\n                  chartTitle: oldSliceName,\n                }}\n                currentFormData={{ ...formData, chartTitle: sliceName }}\n              />\n            ) : null}\n            {metadataBar}\n          </div>\n        }\n        rightPanelAdditionalItems={\n          <Tooltip\n            title={\n              saveDisabled\n                ? t('Add required control values to save chart')\n                : null\n            }\n          >\n            {/* needed to wrap button in a div - antd tooltip doesn't work with disabled button */}\n            <div>\n              <Button\n                buttonStyle=\"secondary\"\n                onClick={showModal}\n                disabled={saveDisabled}\n                data-test=\"query-save-button\"\n                css={saveButtonStyles}\n              >\n                <Icons.SaveOutlined\n                  iconSize=\"l\"\n                  iconColor={theme.colors.primary.dark2}\n                />\n                {t('Save')}\n              </Button>\n            </div>\n          </Tooltip>\n        }\n        additionalActionsMenu={menu}\n        menuDropdownProps={{\n          open: isDropdownVisible,\n          onOpenChange: setIsDropdownVisible,\n        }}\n      />\n      {isPropertiesModalOpen && (\n        <PropertiesModal\n          show={isPropertiesModalOpen}\n          onHide={closePropertiesModal}\n          onSave={updateSlice}\n          slice={slice}\n        />\n      )}\n\n      <ReportModal\n        userId={user.userId}\n        show={isReportModalOpen}\n        onHide={closeReportModal}\n        userEmail={user.email}\n        dashboardId={dashboardId}\n        chart={chart}\n        creationMethod=\"charts\"\n      />\n\n      {currentReportDeleting && (\n        <DeleteModal\n          description={t(\n            'This action will permanently delete %s.',\n            currentReportDeleting?.name,\n          )}\n          onConfirm={() => {\n            if (currentReportDeleting) {\n              handleReportDelete(currentReportDeleting);\n            }\n          }}\n          onHide={() => setCurrentReportDeleting(null)}\n          open\n          title={t('Delete Report?')}\n        />\n      )}\n    </>\n  );\n};\n\nExploreChartHeader.propTypes = propTypes;\n\nexport default ExploreChartHeader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}