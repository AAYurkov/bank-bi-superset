{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Layer from 'ol/layer/Layer';\nimport { apply as applyTransform } from 'ol/transform';\nimport ReactDOM from 'react-dom';\nimport { createChartComponent } from '../util/chartUtil';\nimport { getProjectedCoordinateFromPointGeoJson } from '../util/geometryUtil';\nimport Loader from '../images/loading.gif';\n/**\n * Custom OpenLayers layer that displays charts on given locations.\n */\nexport class ChartLayer extends Layer {\n\n\n\n\n\n\n\n\n\n\n\n\n  /**\n   * Create a ChartLayer.\n   *\n   * @param {ChartLayerOptions} options The options to create a ChartLayer\n   * @param {ChartHtmlElement[]} options.charts An array with the chart objects containing the HTML element and the coordinate\n   * @param {ChartConfig} options.chartConfigs The chart configuration for the charts\n   * @param {ChartSizeValues} options.chartSizeValues The values for the chart sizes\n   * @param {String} options.chartVizType The viztype of the charts\n   * @param {String} options.chartBackgroundCssColor The color of the additionally added chart background\n   * @param {Number} options.chartBackgroundBorderRadius The border radius in percent of the additionally added chart background\n   * @param {Function} options.onMouseOver The handler function to execute when the mouse entering a HTML element\n   * @param {Function} options.onMouseOut The handler function to execute when the mouse leaves a HTML element\n   * @param {SupersetTheme} options.theme The superset theme\n   */\n  constructor(options) {\n    super(options);this.charts = [];this.chartConfigs = { type: 'FeatureCollection', features: [] };this.chartSizeValues = {};this.chartVizType = void 0;this.div = void 0;this.loadingMask = void 0;this.chartBackgroundCssColor = '';this.chartBackgroundBorderRadius = 0;this.theme = void 0;\n    this.chartVizType = options.chartVizType;\n    if (options.chartConfigs) {\n      this.chartConfigs = options.chartConfigs;\n    }\n    if (options.chartSizeValues) {\n      this.chartSizeValues = options.chartSizeValues;\n    }\n    if (options.chartBackgroundCssColor) {\n      this.chartBackgroundCssColor = options.chartBackgroundCssColor;\n    }\n    if (options.chartBackgroundBorderRadius) {\n      this.chartBackgroundBorderRadius = options.chartBackgroundBorderRadius;\n    }\n    if (options.theme) {\n      this.theme = options.theme;\n    }\n    const spinner = document.createElement('img');\n    spinner.src = Loader;\n    spinner.style.position = 'relative';\n    spinner.style.width = '50px';\n    spinner.style.top = '50%';\n    spinner.style.left = '50%';\n    spinner.style.transform = 'translate(-50%, -50%)';\n    this.loadingMask = document.createElement('div');\n    this.loadingMask.style.position = 'relative';\n    this.loadingMask.style.height = '100%';\n    this.loadingMask.appendChild(spinner);\n    this.div = document.createElement('div');\n    // TODO: consider creating an OpenLayers event\n    if (options.onMouseOver) {\n      this.div.onmouseover = options.onMouseOver;\n    }\n    // TODO: consider creating an OpenLayers event\n    if (options.onMouseOut) {\n      this.div.onmouseout = options.onMouseOut;\n    }\n  }\n  setChartConfig(chartConfigs, silent = false) {\n    this.chartConfigs = chartConfigs;\n    if (!silent) {\n      this.changed();\n    }\n  }\n  setChartVizType(chartVizType, silent = false) {\n    this.chartVizType = chartVizType;\n    if (!silent) {\n      this.changed();\n    }\n  }\n  setChartSizeValues(chartSizeValues, silent = false) {\n    this.chartSizeValues = chartSizeValues;\n    if (!silent) {\n      this.changed();\n    }\n  }\n  setChartBackgroundCssColor(chartBackgroundCssColor, silent = false) {\n    this.chartBackgroundCssColor = chartBackgroundCssColor;\n    if (!silent) {\n      this.changed();\n    }\n  }\n  setChartBackgroundBorderRadius(chartBackgroundBorderRadius, silent = false) {\n    this.chartBackgroundBorderRadius = chartBackgroundBorderRadius;\n    if (!silent) {\n      this.changed();\n    }\n  }\n  /**\n   * Unmount and remove all created chart elements from the DOM.\n   */\n  removeAllChartElements() {\n    this.charts.forEach((chart) => {\n      ReactDOM.unmountComponentAtNode(chart.htmlElement);\n      chart.htmlElement.remove();\n    });\n    this.charts = [];\n  }\n  createCharts(zoom) {\n    const charts = this.chartConfigs.features.map((feature) => {\n      const container = document.createElement('div');\n      let chartWidth = 0;\n      let chartHeight = 0;\n      if (this.chartSizeValues[zoom]) {\n        chartWidth = this.chartSizeValues[zoom].width;\n        chartHeight = this.chartSizeValues[zoom].height;\n      }\n      const chartComponent = createChartComponent(this.chartVizType, feature, chartWidth, chartHeight, this.theme);\n      ReactDOM.render(chartComponent, container);\n      return {\n        htmlElement: container,\n        coordinate: getProjectedCoordinateFromPointGeoJson(feature.geometry),\n        width: chartWidth,\n        height: chartHeight,\n        feature\n      };\n    });\n    this.charts = charts;\n  }\n  updateCharts(zoom) {\n    const charts = this.charts.map((chart) => {\n      let chartWidth = 0;\n      let chartHeight = 0;\n      if (this.chartSizeValues[zoom]) {\n        chartWidth = this.chartSizeValues[zoom].width;\n        chartHeight = this.chartSizeValues[zoom].height;\n      }\n      // only rerender chart if size changes\n      if (chartWidth === chart.width && chartHeight === chart.height) {\n        return chart;\n      }\n      const chartComponent = createChartComponent(this.chartVizType, chart.feature, chartWidth, chartHeight, this.theme);\n      ReactDOM.render(chartComponent, chart.htmlElement);\n      return {\n        ...chart,\n        width: chartWidth,\n        height: chartHeight\n      };\n    });\n    this.charts = charts;\n  }\n  render(frameState) {\n    if (!frameState) {\n      return this.div;\n    }\n    const { viewState } = frameState;\n    const currentZoom = Math.round(viewState.zoom);\n    // nextResolution is only defined while an animation\n    // is in action. For this time we show a loading mask\n    // to keep the amount of chart rerenderings as low as possible.\n    if (viewState.nextResolution) {\n      return this.loadingMask;\n    }\n    if (this.charts.length === 0) {\n      this.createCharts(currentZoom);\n    } else\n    {\n      this.updateCharts(currentZoom);\n    }\n    this.charts.forEach((chartObject) => {\n      const { htmlElement, coordinate, width, height } = chartObject;\n      // clone, because applyTransform modifies in place\n      const coordCopy = [...coordinate];\n      const [x, y] = applyTransform(frameState.coordinateToPixelTransform, coordCopy);\n      // left and top are corrected to place the center of the chart to its location\n      htmlElement.style.left = `${x - width / 2}px`;\n      htmlElement.style.top = `${y - height / 2}px`;\n      htmlElement.style.position = 'absolute';\n      htmlElement.style['background-color'] =\n      this.chartBackgroundCssColor;\n      htmlElement.style['border-radius'] =\n      `${this.chartBackgroundBorderRadius}%`;\n    });\n    // TODO should we always replace the html elements or is there a better way?\n    const htmlElements = this.charts.map((c) => c.htmlElement);\n    this.div.replaceChildren(...htmlElements);\n    return this.div;\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ChartLayer, \"ChartLayer\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/components/ChartLayer.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["Layer","apply","applyTransform","ReactDOM","createChartComponent","getProjectedCoordinateFromPointGeoJson","Loader","ChartLayer","constructor","options","charts","chartConfigs","type","features","chartSizeValues","chartVizType","div","loadingMask","chartBackgroundCssColor","chartBackgroundBorderRadius","theme","spinner","document","createElement","src","style","position","width","top","left","transform","height","appendChild","onMouseOver","onmouseover","onMouseOut","onmouseout","setChartConfig","silent","changed","setChartVizType","setChartSizeValues","setChartBackgroundCssColor","setChartBackgroundBorderRadius","removeAllChartElements","forEach","chart","unmountComponentAtNode","htmlElement","remove","createCharts","zoom","map","feature","container","chartWidth","chartHeight","chartComponent","render","coordinate","geometry","updateCharts","frameState","viewState","currentZoom","Math","round","nextResolution","length","chartObject","coordCopy","x","y","coordinateToPixelTransform","htmlElements","c","replaceChildren","__reactstandin__regenerateByEval","key","code","eval","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/components/ChartLayer.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Layer from 'ol/layer/Layer';\nimport { FrameState } from 'ol/Map';\nimport { apply as applyTransform } from 'ol/transform';\nimport ReactDOM from 'react-dom';\nimport { SupersetTheme } from '@superset-ui/core';\nimport { ChartConfig, ChartLayerOptions, ChartSizeValues } from '../types';\nimport { createChartComponent } from '../util/chartUtil';\nimport { getProjectedCoordinateFromPointGeoJson } from '../util/geometryUtil';\n\nimport Loader from '../images/loading.gif';\n\n/**\n * Custom OpenLayers layer that displays charts on given locations.\n */\nexport class ChartLayer extends Layer {\n  charts: any[] = [];\n\n  chartConfigs: ChartConfig = {\n    type: 'FeatureCollection',\n    features: [],\n  };\n\n  chartSizeValues: ChartSizeValues = {};\n\n  chartVizType: string;\n\n  div: HTMLDivElement;\n\n  loadingMask: HTMLDivElement;\n\n  chartBackgroundCssColor = '';\n\n  chartBackgroundBorderRadius = 0;\n\n  theme: SupersetTheme;\n\n  /**\n   * Create a ChartLayer.\n   *\n   * @param {ChartLayerOptions} options The options to create a ChartLayer\n   * @param {ChartHtmlElement[]} options.charts An array with the chart objects containing the HTML element and the coordinate\n   * @param {ChartConfig} options.chartConfigs The chart configuration for the charts\n   * @param {ChartSizeValues} options.chartSizeValues The values for the chart sizes\n   * @param {String} options.chartVizType The viztype of the charts\n   * @param {String} options.chartBackgroundCssColor The color of the additionally added chart background\n   * @param {Number} options.chartBackgroundBorderRadius The border radius in percent of the additionally added chart background\n   * @param {Function} options.onMouseOver The handler function to execute when the mouse entering a HTML element\n   * @param {Function} options.onMouseOut The handler function to execute when the mouse leaves a HTML element\n   * @param {SupersetTheme} options.theme The superset theme\n   */\n  constructor(options: ChartLayerOptions) {\n    super(options);\n\n    this.chartVizType = options.chartVizType;\n\n    if (options.chartConfigs) {\n      this.chartConfigs = options.chartConfigs;\n    }\n\n    if (options.chartSizeValues) {\n      this.chartSizeValues = options.chartSizeValues;\n    }\n\n    if (options.chartBackgroundCssColor) {\n      this.chartBackgroundCssColor = options.chartBackgroundCssColor;\n    }\n\n    if (options.chartBackgroundBorderRadius) {\n      this.chartBackgroundBorderRadius = options.chartBackgroundBorderRadius;\n    }\n\n    if (options.theme) {\n      this.theme = options.theme;\n    }\n\n    const spinner = document.createElement('img');\n    spinner.src = Loader;\n    spinner.style.position = 'relative';\n    spinner.style.width = '50px';\n    spinner.style.top = '50%';\n    spinner.style.left = '50%';\n    spinner.style.transform = 'translate(-50%, -50%)';\n\n    this.loadingMask = document.createElement('div');\n    this.loadingMask.style.position = 'relative';\n    this.loadingMask.style.height = '100%';\n    this.loadingMask.appendChild(spinner);\n\n    this.div = document.createElement('div');\n\n    // TODO: consider creating an OpenLayers event\n    if (options.onMouseOver) {\n      this.div.onmouseover = options.onMouseOver;\n    }\n\n    // TODO: consider creating an OpenLayers event\n    if (options.onMouseOut) {\n      this.div.onmouseout = options.onMouseOut;\n    }\n  }\n\n  setChartConfig(chartConfigs: ChartConfig, silent = false) {\n    this.chartConfigs = chartConfigs;\n    if (!silent) {\n      this.changed();\n    }\n  }\n\n  setChartVizType(chartVizType: string, silent = false) {\n    this.chartVizType = chartVizType;\n    if (!silent) {\n      this.changed();\n    }\n  }\n\n  setChartSizeValues(chartSizeValues: ChartSizeValues, silent = false) {\n    this.chartSizeValues = chartSizeValues;\n    if (!silent) {\n      this.changed();\n    }\n  }\n\n  setChartBackgroundCssColor(chartBackgroundCssColor: string, silent = false) {\n    this.chartBackgroundCssColor = chartBackgroundCssColor;\n    if (!silent) {\n      this.changed();\n    }\n  }\n\n  setChartBackgroundBorderRadius(\n    chartBackgroundBorderRadius: number,\n    silent = false,\n  ) {\n    this.chartBackgroundBorderRadius = chartBackgroundBorderRadius;\n    if (!silent) {\n      this.changed();\n    }\n  }\n\n  /**\n   * Unmount and remove all created chart elements from the DOM.\n   */\n  removeAllChartElements() {\n    this.charts.forEach(chart => {\n      ReactDOM.unmountComponentAtNode(chart.htmlElement);\n      chart.htmlElement.remove();\n    });\n    this.charts = [];\n  }\n\n  createCharts(zoom: number) {\n    const charts = this.chartConfigs.features.map(feature => {\n      const container = document.createElement('div');\n\n      let chartWidth = 0;\n      let chartHeight = 0;\n      if (this.chartSizeValues[zoom]) {\n        chartWidth = this.chartSizeValues[zoom].width;\n        chartHeight = this.chartSizeValues[zoom].height;\n      }\n\n      const chartComponent = createChartComponent(\n        this.chartVizType,\n        feature,\n        chartWidth,\n        chartHeight,\n        this.theme,\n      );\n      ReactDOM.render(chartComponent, container);\n\n      return {\n        htmlElement: container,\n        coordinate: getProjectedCoordinateFromPointGeoJson(feature.geometry),\n        width: chartWidth,\n        height: chartHeight,\n        feature,\n      };\n    });\n\n    this.charts = charts;\n  }\n\n  updateCharts(zoom: number) {\n    const charts = this.charts.map(chart => {\n      let chartWidth = 0;\n      let chartHeight = 0;\n      if (this.chartSizeValues[zoom]) {\n        chartWidth = this.chartSizeValues[zoom].width;\n        chartHeight = this.chartSizeValues[zoom].height;\n      }\n\n      // only rerender chart if size changes\n      if (chartWidth === chart.width && chartHeight === chart.height) {\n        return chart;\n      }\n\n      const chartComponent = createChartComponent(\n        this.chartVizType,\n        chart.feature,\n        chartWidth,\n        chartHeight,\n        this.theme,\n      );\n      ReactDOM.render(chartComponent, chart.htmlElement);\n\n      return {\n        ...chart,\n        width: chartWidth,\n        height: chartHeight,\n      };\n    });\n\n    this.charts = charts;\n  }\n\n  render(frameState: FrameState | null) {\n    if (!frameState) {\n      return this.div;\n    }\n\n    const { viewState } = frameState;\n    const currentZoom = Math.round(viewState.zoom);\n\n    // nextResolution is only defined while an animation\n    // is in action. For this time we show a loading mask\n    // to keep the amount of chart rerenderings as low as possible.\n    if (viewState.nextResolution) {\n      return this.loadingMask;\n    }\n\n    if (this.charts.length === 0) {\n      this.createCharts(currentZoom);\n    } else {\n      this.updateCharts(currentZoom);\n    }\n\n    this.charts.forEach(chartObject => {\n      const { htmlElement, coordinate, width, height } = chartObject;\n\n      // clone, because applyTransform modifies in place\n      const coordCopy = [...coordinate];\n\n      const [x, y] = applyTransform(\n        frameState.coordinateToPixelTransform,\n        coordCopy,\n      );\n\n      // left and top are corrected to place the center of the chart to its location\n      htmlElement.style.left = `${x - width / 2}px`;\n      htmlElement.style.top = `${y - height / 2}px`;\n      htmlElement.style.position = 'absolute';\n      htmlElement.style['background-color' as any] =\n        this.chartBackgroundCssColor;\n      htmlElement.style['border-radius' as any] =\n        `${this.chartBackgroundBorderRadius}%`;\n    });\n\n    // TODO should we always replace the html elements or is there a better way?\n    const htmlElements = this.charts.map(c => c.htmlElement);\n    this.div.replaceChildren(...htmlElements);\n\n    return this.div;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}