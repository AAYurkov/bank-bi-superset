{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};import ChartWrapper from '../components/ChartWrapper';\n/**\n * Create a chart component for a location.\n *\n * @param chartVizType The superset visualization type\n * @param chartConfigs The chart configurations\n * @param chartWidth The chart width\n * @param chartHeight The chart height\n * @param chartTheme The chart theme\n * @returns The chart as React component\n */import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nexport const createChartComponent = (chartVizType, chartConfig, chartWidth, chartHeight, chartTheme) => _jsx(ChartWrapper, { vizType: chartVizType, chartConfig: chartConfig, width: chartWidth, height: chartHeight, theme: chartTheme });\n/**\n * Simplifies a chart configuration by removing\n * non-serializable properties.\n *\n * @param config The chart configuration to simplify.\n * @returns The simplified chart configuration.\n */\nexport const simplifyConfig = (config) => {\n  const simplifiedConfig = {\n    type: config.type,\n    features: config.features.map((f) => ({\n      type: f.type,\n      geometry: f.geometry,\n      properties: Object.keys(f.properties).\n      filter((k) => k !== 'refs').\n      reduce((prev, cur) => ({ ...prev, [cur]: f.properties[cur] }), {})\n    }))\n  };\n  return simplifiedConfig;\n};\n/**\n * Check if two chart configurations are equal (deep equality).\n *\n * @param configA The first chart config for comparison.\n * @param configB The second chart config for comparison.\n * @returns True, if configurations are equal. False otherwise.\n */\nexport const isChartConfigEqual = (configA, configB) => {\n  const simplifiedConfigA = simplifyConfig(configA);\n  const simplifiedConfigB = simplifyConfig(configB);\n  return JSON.stringify(simplifiedConfigA) === JSON.stringify(simplifiedConfigB);\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(createChartComponent, \"createChartComponent\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/chartUtil.tsx\");reactHotLoader.register(simplifyConfig, \"simplifyConfig\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/chartUtil.tsx\");reactHotLoader.register(isChartConfigEqual, \"isChartConfigEqual\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/chartUtil.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["ChartWrapper","jsx","_jsx","createChartComponent","chartVizType","chartConfig","chartWidth","chartHeight","chartTheme","vizType","width","height","theme","simplifyConfig","config","simplifiedConfig","type","features","map","f","geometry","properties","Object","keys","filter","k","reduce","prev","cur","isChartConfigEqual","configA","configB","simplifiedConfigA","simplifiedConfigB","JSON","stringify","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/chartUtil.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SupersetTheme } from '@superset-ui/core';\nimport { ChartConfig, ChartConfigFeature } from '../types';\nimport ChartWrapper from '../components/ChartWrapper';\n\n/**\n * Create a chart component for a location.\n *\n * @param chartVizType The superset visualization type\n * @param chartConfigs The chart configurations\n * @param chartWidth The chart width\n * @param chartHeight The chart height\n * @param chartTheme The chart theme\n * @returns The chart as React component\n */\nexport const createChartComponent = (\n  chartVizType: string,\n  chartConfig: ChartConfigFeature,\n  chartWidth: number,\n  chartHeight: number,\n  chartTheme: SupersetTheme,\n) => (\n  <ChartWrapper\n    vizType={chartVizType}\n    chartConfig={chartConfig}\n    width={chartWidth}\n    height={chartHeight}\n    theme={chartTheme}\n  />\n);\n\n/**\n * Simplifies a chart configuration by removing\n * non-serializable properties.\n *\n * @param config The chart configuration to simplify.\n * @returns The simplified chart configuration.\n */\nexport const simplifyConfig = (config: ChartConfig) => {\n  const simplifiedConfig: ChartConfig = {\n    type: config.type,\n    features: config.features.map(f => ({\n      type: f.type,\n      geometry: f.geometry,\n      properties: Object.keys(f.properties)\n        .filter(k => k !== 'refs')\n        .reduce((prev, cur) => ({ ...prev, [cur]: f.properties[cur] }), {}),\n    })),\n  };\n  return simplifiedConfig;\n};\n\n/**\n * Check if two chart configurations are equal (deep equality).\n *\n * @param configA The first chart config for comparison.\n * @param configB The second chart config for comparison.\n * @returns True, if configurations are equal. False otherwise.\n */\nexport const isChartConfigEqual = (\n  configA: ChartConfig,\n  configB: ChartConfig,\n) => {\n  const simplifiedConfigA = simplifyConfig(configA);\n  const simplifiedConfigB = simplifyConfig(configB);\n  return (\n    JSON.stringify(simplifiedConfigA) === JSON.stringify(simplifiedConfigB)\n  );\n};\n"],"mappings":"uSAoBA,OAAOA,YAAY,MAAM,4BAA4B;AAErD;;;;;;;;;GAAA,SAAAC,GAAA,IAAAC,IAAA;AAUA,OAAO,MAAMC,oBAAoB,GAAGA,CAClCC,YAAoB,EACpBC,WAA+B,EAC/BC,UAAkB,EAClBC,WAAmB,EACnBC,UAAyB,KAEzBN,IAAA,CAACF,YAAY,IACXS,OAAO,EAAEL,YAAa,EACtBC,WAAW,EAAEA,WAAY,EACzBK,KAAK,EAAEJ,UAAW,EAClBK,MAAM,EAAEJ,WAAY,EACpBK,KAAK,EAAEJ,UAAW,GAErB;AAED;;;;;;;AAOA,OAAO,MAAMK,cAAc,GAAGA,CAACC,MAAmB,KAAI;EACpD,MAAMC,gBAAgB,GAAgB;IACpCC,IAAI,EAAEF,MAAM,CAACE,IAAI;IACjBC,QAAQ,EAAEH,MAAM,CAACG,QAAQ,CAACC,GAAG,CAAC,CAAAC,CAAC,MAAK;MAClCH,IAAI,EAAEG,CAAC,CAACH,IAAI;MACZI,QAAQ,EAAED,CAAC,CAACC,QAAQ;MACpBC,UAAU,EAAEC,MAAM,CAACC,IAAI,CAACJ,CAAC,CAACE,UAAU,CAAC;MAClCG,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,KAAK,MAAM,CAAC;MACzBC,MAAM,CAAC,CAACC,IAAI,EAAEC,GAAG,MAAM,EAAE,GAAGD,IAAI,EAAE,CAACC,GAAG,GAAGT,CAAC,CAACE,UAAU,CAACO,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;KACrE,CAAC;GACH;EACD,OAAOb,gBAAgB;AACzB,CAAC;AAED;;;;;;;AAOA,OAAO,MAAMc,kBAAkB,GAAGA,CAChCC,OAAoB,EACpBC,OAAoB,KAClB;EACF,MAAMC,iBAAiB,GAAGnB,cAAc,CAACiB,OAAO,CAAC;EACjD,MAAMG,iBAAiB,GAAGpB,cAAc,CAACkB,OAAO,CAAC;EACjD,OACEG,IAAI,CAACC,SAAS,CAACH,iBAAiB,CAAC,KAAKE,IAAI,CAACC,SAAS,CAACF,iBAAiB,CAAC;AAE3E,CAAC,CAAC,mBAAAG,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CArDWrC,oBAAoB,iIAAAiC,cAAA,CAAAI,QAAA,CAuBpB3B,cAAc,2HAAAuB,cAAA,CAAAI,QAAA,CAqBdX,kBAAkB,uJAAAY,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}