{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * Util for geometry related operations.\n */\nimport GeoJSON from 'ol/format/GeoJSON';\nimport VectorSource from 'ol/source/Vector';\n/**\n * Extracts the coordinate from a Point GeoJSON in the current map projection.\n *\n * @param geoJsonPoint The GeoJSON string for the point\n *\n * @returns The coordinate\n */\nexport const getProjectedCoordinateFromPointGeoJson = (geoJsonPoint) => {\n  const geom = new GeoJSON().readGeometry(geoJsonPoint, {\n    // TODO: adapt to map projection\n    featureProjection: 'EPSG:3857'\n  });\n  return geom.getCoordinates();\n};\n/**\n * Computes the extent for an array of features.\n *\n * @param features An Array of OpenLayers features\n * @returns The OpenLayers extent or undefined\n */\nexport const getExtentFromFeatures = (features) => {\n  if (features.length === 0) {\n    return undefined;\n  }\n  const source = new VectorSource();\n  source.addFeatures(features);\n  return source.getExtent();\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getProjectedCoordinateFromPointGeoJson, \"getProjectedCoordinateFromPointGeoJson\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/geometryUtil.ts\");reactHotLoader.register(getExtentFromFeatures, \"getExtentFromFeatures\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/geometryUtil.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["GeoJSON","VectorSource","getProjectedCoordinateFromPointGeoJson","geoJsonPoint","geom","readGeometry","featureProjection","getCoordinates","getExtentFromFeatures","features","length","undefined","source","addFeatures","getExtent","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/geometryUtil.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Util for geometry related operations.\n */\n\nimport GeoJSON from 'ol/format/GeoJSON';\nimport Feature from 'ol/Feature';\nimport { Point as OlPoint } from 'ol/geom';\nimport VectorSource from 'ol/source/Vector';\nimport { Point as GeoJsonPoint } from 'geojson';\n\n/**\n * Extracts the coordinate from a Point GeoJSON in the current map projection.\n *\n * @param geoJsonPoint The GeoJSON string for the point\n *\n * @returns The coordinate\n */\nexport const getProjectedCoordinateFromPointGeoJson = (\n  geoJsonPoint: GeoJsonPoint,\n) => {\n  const geom: OlPoint = new GeoJSON().readGeometry(geoJsonPoint, {\n    // TODO: adapt to map projection\n    featureProjection: 'EPSG:3857',\n  }) as OlPoint;\n  return geom.getCoordinates();\n};\n\n/**\n * Computes the extent for an array of features.\n *\n * @param features An Array of OpenLayers features\n * @returns The OpenLayers extent or undefined\n */\nexport const getExtentFromFeatures = (features: Feature[]) => {\n  if (features.length === 0) {\n    return undefined;\n  }\n  const source = new VectorSource();\n  source.addFeatures(features);\n  return source.getExtent();\n};\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAmBA;;;AAIA,OAAOA,OAAO,MAAM,mBAAmB;AAGvC,OAAOC,YAAY,MAAM,kBAAkB;AAG3C;;;;;;;AAOA,OAAO,MAAMC,sCAAsC,GAAGA,CACpDC,YAA0B,KACxB;EACF,MAAMC,IAAI,GAAY,IAAIJ,OAAO,EAAE,CAACK,YAAY,CAACF,YAAY,EAAE;IAC7D;IACAG,iBAAiB,EAAE;GACpB,CAAY;EACb,OAAOF,IAAI,CAACG,cAAc,EAAE;AAC9B,CAAC;AAED;;;;;;AAMA,OAAO,MAAMC,qBAAqB,GAAGA,CAACC,QAAmB,KAAI;EAC3D,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;IACzB,OAAOC,SAAS;;EAElB,MAAMC,MAAM,GAAG,IAAIX,YAAY,EAAE;EACjCW,MAAM,CAACC,WAAW,CAACJ,QAAQ,CAAC;EAC5B,OAAOG,MAAM,CAACE,SAAS,EAAE;AAC3B,CAAC,CAAC,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAN,SAAA,MAAAI,cAAA,WAAAA,cAAA,CAAAG,QAAA,CAvBWhB,sCAAsC,qJAAAa,cAAA,CAAAG,QAAA,CAgBtCV,qBAAqB,4JAAAW,WAAA,UAAAH,oBAAA,mBAAAA,oBAAA,CAAAG,WAAA,GAAAR,SAAA,CAAAQ,WAAA,IAAAA,WAAA,CAAAC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}