{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { getExtentFromFeatures } from './geometryUtil';\n// default map extent of world if no features are found\n// TODO: move to generic config file or plugin configuration\n// TODO: adapt to CRS other than Web Mercator\nconst defaultExtent = [-16000000, -7279000, 20500000, 11000000];\n/**\n * Fits map to the spatial extent of provided charts.\n *\n * @param olMap The OpenLayers map\n * @param chartConfigs The chart configuration\n */\nexport const fitMapToCharts = (olMap, chartConfigs) => {\n  const view = olMap.getView();\n  const features = new GeoJSON().readFeatures(chartConfigs, {\n    // TODO: adapt to map projection\n    featureProjection: 'EPSG:3857'\n  });\n  const extent = getExtentFromFeatures(features) || defaultExtent;\n  view.fit(extent, {\n    // tested for a desktop size monitor\n    size: [250, 250]\n  });\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(defaultExtent, \"defaultExtent\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/mapUtil.tsx\");reactHotLoader.register(fitMapToCharts, \"fitMapToCharts\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/mapUtil.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["GeoJSON","getExtentFromFeatures","defaultExtent","fitMapToCharts","olMap","chartConfigs","view","getView","features","readFeatures","featureProjection","extent","fit","size","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/mapUtil.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Util for map related operations.\n */\nimport { Map } from 'ol';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { ChartConfig } from '../types';\nimport { getExtentFromFeatures } from './geometryUtil';\n\n// default map extent of world if no features are found\n// TODO: move to generic config file or plugin configuration\n// TODO: adapt to CRS other than Web Mercator\nconst defaultExtent = [-16000000, -7279000, 20500000, 11000000];\n\n/**\n * Fits map to the spatial extent of provided charts.\n *\n * @param olMap The OpenLayers map\n * @param chartConfigs The chart configuration\n */\nexport const fitMapToCharts = (olMap: Map, chartConfigs: ChartConfig) => {\n  const view = olMap.getView();\n  const features = new GeoJSON().readFeatures(chartConfigs, {\n    // TODO: adapt to map projection\n    featureProjection: 'EPSG:3857',\n  });\n\n  const extent = getExtentFromFeatures(features) || defaultExtent;\n\n  view.fit(extent, {\n    // tested for a desktop size monitor\n    size: [250, 250],\n  });\n};\n"],"mappings":"wSAAA;;;;;;;;;;;;;;;;;;AAuBA,OAAOA,OAAO,MAAM,mBAAmB;AAEvC,SAASC,qBAAqB,QAAQ,gBAAgB;AAEtD;AACA;AACA;AACA,MAAMC,aAAa,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC;AAE/D;;;;;;AAMA,OAAO,MAAMC,cAAc,GAAGA,CAACC,KAAU,EAAEC,YAAyB,KAAI;EACtE,MAAMC,IAAI,GAAGF,KAAK,CAACG,OAAO,EAAE;EAC5B,MAAMC,QAAQ,GAAG,IAAIR,OAAO,EAAE,CAACS,YAAY,CAACJ,YAAY,EAAE;IACxD;IACAK,iBAAiB,EAAE;GACpB,CAAC;EAEF,MAAMC,MAAM,GAAGV,qBAAqB,CAACO,QAAQ,CAAC,IAAIN,aAAa;EAE/DI,IAAI,CAACM,GAAG,CAACD,MAAM,EAAE;IACf;IACAE,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG;GAChB,CAAC;AACJ,CAAC,CAAC,mBAAAC,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CArBIhB,aAAa,wHAAAY,cAAA,CAAAI,QAAA,CAQNf,cAAc,iJAAAgB,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}