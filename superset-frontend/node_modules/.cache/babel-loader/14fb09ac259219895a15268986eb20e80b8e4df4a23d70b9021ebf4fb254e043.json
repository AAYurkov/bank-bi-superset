{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { isAdhocMetricSimple, isAdhocMetricSQL, isSavedMetric, isSimpleAdhocFilter } from '@superset-ui/core';\n\nconst isControlValueCompatibleWithDatasource = (datasource, controlState, value) => {\n  // A datasource might have been deleted, in which case we can't validate\n  // only using the control state since it might have been hydrated with\n  // the wrong options or columns (empty arrays).\n  if (controlState.options && typeof value === 'string') {\n    if (!_isEmpty(controlState.options) &&\n    controlState.options.some((option) => Array.isArray(option) ?\n    option[0] === value :\n    option.column_name === value) ||\n    !_isEmpty(datasource == null ? void 0 : datasource.columns)) {\n      return datasource.columns.some((column) => column.column_name === value);\n    }\n  }\n  if (controlState.savedMetrics &&\n  isSavedMetric(value) && (\n  controlState.savedMetrics.some((savedMetric) => savedMetric.metric_name === value) ||\n  !_isEmpty(datasource == null ? void 0 : datasource.metrics))) {\n    return datasource.metrics.some((metric) => metric.metric_name === value);\n  }\n  if (controlState.columns && (\n  isAdhocMetricSimple(value) || isSimpleAdhocFilter(value)) && (\n  !_isEmpty(controlState.columns) &&\n  controlState.columns.some((column) => {var _value$column;return column.column_name === ((_value$column = value.column) == null ? void 0 : _value$column.column_name) ||\n    column.column_name === value.subject;}) ||\n  !_isEmpty(datasource == null ? void 0 : datasource.columns))) {\n    return datasource.columns.some((column) => {var _value$column2;return column.column_name === ((_value$column2 = value.column) == null ? void 0 : _value$column2.column_name) ||\n      column.column_name === value.subject;});\n  }\n  if (isAdhocMetricSQL(value)) {\n    Object.assign(value, { datasourceWarning: true });\n    return true;\n  }\n  return false;\n};\nexport const getControlValuesCompatibleWithDatasource = (datasource, controlState, value) => {\n  if (value === undefined || value === null) {\n    return undefined;\n  }\n  if (Array.isArray(value)) {\n    const compatibleValues = value.filter((val) => isControlValueCompatibleWithDatasource(datasource, controlState, val));\n    return compatibleValues.length > 0 ?\n    compatibleValues :\n    controlState.default;\n  }\n  return isControlValueCompatibleWithDatasource(datasource, controlState, value) ?\n  value :\n  controlState.default;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(isControlValueCompatibleWithDatasource, \"isControlValueCompatibleWithDatasource\", \"/Users/aryurkov/superset/superset-frontend/src/explore/controlUtils/getControlValuesCompatibleWithDatasource.ts\");reactHotLoader.register(getControlValuesCompatibleWithDatasource, \"getControlValuesCompatibleWithDatasource\", \"/Users/aryurkov/superset/superset-frontend/src/explore/controlUtils/getControlValuesCompatibleWithDatasource.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["isAdhocMetricSimple","isAdhocMetricSQL","isSavedMetric","isSimpleAdhocFilter","isControlValueCompatibleWithDatasource","datasource","controlState","value","options","_isEmpty","some","option","Array","isArray","column_name","columns","column","savedMetrics","savedMetric","metric_name","metrics","metric","_value$column","subject","_value$column2","Object","assign","datasourceWarning","getControlValuesCompatibleWithDatasource","undefined","compatibleValues","filter","val","length","default","reactHotLoader","reactHotLoaderGlobal","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/explore/controlUtils/getControlValuesCompatibleWithDatasource.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { ControlState, Dataset, Metric } from '@superset-ui/chart-controls';\nimport {\n  Column,\n  isAdhocMetricSimple,\n  isAdhocMetricSQL,\n  isSavedMetric,\n  isSimpleAdhocFilter,\n  JsonValue,\n  SimpleAdhocFilter,\n} from '@superset-ui/core';\nimport { isEmpty } from 'lodash';\nimport AdhocMetric from 'src/explore/components/controls/MetricControl/AdhocMetric';\n\nconst isControlValueCompatibleWithDatasource = (\n  datasource: Dataset,\n  controlState: ControlState,\n  value: any,\n) => {\n  // A datasource might have been deleted, in which case we can't validate\n  // only using the control state since it might have been hydrated with\n  // the wrong options or columns (empty arrays).\n  if (controlState.options && typeof value === 'string') {\n    if (\n      (!isEmpty(controlState.options) &&\n        controlState.options.some(\n          (option: [string | number, string] | { column_name: string }) =>\n            Array.isArray(option)\n              ? option[0] === value\n              : option.column_name === value,\n        )) ||\n      !isEmpty(datasource?.columns)\n    ) {\n      return datasource.columns.some(\n        (column: Column) => column.column_name === value,\n      );\n    }\n  }\n  if (\n    controlState.savedMetrics &&\n    isSavedMetric(value) &&\n    (controlState.savedMetrics.some(\n      (savedMetric: Metric) => savedMetric.metric_name === value,\n    ) ||\n      !isEmpty(datasource?.metrics))\n  ) {\n    return datasource.metrics.some(\n      (metric: Metric) => metric.metric_name === value,\n    );\n  }\n  if (\n    controlState.columns &&\n    (isAdhocMetricSimple(value) || isSimpleAdhocFilter(value)) &&\n    ((!isEmpty(controlState.columns) &&\n      controlState.columns.some(\n        (column: Column) =>\n          column.column_name === (value as AdhocMetric).column?.column_name ||\n          column.column_name === (value as SimpleAdhocFilter).subject,\n      )) ||\n      !isEmpty(datasource?.columns))\n  ) {\n    return datasource.columns.some(\n      (column: Column) =>\n        column.column_name === (value as AdhocMetric).column?.column_name ||\n        column.column_name === (value as SimpleAdhocFilter).subject,\n    );\n  }\n  if (isAdhocMetricSQL(value)) {\n    Object.assign(value, { datasourceWarning: true });\n    return true;\n  }\n  return false;\n};\n\nexport const getControlValuesCompatibleWithDatasource = (\n  datasource: Dataset,\n  controlState: ControlState,\n  value: JsonValue,\n) => {\n  if (value === undefined || value === null) {\n    return undefined;\n  }\n  if (Array.isArray(value)) {\n    const compatibleValues = value.filter(val =>\n      isControlValueCompatibleWithDatasource(datasource, controlState, val),\n    );\n    return compatibleValues.length > 0\n      ? compatibleValues\n      : controlState.default;\n  }\n  return isControlValueCompatibleWithDatasource(datasource, controlState, value)\n    ? value\n    : controlState.default;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}