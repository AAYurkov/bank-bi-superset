{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { useState, useEffect, useCallback } from 'react';\nimport { makeApi, SupersetClient, t, getClientErrorObject } from '@superset-ui/core';\nimport { createErrorHandler, getAlreadyExists, getPasswordsNeeded, hasTerminalValidation, getSSHPasswordsNeeded, getSSHPrivateKeysNeeded, getSSHPrivateKeyPasswordsNeeded } from 'src/views/CRUD/utils';\nimport copyTextToClipboard from 'src/utils/copy';\nimport { ensureAppRoot } from 'src/utils/pathUtils';\nimport SupersetText from 'src/utils/textUtils';\nconst parsedErrorMessage = (errorMessage) => {\n  if (typeof errorMessage === 'string') {\n    return errorMessage;\n  }\n  return Object.entries(errorMessage).\n  map(([key, value]) => {\n    if (Array.isArray(value)) {\n      return `(${key}) ${value.join(', ')}`;\n    }\n    return `(${key}) ${value}`;\n  }).\n  join('\\n');\n};\nexport function useListViewResource(resource, resourceLabel, // resourceLabel for translations\nhandleErrorMsg, infoEnable = true, defaultCollectionValue = [], baseFilters, // must be memoized\ninitialLoadingState = true, selectColumns) {\n  const [state, setState] = useState({\n    count: 0,\n    collection: defaultCollectionValue,\n    loading: initialLoadingState,\n    lastFetchDataConfig: null,\n    permissions: [],\n    bulkSelectEnabled: false\n  });\n  function updateState(update) {\n    setState((currentState) => ({ ...currentState, ...update }));\n  }\n  function toggleBulkSelect() {\n    updateState({ bulkSelectEnabled: !state.bulkSelectEnabled });\n  }\n  useEffect(() => {\n    if (!infoEnable)\n    return;\n    SupersetClient.get({\n      endpoint: `/api/v1/${resource}/_info?q=${rison.encode({\n        keys: ['permissions']\n      })}`\n    }).then(({ json: infoJson = {} }) => {\n      updateState({\n        permissions: infoJson.permissions\n      });\n    }, createErrorHandler((errMsg) => handleErrorMsg(t('An error occurred while fetching %s info: %s', resourceLabel, errMsg))));\n  }, []);\n  function hasPerm(perm) {\n    if (!state.permissions.length) {\n      return false;\n    }\n    return Boolean(state.permissions.find((p) => p === perm));\n  }\n  const fetchData = useCallback(({ pageIndex, pageSize, sortBy, filters: filterValues }) => {\n    // set loading state, cache the last config for refreshing data.\n    updateState({\n      lastFetchDataConfig: {\n        filters: filterValues,\n        pageIndex,\n        pageSize,\n        sortBy\n      },\n      loading: true\n    });\n    const filterExps = (baseFilters || []).\n    concat(filterValues).\n    filter(({ value }) => value !== '' && value !== null && value !== undefined).\n    map(({ id, operator: opr, value }) => ({\n      col: id,\n      opr,\n      value: value && typeof value === 'object' && 'value' in value ?\n      value.value :\n      value\n    }));\n    const queryParams = rison.encode_uri({\n      order_column: sortBy[0].id,\n      order_direction: sortBy[0].desc ? 'desc' : 'asc',\n      page: pageIndex,\n      page_size: pageSize,\n      ...(filterExps.length ? { filters: filterExps } : {}),\n      ...(selectColumns != null && selectColumns.length ? { select_columns: selectColumns } : {})\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/${resource}/?q=${queryParams}`\n    }).\n    then(({ json = {} }) => {\n      updateState({\n        collection: json.result,\n        count: json.count,\n        lastFetched: new Date().toISOString()\n      });\n    }, createErrorHandler((errMsg) => handleErrorMsg(t('An error occurred while fetching %ss: %s', resourceLabel, errMsg)))).\n    finally(() => {\n      updateState({ loading: false });\n    });\n  }, [baseFilters]);\n  return {\n    state: {\n      loading: state.loading,\n      resourceCount: state.count,\n      resourceCollection: state.collection,\n      bulkSelectEnabled: state.bulkSelectEnabled,\n      lastFetched: state.lastFetched\n    },\n    setResourceCollection: (update) => updateState({\n      collection: update\n    }),\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData: (provideConfig) => {\n      if (state.lastFetchDataConfig) {\n        return fetchData(state.lastFetchDataConfig);\n      }\n      if (provideConfig) {\n        return fetchData(provideConfig);\n      }\n      return null;\n    }\n  };\n}__signature__(useListViewResource, \"useState{[state, setState]({\\n        count: 0,\\n        collection: defaultCollectionValue,\\n        loading: initialLoadingState,\\n        lastFetchDataConfig: null,\\n        permissions: [],\\n        bulkSelectEnabled: false,\\n    })}\\nuseEffect{}\\nuseCallback{fetchData}\");\nexport function useSingleViewResource(resourceName, resourceLabel, // resourceLabel for translations\nhandleErrorMsg, path_suffix = '') {\n  const [state, setState] = useState({\n    loading: false,\n    resource: null,\n    error: null\n  });\n  function updateState(update) {\n    setState((currentState) => ({ ...currentState, ...update }));\n  }\n  const fetchResource = useCallback((resourceID) => {\n    // Set loading state\n    updateState({\n      loading: true\n    });\n    const baseEndpoint = `/api/v1/${resourceName}/${resourceID}`;\n    const endpoint = path_suffix !== '' ? `${baseEndpoint}/${path_suffix}` : baseEndpoint;\n    return SupersetClient.get({\n      endpoint\n    }).\n    then(({ json = {} }) => {\n      updateState({\n        resource: json.result,\n        error: null\n      });\n      return json.result;\n    }, createErrorHandler((errMsg) => {\n      handleErrorMsg(t('An error occurred while fetching %ss: %s', resourceLabel, parsedErrorMessage(errMsg)));\n      updateState({\n        error: errMsg\n      });\n    })).\n    finally(() => {\n      updateState({ loading: false });\n    });\n  }, [handleErrorMsg, resourceName, resourceLabel]);\n  const createResource = useCallback((resource, hideToast = false) => {\n    // Set loading state\n    updateState({\n      loading: true\n    });\n    return SupersetClient.post({\n      endpoint: `/api/v1/${resourceName}/`,\n      body: JSON.stringify(resource),\n      headers: { 'Content-Type': 'application/json' }\n    }).\n    then(({ json = {} }) => {\n      updateState({\n        resource: { id: json.id, ...json.result },\n        error: null\n      });\n      return json.id;\n    }, createErrorHandler((errMsg) => {\n      // we did not want toasts for db-connection-ui but did not want to disable it everywhere\n      if (!hideToast) {\n        handleErrorMsg(t('An error occurred while creating %ss: %s', resourceLabel, parsedErrorMessage(errMsg)));\n      }\n      updateState({\n        error: errMsg\n      });\n    })).\n    finally(() => {\n      updateState({ loading: false });\n    });\n  }, [handleErrorMsg, resourceName, resourceLabel]);\n  const updateResource = useCallback((resourceID, resource, hideToast = false, setLoading = true) => {\n    // Set loading state\n    if (setLoading) {\n      updateState({\n        loading: true\n      });\n    }\n    return SupersetClient.put({\n      endpoint: `/api/v1/${resourceName}/${resourceID}`,\n      body: JSON.stringify(resource),\n      headers: { 'Content-Type': 'application/json' }\n    }).\n    then(({ json = {} }) => {\n      updateState({\n        resource: { ...json.result, id: json.id },\n        error: null\n      });\n      return json.result;\n    }, createErrorHandler((errMsg) => {\n      if (!hideToast) {\n        handleErrorMsg(t('An error occurred while fetching %ss: %s', resourceLabel, JSON.stringify(errMsg)));\n      }\n      updateState({\n        error: errMsg\n      });\n      return errMsg;\n    })).\n    finally(() => {\n      if (setLoading) {\n        updateState({ loading: false });\n      }\n    });\n  }, [handleErrorMsg, resourceName, resourceLabel]);\n  const clearError = () => updateState({\n    error: null\n  });\n  return {\n    state,\n    setResource: (update) => updateState({\n      resource: update\n    }),\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError\n  };\n}__signature__(useSingleViewResource, \"useState{[state, setState]({\\n        loading: false,\\n        resource: null,\\n        error: null,\\n    })}\\nuseCallback{fetchResource}\\nuseCallback{createResource}\\nuseCallback{updateResource}\");\nexport function useImportResource(resourceName, resourceLabel, // resourceLabel for translations\nhandleErrorMsg) {\n  const [state, setState] = useState({\n    loading: false,\n    passwordsNeeded: [],\n    alreadyExists: [],\n    sshPasswordNeeded: [],\n    sshPrivateKeyNeeded: [],\n    sshPrivateKeyPasswordNeeded: [],\n    failed: false\n  });\n  function updateState(update) {\n    setState((currentState) => ({ ...currentState, ...update }));\n  }\n  const importResource = useCallback((bundle, databasePasswords = {}, sshTunnelPasswords = {}, sshTunnelPrivateKey = {}, sshTunnelPrivateKeyPasswords = {}, overwrite = false) => {\n    // Set loading state\n    updateState({\n      loading: true,\n      failed: false\n    });\n    const formData = new FormData();\n    formData.append('formData', bundle);\n    const RE_EXPORT_TEXT = t('Please re-export your file and try importing again');\n    /* The import bundle never contains database passwords; if required\n     * they should be provided by the user during import.\n     */\n    if (databasePasswords) {\n      formData.append('passwords', JSON.stringify(databasePasswords));\n    }\n    /* If the imported model already exists the user needs to confirm\n     * that they want to overwrite it.\n     */\n    if (overwrite) {\n      formData.append('overwrite', 'true');\n    }\n    /* The import bundle may contain ssh tunnel passwords; if required\n     * they should be provided by the user during import.\n     */\n    if (sshTunnelPasswords) {\n      formData.append('ssh_tunnel_passwords', JSON.stringify(sshTunnelPasswords));\n    }\n    /* The import bundle may contain ssh tunnel private_key; if required\n     * they should be provided by the user during import.\n     */\n    if (sshTunnelPrivateKey) {\n      formData.append('ssh_tunnel_private_keys', JSON.stringify(sshTunnelPrivateKey));\n    }\n    /* The import bundle may contain ssh tunnel private_key_password; if required\n     * they should be provided by the user during import.\n     */\n    if (sshTunnelPrivateKeyPasswords) {\n      formData.append('ssh_tunnel_private_key_passwords', JSON.stringify(sshTunnelPrivateKeyPasswords));\n    }\n    return SupersetClient.post({\n      endpoint: `/api/v1/${resourceName}/import/`,\n      body: formData,\n      headers: { Accept: 'application/json' }\n    }).\n    then(() => {\n      updateState({\n        passwordsNeeded: [],\n        alreadyExists: [],\n        sshPasswordNeeded: [],\n        sshPrivateKeyNeeded: [],\n        sshPrivateKeyPasswordNeeded: [],\n        failed: false\n      });\n      return true;\n    }).\n    catch((response) => getClientErrorObject(response).then((error) => {\n      updateState({\n        failed: true\n      });\n      if (!error.errors) {\n        handleErrorMsg(t('An error occurred while importing %s: %s', resourceLabel, error.message || error.error));\n        return false;\n      }\n      if (hasTerminalValidation(error.errors)) {\n        handleErrorMsg(t('An error occurred while importing %s: %s', resourceLabel, [\n        ...error.errors.map((payload) => payload.message),\n        RE_EXPORT_TEXT].\n        join('.\\n')));\n      } else\n      {\n        updateState({\n          passwordsNeeded: getPasswordsNeeded(error.errors),\n          sshPasswordNeeded: getSSHPasswordsNeeded(error.errors),\n          sshPrivateKeyNeeded: getSSHPrivateKeysNeeded(error.errors),\n          sshPrivateKeyPasswordNeeded: getSSHPrivateKeyPasswordsNeeded(error.errors),\n          alreadyExists: getAlreadyExists(error.errors)\n        });\n      }\n      return false;\n    })).\n    finally(() => {\n      updateState({ loading: false });\n    });\n  }, []);\n  return { state, importResource };\n}__signature__(useImportResource, \"useState{[state, setState]({\\n        loading: false,\\n        passwordsNeeded: [],\\n        alreadyExists: [],\\n        sshPasswordNeeded: [],\\n        sshPrivateKeyNeeded: [],\\n        sshPrivateKeyPasswordNeeded: [],\\n        failed: false,\\n    })}\\nuseCallback{importResource}\");\nconst favoriteApis = {\n  chart: makeApi({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/chart/favorite_status/'\n  }),\n  dashboard: makeApi({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/dashboard/favorite_status/'\n  }),\n  tag: makeApi({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/tag/favorite_status/'\n  })\n};\nexport function useFavoriteStatus(type, ids, handleErrorMsg) {\n  const [favoriteStatus, setFavoriteStatus] = useState({});\n  const updateFavoriteStatus = (update) => setFavoriteStatus((currentState) => ({ ...currentState, ...update }));\n  useEffect(() => {\n    if (!ids.length) {\n      return;\n    }\n    favoriteApis[type](ids).then(({ result }) => {\n      const update = result.reduce((acc, element) => {\n        acc[element.id] = element.value;\n        return acc;\n      }, {});\n      updateFavoriteStatus(update);\n    }, createErrorHandler((errMsg) => handleErrorMsg(t('There was an error fetching the favorite status: %s', errMsg))));\n  }, [ids, type, handleErrorMsg]);\n  const saveFaveStar = useCallback((id, isStarred) => {\n    const endpoint = `/api/v1/${type}/${id}/favorites/`;\n    const apiCall = isStarred ?\n    SupersetClient.delete({\n      endpoint\n    }) :\n    SupersetClient.post({ endpoint });\n    apiCall.then(() => {\n      updateFavoriteStatus({\n        [id]: !isStarred\n      });\n    }, createErrorHandler((errMsg) => handleErrorMsg(t('There was an error saving the favorite status: %s', errMsg))));\n  }, [type]);\n  return [saveFaveStar, favoriteStatus];\n}__signature__(useFavoriteStatus, \"useState{[favoriteStatus, setFavoriteStatus]({})}\\nuseEffect{}\\nuseCallback{saveFaveStar}\");\nexport const useChartEditModal = (setCharts, charts) => {\n  const [sliceCurrentlyEditing, setSliceCurrentlyEditing] = useState(null);\n  function openChartEditModal(chart) {\n    setSliceCurrentlyEditing({\n      slice_id: chart.id,\n      slice_name: chart.slice_name,\n      description: chart.description,\n      cache_timeout: chart.cache_timeout,\n      certified_by: chart.certified_by,\n      certification_details: chart.certification_details,\n      is_managed_externally: chart.is_managed_externally\n    });\n  }\n  function closeChartEditModal() {\n    setSliceCurrentlyEditing(null);\n  }\n  function handleChartUpdated(edits) {\n    // update the chart in our state with the edited info\n    const newCharts = charts.map((chart) => chart.id === edits.id ? { ...chart, ...edits } : chart);\n    setCharts(newCharts);\n  }\n  return {\n    sliceCurrentlyEditing,\n    handleChartUpdated,\n    openChartEditModal,\n    closeChartEditModal\n  };\n};__signature__(useChartEditModal, \"useState{[sliceCurrentlyEditing, setSliceCurrentlyEditing](null)}\");\nexport const copyQueryLink = (id, addDangerToast, addSuccessToast) => {\n  copyTextToClipboard(() => Promise.resolve(`${window.location.origin}${ensureAppRoot(`/sqllab?savedQueryId=${id}`)}`)).\n  then(() => {\n    addSuccessToast(t('Link Copied!'));\n  }).\n  catch(() => {\n    addDangerToast(t('Sorry, your browser does not support copying.'));\n  });\n};\nexport const getDatabaseImages = () => SupersetText.DB_IMAGES;\nexport const getConnectionAlert = () => SupersetText.DB_CONNECTION_ALERTS;\nexport const getDatabaseDocumentationLinks = () => SupersetText.DB_CONNECTION_DOC_LINKS;\nexport const testDatabaseConnection = (connection, handleErrorMsg, addSuccessToast) => {\n  SupersetClient.post({\n    endpoint: 'api/v1/database/test_connection/',\n    body: JSON.stringify(connection),\n    headers: { 'Content-Type': 'application/json' }\n  }).then(() => {\n    addSuccessToast(t('Connection looks good!'));\n  }, createErrorHandler((errMsg) => {\n    handleErrorMsg(t('ERROR: %s', parsedErrorMessage(errMsg)));\n  }));\n};\nexport function useAvailableDatabases() {\n  const [availableDbs, setAvailableDbs] = useState(null);\n  const getAvailable = useCallback(() => {\n    SupersetClient.get({\n      endpoint: `/api/v1/database/available/`\n    }).then(({ json }) => {\n      setAvailableDbs(json);\n    });\n  }, [setAvailableDbs]);\n  return [availableDbs, getAvailable];\n}__signature__(useAvailableDatabases, \"useState{[availableDbs, setAvailableDbs](null)}\\nuseCallback{getAvailable}\");\nconst transformDB = (db) => {\n  if (db && Array.isArray(db == null ? void 0 : db.catalog)) {\n    return {\n      ...db,\n      catalog: Object.assign({}, ...db.catalog.map((x) => ({\n        [x.name]: x.value\n      })))\n    };\n  }\n  return db;\n};\nexport function useDatabaseValidation() {\n  const [validationErrors, setValidationErrors] = useState(null);\n  const getValidation = useCallback((database, onCreate = false) => {var _database$parameters;\n    if (database != null && (_database$parameters = database.parameters) != null && _database$parameters.ssh) {\n      // TODO: /validate_parameters/ and related utils should support ssh tunnel\n      setValidationErrors(null);\n      return [];\n    }\n    return SupersetClient.post({\n      endpoint: '/api/v1/database/validate_parameters/',\n      body: JSON.stringify(transformDB(database)),\n      headers: { 'Content-Type': 'application/json' }\n    }).\n    then(() => {\n      setValidationErrors(null);\n    })\n    // eslint-disable-next-line consistent-return\n    .catch((e) => {\n      if (typeof e.json === 'function') {\n        return e.json().then(({ errors = [] }) => {\n          const parsedErrors = errors.\n          filter((error) => {\n            const skipValidationError = ![\n            'CONNECTION_MISSING_PARAMETERS_ERROR',\n            'CONNECTION_ACCESS_DENIED_ERROR'].\n            includes(error.error_type);\n            return skipValidationError || onCreate;\n          }).\n          reduce((obj, { error_type, extra, message }) => {var _extra$issue_codes;\n            if (extra.catalog) {\n              if (extra.catalog.name) {\n                return {\n                  ...obj,\n                  error_type,\n                  [extra.catalog.idx]: {\n                    name: message\n                  }\n                };\n              }\n              if (extra.catalog.url) {\n                return {\n                  ...obj,\n                  error_type,\n                  [extra.catalog.idx]: {\n                    url: message\n                  }\n                };\n              }\n              return {\n                ...obj,\n                error_type,\n                [extra.catalog.idx]: {\n                  name: message,\n                  url: message\n                }\n              };\n            }\n            // if extra.invalid doesn't exist then the\n            // error can't be mapped to a parameter\n            // so leave it alone\n            if (extra.invalid) {\n              return {\n                ...obj,\n                [extra.invalid[0]]: message,\n                error_type\n              };\n            }\n            if (extra.missing) {\n              return {\n                ...obj,\n                error_type,\n                ...Object.assign({}, ...extra.missing.map((field) => ({\n                  [field]: 'This is a required field'\n                })))\n              };\n            }\n            if ((_extra$issue_codes = extra.issue_codes) != null && _extra$issue_codes.length) {var _extra$issue_codes$;\n              return {\n                ...obj,\n                error_type,\n                description: message || ((_extra$issue_codes$ = extra.issue_codes[0]) == null ? void 0 : _extra$issue_codes$.message)\n              };\n            }\n            return obj;\n          }, {});\n          setValidationErrors(parsedErrors);\n          return parsedErrors;\n        });\n      }\n      // eslint-disable-next-line no-console\n      console.error(e);\n    });\n  }, [setValidationErrors]);\n  return [validationErrors, getValidation, setValidationErrors];\n}__signature__(useDatabaseValidation, \"useState{[validationErrors, setValidationErrors](null)}\\nuseCallback{getValidation}\");\nexport const reportSelector = (state, resourceType, resourceId) => {\n  if (resourceId) {var _state$reports$resour;\n    return (_state$reports$resour = state.reports[resourceType]) == null ? void 0 : _state$reports$resour[resourceId];\n  }\n  return null;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(parsedErrorMessage, \"parsedErrorMessage\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useListViewResource, \"useListViewResource\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useSingleViewResource, \"useSingleViewResource\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useImportResource, \"useImportResource\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(favoriteApis, \"favoriteApis\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useFavoriteStatus, \"useFavoriteStatus\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useChartEditModal, \"useChartEditModal\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(copyQueryLink, \"copyQueryLink\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(getDatabaseImages, \"getDatabaseImages\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(getConnectionAlert, \"getConnectionAlert\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(getDatabaseDocumentationLinks, \"getDatabaseDocumentationLinks\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(testDatabaseConnection, \"testDatabaseConnection\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useAvailableDatabases, \"useAvailableDatabases\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(transformDB, \"transformDB\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(useDatabaseValidation, \"useDatabaseValidation\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");reactHotLoader.register(reportSelector, \"reportSelector\", \"/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["rison","useState","useEffect","useCallback","makeApi","SupersetClient","t","getClientErrorObject","createErrorHandler","getAlreadyExists","getPasswordsNeeded","hasTerminalValidation","getSSHPasswordsNeeded","getSSHPrivateKeysNeeded","getSSHPrivateKeyPasswordsNeeded","copyTextToClipboard","ensureAppRoot","SupersetText","parsedErrorMessage","errorMessage","Object","entries","map","key","value","Array","isArray","join","useListViewResource","resource","resourceLabel","handleErrorMsg","infoEnable","defaultCollectionValue","baseFilters","initialLoadingState","selectColumns","state","setState","count","collection","loading","lastFetchDataConfig","permissions","bulkSelectEnabled","updateState","update","currentState","toggleBulkSelect","get","endpoint","encode","keys","then","json","infoJson","errMsg","hasPerm","perm","length","Boolean","find","p","fetchData","pageIndex","pageSize","sortBy","filters","filterValues","filterExps","concat","filter","undefined","id","operator","opr","col","queryParams","encode_uri","order_column","order_direction","desc","page","page_size","select_columns","result","lastFetched","Date","toISOString","finally","resourceCount","resourceCollection","setResourceCollection","refreshData","provideConfig","__signature__","useSingleViewResource","resourceName","path_suffix","error","fetchResource","resourceID","baseEndpoint","createResource","hideToast","post","body","JSON","stringify","headers","updateResource","setLoading","put","clearError","setResource","useImportResource","passwordsNeeded","alreadyExists","sshPasswordNeeded","sshPrivateKeyNeeded","sshPrivateKeyPasswordNeeded","failed","importResource","bundle","databasePasswords","sshTunnelPasswords","sshTunnelPrivateKey","sshTunnelPrivateKeyPasswords","overwrite","formData","FormData","append","RE_EXPORT_TEXT","Accept","catch","response","errors","message","payload","favoriteApis","chart","requestType","method","dashboard","tag","useFavoriteStatus","type","ids","favoriteStatus","setFavoriteStatus","updateFavoriteStatus","reduce","acc","element","saveFaveStar","isStarred","apiCall","delete","useChartEditModal","setCharts","charts","sliceCurrentlyEditing","setSliceCurrentlyEditing","openChartEditModal","slice_id","slice_name","description","cache_timeout","certified_by","certification_details","is_managed_externally","closeChartEditModal","handleChartUpdated","edits","newCharts","copyQueryLink","addDangerToast","addSuccessToast","Promise","resolve","window","location","origin","getDatabaseImages","DB_IMAGES","getConnectionAlert","DB_CONNECTION_ALERTS","getDatabaseDocumentationLinks","DB_CONNECTION_DOC_LINKS","testDatabaseConnection","connection","useAvailableDatabases","availableDbs","setAvailableDbs","getAvailable","transformDB","db","catalog","assign","x","name","useDatabaseValidation","validationErrors","setValidationErrors","getValidation","database","onCreate","_database$parameters","parameters","ssh","e","parsedErrors","skipValidationError","includes","error_type","obj","extra","_extra$issue_codes","idx","url","invalid","missing","field","issue_codes","_extra$issue_codes$","console","reportSelector","resourceType","resourceId","_state$reports$resour","reports","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/views/CRUD/hooks.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport rison from 'rison';\nimport { useState, useEffect, useCallback } from 'react';\nimport {\n  makeApi,\n  SupersetClient,\n  t,\n  JsonObject,\n  getClientErrorObject,\n} from '@superset-ui/core';\n\nimport {\n  createErrorHandler,\n  getAlreadyExists,\n  getPasswordsNeeded,\n  hasTerminalValidation,\n  getSSHPasswordsNeeded,\n  getSSHPrivateKeysNeeded,\n  getSSHPrivateKeyPasswordsNeeded,\n} from 'src/views/CRUD/utils';\nimport { FetchDataConfig } from 'src/components/ListView';\nimport { FilterValue } from 'src/components/ListView/types';\nimport Chart, { Slice } from 'src/types/Chart';\nimport copyTextToClipboard from 'src/utils/copy';\nimport { ensureAppRoot } from 'src/utils/pathUtils';\nimport SupersetText from 'src/utils/textUtils';\nimport { DatabaseObject } from 'src/features/databases/types';\nimport { FavoriteStatus, ImportResourceName } from './types';\n\ninterface ListViewResourceState<D extends object = any> {\n  loading: boolean;\n  collection: D[];\n  count: number;\n  permissions: string[];\n  lastFetchDataConfig: FetchDataConfig | null;\n  bulkSelectEnabled: boolean;\n  lastFetched?: string;\n}\n\nconst parsedErrorMessage = (\n  errorMessage: Record<string, string[] | string> | string,\n) => {\n  if (typeof errorMessage === 'string') {\n    return errorMessage;\n  }\n  return Object.entries(errorMessage)\n    .map(([key, value]) => {\n      if (Array.isArray(value)) {\n        return `(${key}) ${value.join(', ')}`;\n      }\n      return `(${key}) ${value}`;\n    })\n    .join('\\n');\n};\n\nexport function useListViewResource<D extends object = any>(\n  resource: string,\n  resourceLabel: string, // resourceLabel for translations\n  handleErrorMsg: (errorMsg: string) => void,\n  infoEnable = true,\n  defaultCollectionValue: D[] = [],\n  baseFilters?: FilterValue[], // must be memoized\n  initialLoadingState = true,\n  selectColumns?: string[],\n) {\n  const [state, setState] = useState<ListViewResourceState<D>>({\n    count: 0,\n    collection: defaultCollectionValue,\n    loading: initialLoadingState,\n    lastFetchDataConfig: null,\n    permissions: [],\n    bulkSelectEnabled: false,\n  });\n\n  function updateState(update: Partial<ListViewResourceState<D>>) {\n    setState(currentState => ({ ...currentState, ...update }));\n  }\n\n  function toggleBulkSelect() {\n    updateState({ bulkSelectEnabled: !state.bulkSelectEnabled });\n  }\n\n  useEffect(() => {\n    if (!infoEnable) return;\n    SupersetClient.get({\n      endpoint: `/api/v1/${resource}/_info?q=${rison.encode({\n        keys: ['permissions'],\n      })}`,\n    }).then(\n      ({ json: infoJson = {} }) => {\n        updateState({\n          permissions: infoJson.permissions,\n        });\n      },\n      createErrorHandler(errMsg =>\n        handleErrorMsg(\n          t(\n            'An error occurred while fetching %s info: %s',\n            resourceLabel,\n            errMsg,\n          ),\n        ),\n      ),\n    );\n  }, []);\n\n  function hasPerm(perm: string) {\n    if (!state.permissions.length) {\n      return false;\n    }\n\n    return Boolean(state.permissions.find(p => p === perm));\n  }\n\n  const fetchData = useCallback(\n    ({\n      pageIndex,\n      pageSize,\n      sortBy,\n      filters: filterValues,\n    }: FetchDataConfig) => {\n      // set loading state, cache the last config for refreshing data.\n      updateState({\n        lastFetchDataConfig: {\n          filters: filterValues,\n          pageIndex,\n          pageSize,\n          sortBy,\n        },\n        loading: true,\n      });\n      const filterExps = (baseFilters || [])\n        .concat(filterValues)\n        .filter(\n          ({ value }) => value !== '' && value !== null && value !== undefined,\n        )\n        .map(({ id, operator: opr, value }) => ({\n          col: id,\n          opr,\n          value:\n            value && typeof value === 'object' && 'value' in value\n              ? value.value\n              : value,\n        }));\n\n      const queryParams = rison.encode_uri({\n        order_column: sortBy[0].id,\n        order_direction: sortBy[0].desc ? 'desc' : 'asc',\n        page: pageIndex,\n        page_size: pageSize,\n        ...(filterExps.length ? { filters: filterExps } : {}),\n        ...(selectColumns?.length ? { select_columns: selectColumns } : {}),\n      });\n\n      return SupersetClient.get({\n        endpoint: `/api/v1/${resource}/?q=${queryParams}`,\n      })\n        .then(\n          ({ json = {} }) => {\n            updateState({\n              collection: json.result,\n              count: json.count,\n              lastFetched: new Date().toISOString(),\n            });\n          },\n          createErrorHandler(errMsg =>\n            handleErrorMsg(\n              t(\n                'An error occurred while fetching %ss: %s',\n                resourceLabel,\n                errMsg,\n              ),\n            ),\n          ),\n        )\n        .finally(() => {\n          updateState({ loading: false });\n        });\n    },\n    [baseFilters],\n  );\n\n  return {\n    state: {\n      loading: state.loading,\n      resourceCount: state.count,\n      resourceCollection: state.collection,\n      bulkSelectEnabled: state.bulkSelectEnabled,\n      lastFetched: state.lastFetched,\n    },\n    setResourceCollection: (update: D[]) =>\n      updateState({\n        collection: update,\n      }),\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData: (provideConfig?: FetchDataConfig) => {\n      if (state.lastFetchDataConfig) {\n        return fetchData(state.lastFetchDataConfig);\n      }\n      if (provideConfig) {\n        return fetchData(provideConfig);\n      }\n      return null;\n    },\n  };\n}\n\n// In the same vein as above, a hook for viewing a single instance of a resource (given id)\ninterface SingleViewResourceState<D extends object = any> {\n  loading: boolean;\n  resource: D | null;\n  error: any | null;\n}\n\nexport function useSingleViewResource<D extends object = any>(\n  resourceName: string,\n  resourceLabel: string, // resourceLabel for translations\n  handleErrorMsg: (errorMsg: string) => void,\n  path_suffix = '',\n) {\n  const [state, setState] = useState<SingleViewResourceState<D>>({\n    loading: false,\n    resource: null,\n    error: null,\n  });\n\n  function updateState(update: Partial<SingleViewResourceState<D>>) {\n    setState(currentState => ({ ...currentState, ...update }));\n  }\n\n  const fetchResource = useCallback(\n    (resourceID: number) => {\n      // Set loading state\n      updateState({\n        loading: true,\n      });\n\n      const baseEndpoint = `/api/v1/${resourceName}/${resourceID}`;\n      const endpoint =\n        path_suffix !== '' ? `${baseEndpoint}/${path_suffix}` : baseEndpoint;\n      return SupersetClient.get({\n        endpoint,\n      })\n        .then(\n          ({ json = {} }) => {\n            updateState({\n              resource: json.result,\n              error: null,\n            });\n            return json.result;\n          },\n          createErrorHandler((errMsg: Record<string, string[] | string>) => {\n            handleErrorMsg(\n              t(\n                'An error occurred while fetching %ss: %s',\n                resourceLabel,\n                parsedErrorMessage(errMsg),\n              ),\n            );\n\n            updateState({\n              error: errMsg,\n            });\n          }),\n        )\n        .finally(() => {\n          updateState({ loading: false });\n        });\n    },\n    [handleErrorMsg, resourceName, resourceLabel],\n  );\n\n  const createResource = useCallback(\n    (resource: D, hideToast = false) => {\n      // Set loading state\n      updateState({\n        loading: true,\n      });\n\n      return SupersetClient.post({\n        endpoint: `/api/v1/${resourceName}/`,\n        body: JSON.stringify(resource),\n        headers: { 'Content-Type': 'application/json' },\n      })\n        .then(\n          ({ json = {} }) => {\n            updateState({\n              resource: { id: json.id, ...json.result },\n              error: null,\n            });\n            return json.id;\n          },\n          createErrorHandler((errMsg: Record<string, string[] | string>) => {\n            // we did not want toasts for db-connection-ui but did not want to disable it everywhere\n            if (!hideToast) {\n              handleErrorMsg(\n                t(\n                  'An error occurred while creating %ss: %s',\n                  resourceLabel,\n                  parsedErrorMessage(errMsg),\n                ),\n              );\n            }\n\n            updateState({\n              error: errMsg,\n            });\n          }),\n        )\n        .finally(() => {\n          updateState({ loading: false });\n        });\n    },\n    [handleErrorMsg, resourceName, resourceLabel],\n  );\n\n  const updateResource = useCallback(\n    (resourceID: number, resource: D, hideToast = false, setLoading = true) => {\n      // Set loading state\n      if (setLoading) {\n        updateState({\n          loading: true,\n        });\n      }\n\n      return SupersetClient.put({\n        endpoint: `/api/v1/${resourceName}/${resourceID}`,\n        body: JSON.stringify(resource),\n        headers: { 'Content-Type': 'application/json' },\n      })\n        .then(\n          ({ json = {} }) => {\n            updateState({\n              resource: { ...json.result, id: json.id },\n              error: null,\n            });\n            return json.result;\n          },\n          createErrorHandler(errMsg => {\n            if (!hideToast) {\n              handleErrorMsg(\n                t(\n                  'An error occurred while fetching %ss: %s',\n                  resourceLabel,\n                  JSON.stringify(errMsg),\n                ),\n              );\n            }\n\n            updateState({\n              error: errMsg,\n            });\n\n            return errMsg;\n          }),\n        )\n        .finally(() => {\n          if (setLoading) {\n            updateState({ loading: false });\n          }\n        });\n    },\n    [handleErrorMsg, resourceName, resourceLabel],\n  );\n\n  const clearError = () =>\n    updateState({\n      error: null,\n    });\n\n  return {\n    state,\n    setResource: (update: D) =>\n      updateState({\n        resource: update,\n      }),\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  };\n}\n\ninterface ImportResourceState {\n  loading: boolean;\n  passwordsNeeded: string[];\n  alreadyExists: string[];\n  sshPasswordNeeded: string[];\n  sshPrivateKeyNeeded: string[];\n  sshPrivateKeyPasswordNeeded: string[];\n  failed: boolean;\n}\n\nexport function useImportResource(\n  resourceName: ImportResourceName,\n  resourceLabel: string, // resourceLabel for translations\n  handleErrorMsg: (errorMsg: string) => void,\n) {\n  const [state, setState] = useState<ImportResourceState>({\n    loading: false,\n    passwordsNeeded: [],\n    alreadyExists: [],\n    sshPasswordNeeded: [],\n    sshPrivateKeyNeeded: [],\n    sshPrivateKeyPasswordNeeded: [],\n    failed: false,\n  });\n\n  function updateState(update: Partial<ImportResourceState>) {\n    setState(currentState => ({ ...currentState, ...update }));\n  }\n\n  const importResource = useCallback(\n    (\n      bundle: File,\n      databasePasswords: Record<string, string> = {},\n      sshTunnelPasswords: Record<string, string> = {},\n      sshTunnelPrivateKey: Record<string, string> = {},\n      sshTunnelPrivateKeyPasswords: Record<string, string> = {},\n      overwrite = false,\n    ) => {\n      // Set loading state\n      updateState({\n        loading: true,\n        failed: false,\n      });\n\n      const formData = new FormData();\n      formData.append('formData', bundle);\n\n      const RE_EXPORT_TEXT = t(\n        'Please re-export your file and try importing again',\n      );\n\n      /* The import bundle never contains database passwords; if required\n       * they should be provided by the user during import.\n       */\n      if (databasePasswords) {\n        formData.append('passwords', JSON.stringify(databasePasswords));\n      }\n      /* If the imported model already exists the user needs to confirm\n       * that they want to overwrite it.\n       */\n      if (overwrite) {\n        formData.append('overwrite', 'true');\n      }\n      /* The import bundle may contain ssh tunnel passwords; if required\n       * they should be provided by the user during import.\n       */\n      if (sshTunnelPasswords) {\n        formData.append(\n          'ssh_tunnel_passwords',\n          JSON.stringify(sshTunnelPasswords),\n        );\n      }\n      /* The import bundle may contain ssh tunnel private_key; if required\n       * they should be provided by the user during import.\n       */\n      if (sshTunnelPrivateKey) {\n        formData.append(\n          'ssh_tunnel_private_keys',\n          JSON.stringify(sshTunnelPrivateKey),\n        );\n      }\n      /* The import bundle may contain ssh tunnel private_key_password; if required\n       * they should be provided by the user during import.\n       */\n      if (sshTunnelPrivateKeyPasswords) {\n        formData.append(\n          'ssh_tunnel_private_key_passwords',\n          JSON.stringify(sshTunnelPrivateKeyPasswords),\n        );\n      }\n\n      return SupersetClient.post({\n        endpoint: `/api/v1/${resourceName}/import/`,\n        body: formData,\n        headers: { Accept: 'application/json' },\n      })\n        .then(() => {\n          updateState({\n            passwordsNeeded: [],\n            alreadyExists: [],\n            sshPasswordNeeded: [],\n            sshPrivateKeyNeeded: [],\n            sshPrivateKeyPasswordNeeded: [],\n            failed: false,\n          });\n          return true;\n        })\n        .catch(response =>\n          getClientErrorObject(response).then(error => {\n            updateState({\n              failed: true,\n            });\n            if (!error.errors) {\n              handleErrorMsg(\n                t(\n                  'An error occurred while importing %s: %s',\n                  resourceLabel,\n                  error.message || error.error,\n                ),\n              );\n              return false;\n            }\n            if (hasTerminalValidation(error.errors)) {\n              handleErrorMsg(\n                t(\n                  'An error occurred while importing %s: %s',\n                  resourceLabel,\n                  [\n                    ...error.errors.map(payload => payload.message),\n                    RE_EXPORT_TEXT,\n                  ].join('.\\n'),\n                ),\n              );\n            } else {\n              updateState({\n                passwordsNeeded: getPasswordsNeeded(error.errors),\n                sshPasswordNeeded: getSSHPasswordsNeeded(error.errors),\n                sshPrivateKeyNeeded: getSSHPrivateKeysNeeded(error.errors),\n                sshPrivateKeyPasswordNeeded: getSSHPrivateKeyPasswordsNeeded(\n                  error.errors,\n                ),\n                alreadyExists: getAlreadyExists(error.errors),\n              });\n            }\n            return false;\n          }),\n        )\n        .finally(() => {\n          updateState({ loading: false });\n        });\n    },\n    [],\n  );\n\n  return { state, importResource };\n}\n\ntype FavoriteStatusResponse = {\n  result: Array<{\n    id: string;\n    value: boolean;\n  }>;\n};\n\nconst favoriteApis = {\n  chart: makeApi<Array<string | number>, FavoriteStatusResponse>({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/chart/favorite_status/',\n  }),\n  dashboard: makeApi<Array<string | number>, FavoriteStatusResponse>({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/dashboard/favorite_status/',\n  }),\n  tag: makeApi<Array<string | number>, FavoriteStatusResponse>({\n    requestType: 'rison',\n    method: 'GET',\n    endpoint: '/api/v1/tag/favorite_status/',\n  }),\n};\n\nexport function useFavoriteStatus(\n  type: 'chart' | 'dashboard' | 'tag',\n  ids: Array<string | number>,\n  handleErrorMsg: (message: string) => void,\n) {\n  const [favoriteStatus, setFavoriteStatus] = useState<FavoriteStatus>({});\n\n  const updateFavoriteStatus = (update: FavoriteStatus) =>\n    setFavoriteStatus(currentState => ({ ...currentState, ...update }));\n\n  useEffect(() => {\n    if (!ids.length) {\n      return;\n    }\n    favoriteApis[type](ids).then(\n      ({ result }) => {\n        const update = result.reduce<Record<string, boolean>>(\n          (acc, element) => {\n            acc[element.id] = element.value;\n            return acc;\n          },\n          {},\n        );\n        updateFavoriteStatus(update);\n      },\n      createErrorHandler(errMsg =>\n        handleErrorMsg(\n          t('There was an error fetching the favorite status: %s', errMsg),\n        ),\n      ),\n    );\n  }, [ids, type, handleErrorMsg]);\n\n  const saveFaveStar = useCallback(\n    (id: number, isStarred: boolean) => {\n      const endpoint = `/api/v1/${type}/${id}/favorites/`;\n      const apiCall = isStarred\n        ? SupersetClient.delete({\n            endpoint,\n          })\n        : SupersetClient.post({ endpoint });\n\n      apiCall.then(\n        () => {\n          updateFavoriteStatus({\n            [id]: !isStarred,\n          });\n        },\n        createErrorHandler(errMsg =>\n          handleErrorMsg(\n            t('There was an error saving the favorite status: %s', errMsg),\n          ),\n        ),\n      );\n    },\n    [type],\n  );\n\n  return [saveFaveStar, favoriteStatus] as const;\n}\n\nexport const useChartEditModal = (\n  setCharts: (charts: Array<Chart>) => void,\n  charts: Array<Chart>,\n) => {\n  const [sliceCurrentlyEditing, setSliceCurrentlyEditing] =\n    useState<Slice | null>(null);\n\n  function openChartEditModal(chart: Chart) {\n    setSliceCurrentlyEditing({\n      slice_id: chart.id,\n      slice_name: chart.slice_name,\n      description: chart.description,\n      cache_timeout: chart.cache_timeout,\n      certified_by: chart.certified_by,\n      certification_details: chart.certification_details,\n      is_managed_externally: chart.is_managed_externally,\n    });\n  }\n\n  function closeChartEditModal() {\n    setSliceCurrentlyEditing(null);\n  }\n\n  function handleChartUpdated(edits: Chart) {\n    // update the chart in our state with the edited info\n    const newCharts = charts.map((chart: Chart) =>\n      chart.id === edits.id ? { ...chart, ...edits } : chart,\n    );\n    setCharts(newCharts);\n  }\n\n  return {\n    sliceCurrentlyEditing,\n    handleChartUpdated,\n    openChartEditModal,\n    closeChartEditModal,\n  };\n};\n\nexport const copyQueryLink = (\n  id: number,\n  addDangerToast: (arg0: string) => void,\n  addSuccessToast: (arg0: string) => void,\n) => {\n  copyTextToClipboard(() =>\n    Promise.resolve(\n      `${window.location.origin}${ensureAppRoot(`/sqllab?savedQueryId=${id}`)}`,\n    ),\n  )\n    .then(() => {\n      addSuccessToast(t('Link Copied!'));\n    })\n    .catch(() => {\n      addDangerToast(t('Sorry, your browser does not support copying.'));\n    });\n};\n\nexport const getDatabaseImages = () => SupersetText.DB_IMAGES;\n\nexport const getConnectionAlert = () => SupersetText.DB_CONNECTION_ALERTS;\nexport const getDatabaseDocumentationLinks = () =>\n  SupersetText.DB_CONNECTION_DOC_LINKS;\n\nexport const testDatabaseConnection = (\n  connection: Partial<DatabaseObject>,\n  handleErrorMsg: (errorMsg: string) => void,\n  addSuccessToast: (arg0: string) => void,\n) => {\n  SupersetClient.post({\n    endpoint: 'api/v1/database/test_connection/',\n    body: JSON.stringify(connection),\n    headers: { 'Content-Type': 'application/json' },\n  }).then(\n    () => {\n      addSuccessToast(t('Connection looks good!'));\n    },\n    createErrorHandler((errMsg: Record<string, string[] | string> | string) => {\n      handleErrorMsg(t('ERROR: %s', parsedErrorMessage(errMsg)));\n    }),\n  );\n};\n\nexport function useAvailableDatabases() {\n  const [availableDbs, setAvailableDbs] = useState<JsonObject | null>(null);\n\n  const getAvailable = useCallback(() => {\n    SupersetClient.get({\n      endpoint: `/api/v1/database/available/`,\n    }).then(({ json }) => {\n      setAvailableDbs(json);\n    });\n  }, [setAvailableDbs]);\n\n  return [availableDbs, getAvailable] as const;\n}\n\nconst transformDB = (db: Partial<DatabaseObject> | null) => {\n  if (db && Array.isArray(db?.catalog)) {\n    return {\n      ...db,\n      catalog: Object.assign(\n        {},\n        ...db.catalog.map((x: { name: string; value: string }) => ({\n          [x.name]: x.value,\n        })),\n      ),\n    };\n  }\n  return db;\n};\n\nexport function useDatabaseValidation() {\n  const [validationErrors, setValidationErrors] = useState<JsonObject | null>(\n    null,\n  );\n  const getValidation = useCallback(\n    (database: Partial<DatabaseObject> | null, onCreate = false) => {\n      if (database?.parameters?.ssh) {\n        // TODO: /validate_parameters/ and related utils should support ssh tunnel\n        setValidationErrors(null);\n        return [];\n      }\n\n      return (\n        SupersetClient.post({\n          endpoint: '/api/v1/database/validate_parameters/',\n          body: JSON.stringify(transformDB(database)),\n          headers: { 'Content-Type': 'application/json' },\n        })\n          .then(() => {\n            setValidationErrors(null);\n          })\n          // eslint-disable-next-line consistent-return\n          .catch(e => {\n            if (typeof e.json === 'function') {\n              return e.json().then(({ errors = [] }: JsonObject) => {\n                const parsedErrors = errors\n                  .filter((error: { error_type: string }) => {\n                    const skipValidationError = ![\n                      'CONNECTION_MISSING_PARAMETERS_ERROR',\n                      'CONNECTION_ACCESS_DENIED_ERROR',\n                    ].includes(error.error_type);\n                    return skipValidationError || onCreate;\n                  })\n                  .reduce(\n                    (\n                      obj: {},\n                      {\n                        error_type,\n                        extra,\n                        message,\n                      }: {\n                        error_type: string;\n                        extra: {\n                          invalid?: string[];\n                          missing?: string[];\n                          name: string;\n                          catalog: {\n                            name: string;\n                            url: string;\n                            idx: number;\n                          };\n                          issue_codes?: {\n                            code?: number;\n                            message?: string;\n                          }[];\n                        };\n                        message: string;\n                      },\n                    ) => {\n                      if (extra.catalog) {\n                        if (extra.catalog.name) {\n                          return {\n                            ...obj,\n                            error_type,\n                            [extra.catalog.idx]: {\n                              name: message,\n                            },\n                          };\n                        }\n                        if (extra.catalog.url) {\n                          return {\n                            ...obj,\n                            error_type,\n                            [extra.catalog.idx]: {\n                              url: message,\n                            },\n                          };\n                        }\n\n                        return {\n                          ...obj,\n                          error_type,\n                          [extra.catalog.idx]: {\n                            name: message,\n                            url: message,\n                          },\n                        };\n                      }\n                      // if extra.invalid doesn't exist then the\n                      // error can't be mapped to a parameter\n                      // so leave it alone\n                      if (extra.invalid) {\n                        return {\n                          ...obj,\n                          [extra.invalid[0]]: message,\n                          error_type,\n                        };\n                      }\n                      if (extra.missing) {\n                        return {\n                          ...obj,\n                          error_type,\n                          ...Object.assign(\n                            {},\n                            ...extra.missing.map(field => ({\n                              [field]: 'This is a required field',\n                            })),\n                          ),\n                        };\n                      }\n                      if (extra.issue_codes?.length) {\n                        return {\n                          ...obj,\n                          error_type,\n                          description: message || extra.issue_codes[0]?.message,\n                        };\n                      }\n\n                      return obj;\n                    },\n                    {},\n                  );\n                setValidationErrors(parsedErrors);\n                return parsedErrors;\n              });\n            }\n            // eslint-disable-next-line no-console\n            console.error(e);\n          })\n      );\n    },\n    [setValidationErrors],\n  );\n\n  return [validationErrors, getValidation, setValidationErrors] as const;\n}\n\nexport const reportSelector = (\n  state: Record<string, any>,\n  resourceType: string,\n  resourceId?: number,\n) => {\n  if (resourceId) {\n    return state.reports[resourceType]?.[resourceId];\n  }\n  return null;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}