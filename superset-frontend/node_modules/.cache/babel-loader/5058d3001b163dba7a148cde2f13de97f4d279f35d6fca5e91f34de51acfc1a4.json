{"ast":null,"code":"import { css as _css } from \"@emotion/react\";import _isEmpty from \"lodash/isEmpty\";import _throttle from \"lodash/throttle\";import _debounce from \"lodash/debounce\";var _bootstrapData$common, _bootstrapData$common2;(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();function _EMOTION_STRINGIFIED_CSS_ERROR__() {return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport { useState, useEffect, useMemo, useRef, useCallback } from 'react';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { CSSTransition } from 'react-transition-group';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport Split from 'react-split';\nimport { css, FeatureFlag, isFeatureEnabled, styled, t, useTheme, getExtensionsRegistry } from '@superset-ui/core';\n\nimport Modal from 'src/components/Modal';\nimport Mousetrap from 'mousetrap';\nimport Button from 'src/components/Button';\nimport Timer from 'src/components/Timer';\nimport ResizableSidebar from 'src/components/ResizableSidebar';\nimport { Dropdown } from 'src/components/Dropdown';\nimport { Skeleton } from 'src/components';\nimport { Switch } from 'src/components/Switch';\nimport { Input } from 'src/components/Input';\nimport { Menu } from 'src/components/Menu';\nimport { Icons } from 'src/components/Icons';\nimport { detectOS } from 'src/utils/common';\nimport { addNewQueryEditor, CtasEnum, estimateQueryCost, persistEditorHeight, postStopQuery, queryEditorSetAutorun, queryEditorSetSql, queryEditorSetCursorPosition, queryEditorSetAndSaveSql, queryEditorSetTemplateParams, runQueryFromSqlEditor, saveQuery, addSavedQueryToTabState, scheduleQuery, setActiveSouthPaneTab, updateSavedQuery, formatQuery, fetchQueryEditor, switchQueryEditor } from 'src/SqlLab/actions/sqlLab';\nimport { STATE_TYPE_MAP, SQL_EDITOR_GUTTER_HEIGHT, SQL_EDITOR_GUTTER_MARGIN, SQL_TOOLBAR_HEIGHT, SQL_EDITOR_LEFTBAR_WIDTH, SQL_EDITOR_PADDING, INITIAL_NORTH_PERCENT, INITIAL_SOUTH_PERCENT, SET_QUERY_EDITOR_SQL_DEBOUNCE_MS, WINDOW_RESIZE_THROTTLE_MS } from 'src/SqlLab/constants';\nimport { getItem, LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\nimport { EmptyState } from 'src/components/EmptyState';\nimport Alert from 'src/components/Alert';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport useLogAction from 'src/logger/useLogAction';\nimport { LOG_ACTIONS_SQLLAB_CREATE_TABLE_AS, LOG_ACTIONS_SQLLAB_CREATE_VIEW_AS, LOG_ACTIONS_SQLLAB_ESTIMATE_QUERY_COST, LOG_ACTIONS_SQLLAB_FORMAT_SQL, LOG_ACTIONS_SQLLAB_LOAD_TAB_STATE, LOG_ACTIONS_SQLLAB_RUN_QUERY, LOG_ACTIONS_SQLLAB_STOP_QUERY, Logger } from 'src/logger/LogUtils';\nimport TemplateParamsEditor from '../TemplateParamsEditor';\nimport SouthPane from '../SouthPane';\nimport SaveQuery from '../SaveQuery';\nimport ScheduleQueryButton from '../ScheduleQueryButton';\nimport EstimateQueryCostButton from '../EstimateQueryCostButton';\nimport ShareSqlLabQuery from '../ShareSqlLabQuery';\nimport SqlEditorLeftBar from '../SqlEditorLeftBar';\nimport AceEditorWrapper from '../AceEditorWrapper';\nimport RunQueryActionButton from '../RunQueryActionButton';\nimport QueryLimitSelect from '../QueryLimitSelect';\nimport KeyboardShortcutButton, { KEY_MAP, KeyboardShortcut } from '../KeyboardShortcutButton';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst bootstrapData = getBootstrapData();\nconst scheduledQueriesConf = bootstrapData == null ? void 0 : (_bootstrapData$common = bootstrapData.common) == null ? void 0 : (_bootstrapData$common2 = _bootstrapData$common.conf) == null ? void 0 : _bootstrapData$common2.SCHEDULED_QUERIES;\nconst StyledToolbar = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 2}px;\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  display: flex;\n  justify-content: space-between;\n  border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  border-top: 0;\n  column-gap: ${({ theme }) => theme.gridUnit}px;\n\n  form {\n    margin-block-end: 0;\n  }\n\n  .leftItems,\n  .rightItems {\n    display: flex;\n    align-items: center;\n    & > span {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n      display: inline-block;\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n\n  .limitDropdown {\n    white-space: nowrap;\n  }\n`;\nconst StyledSidebar = styled.div`\n  flex: 0 0 ${({ width }) => width}px;\n  width: ${({ width }) => width}px;\n  padding: ${({ theme, hide }) => hide ? 0 : theme.gridUnit * 2.5}px;\n  border-right: 1px solid\n    ${({ theme, hide }) => hide ? 'transparent' : theme.colors.grayscale.light2};\n`;\nconst StyledSqlEditor = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n\n    .schemaPane {\n      transition: transform ${theme.transitionTiming}s ease-in-out;\n    }\n\n    .queryPane {\n      flex: 1 1 auto;\n      padding: ${theme.gridUnit * 2}px;\n      overflow-y: auto;\n      overflow-x: scroll;\n    }\n\n    .schemaPane-enter-done,\n    .schemaPane-exit {\n      transform: translateX(0);\n      z-index: 7;\n    }\n\n    .schemaPane-exit-active {\n      transform: translateX(-120%);\n    }\n\n    .schemaPane-enter-active {\n      transform: translateX(0);\n      max-width: ${theme.gridUnit * 75}px;\n    }\n\n    .schemaPane-enter,\n    .schemaPane-exit-done {\n      max-width: 0;\n      transform: translateX(-120%);\n      overflow: hidden;\n    }\n\n    .schemaPane-exit-done + .queryPane {\n      margin-left: 0;\n    }\n\n    .gutter {\n      border-top: 1px solid ${theme.colors.grayscale.light2};\n      border-bottom: 1px solid ${theme.colors.grayscale.light2};\n      width: 3%;\n      margin: ${SQL_EDITOR_GUTTER_MARGIN}px 47%;\n    }\n\n    .gutter.gutter-vertical {\n      cursor: row-resize;\n    }\n  `}\n`;\nconst extensionsRegistry = getExtensionsRegistry();\nconst elementStyle = (dimension, elementSize, gutterSize) => ({\n  [dimension]: `calc(${elementSize}% - ${gutterSize + SQL_EDITOR_GUTTER_MARGIN}px)`\n});var _ref = process.env.NODE_ENV === \"production\" ? { name: \"1eoy87d\", styles: \"display:flex;justify-content:space-between\" } : { name: \"1egglng-renderDropdown\", styles: \"display:flex;justify-content:space-between;label:renderDropdown;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };var _ref2 = process.env.NODE_ENV === \"production\" ? { name: \"1eoy87d\", styles: \"display:flex;justify-content:space-between\" } : { name: \"1egglng-renderDropdown\", styles: \"display:flex;justify-content:space-between;label:renderDropdown;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ };\nconst SqlEditor = ({ queryEditor, defaultQueryLimit, maxRow, displayLimit, saveQueryWarning, scheduleQueryWarning }) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const { database, latestQuery, hideLeftBar, currentQueryEditorId, hasSqlStatement } = useSelector(({ sqlLab: { unsavedQueryEditor, databases, queries, tabHistory } }) => {var _queryEditor$sql;\n    let { dbId, latestQueryId, hideLeftBar } = queryEditor;\n    if ((unsavedQueryEditor == null ? void 0 : unsavedQueryEditor.id) === queryEditor.id) {\n      dbId = unsavedQueryEditor.dbId || dbId;\n      latestQueryId = unsavedQueryEditor.latestQueryId || latestQueryId;\n      hideLeftBar =\n      typeof unsavedQueryEditor.hideLeftBar === 'boolean' ?\n      unsavedQueryEditor.hideLeftBar :\n      hideLeftBar;\n    }\n    return {\n      hasSqlStatement: Boolean(((_queryEditor$sql = queryEditor.sql) == null ? void 0 : _queryEditor$sql.trim().length) > 0),\n      database: databases[dbId || ''],\n      latestQuery: queries[latestQueryId || ''],\n      hideLeftBar,\n      currentQueryEditorId: tabHistory.slice(-1)[0]\n    };\n  }, shallowEqual);\n  const logAction = useLogAction({ queryEditorId: queryEditor.id });\n  const isActive = currentQueryEditorId === queryEditor.id;\n  const [height, setHeight] = useState(0);\n  const [autorun, setAutorun] = useState(queryEditor.autorun);\n  const [ctas, setCtas] = useState('');\n  const [northPercent, setNorthPercent] = useState(queryEditor.northPercent || INITIAL_NORTH_PERCENT);\n  const [southPercent, setSouthPercent] = useState(queryEditor.southPercent || INITIAL_SOUTH_PERCENT);\n  const [autocompleteEnabled, setAutocompleteEnabled] = useState(getItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, true));\n  const [renderHTMLEnabled, setRenderHTMLEnabled] = useState(getItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, true));\n  const [showCreateAsModal, setShowCreateAsModal] = useState(false);\n  const [createAs, setCreateAs] = useState('');\n  const showEmptyState = useMemo(() => !database || _isEmpty(database), [database]);\n  const sqlEditorRef = useRef(null);\n  const northPaneRef = useRef(null);\n  const SqlFormExtension = extensionsRegistry.get('sqleditor.extension.form');\n  const startQuery = useCallback((ctasArg = false, ctas_method = CtasEnum.Table) => {\n    if (!database) {\n      return;\n    }\n    dispatch(runQueryFromSqlEditor(database, queryEditor, defaultQueryLimit, ctasArg ? ctas : '', ctasArg, ctas_method));\n    dispatch(setActiveSouthPaneTab('Results'));\n  }, [ctas, database, defaultQueryLimit, dispatch, queryEditor]);\n  const formatCurrentQuery = useCallback((useShortcut) => {\n    logAction(LOG_ACTIONS_SQLLAB_FORMAT_SQL, {\n      shortcut: Boolean(useShortcut)\n    });\n    dispatch(formatQuery(queryEditor));\n  }, [dispatch, queryEditor, logAction]);\n  const stopQuery = useCallback(() => {\n    if (latestQuery && ['running', 'pending'].indexOf(latestQuery.state) >= 0) {\n      dispatch(postStopQuery(latestQuery));\n    }\n    return false;\n  }, [dispatch, latestQuery]);\n  const runQuery = () => {\n    if (database) {\n      startQuery();\n    }\n  };\n  useEffect(() => {\n    if (autorun) {\n      setAutorun(false);\n      dispatch(queryEditorSetAutorun(queryEditor, false));\n      startQuery();\n    }\n  }, [autorun, dispatch, queryEditor, startQuery]);\n  // One layer of abstraction for easy spying in unit tests\n  const getSqlEditorHeight = () => sqlEditorRef.current ?\n  sqlEditorRef.current.clientHeight - SQL_EDITOR_PADDING * 2 :\n  0;\n  const getHotkeyConfig = useCallback(() => {\n    // Get the user's OS\n    const userOS = detectOS();\n    return [\n    {\n      name: 'runQuery1',\n      key: KeyboardShortcut.CtrlR,\n      descr: KEY_MAP[KeyboardShortcut.CtrlR],\n      func: () => {\n        if (queryEditor.sql.trim() !== '') {\n          logAction(LOG_ACTIONS_SQLLAB_RUN_QUERY, { shortcut: true });\n          startQuery();\n        }\n      }\n    },\n    {\n      name: 'runQuery2',\n      key: KeyboardShortcut.CtrlEnter,\n      descr: KEY_MAP[KeyboardShortcut.CtrlEnter],\n      func: () => {\n        if (queryEditor.sql.trim() !== '') {\n          logAction(LOG_ACTIONS_SQLLAB_RUN_QUERY, { shortcut: true });\n          startQuery();\n        }\n      }\n    },\n    {\n      name: 'newTab',\n      ...(userOS === 'Windows' ?\n      {\n        key: KeyboardShortcut.CtrlQ,\n        descr: KEY_MAP[KeyboardShortcut.CtrlQ]\n      } :\n      {\n        key: KeyboardShortcut.CtrlT,\n        descr: KEY_MAP[KeyboardShortcut.CtrlT]\n      }),\n      func: () => {\n        Logger.markTimeOrigin();\n        dispatch(addNewQueryEditor());\n      }\n    },\n    {\n      name: 'stopQuery',\n      ...(userOS === 'MacOS' ?\n      {\n        key: KeyboardShortcut.CtrlX,\n        descr: KEY_MAP[KeyboardShortcut.CtrlX]\n      } :\n      {\n        key: KeyboardShortcut.CtrlE,\n        descr: KEY_MAP[KeyboardShortcut.CtrlE]\n      }),\n      func: () => {\n        logAction(LOG_ACTIONS_SQLLAB_STOP_QUERY, { shortcut: true });\n        stopQuery();\n      }\n    },\n    {\n      name: 'formatQuery',\n      key: KeyboardShortcut.CtrlShiftF,\n      descr: KEY_MAP[KeyboardShortcut.CtrlShiftF],\n      func: () => {\n        formatCurrentQuery(true);\n      }\n    },\n    {\n      name: 'switchTabToLeft',\n      key: KeyboardShortcut.CtrlLeft,\n      descr: KEY_MAP[KeyboardShortcut.CtrlLeft],\n      func: () => {\n        dispatch(switchQueryEditor(true));\n      }\n    },\n    {\n      name: 'switchTabToRight',\n      key: KeyboardShortcut.CtrlRight,\n      descr: KEY_MAP[KeyboardShortcut.CtrlRight],\n      func: () => {\n        dispatch(switchQueryEditor(false));\n      }\n    }];\n\n  }, [dispatch, queryEditor.sql, startQuery, stopQuery, formatCurrentQuery]);\n  const hotkeys = useMemo(() => {\n    // Get all hotkeys including ace editor hotkeys\n    // Get the user's OS\n    const userOS = detectOS();\n    const base = [\n    ...getHotkeyConfig(),\n    {\n      name: 'runQuery3',\n      key: KeyboardShortcut.CtrlShiftEnter,\n      descr: KEY_MAP[KeyboardShortcut.CtrlShiftEnter],\n      func: (editor) => {var _start, _start2, _start3, _start4, _start5;\n        if (!editor.getValue().trim()) {\n          return;\n        }\n        const session = editor.getSession();\n        const cursorPosition = editor.getCursorPosition();\n        const totalLine = session.getLength();\n        const currentRow = editor.getFirstVisibleRow();\n        const semicolonEnd = editor.find(';', {\n          backwards: false,\n          skipCurrent: true\n        });\n        let end;\n        if (semicolonEnd) {\n          ({ end } = semicolonEnd);\n        }\n        if (!end || end.row < cursorPosition.row) {\n          end = {\n            row: totalLine + 1,\n            column: 0\n          };\n        }\n        const semicolonStart = editor.find(';', {\n          backwards: true,\n          skipCurrent: true\n        });\n        let start;\n        if (semicolonStart) {\n          start = semicolonStart.end;\n        }\n        let currentLine = (_start = start) == null ? void 0 : _start.row;\n        if (!currentLine ||\n        currentLine > cursorPosition.row ||\n        currentLine === cursorPosition.row &&\n        (((_start2 = start) == null ? void 0 : _start2.column) || 0) > cursorPosition.column) {\n          currentLine = 0;\n        }\n        let content = currentLine === ((_start3 = start) == null ? void 0 : _start3.row) ?\n        session.getLine(currentLine).slice(start.column).trim() :\n        session.getLine(currentLine).trim();\n        while (!content && currentLine < totalLine) {\n          currentLine += 1;\n          content = session.getLine(currentLine).trim();\n        }\n        if (currentLine !== ((_start4 = start) == null ? void 0 : _start4.row)) {\n          start = { row: currentLine, column: 0 };\n        }\n        editor.selection.setSelectionRange({\n          start: (_start5 = start) != null ? _start5 : { row: 0, column: 0 },\n          end\n        });\n        startQuery();\n        editor.selection.clearSelection();\n        editor.moveCursorToPosition(cursorPosition);\n        editor.scrollToRow(currentRow);\n      }\n    }];\n\n    if (userOS === 'MacOS') {\n      base.push({\n        name: 'previousLine',\n        key: KeyboardShortcut.CtrlP,\n        descr: KEY_MAP[KeyboardShortcut.CtrlP],\n        func: (editor) => {\n          editor.navigateUp();\n        }\n      });\n    }\n    return base;\n  }, [getHotkeyConfig, startQuery]);\n  const onBeforeUnload = useEffectEvent((event) => {var _database$extra_json;\n    if (database != null && (_database$extra_json = database.extra_json) != null && _database$extra_json.cancel_query_on_windows_unload &&\n    (latestQuery == null ? void 0 : latestQuery.state) === 'running') {\n      event.preventDefault();\n      stopQuery();\n    }\n  });\n  const shouldLoadQueryEditor = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) &&\n  !queryEditor.loaded;\n  const loadQueryEditor = useEffectEvent(() => {\n    const duration = Logger.getTimestamp();\n    logAction(LOG_ACTIONS_SQLLAB_LOAD_TAB_STATE, {\n      duration,\n      queryEditorId: queryEditor.id,\n      inLocalStorage: Boolean(queryEditor.inLocalStorage),\n      hasLoaded: !shouldLoadQueryEditor\n    });\n    if (shouldLoadQueryEditor) {\n      dispatch(fetchQueryEditor(queryEditor, displayLimit));\n    }\n  });\n  useEffect(() => {\n    // We need to measure the height of the sql editor post render to figure the height of\n    // the south pane so it gets rendered properly\n    setHeight(getSqlEditorHeight());\n    const handleWindowResizeWithThrottle = _throttle(() => setHeight(getSqlEditorHeight()), WINDOW_RESIZE_THROTTLE_MS);\n    if (isActive) {\n      loadQueryEditor();\n      window.addEventListener('resize', handleWindowResizeWithThrottle);\n      window.addEventListener('beforeunload', onBeforeUnload);\n    }\n    return () => {\n      window.removeEventListener('resize', handleWindowResizeWithThrottle);\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n    // TODO: Remove useEffectEvent deps once https://github.com/facebook/react/pull/25881 is released\n  }, [onBeforeUnload, loadQueryEditor, isActive]);\n  useEffect(() => {\n    // setup hotkeys\n    const hotkeys = getHotkeyConfig();\n    if (isActive) {\n      // MouseTrap always override the same key\n      // Unbind (reset) will be called when App component unmount\n      hotkeys.forEach((keyConfig) => {\n        Mousetrap.bind([keyConfig.key], keyConfig.func);\n      });\n    }\n  }, [getHotkeyConfig, latestQuery, isActive]);\n  const onResizeStart = () => {\n    // Set the heights on the ace editor and the ace content area after drag starts\n    // to smooth out the visual transition to the new heights when drag ends\n    const editorEl = document.getElementsByClassName('ace_content')[0];\n    if (editorEl) {\n      editorEl.style.height = '100%';\n    }\n  };\n  const onResizeEnd = ([northPercent, southPercent]) => {var _northPaneRef$current;\n    setNorthPercent(northPercent);\n    setSouthPercent(southPercent);\n    if ((_northPaneRef$current = northPaneRef.current) != null && _northPaneRef$current.clientHeight) {\n      dispatch(persistEditorHeight(queryEditor, northPercent, southPercent));\n    }\n  };\n  const setQueryEditorAndSaveSql = useCallback((sql) => {\n    dispatch(queryEditorSetAndSaveSql(queryEditor, sql));\n  }, [dispatch, queryEditor]);\n  const setQueryEditorAndSaveSqlWithDebounce = useMemo(() => _debounce(setQueryEditorAndSaveSql, SET_QUERY_EDITOR_SQL_DEBOUNCE_MS), [setQueryEditorAndSaveSql]);\n  const onSqlChanged = useEffectEvent((sql) => {\n    dispatch(queryEditorSetSql(queryEditor, sql));\n  });\n  // Return the heights for the ace editor and the south pane as an object\n  // given the height of the sql editor, north pane percent and south pane percent.\n  const getAceEditorAndSouthPaneHeights = (height, northPercent, southPercent) => ({\n    aceEditorHeight: height * northPercent / (theme.gridUnit * 25) - (\n    SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN) -\n    SQL_TOOLBAR_HEIGHT,\n    southPaneHeight: height * southPercent / (theme.gridUnit * 25) - (\n    SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN)\n  });\n  const getQueryCostEstimate = () => {\n    logAction(LOG_ACTIONS_SQLLAB_ESTIMATE_QUERY_COST, { shortcut: false });\n    if (database) {\n      dispatch(estimateQueryCost(queryEditor));\n    }\n  };\n  const handleToggleAutocompleteEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, !autocompleteEnabled);\n    setAutocompleteEnabled(!autocompleteEnabled);\n  };\n  const handleToggleRenderHTMLEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, !renderHTMLEnabled);\n    setRenderHTMLEnabled(!renderHTMLEnabled);\n  };\n  const createTableAs = () => {\n    startQuery(true, CtasEnum.Table);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n  const createViewAs = () => {\n    startQuery(true, CtasEnum.View);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n  const ctasChanged = (event) => {\n    setCtas(event.target.value);\n  };\n  const renderDropdown = () => {\n    const qe = queryEditor;\n    const successful = (latestQuery == null ? void 0 : latestQuery.state) === 'success';\n    const scheduleToolTip = successful ?\n    t('Schedule the query periodically') :\n    t('You must run the query successfully first');\n    return _jsxs(Menu, { css: /*#__PURE__*/_css({ width: theme.gridUnit * 50 }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:renderDropdown;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hcnl1cmtvdi9zdXBlcnNldC9zdXBlcnNldC1mcm9udGVuZC9zcmMvU3FsTGFiL2NvbXBvbmVudHMvU3FsRWRpdG9yL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3ZnNCIiwiZmlsZSI6Ii9Vc2Vycy9hcnl1cmtvdi9zdXBlcnNldC9zdXBlcnNldC1mcm9udGVuZC9zcmMvU3FsTGFiL2NvbXBvbmVudHMvU3FsRWRpdG9yL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L2FuY2hvci1pcy12YWxpZCAqL1xuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvbm8tc3RhdGljLWVsZW1lbnQtaW50ZXJhY3Rpb25zICovXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VSZWYsIHVzZUNhbGxiYWNrLCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VFZmZlY3RFdmVudCBmcm9tICdzcmMvaG9va3MvdXNlRWZmZWN0RXZlbnQnO1xuaW1wb3J0IHsgQ1NTVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHsgc2hhbGxvd0VxdWFsLCB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgU3BsaXQgZnJvbSAncmVhY3Qtc3BsaXQnO1xuaW1wb3J0IHsgY3NzLCBGZWF0dXJlRmxhZywgaXNGZWF0dXJlRW5hYmxlZCwgc3R5bGVkLCB0LCB1c2VUaGVtZSwgZ2V0RXh0ZW5zaW9uc1JlZ2lzdHJ5LCB9IGZyb20gJ0BzdXBlcnNldC11aS9jb3JlJztcbmltcG9ydCB7IGRlYm91bmNlLCB0aHJvdHRsZSwgaXNFbXB0eSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnc3JjL2NvbXBvbmVudHMvTW9kYWwnO1xuaW1wb3J0IE1vdXNldHJhcCBmcm9tICdtb3VzZXRyYXAnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdzcmMvY29tcG9uZW50cy9CdXR0b24nO1xuaW1wb3J0IFRpbWVyIGZyb20gJ3NyYy9jb21wb25lbnRzL1RpbWVyJztcbmltcG9ydCBSZXNpemFibGVTaWRlYmFyIGZyb20gJ3NyYy9jb21wb25lbnRzL1Jlc2l6YWJsZVNpZGViYXInO1xuaW1wb3J0IHsgRHJvcGRvd24gfSBmcm9tICdzcmMvY29tcG9uZW50cy9Ecm9wZG93bic7XG5pbXBvcnQgeyBTa2VsZXRvbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzJztcbmltcG9ydCB7IFN3aXRjaCB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1N3aXRjaCc7XG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0lucHV0JztcbmltcG9ydCB7IE1lbnUgfSBmcm9tICdzcmMvY29tcG9uZW50cy9NZW51JztcbmltcG9ydCB7IEljb25zIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvSWNvbnMnO1xuaW1wb3J0IHsgZGV0ZWN0T1MgfSBmcm9tICdzcmMvdXRpbHMvY29tbW9uJztcbmltcG9ydCB7IGFkZE5ld1F1ZXJ5RWRpdG9yLCBDdGFzRW51bSwgZXN0aW1hdGVRdWVyeUNvc3QsIHBlcnNpc3RFZGl0b3JIZWlnaHQsIHBvc3RTdG9wUXVlcnksIHF1ZXJ5RWRpdG9yU2V0QXV0b3J1biwgcXVlcnlFZGl0b3JTZXRTcWwsIHF1ZXJ5RWRpdG9yU2V0Q3Vyc29yUG9zaXRpb24sIHF1ZXJ5RWRpdG9yU2V0QW5kU2F2ZVNxbCwgcXVlcnlFZGl0b3JTZXRUZW1wbGF0ZVBhcmFtcywgcnVuUXVlcnlGcm9tU3FsRWRpdG9yLCBzYXZlUXVlcnksIGFkZFNhdmVkUXVlcnlUb1RhYlN0YXRlLCBzY2hlZHVsZVF1ZXJ5LCBzZXRBY3RpdmVTb3V0aFBhbmVUYWIsIHVwZGF0ZVNhdmVkUXVlcnksIGZvcm1hdFF1ZXJ5LCBmZXRjaFF1ZXJ5RWRpdG9yLCBzd2l0Y2hRdWVyeUVkaXRvciwgfSBmcm9tICdzcmMvU3FsTGFiL2FjdGlvbnMvc3FsTGFiJztcbmltcG9ydCB7IFNUQVRFX1RZUEVfTUFQLCBTUUxfRURJVE9SX0dVVFRFUl9IRUlHSFQsIFNRTF9FRElUT1JfR1VUVEVSX01BUkdJTiwgU1FMX1RPT0xCQVJfSEVJR0hULCBTUUxfRURJVE9SX0xFRlRCQVJfV0lEVEgsIFNRTF9FRElUT1JfUEFERElORywgSU5JVElBTF9OT1JUSF9QRVJDRU5ULCBJTklUSUFMX1NPVVRIX1BFUkNFTlQsIFNFVF9RVUVSWV9FRElUT1JfU1FMX0RFQk9VTkNFX01TLCBXSU5ET1dfUkVTSVpFX1RIUk9UVExFX01TLCB9IGZyb20gJ3NyYy9TcWxMYWIvY29uc3RhbnRzJztcbmltcG9ydCB7IGdldEl0ZW0sIExvY2FsU3RvcmFnZUtleXMsIHNldEl0ZW0sIH0gZnJvbSAnc3JjL3V0aWxzL2xvY2FsU3RvcmFnZUhlbHBlcnMnO1xuaW1wb3J0IHsgRW1wdHlTdGF0ZSB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0VtcHR5U3RhdGUnO1xuaW1wb3J0IEFsZXJ0IGZyb20gJ3NyYy9jb21wb25lbnRzL0FsZXJ0JztcbmltcG9ydCBnZXRCb290c3RyYXBEYXRhIGZyb20gJ3NyYy91dGlscy9nZXRCb290c3RyYXBEYXRhJztcbmltcG9ydCB1c2VMb2dBY3Rpb24gZnJvbSAnc3JjL2xvZ2dlci91c2VMb2dBY3Rpb24nO1xuaW1wb3J0IHsgTE9HX0FDVElPTlNfU1FMTEFCX0NSRUFURV9UQUJMRV9BUywgTE9HX0FDVElPTlNfU1FMTEFCX0NSRUFURV9WSUVXX0FTLCBMT0dfQUNUSU9OU19TUUxMQUJfRVNUSU1BVEVfUVVFUllfQ09TVCwgTE9HX0FDVElPTlNfU1FMTEFCX0ZPUk1BVF9TUUwsIExPR19BQ1RJT05TX1NRTExBQl9MT0FEX1RBQl9TVEFURSwgTE9HX0FDVElPTlNfU1FMTEFCX1JVTl9RVUVSWSwgTE9HX0FDVElPTlNfU1FMTEFCX1NUT1BfUVVFUlksIExvZ2dlciwgfSBmcm9tICdzcmMvbG9nZ2VyL0xvZ1V0aWxzJztcbmltcG9ydCBUZW1wbGF0ZVBhcmFtc0VkaXRvciBmcm9tICcuLi9UZW1wbGF0ZVBhcmFtc0VkaXRvcic7XG5pbXBvcnQgU291dGhQYW5lIGZyb20gJy4uL1NvdXRoUGFuZSc7XG5pbXBvcnQgU2F2ZVF1ZXJ5IGZyb20gJy4uL1NhdmVRdWVyeSc7XG5pbXBvcnQgU2NoZWR1bGVRdWVyeUJ1dHRvbiBmcm9tICcuLi9TY2hlZHVsZVF1ZXJ5QnV0dG9uJztcbmltcG9ydCBFc3RpbWF0ZVF1ZXJ5Q29zdEJ1dHRvbiBmcm9tICcuLi9Fc3RpbWF0ZVF1ZXJ5Q29zdEJ1dHRvbic7XG5pbXBvcnQgU2hhcmVTcWxMYWJRdWVyeSBmcm9tICcuLi9TaGFyZVNxbExhYlF1ZXJ5JztcbmltcG9ydCBTcWxFZGl0b3JMZWZ0QmFyIGZyb20gJy4uL1NxbEVkaXRvckxlZnRCYXInO1xuaW1wb3J0IEFjZUVkaXRvcldyYXBwZXIgZnJvbSAnLi4vQWNlRWRpdG9yV3JhcHBlcic7XG5pbXBvcnQgUnVuUXVlcnlBY3Rpb25CdXR0b24gZnJvbSAnLi4vUnVuUXVlcnlBY3Rpb25CdXR0b24nO1xuaW1wb3J0IFF1ZXJ5TGltaXRTZWxlY3QgZnJvbSAnLi4vUXVlcnlMaW1pdFNlbGVjdCc7XG5pbXBvcnQgS2V5Ym9hcmRTaG9ydGN1dEJ1dHRvbiwgeyBLRVlfTUFQLCBLZXlib2FyZFNob3J0Y3V0LCB9IGZyb20gJy4uL0tleWJvYXJkU2hvcnRjdXRCdXR0b24nO1xuY29uc3QgYm9vdHN0cmFwRGF0YSA9IGdldEJvb3RzdHJhcERhdGEoKTtcbmNvbnN0IHNjaGVkdWxlZFF1ZXJpZXNDb25mID0gYm9vdHN0cmFwRGF0YT8uY29tbW9uPy5jb25mPy5TQ0hFRFVMRURfUVVFUklFUztcbmNvbnN0IFN0eWxlZFRvb2xiYXIgPSBzdHlsZWQuZGl2IGBcbiAgcGFkZGluZzogJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5ncmlkVW5pdCAqIDJ9cHg7XG4gIGJhY2tncm91bmQ6ICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDV9O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGJvcmRlcjogMXB4IHNvbGlkICR7KHsgdGhlbWUgfSkgPT4gdGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDJ9O1xuICBib3JkZXItdG9wOiAwO1xuICBjb2x1bW4tZ2FwOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmdyaWRVbml0fXB4O1xuXG4gIGZvcm0ge1xuICAgIG1hcmdpbi1ibG9jay1lbmQ6IDA7XG4gIH1cblxuICAubGVmdEl0ZW1zLFxuICAucmlnaHRJdGVtcyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICYgPiBzcGFuIHtcbiAgICAgIG1hcmdpbi1yaWdodDogJHsoeyB0aGVtZSB9KSA9PiB0aGVtZS5ncmlkVW5pdCAqIDJ9cHg7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cbiAgICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubGltaXREcm9wZG93biB7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgfVxuYDtcbmNvbnN0IFN0eWxlZFNpZGViYXIgPSBzdHlsZWQuZGl2IGBcbiAgZmxleDogMCAwICR7KHsgd2lkdGggfSkgPT4gd2lkdGh9cHg7XG4gIHdpZHRoOiAkeyh7IHdpZHRoIH0pID0+IHdpZHRofXB4O1xuICBwYWRkaW5nOiAkeyh7IHRoZW1lLCBoaWRlIH0pID0+IChoaWRlID8gMCA6IHRoZW1lLmdyaWRVbml0ICogMi41KX1weDtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWRcbiAgICAkeyh7IHRoZW1lLCBoaWRlIH0pID0+IGhpZGUgPyAndHJhbnNwYXJlbnQnIDogdGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDJ9O1xuYDtcbmNvbnN0IFN0eWxlZFNxbEVkaXRvciA9IHN0eWxlZC5kaXYgYFxuICAkeyh7IHRoZW1lIH0pID0+IGNzcyBgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgIGhlaWdodDogMTAwJTtcblxuICAgIC5zY2hlbWFQYW5lIHtcbiAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAke3RoZW1lLnRyYW5zaXRpb25UaW1pbmd9cyBlYXNlLWluLW91dDtcbiAgICB9XG5cbiAgICAucXVlcnlQYW5lIHtcbiAgICAgIGZsZXg6IDEgMSBhdXRvO1xuICAgICAgcGFkZGluZzogJHt0aGVtZS5ncmlkVW5pdCAqIDJ9cHg7XG4gICAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgICAgb3ZlcmZsb3cteDogc2Nyb2xsO1xuICAgIH1cblxuICAgIC5zY2hlbWFQYW5lLWVudGVyLWRvbmUsXG4gICAgLnNjaGVtYVBhbmUtZXhpdCB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XG4gICAgICB6LWluZGV4OiA3O1xuICAgIH1cblxuICAgIC5zY2hlbWFQYW5lLWV4aXQtYWN0aXZlIHtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTIwJSk7XG4gICAgfVxuXG4gICAgLnNjaGVtYVBhbmUtZW50ZXItYWN0aXZlIHtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcbiAgICAgIG1heC13aWR0aDogJHt0aGVtZS5ncmlkVW5pdCAqIDc1fXB4O1xuICAgIH1cblxuICAgIC5zY2hlbWFQYW5lLWVudGVyLFxuICAgIC5zY2hlbWFQYW5lLWV4aXQtZG9uZSB7XG4gICAgICBtYXgtd2lkdGg6IDA7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEyMCUpO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB9XG5cbiAgICAuc2NoZW1hUGFuZS1leGl0LWRvbmUgKyAucXVlcnlQYW5lIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIH1cblxuICAgIC5ndXR0ZXIge1xuICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICR7dGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDJ9O1xuICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7dGhlbWUuY29sb3JzLmdyYXlzY2FsZS5saWdodDJ9O1xuICAgICAgd2lkdGg6IDMlO1xuICAgICAgbWFyZ2luOiAke1NRTF9FRElUT1JfR1VUVEVSX01BUkdJTn1weCA0NyU7XG4gICAgfVxuXG4gICAgLmd1dHRlci5ndXR0ZXItdmVydGljYWwge1xuICAgICAgY3Vyc29yOiByb3ctcmVzaXplO1xuICAgIH1cbiAgYH1cbmA7XG5jb25zdCBleHRlbnNpb25zUmVnaXN0cnkgPSBnZXRFeHRlbnNpb25zUmVnaXN0cnkoKTtcbmNvbnN0IGVsZW1lbnRTdHlsZSA9IChkaW1lbnNpb24sIGVsZW1lbnRTaXplLCBndXR0ZXJTaXplKSA9PiAoe1xuICAgIFtkaW1lbnNpb25dOiBgY2FsYygke2VsZW1lbnRTaXplfSUgLSAke2d1dHRlclNpemUgKyBTUUxfRURJVE9SX0dVVFRFUl9NQVJHSU59cHgpYCxcbn0pO1xuY29uc3QgU3FsRWRpdG9yID0gKHsgcXVlcnlFZGl0b3IsIGRlZmF1bHRRdWVyeUxpbWl0LCBtYXhSb3csIGRpc3BsYXlMaW1pdCwgc2F2ZVF1ZXJ5V2FybmluZywgc2NoZWR1bGVRdWVyeVdhcm5pbmcsIH0pID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIGNvbnN0IHsgZGF0YWJhc2UsIGxhdGVzdFF1ZXJ5LCBoaWRlTGVmdEJhciwgY3VycmVudFF1ZXJ5RWRpdG9ySWQsIGhhc1NxbFN0YXRlbWVudCwgfSA9IHVzZVNlbGVjdG9yKCh7IHNxbExhYjogeyB1bnNhdmVkUXVlcnlFZGl0b3IsIGRhdGFiYXNlcywgcXVlcmllcywgdGFiSGlzdG9yeSB9IH0pID0+IHtcbiAgICAgICAgbGV0IHsgZGJJZCwgbGF0ZXN0UXVlcnlJZCwgaGlkZUxlZnRCYXIgfSA9IHF1ZXJ5RWRpdG9yO1xuICAgICAgICBpZiAodW5zYXZlZFF1ZXJ5RWRpdG9yPy5pZCA9PT0gcXVlcnlFZGl0b3IuaWQpIHtcbiAgICAgICAgICAgIGRiSWQgPSB1bnNhdmVkUXVlcnlFZGl0b3IuZGJJZCB8fCBkYklkO1xuICAgICAgICAgICAgbGF0ZXN0UXVlcnlJZCA9IHVuc2F2ZWRRdWVyeUVkaXRvci5sYXRlc3RRdWVyeUlkIHx8IGxhdGVzdFF1ZXJ5SWQ7XG4gICAgICAgICAgICBoaWRlTGVmdEJhciA9XG4gICAgICAgICAgICAgICAgdHlwZW9mIHVuc2F2ZWRRdWVyeUVkaXRvci5oaWRlTGVmdEJhciA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgICAgICAgICAgICAgID8gdW5zYXZlZFF1ZXJ5RWRpdG9yLmhpZGVMZWZ0QmFyXG4gICAgICAgICAgICAgICAgICAgIDogaGlkZUxlZnRCYXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhhc1NxbFN0YXRlbWVudDogQm9vbGVhbihxdWVyeUVkaXRvci5zcWw/LnRyaW0oKS5sZW5ndGggPiAwKSxcbiAgICAgICAgICAgIGRhdGFiYXNlOiBkYXRhYmFzZXNbZGJJZCB8fCAnJ10sXG4gICAgICAgICAgICBsYXRlc3RRdWVyeTogcXVlcmllc1tsYXRlc3RRdWVyeUlkIHx8ICcnXSxcbiAgICAgICAgICAgIGhpZGVMZWZ0QmFyLFxuICAgICAgICAgICAgY3VycmVudFF1ZXJ5RWRpdG9ySWQ6IHRhYkhpc3Rvcnkuc2xpY2UoLTEpWzBdLFxuICAgICAgICB9O1xuICAgIH0sIHNoYWxsb3dFcXVhbCk7XG4gICAgY29uc3QgbG9nQWN0aW9uID0gdXNlTG9nQWN0aW9uKHsgcXVlcnlFZGl0b3JJZDogcXVlcnlFZGl0b3IuaWQgfSk7XG4gICAgY29uc3QgaXNBY3RpdmUgPSBjdXJyZW50UXVlcnlFZGl0b3JJZCA9PT0gcXVlcnlFZGl0b3IuaWQ7XG4gICAgY29uc3QgW2hlaWdodCwgc2V0SGVpZ2h0XSA9IHVzZVN0YXRlKDApO1xuICAgIGNvbnN0IFthdXRvcnVuLCBzZXRBdXRvcnVuXSA9IHVzZVN0YXRlKHF1ZXJ5RWRpdG9yLmF1dG9ydW4pO1xuICAgIGNvbnN0IFtjdGFzLCBzZXRDdGFzXSA9IHVzZVN0YXRlKCcnKTtcbiAgICBjb25zdCBbbm9ydGhQZXJjZW50LCBzZXROb3J0aFBlcmNlbnRdID0gdXNlU3RhdGUocXVlcnlFZGl0b3Iubm9ydGhQZXJjZW50IHx8IElOSVRJQUxfTk9SVEhfUEVSQ0VOVCk7XG4gICAgY29uc3QgW3NvdXRoUGVyY2VudCwgc2V0U291dGhQZXJjZW50XSA9IHVzZVN0YXRlKHF1ZXJ5RWRpdG9yLnNvdXRoUGVyY2VudCB8fCBJTklUSUFMX1NPVVRIX1BFUkNFTlQpO1xuICAgIGNvbnN0IFthdXRvY29tcGxldGVFbmFibGVkLCBzZXRBdXRvY29tcGxldGVFbmFibGVkXSA9IHVzZVN0YXRlKGdldEl0ZW0oTG9jYWxTdG9yYWdlS2V5cy5TcWxsYWJJc0F1dG9jb21wbGV0ZUVuYWJsZWQsIHRydWUpKTtcbiAgICBjb25zdCBbcmVuZGVySFRNTEVuYWJsZWQsIHNldFJlbmRlckhUTUxFbmFibGVkXSA9IHVzZVN0YXRlKGdldEl0ZW0oTG9jYWxTdG9yYWdlS2V5cy5TcWxsYWJJc1JlbmRlckh0bWxFbmFibGVkLCB0cnVlKSk7XG4gICAgY29uc3QgW3Nob3dDcmVhdGVBc01vZGFsLCBzZXRTaG93Q3JlYXRlQXNNb2RhbF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW2NyZWF0ZUFzLCBzZXRDcmVhdGVBc10gPSB1c2VTdGF0ZSgnJyk7XG4gICAgY29uc3Qgc2hvd0VtcHR5U3RhdGUgPSB1c2VNZW1vKCgpID0+ICFkYXRhYmFzZSB8fCBpc0VtcHR5KGRhdGFiYXNlKSwgW2RhdGFiYXNlXSk7XG4gICAgY29uc3Qgc3FsRWRpdG9yUmVmID0gdXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IG5vcnRoUGFuZVJlZiA9IHVzZVJlZihudWxsKTtcbiAgICBjb25zdCBTcWxGb3JtRXh0ZW5zaW9uID0gZXh0ZW5zaW9uc1JlZ2lzdHJ5LmdldCgnc3FsZWRpdG9yLmV4dGVuc2lvbi5mb3JtJyk7XG4gICAgY29uc3Qgc3RhcnRRdWVyeSA9IHVzZUNhbGxiYWNrKChjdGFzQXJnID0gZmFsc2UsIGN0YXNfbWV0aG9kID0gQ3Rhc0VudW0uVGFibGUpID0+IHtcbiAgICAgICAgaWYgKCFkYXRhYmFzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoKHJ1blF1ZXJ5RnJvbVNxbEVkaXRvcihkYXRhYmFzZSwgcXVlcnlFZGl0b3IsIGRlZmF1bHRRdWVyeUxpbWl0LCBjdGFzQXJnID8gY3RhcyA6ICcnLCBjdGFzQXJnLCBjdGFzX21ldGhvZCkpO1xuICAgICAgICBkaXNwYXRjaChzZXRBY3RpdmVTb3V0aFBhbmVUYWIoJ1Jlc3VsdHMnKSk7XG4gICAgfSwgW2N0YXMsIGRhdGFiYXNlLCBkZWZhdWx0UXVlcnlMaW1pdCwgZGlzcGF0Y2gsIHF1ZXJ5RWRpdG9yXSk7XG4gICAgY29uc3QgZm9ybWF0Q3VycmVudFF1ZXJ5ID0gdXNlQ2FsbGJhY2soKHVzZVNob3J0Y3V0KSA9PiB7XG4gICAgICAgIGxvZ0FjdGlvbihMT0dfQUNUSU9OU19TUUxMQUJfRk9STUFUX1NRTCwge1xuICAgICAgICAgICAgc2hvcnRjdXQ6IEJvb2xlYW4odXNlU2hvcnRjdXQpLFxuICAgICAgICB9KTtcbiAgICAgICAgZGlzcGF0Y2goZm9ybWF0UXVlcnkocXVlcnlFZGl0b3IpKTtcbiAgICB9LCBbZGlzcGF0Y2gsIHF1ZXJ5RWRpdG9yLCBsb2dBY3Rpb25dKTtcbiAgICBjb25zdCBzdG9wUXVlcnkgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmIChsYXRlc3RRdWVyeSAmJiBbJ3J1bm5pbmcnLCAncGVuZGluZyddLmluZGV4T2YobGF0ZXN0UXVlcnkuc3RhdGUpID49IDApIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKHBvc3RTdG9wUXVlcnkobGF0ZXN0UXVlcnkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSwgW2Rpc3BhdGNoLCBsYXRlc3RRdWVyeV0pO1xuICAgIGNvbnN0IHJ1blF1ZXJ5ID0gKCkgPT4ge1xuICAgICAgICBpZiAoZGF0YWJhc2UpIHtcbiAgICAgICAgICAgIHN0YXJ0UXVlcnkoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGF1dG9ydW4pIHtcbiAgICAgICAgICAgIHNldEF1dG9ydW4oZmFsc2UpO1xuICAgICAgICAgICAgZGlzcGF0Y2gocXVlcnlFZGl0b3JTZXRBdXRvcnVuKHF1ZXJ5RWRpdG9yLCBmYWxzZSkpO1xuICAgICAgICAgICAgc3RhcnRRdWVyeSgpO1xuICAgICAgICB9XG4gICAgfSwgW2F1dG9ydW4sIGRpc3BhdGNoLCBxdWVyeUVkaXRvciwgc3RhcnRRdWVyeV0pO1xuICAgIC8vIE9uZSBsYXllciBvZiBhYnN0cmFjdGlvbiBmb3IgZWFzeSBzcHlpbmcgaW4gdW5pdCB0ZXN0c1xuICAgIGNvbnN0IGdldFNxbEVkaXRvckhlaWdodCA9ICgpID0+IHNxbEVkaXRvclJlZi5jdXJyZW50XG4gICAgICAgID8gc3FsRWRpdG9yUmVmLmN1cnJlbnQuY2xpZW50SGVpZ2h0IC0gU1FMX0VESVRPUl9QQURESU5HICogMlxuICAgICAgICA6IDA7XG4gICAgY29uc3QgZ2V0SG90a2V5Q29uZmlnID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAvLyBHZXQgdGhlIHVzZXIncyBPU1xuICAgICAgICBjb25zdCB1c2VyT1MgPSBkZXRlY3RPUygpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdydW5RdWVyeTEnLFxuICAgICAgICAgICAgICAgIGtleTogS2V5Ym9hcmRTaG9ydGN1dC5DdHJsUixcbiAgICAgICAgICAgICAgICBkZXNjcjogS0VZX01BUFtLZXlib2FyZFNob3J0Y3V0LkN0cmxSXSxcbiAgICAgICAgICAgICAgICBmdW5jOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChxdWVyeUVkaXRvci5zcWwudHJpbSgpICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nQWN0aW9uKExPR19BQ1RJT05TX1NRTExBQl9SVU5fUVVFUlksIHsgc2hvcnRjdXQ6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFF1ZXJ5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAncnVuUXVlcnkyJyxcbiAgICAgICAgICAgICAgICBrZXk6IEtleWJvYXJkU2hvcnRjdXQuQ3RybEVudGVyLFxuICAgICAgICAgICAgICAgIGRlc2NyOiBLRVlfTUFQW0tleWJvYXJkU2hvcnRjdXQuQ3RybEVudGVyXSxcbiAgICAgICAgICAgICAgICBmdW5jOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChxdWVyeUVkaXRvci5zcWwudHJpbSgpICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nQWN0aW9uKExPR19BQ1RJT05TX1NRTExBQl9SVU5fUVVFUlksIHsgc2hvcnRjdXQ6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydFF1ZXJ5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnbmV3VGFiJyxcbiAgICAgICAgICAgICAgICAuLi4odXNlck9TID09PSAnV2luZG93cydcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IEtleWJvYXJkU2hvcnRjdXQuQ3RybFEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcjogS0VZX01BUFtLZXlib2FyZFNob3J0Y3V0LkN0cmxRXSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogS2V5Ym9hcmRTaG9ydGN1dC5DdHJsVCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyOiBLRVlfTUFQW0tleWJvYXJkU2hvcnRjdXQuQ3RybFRdLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBmdW5jOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5tYXJrVGltZU9yaWdpbigpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChhZGROZXdRdWVyeUVkaXRvcigpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnc3RvcFF1ZXJ5JyxcbiAgICAgICAgICAgICAgICAuLi4odXNlck9TID09PSAnTWFjT1MnXG4gICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBLZXlib2FyZFNob3J0Y3V0LkN0cmxYLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3I6IEtFWV9NQVBbS2V5Ym9hcmRTaG9ydGN1dC5DdHJsWF0sXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IEtleWJvYXJkU2hvcnRjdXQuQ3RybEUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcjogS0VZX01BUFtLZXlib2FyZFNob3J0Y3V0LkN0cmxFXSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZnVuYzogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsb2dBY3Rpb24oTE9HX0FDVElPTlNfU1FMTEFCX1NUT1BfUVVFUlksIHsgc2hvcnRjdXQ6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0b3BRdWVyeSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdmb3JtYXRRdWVyeScsXG4gICAgICAgICAgICAgICAga2V5OiBLZXlib2FyZFNob3J0Y3V0LkN0cmxTaGlmdEYsXG4gICAgICAgICAgICAgICAgZGVzY3I6IEtFWV9NQVBbS2V5Ym9hcmRTaG9ydGN1dC5DdHJsU2hpZnRGXSxcbiAgICAgICAgICAgICAgICBmdW5jOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdEN1cnJlbnRRdWVyeSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnc3dpdGNoVGFiVG9MZWZ0JyxcbiAgICAgICAgICAgICAgICBrZXk6IEtleWJvYXJkU2hvcnRjdXQuQ3RybExlZnQsXG4gICAgICAgICAgICAgICAgZGVzY3I6IEtFWV9NQVBbS2V5Ym9hcmRTaG9ydGN1dC5DdHJsTGVmdF0sXG4gICAgICAgICAgICAgICAgZnVuYzogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChzd2l0Y2hRdWVyeUVkaXRvcih0cnVlKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3N3aXRjaFRhYlRvUmlnaHQnLFxuICAgICAgICAgICAgICAgIGtleTogS2V5Ym9hcmRTaG9ydGN1dC5DdHJsUmlnaHQsXG4gICAgICAgICAgICAgICAgZGVzY3I6IEtFWV9NQVBbS2V5Ym9hcmRTaG9ydGN1dC5DdHJsUmlnaHRdLFxuICAgICAgICAgICAgICAgIGZ1bmM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goc3dpdGNoUXVlcnlFZGl0b3IoZmFsc2UpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcbiAgICB9LCBbZGlzcGF0Y2gsIHF1ZXJ5RWRpdG9yLnNxbCwgc3RhcnRRdWVyeSwgc3RvcFF1ZXJ5LCBmb3JtYXRDdXJyZW50UXVlcnldKTtcbiAgICBjb25zdCBob3RrZXlzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIEdldCBhbGwgaG90a2V5cyBpbmNsdWRpbmcgYWNlIGVkaXRvciBob3RrZXlzXG4gICAgICAgIC8vIEdldCB0aGUgdXNlcidzIE9TXG4gICAgICAgIGNvbnN0IHVzZXJPUyA9IGRldGVjdE9TKCk7XG4gICAgICAgIGNvbnN0IGJhc2UgPSBbXG4gICAgICAgICAgICAuLi5nZXRIb3RrZXlDb25maWcoKSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAncnVuUXVlcnkzJyxcbiAgICAgICAgICAgICAgICBrZXk6IEtleWJvYXJkU2hvcnRjdXQuQ3RybFNoaWZ0RW50ZXIsXG4gICAgICAgICAgICAgICAgZGVzY3I6IEtFWV9NQVBbS2V5Ym9hcmRTaG9ydGN1dC5DdHJsU2hpZnRFbnRlcl0sXG4gICAgICAgICAgICAgICAgZnVuYzogKGVkaXRvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWVkaXRvci5nZXRWYWx1ZSgpLnRyaW0oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlc3Npb24gPSBlZGl0b3IuZ2V0U2Vzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJzb3JQb3NpdGlvbiA9IGVkaXRvci5nZXRDdXJzb3JQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b3RhbExpbmUgPSBzZXNzaW9uLmdldExlbmd0aCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50Um93ID0gZWRpdG9yLmdldEZpcnN0VmlzaWJsZVJvdygpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZW1pY29sb25FbmQgPSBlZGl0b3IuZmluZCgnOycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2t3YXJkczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwQ3VycmVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlbmQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZW1pY29sb25FbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICh7IGVuZCB9ID0gc2VtaWNvbG9uRW5kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWVuZCB8fCBlbmQucm93IDwgY3Vyc29yUG9zaXRpb24ucm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93OiB0b3RhbExpbmUgKyAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VtaWNvbG9uU3RhcnQgPSBlZGl0b3IuZmluZCgnOycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2t3YXJkczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBDdXJyZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VtaWNvbG9uU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gc2VtaWNvbG9uU3RhcnQuZW5kO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyZW50TGluZSA9IHN0YXJ0Py5yb3c7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3VycmVudExpbmUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMaW5lID4gY3Vyc29yUG9zaXRpb24ucm93IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoY3VycmVudExpbmUgPT09IGN1cnNvclBvc2l0aW9uLnJvdyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzdGFydD8uY29sdW1uIHx8IDApID4gY3Vyc29yUG9zaXRpb24uY29sdW1uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudExpbmUgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb250ZW50ID0gY3VycmVudExpbmUgPT09IHN0YXJ0Py5yb3dcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2Vzc2lvbi5nZXRMaW5lKGN1cnJlbnRMaW5lKS5zbGljZShzdGFydC5jb2x1bW4pLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBzZXNzaW9uLmdldExpbmUoY3VycmVudExpbmUpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCFjb250ZW50ICYmIGN1cnJlbnRMaW5lIDwgdG90YWxMaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGluZSArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IHNlc3Npb24uZ2V0TGluZShjdXJyZW50TGluZSkudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TGluZSAhPT0gc3RhcnQ/LnJvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSB7IHJvdzogY3VycmVudExpbmUsIGNvbHVtbjogMCB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5zZWxlY3Rpb24uc2V0U2VsZWN0aW9uUmFuZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0ID8/IHsgcm93OiAwLCBjb2x1bW46IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UXVlcnkoKTtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNlbGVjdGlvbi5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3IubW92ZUN1cnNvclRvUG9zaXRpb24oY3Vyc29yUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2Nyb2xsVG9Sb3coY3VycmVudFJvdyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgICAgIGlmICh1c2VyT1MgPT09ICdNYWNPUycpIHtcbiAgICAgICAgICAgIGJhc2UucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3ByZXZpb3VzTGluZScsXG4gICAgICAgICAgICAgICAga2V5OiBLZXlib2FyZFNob3J0Y3V0LkN0cmxQLFxuICAgICAgICAgICAgICAgIGRlc2NyOiBLRVlfTUFQW0tleWJvYXJkU2hvcnRjdXQuQ3RybFBdLFxuICAgICAgICAgICAgICAgIGZ1bmM6IGVkaXRvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5uYXZpZ2F0ZVVwKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlO1xuICAgIH0sIFtnZXRIb3RrZXlDb25maWcsIHN0YXJ0UXVlcnldKTtcbiAgICBjb25zdCBvbkJlZm9yZVVubG9hZCA9IHVzZUVmZmVjdEV2ZW50KGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKGRhdGFiYXNlPy5leHRyYV9qc29uPy5jYW5jZWxfcXVlcnlfb25fd2luZG93c191bmxvYWQgJiZcbiAgICAgICAgICAgIGxhdGVzdFF1ZXJ5Py5zdGF0ZSA9PT0gJ3J1bm5pbmcnKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgc3RvcFF1ZXJ5KCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBzaG91bGRMb2FkUXVlcnlFZGl0b3IgPSBpc0ZlYXR1cmVFbmFibGVkKEZlYXR1cmVGbGFnLlNxbGxhYkJhY2tlbmRQZXJzaXN0ZW5jZSkgJiZcbiAgICAgICAgIXF1ZXJ5RWRpdG9yLmxvYWRlZDtcbiAgICBjb25zdCBsb2FkUXVlcnlFZGl0b3IgPSB1c2VFZmZlY3RFdmVudCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gTG9nZ2VyLmdldFRpbWVzdGFtcCgpO1xuICAgICAgICBsb2dBY3Rpb24oTE9HX0FDVElPTlNfU1FMTEFCX0xPQURfVEFCX1NUQVRFLCB7XG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIHF1ZXJ5RWRpdG9ySWQ6IHF1ZXJ5RWRpdG9yLmlkLFxuICAgICAgICAgICAgaW5Mb2NhbFN0b3JhZ2U6IEJvb2xlYW4ocXVlcnlFZGl0b3IuaW5Mb2NhbFN0b3JhZ2UpLFxuICAgICAgICAgICAgaGFzTG9hZGVkOiAhc2hvdWxkTG9hZFF1ZXJ5RWRpdG9yLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNob3VsZExvYWRRdWVyeUVkaXRvcikge1xuICAgICAgICAgICAgZGlzcGF0Y2goZmV0Y2hRdWVyeUVkaXRvcihxdWVyeUVkaXRvciwgZGlzcGxheUxpbWl0KSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIG1lYXN1cmUgdGhlIGhlaWdodCBvZiB0aGUgc3FsIGVkaXRvciBwb3N0IHJlbmRlciB0byBmaWd1cmUgdGhlIGhlaWdodCBvZlxuICAgICAgICAvLyB0aGUgc291dGggcGFuZSBzbyBpdCBnZXRzIHJlbmRlcmVkIHByb3Blcmx5XG4gICAgICAgIHNldEhlaWdodChnZXRTcWxFZGl0b3JIZWlnaHQoKSk7XG4gICAgICAgIGNvbnN0IGhhbmRsZVdpbmRvd1Jlc2l6ZVdpdGhUaHJvdHRsZSA9IHRocm90dGxlKCgpID0+IHNldEhlaWdodChnZXRTcWxFZGl0b3JIZWlnaHQoKSksIFdJTkRPV19SRVNJWkVfVEhST1RUTEVfTVMpO1xuICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIGxvYWRRdWVyeUVkaXRvcigpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVdpbmRvd1Jlc2l6ZVdpdGhUaHJvdHRsZSk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgb25CZWZvcmVVbmxvYWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlV2luZG93UmVzaXplV2l0aFRocm90dGxlKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBvbkJlZm9yZVVubG9hZCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSB1c2VFZmZlY3RFdmVudCBkZXBzIG9uY2UgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMjU4ODEgaXMgcmVsZWFzZWRcbiAgICB9LCBbb25CZWZvcmVVbmxvYWQsIGxvYWRRdWVyeUVkaXRvciwgaXNBY3RpdmVdKTtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAvLyBzZXR1cCBob3RrZXlzXG4gICAgICAgIGNvbnN0IGhvdGtleXMgPSBnZXRIb3RrZXlDb25maWcoKTtcbiAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICAvLyBNb3VzZVRyYXAgYWx3YXlzIG92ZXJyaWRlIHRoZSBzYW1lIGtleVxuICAgICAgICAgICAgLy8gVW5iaW5kIChyZXNldCkgd2lsbCBiZSBjYWxsZWQgd2hlbiBBcHAgY29tcG9uZW50IHVubW91bnRcbiAgICAgICAgICAgIGhvdGtleXMuZm9yRWFjaChrZXlDb25maWcgPT4ge1xuICAgICAgICAgICAgICAgIE1vdXNldHJhcC5iaW5kKFtrZXlDb25maWcua2V5XSwga2V5Q29uZmlnLmZ1bmMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCBbZ2V0SG90a2V5Q29uZmlnLCBsYXRlc3RRdWVyeSwgaXNBY3RpdmVdKTtcbiAgICBjb25zdCBvblJlc2l6ZVN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICAvLyBTZXQgdGhlIGhlaWdodHMgb24gdGhlIGFjZSBlZGl0b3IgYW5kIHRoZSBhY2UgY29udGVudCBhcmVhIGFmdGVyIGRyYWcgc3RhcnRzXG4gICAgICAgIC8vIHRvIHNtb290aCBvdXQgdGhlIHZpc3VhbCB0cmFuc2l0aW9uIHRvIHRoZSBuZXcgaGVpZ2h0cyB3aGVuIGRyYWcgZW5kc1xuICAgICAgICBjb25zdCBlZGl0b3JFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FjZV9jb250ZW50JylbMF07XG4gICAgICAgIGlmIChlZGl0b3JFbCkge1xuICAgICAgICAgICAgZWRpdG9yRWwuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBvblJlc2l6ZUVuZCA9IChbbm9ydGhQZXJjZW50LCBzb3V0aFBlcmNlbnRdKSA9PiB7XG4gICAgICAgIHNldE5vcnRoUGVyY2VudChub3J0aFBlcmNlbnQpO1xuICAgICAgICBzZXRTb3V0aFBlcmNlbnQoc291dGhQZXJjZW50KTtcbiAgICAgICAgaWYgKG5vcnRoUGFuZVJlZi5jdXJyZW50Py5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKHBlcnNpc3RFZGl0b3JIZWlnaHQocXVlcnlFZGl0b3IsIG5vcnRoUGVyY2VudCwgc291dGhQZXJjZW50KSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldFF1ZXJ5RWRpdG9yQW5kU2F2ZVNxbCA9IHVzZUNhbGxiYWNrKHNxbCA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHF1ZXJ5RWRpdG9yU2V0QW5kU2F2ZVNxbChxdWVyeUVkaXRvciwgc3FsKSk7XG4gICAgfSwgW2Rpc3BhdGNoLCBxdWVyeUVkaXRvcl0pO1xuICAgIGNvbnN0IHNldFF1ZXJ5RWRpdG9yQW5kU2F2ZVNxbFdpdGhEZWJvdW5jZSA9IHVzZU1lbW8oKCkgPT4gZGVib3VuY2Uoc2V0UXVlcnlFZGl0b3JBbmRTYXZlU3FsLCBTRVRfUVVFUllfRURJVE9SX1NRTF9ERUJPVU5DRV9NUyksIFtzZXRRdWVyeUVkaXRvckFuZFNhdmVTcWxdKTtcbiAgICBjb25zdCBvblNxbENoYW5nZWQgPSB1c2VFZmZlY3RFdmVudCgoc3FsKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHF1ZXJ5RWRpdG9yU2V0U3FsKHF1ZXJ5RWRpdG9yLCBzcWwpKTtcbiAgICB9KTtcbiAgICAvLyBSZXR1cm4gdGhlIGhlaWdodHMgZm9yIHRoZSBhY2UgZWRpdG9yIGFuZCB0aGUgc291dGggcGFuZSBhcyBhbiBvYmplY3RcbiAgICAvLyBnaXZlbiB0aGUgaGVpZ2h0IG9mIHRoZSBzcWwgZWRpdG9yLCBub3J0aCBwYW5lIHBlcmNlbnQgYW5kIHNvdXRoIHBhbmUgcGVyY2VudC5cbiAgICBjb25zdCBnZXRBY2VFZGl0b3JBbmRTb3V0aFBhbmVIZWlnaHRzID0gKGhlaWdodCwgbm9ydGhQZXJjZW50LCBzb3V0aFBlcmNlbnQpID0+ICh7XG4gICAgICAgIGFjZUVkaXRvckhlaWdodDogKGhlaWdodCAqIG5vcnRoUGVyY2VudCkgLyAodGhlbWUuZ3JpZFVuaXQgKiAyNSkgLVxuICAgICAgICAgICAgKFNRTF9FRElUT1JfR1VUVEVSX0hFSUdIVCAvIDIgKyBTUUxfRURJVE9SX0dVVFRFUl9NQVJHSU4pIC1cbiAgICAgICAgICAgIFNRTF9UT09MQkFSX0hFSUdIVCxcbiAgICAgICAgc291dGhQYW5lSGVpZ2h0OiAoaGVpZ2h0ICogc291dGhQZXJjZW50KSAvICh0aGVtZS5ncmlkVW5pdCAqIDI1KSAtXG4gICAgICAgICAgICAoU1FMX0VESVRPUl9HVVRURVJfSEVJR0hUIC8gMiArIFNRTF9FRElUT1JfR1VUVEVSX01BUkdJTiksXG4gICAgfSk7XG4gICAgY29uc3QgZ2V0UXVlcnlDb3N0RXN0aW1hdGUgPSAoKSA9PiB7XG4gICAgICAgIGxvZ0FjdGlvbihMT0dfQUNUSU9OU19TUUxMQUJfRVNUSU1BVEVfUVVFUllfQ09TVCwgeyBzaG9ydGN1dDogZmFsc2UgfSk7XG4gICAgICAgIGlmIChkYXRhYmFzZSkge1xuICAgICAgICAgICAgZGlzcGF0Y2goZXN0aW1hdGVRdWVyeUNvc3QocXVlcnlFZGl0b3IpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlVG9nZ2xlQXV0b2NvbXBsZXRlRW5hYmxlZCA9ICgpID0+IHtcbiAgICAgICAgc2V0SXRlbShMb2NhbFN0b3JhZ2VLZXlzLlNxbGxhYklzQXV0b2NvbXBsZXRlRW5hYmxlZCwgIWF1dG9jb21wbGV0ZUVuYWJsZWQpO1xuICAgICAgICBzZXRBdXRvY29tcGxldGVFbmFibGVkKCFhdXRvY29tcGxldGVFbmFibGVkKTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZVRvZ2dsZVJlbmRlckhUTUxFbmFibGVkID0gKCkgPT4ge1xuICAgICAgICBzZXRJdGVtKExvY2FsU3RvcmFnZUtleXMuU3FsbGFiSXNSZW5kZXJIdG1sRW5hYmxlZCwgIXJlbmRlckhUTUxFbmFibGVkKTtcbiAgICAgICAgc2V0UmVuZGVySFRNTEVuYWJsZWQoIXJlbmRlckhUTUxFbmFibGVkKTtcbiAgICB9O1xuICAgIGNvbnN0IGNyZWF0ZVRhYmxlQXMgPSAoKSA9PiB7XG4gICAgICAgIHN0YXJ0UXVlcnkodHJ1ZSwgQ3Rhc0VudW0uVGFibGUpO1xuICAgICAgICBzZXRTaG93Q3JlYXRlQXNNb2RhbChmYWxzZSk7XG4gICAgICAgIHNldEN0YXMoJycpO1xuICAgIH07XG4gICAgY29uc3QgY3JlYXRlVmlld0FzID0gKCkgPT4ge1xuICAgICAgICBzdGFydFF1ZXJ5KHRydWUsIEN0YXNFbnVtLlZpZXcpO1xuICAgICAgICBzZXRTaG93Q3JlYXRlQXNNb2RhbChmYWxzZSk7XG4gICAgICAgIHNldEN0YXMoJycpO1xuICAgIH07XG4gICAgY29uc3QgY3Rhc0NoYW5nZWQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0Q3RhcyhldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG4gICAgY29uc3QgcmVuZGVyRHJvcGRvd24gPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHFlID0gcXVlcnlFZGl0b3I7XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3NmdWwgPSBsYXRlc3RRdWVyeT8uc3RhdGUgPT09ICdzdWNjZXNzJztcbiAgICAgICAgY29uc3Qgc2NoZWR1bGVUb29sVGlwID0gc3VjY2Vzc2Z1bFxuICAgICAgICAgICAgPyB0KCdTY2hlZHVsZSB0aGUgcXVlcnkgcGVyaW9kaWNhbGx5JylcbiAgICAgICAgICAgIDogdCgnWW91IG11c3QgcnVuIHRoZSBxdWVyeSBzdWNjZXNzZnVsbHkgZmlyc3QnKTtcbiAgICAgICAgcmV0dXJuICg8TWVudSBjc3M9e3sgd2lkdGg6IHRoZW1lLmdyaWRVbml0ICogNTAgfX0+XG4gICAgICAgIDxNZW51Lkl0ZW0gY3NzPXt7IGRpc3BsYXk6ICdmbGV4JywganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyB9fT5cbiAgICAgICAgICB7JyAnfVxuICAgICAgICAgIDxzcGFuPnt0KCdSZW5kZXIgSFRNTCcpfTwvc3Bhbj57JyAnfVxuICAgICAgICAgIDxTd2l0Y2ggY2hlY2tlZD17cmVuZGVySFRNTEVuYWJsZWR9IG9uQ2hhbmdlPXtoYW5kbGVUb2dnbGVSZW5kZXJIVE1MRW5hYmxlZH0vPnsnICd9XG4gICAgICAgIDwvTWVudS5JdGVtPlxuICAgICAgICA8TWVudS5JdGVtIGNzcz17eyBkaXNwbGF5OiAnZmxleCcsIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicgfX0+XG4gICAgICAgICAgeycgJ31cbiAgICAgICAgICA8c3Bhbj57dCgnQXV0b2NvbXBsZXRlJyl9PC9zcGFuPnsnICd9XG4gICAgICAgICAgPFN3aXRjaCBjaGVja2VkPXthdXRvY29tcGxldGVFbmFibGVkfSBvbkNoYW5nZT17aGFuZGxlVG9nZ2xlQXV0b2NvbXBsZXRlRW5hYmxlZH0vPnsnICd9XG4gICAgICAgIDwvTWVudS5JdGVtPlxuICAgICAgICB7aXNGZWF0dXJlRW5hYmxlZChGZWF0dXJlRmxhZy5FbmFibGVUZW1wbGF0ZVByb2Nlc3NpbmcpICYmICg8TWVudS5JdGVtPlxuICAgICAgICAgICAgPFRlbXBsYXRlUGFyYW1zRWRpdG9yIGxhbmd1YWdlPVwianNvblwiIG9uQ2hhbmdlPXtwYXJhbXMgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChxdWVyeUVkaXRvclNldFRlbXBsYXRlUGFyYW1zKHFlLCBwYXJhbXMpKTtcbiAgICAgICAgICAgICAgICB9fSBxdWVyeUVkaXRvcklkPXtxZS5pZH0vPlxuICAgICAgICAgIDwvTWVudS5JdGVtPil9XG4gICAgICAgIDxNZW51Lkl0ZW0gb25DbGljaz17KCkgPT4gZm9ybWF0Q3VycmVudFF1ZXJ5KCl9PlxuICAgICAgICAgIHt0KCdGb3JtYXQgU1FMJyl9XG4gICAgICAgIDwvTWVudS5JdGVtPlxuICAgICAgICB7IWlzRW1wdHkoc2NoZWR1bGVkUXVlcmllc0NvbmYpICYmICg8TWVudS5JdGVtPlxuICAgICAgICAgICAgPFNjaGVkdWxlUXVlcnlCdXR0b24gZGVmYXVsdExhYmVsPXtxZS5uYW1lfSBzcWw9e3FlLnNxbH0gb25TY2hlZHVsZT17KHF1ZXJ5KSA9PiBkaXNwYXRjaChzY2hlZHVsZVF1ZXJ5KHF1ZXJ5KSl9IHNjaGVtYT17cWUuc2NoZW1hfSBkYklkPXtxZS5kYklkfSBzY2hlZHVsZVF1ZXJ5V2FybmluZz17c2NoZWR1bGVRdWVyeVdhcm5pbmd9IHRvb2x0aXA9e3NjaGVkdWxlVG9vbFRpcH0gZGlzYWJsZWQ9eyFzdWNjZXNzZnVsfS8+XG4gICAgICAgICAgPC9NZW51Lkl0ZW0+KX1cbiAgICAgICAgPE1lbnUuSXRlbT5cbiAgICAgICAgICA8S2V5Ym9hcmRTaG9ydGN1dEJ1dHRvbj5cbiAgICAgICAgICAgIHt0KCdLZXlib2FyZCBzaG9ydGN1dHMnKX1cbiAgICAgICAgICA8L0tleWJvYXJkU2hvcnRjdXRCdXR0b24+XG4gICAgICAgIDwvTWVudS5JdGVtPlxuICAgICAgPC9NZW51Pik7XG4gICAgfTtcbiAgICBjb25zdCBvblNhdmVRdWVyeSA9IGFzeW5jIChxdWVyeSwgY2xpZW50SWQpID0+IHtcbiAgICAgICAgY29uc3Qgc2F2ZWRRdWVyeSA9IGF3YWl0IGRpc3BhdGNoKHNhdmVRdWVyeShxdWVyeSwgY2xpZW50SWQpKTtcbiAgICAgICAgZGlzcGF0Y2goYWRkU2F2ZWRRdWVyeVRvVGFiU3RhdGUocXVlcnlFZGl0b3IsIHNhdmVkUXVlcnkpKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbmRlckVkaXRvckJvdHRvbUJhciA9IChoaWRlQWN0aW9ucykgPT4ge1xuICAgICAgICBjb25zdCB7IGFsbG93X2N0YXM6IGFsbG93Q1RBUywgYWxsb3dfY3ZhczogYWxsb3dDVkFTIH0gPSBkYXRhYmFzZSB8fCB7fTtcbiAgICAgICAgY29uc3Qgc2hvd01lbnUgPSBhbGxvd0NUQVMgfHwgYWxsb3dDVkFTO1xuICAgICAgICBjb25zdCBydW5NZW51QnRuID0gKDxNZW51PlxuICAgICAgICB7YWxsb3dDVEFTICYmICg8TWVudS5JdGVtIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbG9nQWN0aW9uKExPR19BQ1RJT05TX1NRTExBQl9DUkVBVEVfVEFCTEVfQVMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0Y3V0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHNldFNob3dDcmVhdGVBc01vZGFsKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBzZXRDcmVhdGVBcyhDdGFzRW51bS5UYWJsZSk7XG4gICAgICAgICAgICAgICAgfX0ga2V5PVwiMVwiPlxuICAgICAgICAgICAge3QoJ0NSRUFURSBUQUJMRSBBUycpfVxuICAgICAgICAgIDwvTWVudS5JdGVtPil9XG4gICAgICAgIHthbGxvd0NWQVMgJiYgKDxNZW51Lkl0ZW0gb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsb2dBY3Rpb24oTE9HX0FDVElPTlNfU1FMTEFCX0NSRUFURV9WSUVXX0FTLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG9ydGN1dDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzZXRTaG93Q3JlYXRlQXNNb2RhbCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3JlYXRlQXMoQ3Rhc0VudW0uVmlldyk7XG4gICAgICAgICAgICAgICAgfX0ga2V5PVwiMlwiPlxuICAgICAgICAgICAge3QoJ0NSRUFURSBWSUVXIEFTJyl9XG4gICAgICAgICAgPC9NZW51Lkl0ZW0+KX1cbiAgICAgIDwvTWVudT4pO1xuICAgICAgICByZXR1cm4gKDxTdHlsZWRUb29sYmFyIGNsYXNzTmFtZT1cInNxbC10b29sYmFyXCIgaWQ9XCJqcy1zcWwtdG9vbGJhclwiPlxuICAgICAgICB7aGlkZUFjdGlvbnMgPyAoPEFsZXJ0IHR5cGU9XCJ3YXJuaW5nXCIgbWVzc2FnZT17dCgnVGhlIGRhdGFiYXNlIHRoYXQgd2FzIHVzZWQgdG8gZ2VuZXJhdGUgdGhpcyBxdWVyeSBjb3VsZCBub3QgYmUgZm91bmQnKX0gZGVzY3JpcHRpb249e3QoJ0Nob29zZSBvbmUgb2YgdGhlIGF2YWlsYWJsZSBkYXRhYmFzZXMgb24gdGhlIGxlZnQgcGFuZWwuJyl9IGNsb3NhYmxlPXtmYWxzZX0vPikgOiAoPD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGVmdEl0ZW1zXCI+XG4gICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgIDxSdW5RdWVyeUFjdGlvbkJ1dHRvbiBhbGxvd0FzeW5jPXtkYXRhYmFzZT8uYWxsb3dfcnVuX2FzeW5jID09PSB0cnVlfSBxdWVyeUVkaXRvcklkPXtxdWVyeUVkaXRvci5pZH0gcXVlcnlTdGF0ZT17bGF0ZXN0UXVlcnk/LnN0YXRlfSBydW5RdWVyeT17cnVuUXVlcnl9IHN0b3BRdWVyeT17c3RvcFF1ZXJ5fSBvdmVybGF5Q3JlYXRlQXNNZW51PXtzaG93TWVudSA/IHJ1bk1lbnVCdG4gOiBudWxsfS8+XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAge2lzRmVhdHVyZUVuYWJsZWQoRmVhdHVyZUZsYWcuRXN0aW1hdGVRdWVyeUNvc3QpICYmXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiYXNlPy5hbGxvd3NfY29zdF9lc3RpbWF0ZSAmJiAoPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxFc3RpbWF0ZVF1ZXJ5Q29zdEJ1dHRvbiBnZXRFc3RpbWF0ZT17Z2V0UXVlcnlDb3N0RXN0aW1hdGV9IHF1ZXJ5RWRpdG9ySWQ9e3F1ZXJ5RWRpdG9yLmlkfSB0b29sdGlwPXt0KCdFc3RpbWF0ZSB0aGUgY29zdCBiZWZvcmUgcnVubmluZyBhIHF1ZXJ5Jyl9Lz5cbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj4pfVxuICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICA8UXVlcnlMaW1pdFNlbGVjdCBxdWVyeUVkaXRvcklkPXtxdWVyeUVkaXRvci5pZH0gbWF4Um93PXttYXhSb3d9IGRlZmF1bHRRdWVyeUxpbWl0PXtkZWZhdWx0UXVlcnlMaW1pdH0vPlxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIHtsYXRlc3RRdWVyeSAmJiAoPFRpbWVyIHN0YXJ0VGltZT17bGF0ZXN0UXVlcnkuc3RhcnREdHRtfSBlbmRUaW1lPXtsYXRlc3RRdWVyeS5lbmREdHRtfSBzdGF0dXM9e1NUQVRFX1RZUEVfTUFQW2xhdGVzdFF1ZXJ5LnN0YXRlXX0gaXNSdW5uaW5nPXtsYXRlc3RRdWVyeS5zdGF0ZSA9PT0gJ3J1bm5pbmcnfS8+KX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWdodEl0ZW1zXCI+XG4gICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgIDxTYXZlUXVlcnkgcXVlcnlFZGl0b3JJZD17cXVlcnlFZGl0b3IuaWR9IGNvbHVtbnM9e2xhdGVzdFF1ZXJ5Py5yZXN1bHRzPy5jb2x1bW5zIHx8IFtdfSBvblNhdmU9e29uU2F2ZVF1ZXJ5fSBvblVwZGF0ZT17KHF1ZXJ5LCByZW1vdGVJZCkgPT4gZGlzcGF0Y2godXBkYXRlU2F2ZWRRdWVyeShxdWVyeSwgcmVtb3RlSWQpKX0gc2F2ZVF1ZXJ5V2FybmluZz17c2F2ZVF1ZXJ5V2FybmluZ30gZGF0YWJhc2U9e2RhdGFiYXNlfS8+XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgPFNoYXJlU3FsTGFiUXVlcnkgcXVlcnlFZGl0b3JJZD17cXVlcnlFZGl0b3IuaWR9Lz5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8RHJvcGRvd24gZHJvcGRvd25SZW5kZXI9eygpID0+IHJlbmRlckRyb3Bkb3duKCl9IHRyaWdnZXI9e1snY2xpY2snXX0+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBidXR0b25TaXplPVwieHNtYWxsXCIgdHlwZT1cImxpbmtcIiBzaG93TWFyZ2luUmlnaHQ9e2ZhbHNlfT5cbiAgICAgICAgICAgICAgICAgIDxJY29ucy5FbGxpcHNpc091dGxpbmVkIC8+XG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8Lz4pfVxuICAgICAgPC9TdHlsZWRUb29sYmFyPik7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVDdXJzb3JQb3NpdGlvbkNoYW5nZSA9IChuZXdQb3NpdGlvbikgPT4ge1xuICAgICAgICBkaXNwYXRjaChxdWVyeUVkaXRvclNldEN1cnNvclBvc2l0aW9uKHF1ZXJ5RWRpdG9yLCBuZXdQb3NpdGlvbikpO1xuICAgIH07XG4gICAgY29uc3QgcXVlcnlQYW5lID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGFjZUVkaXRvckhlaWdodCwgc291dGhQYW5lSGVpZ2h0IH0gPSBnZXRBY2VFZGl0b3JBbmRTb3V0aFBhbmVIZWlnaHRzKGhlaWdodCwgbm9ydGhQZXJjZW50LCBzb3V0aFBlcmNlbnQpO1xuICAgICAgICByZXR1cm4gKDxTcGxpdCBleHBhbmRUb01pbiBjbGFzc05hbWU9XCJxdWVyeVBhbmVcIiBzaXplcz17W25vcnRoUGVyY2VudCwgc291dGhQZXJjZW50XX0gZWxlbWVudFN0eWxlPXtlbGVtZW50U3R5bGV9IG1pblNpemU9ezIwMH0gZGlyZWN0aW9uPVwidmVydGljYWxcIiBndXR0ZXJTaXplPXtTUUxfRURJVE9SX0dVVFRFUl9IRUlHSFR9IG9uRHJhZ1N0YXJ0PXtvblJlc2l6ZVN0YXJ0fSBvbkRyYWdFbmQ9e29uUmVzaXplRW5kfT5cbiAgICAgICAgPGRpdiByZWY9e25vcnRoUGFuZVJlZn0gY2xhc3NOYW1lPVwibm9ydGgtcGFuZVwiPlxuICAgICAgICAgIHtTcWxGb3JtRXh0ZW5zaW9uICYmICg8U3FsRm9ybUV4dGVuc2lvbiBxdWVyeUVkaXRvcklkPXtxdWVyeUVkaXRvci5pZH0gc2V0UXVlcnlFZGl0b3JBbmRTYXZlU3FsV2l0aERlYm91bmNlPXtzZXRRdWVyeUVkaXRvckFuZFNhdmVTcWxXaXRoRGVib3VuY2V9IHN0YXJ0UXVlcnk9e3N0YXJ0UXVlcnl9Lz4pfVxuICAgICAgICAgIHtpc0FjdGl2ZSAmJiAoPEFjZUVkaXRvcldyYXBwZXIgYXV0b2NvbXBsZXRlPXthdXRvY29tcGxldGVFbmFibGVkfSBvbkJsdXI9e29uU3FsQ2hhbmdlZH0gb25DaGFuZ2U9e29uU3FsQ2hhbmdlZH0gcXVlcnlFZGl0b3JJZD17cXVlcnlFZGl0b3IuaWR9IG9uQ3Vyc29yUG9zaXRpb25DaGFuZ2U9e2hhbmRsZUN1cnNvclBvc2l0aW9uQ2hhbmdlfSBoZWlnaHQ9e2Ake2FjZUVkaXRvckhlaWdodH1weGB9IGhvdGtleXM9e2hvdGtleXN9Lz4pfVxuICAgICAgICAgIHtyZW5kZXJFZGl0b3JCb3R0b21CYXIoc2hvd0VtcHR5U3RhdGUpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPFNvdXRoUGFuZSBxdWVyeUVkaXRvcklkPXtxdWVyeUVkaXRvci5pZH0gbGF0ZXN0UXVlcnlJZD17bGF0ZXN0UXVlcnk/LmlkfSBoZWlnaHQ9e3NvdXRoUGFuZUhlaWdodH0gZGlzcGxheUxpbWl0PXtkaXNwbGF5TGltaXR9IGRlZmF1bHRRdWVyeUxpbWl0PXtkZWZhdWx0UXVlcnlMaW1pdH0vPlxuICAgICAgPC9TcGxpdD4pO1xuICAgIH07XG4gICAgY29uc3QgY3JlYXRlVmlld01vZGFsVGl0bGUgPSBjcmVhdGVBcyA9PT0gQ3Rhc0VudW0uVmlldyA/ICdDUkVBVEUgVklFVyBBUycgOiAnQ1JFQVRFIFRBQkxFIEFTJztcbiAgICBjb25zdCBjcmVhdGVNb2RhbFBsYWNlSG9sZGVyID0gY3JlYXRlQXMgPT09IEN0YXNFbnVtLlZpZXdcbiAgICAgICAgPyB0KCdTcGVjaWZ5IG5hbWUgdG8gQ1JFQVRFIFZJRVcgQVMgc2NoZW1hIGluOiBwdWJsaWMnKVxuICAgICAgICA6IHQoJ1NwZWNpZnkgbmFtZSB0byBDUkVBVEUgVEFCTEUgQVMgc2NoZW1hIGluOiBwdWJsaWMnKTtcbiAgICBjb25zdCBsZWZ0QmFyU3RhdGVDbGFzcyA9IGhpZGVMZWZ0QmFyXG4gICAgICAgID8gJ3NjaGVtYVBhbmUtZXhpdC1kb25lJ1xuICAgICAgICA6ICdzY2hlbWFQYW5lLWVudGVyLWRvbmUnO1xuICAgIHJldHVybiAoPFN0eWxlZFNxbEVkaXRvciByZWY9e3NxbEVkaXRvclJlZn0gY2xhc3NOYW1lPVwiU3FsRWRpdG9yXCI+XG4gICAgICA8Q1NTVHJhbnNpdGlvbiBjbGFzc05hbWVzPVwic2NoZW1hUGFuZVwiIGluPXshaGlkZUxlZnRCYXJ9IHRpbWVvdXQ9ezMwMH0+XG4gICAgICAgIDxSZXNpemFibGVTaWRlYmFyIGlkPXtgc3FsbGFiOiR7cXVlcnlFZGl0b3IuaWR9YH0gbWluV2lkdGg9e1NRTF9FRElUT1JfTEVGVEJBUl9XSURUSH0gaW5pdGlhbFdpZHRoPXtTUUxfRURJVE9SX0xFRlRCQVJfV0lEVEh9IGVuYWJsZT17IWhpZGVMZWZ0QmFyfT5cbiAgICAgICAgICB7YWRqdXN0ZWRXaWR0aCA9PiAoPFN0eWxlZFNpZGViYXIgY2xhc3NOYW1lPXtgc2NoZW1hUGFuZSAke2xlZnRCYXJTdGF0ZUNsYXNzfWB9IHdpZHRoPXthZGp1c3RlZFdpZHRofSBoaWRlPXtoaWRlTGVmdEJhcn0+XG4gICAgICAgICAgICAgIDxTcWxFZGl0b3JMZWZ0QmFyIGRhdGFiYXNlPXtkYXRhYmFzZX0gcXVlcnlFZGl0b3JJZD17cXVlcnlFZGl0b3IuaWR9Lz5cbiAgICAgICAgICAgIDwvU3R5bGVkU2lkZWJhcj4pfVxuICAgICAgICA8L1Jlc2l6YWJsZVNpZGViYXI+XG4gICAgICA8L0NTU1RyYW5zaXRpb24+XG4gICAgICB7c2hvdWxkTG9hZFF1ZXJ5RWRpdG9yID8gKDxkaXYgZGF0YS10ZXN0PVwic3FsRWRpdG9yLWxvYWRpbmdcIiBjc3M9e2NzcyBgXG4gICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgcGFkZGluZzogJHt0aGVtZS5ncmlkVW5pdCAqIDR9cHg7XG4gICAgICAgICAgYH0+XG4gICAgICAgICAgPFNrZWxldG9uIGFjdGl2ZS8+XG4gICAgICAgIDwvZGl2PikgOiBzaG93RW1wdHlTdGF0ZSAmJiAhaGFzU3FsU3RhdGVtZW50ID8gKDxFbXB0eVN0YXRlIGltYWdlPVwidmVjdG9yLnN2Z1wiIHNpemU9XCJsYXJnZVwiIHRpdGxlPXt0KCdTZWxlY3QgYSBkYXRhYmFzZSB0byB3cml0ZSBhIHF1ZXJ5Jyl9IGRlc2NyaXB0aW9uPXt0KCdDaG9vc2Ugb25lIG9mIHRoZSBhdmFpbGFibGUgZGF0YWJhc2VzIGZyb20gdGhlIHBhbmVsIG9uIHRoZSBsZWZ0LicpfS8+KSA6IChxdWVyeVBhbmUoKSl9XG4gICAgICA8TW9kYWwgc2hvdz17c2hvd0NyZWF0ZUFzTW9kYWx9IHRpdGxlPXt0KGNyZWF0ZVZpZXdNb2RhbFRpdGxlKX0gb25IaWRlPXsoKSA9PiBzZXRTaG93Q3JlYXRlQXNNb2RhbChmYWxzZSl9IGZvb3Rlcj17PD5cbiAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4gc2V0U2hvd0NyZWF0ZUFzTW9kYWwoZmFsc2UpfT5cbiAgICAgICAgICAgICAge3QoJ0NhbmNlbCcpfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICB7Y3JlYXRlQXMgPT09IEN0YXNFbnVtLlRhYmxlICYmICg8QnV0dG9uIGJ1dHRvblN0eWxlPVwicHJpbWFyeVwiIGRpc2FibGVkPXtjdGFzLmxlbmd0aCA9PT0gMH0gb25DbGljaz17Y3JlYXRlVGFibGVBc30+XG4gICAgICAgICAgICAgICAge3QoJ0NyZWF0ZScpfVxuICAgICAgICAgICAgICA8L0J1dHRvbj4pfVxuICAgICAgICAgICAge2NyZWF0ZUFzID09PSBDdGFzRW51bS5WaWV3ICYmICg8QnV0dG9uIGJ1dHRvblN0eWxlPVwicHJpbWFyeVwiIGRpc2FibGVkPXtjdGFzLmxlbmd0aCA9PT0gMH0gb25DbGljaz17Y3JlYXRlVmlld0FzfT5cbiAgICAgICAgICAgICAgICB7dCgnQ3JlYXRlJyl9XG4gICAgICAgICAgICAgIDwvQnV0dG9uPil9XG4gICAgICAgICAgPC8+fT5cbiAgICAgICAgPHNwYW4+e3QoJ05hbWUnKX08L3NwYW4+XG4gICAgICAgIDxJbnB1dCBwbGFjZWhvbGRlcj17Y3JlYXRlTW9kYWxQbGFjZUhvbGRlcn0gb25DaGFuZ2U9e2N0YXNDaGFuZ2VkfS8+XG4gICAgICA8L01vZGFsPlxuICAgIDwvU3R5bGVkU3FsRWRpdG9yPik7XG59O1xuZXhwb3J0IGRlZmF1bHQgU3FsRWRpdG9yO1xuIl19 */\"), children: [\n      _jsxs(Menu.Item, { css: _ref, children: [\n        ' ',\n        _jsx(\"span\", { children: t('Render HTML') }), ' ',\n        _jsx(Switch, { checked: renderHTMLEnabled, onChange: handleToggleRenderHTMLEnabled }), ' '] }\n      ),\n      _jsxs(Menu.Item, { css: _ref2, children: [\n        ' ',\n        _jsx(\"span\", { children: t('Autocomplete') }), ' ',\n        _jsx(Switch, { checked: autocompleteEnabled, onChange: handleToggleAutocompleteEnabled }), ' '] }\n      ),\n      isFeatureEnabled(FeatureFlag.EnableTemplateProcessing) && _jsx(Menu.Item, { children:\n        _jsx(TemplateParamsEditor, { language: \"json\", onChange: (params) => {\n            dispatch(queryEditorSetTemplateParams(qe, params));\n          }, queryEditorId: qe.id }) }\n      ),\n      _jsx(Menu.Item, { onClick: () => formatCurrentQuery(), children:\n        t('Format SQL') }\n      ),\n      !_isEmpty(scheduledQueriesConf) && _jsx(Menu.Item, { children:\n        _jsx(ScheduleQueryButton, { defaultLabel: qe.name, sql: qe.sql, onSchedule: (query) => dispatch(scheduleQuery(query)), schema: qe.schema, dbId: qe.dbId, scheduleQueryWarning: scheduleQueryWarning, tooltip: scheduleToolTip, disabled: !successful }) }\n      ),\n      _jsx(Menu.Item, { children:\n        _jsx(KeyboardShortcutButton, { children:\n          t('Keyboard shortcuts') }\n        ) }\n      )] }\n    );\n  };\n  const onSaveQuery = async (query, clientId) => {\n    const savedQuery = await dispatch(saveQuery(query, clientId));\n    dispatch(addSavedQueryToTabState(queryEditor, savedQuery));\n  };\n  const renderEditorBottomBar = (hideActions) => {var _latestQuery$results;\n    const { allow_ctas: allowCTAS, allow_cvas: allowCVAS } = database || {};\n    const showMenu = allowCTAS || allowCVAS;\n    const runMenuBtn = _jsxs(Menu, { children: [\n      allowCTAS && _jsx(Menu.Item, { onClick: () => {\n          logAction(LOG_ACTIONS_SQLLAB_CREATE_TABLE_AS, {\n            shortcut: false\n          });\n          setShowCreateAsModal(true);\n          setCreateAs(CtasEnum.Table);\n        }, children:\n        t('CREATE TABLE AS') }, \"1\"\n      ),\n      allowCVAS && _jsx(Menu.Item, { onClick: () => {\n          logAction(LOG_ACTIONS_SQLLAB_CREATE_VIEW_AS, {\n            shortcut: false\n          });\n          setShowCreateAsModal(true);\n          setCreateAs(CtasEnum.View);\n        }, children:\n        t('CREATE VIEW AS') }, \"2\"\n      )] }\n    );\n    return _jsx(StyledToolbar, { className: \"sql-toolbar\", id: \"js-sql-toolbar\", children:\n      hideActions ? _jsx(Alert, { type: \"warning\", message: t('The database that was used to generate this query could not be found'), description: t('Choose one of the available databases on the left panel.'), closable: false }) : _jsxs(_Fragment, { children: [\n        _jsxs(\"div\", { className: \"leftItems\", children: [\n          _jsx(\"span\", { children:\n            _jsx(RunQueryActionButton, { allowAsync: (database == null ? void 0 : database.allow_run_async) === true, queryEditorId: queryEditor.id, queryState: latestQuery == null ? void 0 : latestQuery.state, runQuery: runQuery, stopQuery: stopQuery, overlayCreateAsMenu: showMenu ? runMenuBtn : null }) }\n          ),\n          isFeatureEnabled(FeatureFlag.EstimateQueryCost) && (\n          database == null ? void 0 : database.allows_cost_estimate) && _jsx(\"span\", { children:\n            _jsx(EstimateQueryCostButton, { getEstimate: getQueryCostEstimate, queryEditorId: queryEditor.id, tooltip: t('Estimate the cost before running a query') }) }\n          ),\n          _jsx(\"span\", { children:\n            _jsx(QueryLimitSelect, { queryEditorId: queryEditor.id, maxRow: maxRow, defaultQueryLimit: defaultQueryLimit }) }\n          ),\n          latestQuery && _jsx(Timer, { startTime: latestQuery.startDttm, endTime: latestQuery.endDttm, status: STATE_TYPE_MAP[latestQuery.state], isRunning: latestQuery.state === 'running' })] }\n        ),\n        _jsxs(\"div\", { className: \"rightItems\", children: [\n          _jsx(\"span\", { children:\n            _jsx(SaveQuery, { queryEditorId: queryEditor.id, columns: (latestQuery == null ? void 0 : (_latestQuery$results = latestQuery.results) == null ? void 0 : _latestQuery$results.columns) || [], onSave: onSaveQuery, onUpdate: (query, remoteId) => dispatch(updateSavedQuery(query, remoteId)), saveQueryWarning: saveQueryWarning, database: database }) }\n          ),\n          _jsx(\"span\", { children:\n            _jsx(ShareSqlLabQuery, { queryEditorId: queryEditor.id }) }\n          ),\n          _jsx(Dropdown, { dropdownRender: () => renderDropdown(), trigger: ['click'], children:\n            _jsx(Button, { buttonSize: \"xsmall\", type: \"link\", showMarginRight: false, children:\n              _jsx(Icons.EllipsisOutlined, {}) }\n            ) }\n          )] }\n        )] }\n      ) }\n    );\n  };\n  const handleCursorPositionChange = (newPosition) => {\n    dispatch(queryEditorSetCursorPosition(queryEditor, newPosition));\n  };\n  const queryPane = () => {\n    const { aceEditorHeight, southPaneHeight } = getAceEditorAndSouthPaneHeights(height, northPercent, southPercent);\n    return _jsxs(Split, { expandToMin: true, className: \"queryPane\", sizes: [northPercent, southPercent], elementStyle: elementStyle, minSize: 200, direction: \"vertical\", gutterSize: SQL_EDITOR_GUTTER_HEIGHT, onDragStart: onResizeStart, onDragEnd: onResizeEnd, children: [\n      _jsxs(\"div\", { ref: northPaneRef, className: \"north-pane\", children: [\n        SqlFormExtension && _jsx(SqlFormExtension, { queryEditorId: queryEditor.id, setQueryEditorAndSaveSqlWithDebounce: setQueryEditorAndSaveSqlWithDebounce, startQuery: startQuery }),\n        isActive && _jsx(AceEditorWrapper, { autocomplete: autocompleteEnabled, onBlur: onSqlChanged, onChange: onSqlChanged, queryEditorId: queryEditor.id, onCursorPositionChange: handleCursorPositionChange, height: `${aceEditorHeight}px`, hotkeys: hotkeys }),\n        renderEditorBottomBar(showEmptyState)] }\n      ),\n      _jsx(SouthPane, { queryEditorId: queryEditor.id, latestQueryId: latestQuery == null ? void 0 : latestQuery.id, height: southPaneHeight, displayLimit: displayLimit, defaultQueryLimit: defaultQueryLimit })] }\n    );\n  };\n  const createViewModalTitle = createAs === CtasEnum.View ? 'CREATE VIEW AS' : 'CREATE TABLE AS';\n  const createModalPlaceHolder = createAs === CtasEnum.View ?\n  t('Specify name to CREATE VIEW AS schema in: public') :\n  t('Specify name to CREATE TABLE AS schema in: public');\n  const leftBarStateClass = hideLeftBar ?\n  'schemaPane-exit-done' :\n  'schemaPane-enter-done';\n  return _jsxs(StyledSqlEditor, { ref: sqlEditorRef, className: \"SqlEditor\", children: [\n    _jsx(CSSTransition, { classNames: \"schemaPane\", in: !hideLeftBar, timeout: 300, children:\n      _jsx(ResizableSidebar, { id: `sqllab:${queryEditor.id}`, minWidth: SQL_EDITOR_LEFTBAR_WIDTH, initialWidth: SQL_EDITOR_LEFTBAR_WIDTH, enable: !hideLeftBar, children:\n        (adjustedWidth) => _jsx(StyledSidebar, { className: `schemaPane ${leftBarStateClass}`, width: adjustedWidth, hide: hideLeftBar, children:\n          _jsx(SqlEditorLeftBar, { database: database, queryEditorId: queryEditor.id }) }\n        ) }\n      ) }\n    ),\n    shouldLoadQueryEditor ? _jsx(\"div\", { \"data-test\": \"sqlEditor-loading\", css: css`\n            flex: 1;\n            padding: ${theme.gridUnit * 4}px;\n          `, children:\n      _jsx(Skeleton, { active: true }) }\n    ) : showEmptyState && !hasSqlStatement ? _jsx(EmptyState, { image: \"vector.svg\", size: \"large\", title: t('Select a database to write a query'), description: t('Choose one of the available databases from the panel on the left.') }) : queryPane(),\n    _jsxs(Modal, { show: showCreateAsModal, title: t(createViewModalTitle), onHide: () => setShowCreateAsModal(false), footer: _jsxs(_Fragment, { children: [\n        _jsx(Button, { onClick: () => setShowCreateAsModal(false), children:\n          t('Cancel') }\n        ),\n        createAs === CtasEnum.Table && _jsx(Button, { buttonStyle: \"primary\", disabled: ctas.length === 0, onClick: createTableAs, children:\n          t('Create') }\n        ),\n        createAs === CtasEnum.View && _jsx(Button, { buttonStyle: \"primary\", disabled: ctas.length === 0, onClick: createViewAs, children:\n          t('Create') }\n        )] }\n      ), children: [\n      _jsx(\"span\", { children: t('Name') }),\n      _jsx(Input, { placeholder: createModalPlaceHolder, onChange: ctasChanged })] }\n    )] }\n  );\n};__signature__(SqlEditor, \"useTheme{theme}\\nuseDispatch{dispatch}\\nuseSelector{{ database, latestQuery, hideLeftBar, currentQueryEditorId, hasSqlStatement, }}\\nuseLogAction{logAction}\\nuseState{[height, setHeight](0)}\\nuseState{[autorun, setAutorun](queryEditor.autorun)}\\nuseState{[ctas, setCtas]('')}\\nuseState{[northPercent, setNorthPercent](queryEditor.northPercent || INITIAL_NORTH_PERCENT)}\\nuseState{[southPercent, setSouthPercent](queryEditor.southPercent || INITIAL_SOUTH_PERCENT)}\\nuseState{[autocompleteEnabled, setAutocompleteEnabled](getItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, true))}\\nuseState{[renderHTMLEnabled, setRenderHTMLEnabled](getItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, true))}\\nuseState{[showCreateAsModal, setShowCreateAsModal](false)}\\nuseState{[createAs, setCreateAs]('')}\\nuseMemo{showEmptyState}\\nuseRef{sqlEditorRef}\\nuseRef{northPaneRef}\\nuseCallback{startQuery}\\nuseCallback{formatCurrentQuery}\\nuseCallback{stopQuery}\\nuseEffect{}\\nuseCallback{getHotkeyConfig}\\nuseMemo{hotkeys}\\nuseEffectEvent{onBeforeUnload}\\nuseEffectEvent{loadQueryEditor}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{setQueryEditorAndSaveSql}\\nuseMemo{setQueryEditorAndSaveSqlWithDebounce}\\nuseEffectEvent{onSqlChanged}\", () => [useTheme, useDispatch, useSelector, useLogAction, useEffectEvent, useEffectEvent, useEffectEvent]);const _default =\nSqlEditor;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(bootstrapData, \"bootstrapData\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(scheduledQueriesConf, \"scheduledQueriesConf\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(StyledToolbar, \"StyledToolbar\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(StyledSidebar, \"StyledSidebar\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(StyledSqlEditor, \"StyledSqlEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(extensionsRegistry, \"extensionsRegistry\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(elementStyle, \"elementStyle\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(SqlEditor, \"SqlEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useState","useEffect","useMemo","useRef","useCallback","useEffectEvent","CSSTransition","shallowEqual","useDispatch","useSelector","Split","css","FeatureFlag","isFeatureEnabled","styled","t","useTheme","getExtensionsRegistry","Modal","Mousetrap","Button","Timer","ResizableSidebar","Dropdown","Skeleton","Switch","Input","Menu","Icons","detectOS","addNewQueryEditor","CtasEnum","estimateQueryCost","persistEditorHeight","postStopQuery","queryEditorSetAutorun","queryEditorSetSql","queryEditorSetCursorPosition","queryEditorSetAndSaveSql","queryEditorSetTemplateParams","runQueryFromSqlEditor","saveQuery","addSavedQueryToTabState","scheduleQuery","setActiveSouthPaneTab","updateSavedQuery","formatQuery","fetchQueryEditor","switchQueryEditor","STATE_TYPE_MAP","SQL_EDITOR_GUTTER_HEIGHT","SQL_EDITOR_GUTTER_MARGIN","SQL_TOOLBAR_HEIGHT","SQL_EDITOR_LEFTBAR_WIDTH","SQL_EDITOR_PADDING","INITIAL_NORTH_PERCENT","INITIAL_SOUTH_PERCENT","SET_QUERY_EDITOR_SQL_DEBOUNCE_MS","WINDOW_RESIZE_THROTTLE_MS","getItem","LocalStorageKeys","setItem","EmptyState","Alert","getBootstrapData","useLogAction","LOG_ACTIONS_SQLLAB_CREATE_TABLE_AS","LOG_ACTIONS_SQLLAB_CREATE_VIEW_AS","LOG_ACTIONS_SQLLAB_ESTIMATE_QUERY_COST","LOG_ACTIONS_SQLLAB_FORMAT_SQL","LOG_ACTIONS_SQLLAB_LOAD_TAB_STATE","LOG_ACTIONS_SQLLAB_RUN_QUERY","LOG_ACTIONS_SQLLAB_STOP_QUERY","Logger","TemplateParamsEditor","SouthPane","SaveQuery","ScheduleQueryButton","EstimateQueryCostButton","ShareSqlLabQuery","SqlEditorLeftBar","AceEditorWrapper","RunQueryActionButton","QueryLimitSelect","KeyboardShortcutButton","KEY_MAP","KeyboardShortcut","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","bootstrapData","scheduledQueriesConf","_bootstrapData$common","common","_bootstrapData$common2","conf","SCHEDULED_QUERIES","StyledToolbar","div","theme","gridUnit","colors","grayscale","light5","light2","StyledSidebar","width","hide","StyledSqlEditor","transitionTiming","extensionsRegistry","elementStyle","dimension","elementSize","gutterSize","_ref","process","env","NODE_ENV","name","styles","toString","_EMOTION_STRINGIFIED_CSS_ERROR__","_ref2","SqlEditor","queryEditor","defaultQueryLimit","maxRow","displayLimit","saveQueryWarning","scheduleQueryWarning","dispatch","database","latestQuery","hideLeftBar","currentQueryEditorId","hasSqlStatement","sqlLab","unsavedQueryEditor","databases","queries","tabHistory","_queryEditor$sql","dbId","latestQueryId","id","Boolean","sql","trim","length","slice","logAction","queryEditorId","isActive","height","setHeight","autorun","setAutorun","ctas","setCtas","northPercent","setNorthPercent","southPercent","setSouthPercent","autocompleteEnabled","setAutocompleteEnabled","SqllabIsAutocompleteEnabled","renderHTMLEnabled","setRenderHTMLEnabled","SqllabIsRenderHtmlEnabled","showCreateAsModal","setShowCreateAsModal","createAs","setCreateAs","showEmptyState","_isEmpty","sqlEditorRef","northPaneRef","SqlFormExtension","get","startQuery","ctasArg","ctas_method","Table","formatCurrentQuery","useShortcut","shortcut","stopQuery","indexOf","state","runQuery","getSqlEditorHeight","current","clientHeight","getHotkeyConfig","userOS","key","CtrlR","descr","func","CtrlEnter","CtrlQ","CtrlT","markTimeOrigin","CtrlX","CtrlE","CtrlShiftF","CtrlLeft","CtrlRight","hotkeys","base","CtrlShiftEnter","editor","_start","_start2","_start3","_start4","_start5","getValue","session","getSession","cursorPosition","getCursorPosition","totalLine","getLength","currentRow","getFirstVisibleRow","semicolonEnd","find","backwards","skipCurrent","end","row","column","semicolonStart","start","currentLine","content","getLine","selection","setSelectionRange","clearSelection","moveCursorToPosition","scrollToRow","push","CtrlP","navigateUp","onBeforeUnload","event","_database$extra_json","extra_json","cancel_query_on_windows_unload","preventDefault","shouldLoadQueryEditor","SqllabBackendPersistence","loaded","loadQueryEditor","duration","getTimestamp","inLocalStorage","hasLoaded","handleWindowResizeWithThrottle","_throttle","window","addEventListener","removeEventListener","forEach","keyConfig","bind","onResizeStart","editorEl","document","getElementsByClassName","style","onResizeEnd","_northPaneRef$current","setQueryEditorAndSaveSql","setQueryEditorAndSaveSqlWithDebounce","_debounce","onSqlChanged","getAceEditorAndSouthPaneHeights","aceEditorHeight","southPaneHeight","getQueryCostEstimate","handleToggleAutocompleteEnabled","handleToggleRenderHTMLEnabled","createTableAs","createViewAs","View","ctasChanged","target","value","renderDropdown","qe","successful","scheduleToolTip","_css","children","Item","checked","onChange","EnableTemplateProcessing","language","params","onClick","defaultLabel","onSchedule","query","schema","tooltip","disabled","onSaveQuery","clientId","savedQuery","renderEditorBottomBar","hideActions","_latestQuery$results","allow_ctas","allowCTAS","allow_cvas","allowCVAS","showMenu","runMenuBtn","className","type","message","description","closable","allowAsync","allow_run_async","queryState","overlayCreateAsMenu","EstimateQueryCost","allows_cost_estimate","getEstimate","startTime","startDttm","endTime","endDttm","status","isRunning","columns","results","onSave","onUpdate","remoteId","dropdownRender","trigger","buttonSize","showMarginRight","EllipsisOutlined","handleCursorPositionChange","newPosition","queryPane","expandToMin","sizes","minSize","direction","onDragStart","onDragEnd","ref","autocomplete","onBlur","onCursorPositionChange","createViewModalTitle","createModalPlaceHolder","leftBarStateClass","classNames","in","timeout","minWidth","initialWidth","enable","adjustedWidth","active","image","size","title","show","onHide","footer","buttonStyle","placeholder","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/SqlEditor/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport {\n  useState,\n  useEffect,\n  useMemo,\n  useRef,\n  useCallback,\n  ChangeEvent,\n  FC,\n} from 'react';\n\nimport type AceEditor from 'react-ace';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { CSSTransition } from 'react-transition-group';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport Split from 'react-split';\nimport {\n  css,\n  FeatureFlag,\n  isFeatureEnabled,\n  styled,\n  t,\n  useTheme,\n  getExtensionsRegistry,\n  QueryResponse,\n  Query,\n} from '@superset-ui/core';\nimport type {\n  QueryEditor,\n  SqlLabRootState,\n  CursorPosition,\n} from 'src/SqlLab/types';\nimport type { DatabaseObject } from 'src/features/databases/types';\nimport { debounce, throttle, isEmpty } from 'lodash';\nimport Modal from 'src/components/Modal';\nimport Mousetrap from 'mousetrap';\nimport Button from 'src/components/Button';\nimport Timer from 'src/components/Timer';\nimport ResizableSidebar from 'src/components/ResizableSidebar';\nimport { Dropdown } from 'src/components/Dropdown';\nimport { Skeleton } from 'src/components';\nimport { Switch } from 'src/components/Switch';\nimport { Input } from 'src/components/Input';\nimport { Menu } from 'src/components/Menu';\nimport { Icons } from 'src/components/Icons';\nimport { detectOS } from 'src/utils/common';\nimport {\n  addNewQueryEditor,\n  CtasEnum,\n  estimateQueryCost,\n  persistEditorHeight,\n  postStopQuery,\n  queryEditorSetAutorun,\n  queryEditorSetSql,\n  queryEditorSetCursorPosition,\n  queryEditorSetAndSaveSql,\n  queryEditorSetTemplateParams,\n  runQueryFromSqlEditor,\n  saveQuery,\n  addSavedQueryToTabState,\n  scheduleQuery,\n  setActiveSouthPaneTab,\n  updateSavedQuery,\n  formatQuery,\n  fetchQueryEditor,\n  switchQueryEditor,\n} from 'src/SqlLab/actions/sqlLab';\nimport {\n  STATE_TYPE_MAP,\n  SQL_EDITOR_GUTTER_HEIGHT,\n  SQL_EDITOR_GUTTER_MARGIN,\n  SQL_TOOLBAR_HEIGHT,\n  SQL_EDITOR_LEFTBAR_WIDTH,\n  SQL_EDITOR_PADDING,\n  INITIAL_NORTH_PERCENT,\n  INITIAL_SOUTH_PERCENT,\n  SET_QUERY_EDITOR_SQL_DEBOUNCE_MS,\n  WINDOW_RESIZE_THROTTLE_MS,\n} from 'src/SqlLab/constants';\nimport {\n  getItem,\n  LocalStorageKeys,\n  setItem,\n} from 'src/utils/localStorageHelpers';\nimport { EmptyState } from 'src/components/EmptyState';\nimport Alert from 'src/components/Alert';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport useLogAction from 'src/logger/useLogAction';\nimport {\n  LOG_ACTIONS_SQLLAB_CREATE_TABLE_AS,\n  LOG_ACTIONS_SQLLAB_CREATE_VIEW_AS,\n  LOG_ACTIONS_SQLLAB_ESTIMATE_QUERY_COST,\n  LOG_ACTIONS_SQLLAB_FORMAT_SQL,\n  LOG_ACTIONS_SQLLAB_LOAD_TAB_STATE,\n  LOG_ACTIONS_SQLLAB_RUN_QUERY,\n  LOG_ACTIONS_SQLLAB_STOP_QUERY,\n  Logger,\n} from 'src/logger/LogUtils';\nimport TemplateParamsEditor from '../TemplateParamsEditor';\nimport SouthPane from '../SouthPane';\nimport SaveQuery, { QueryPayload } from '../SaveQuery';\nimport ScheduleQueryButton from '../ScheduleQueryButton';\nimport EstimateQueryCostButton from '../EstimateQueryCostButton';\nimport ShareSqlLabQuery from '../ShareSqlLabQuery';\nimport SqlEditorLeftBar from '../SqlEditorLeftBar';\nimport AceEditorWrapper from '../AceEditorWrapper';\nimport RunQueryActionButton from '../RunQueryActionButton';\nimport QueryLimitSelect from '../QueryLimitSelect';\nimport KeyboardShortcutButton, {\n  KEY_MAP,\n  KeyboardShortcut,\n} from '../KeyboardShortcutButton';\n\nconst bootstrapData = getBootstrapData();\nconst scheduledQueriesConf = bootstrapData?.common?.conf?.SCHEDULED_QUERIES;\n\nconst StyledToolbar = styled.div`\n  padding: ${({ theme }) => theme.gridUnit * 2}px;\n  background: ${({ theme }) => theme.colors.grayscale.light5};\n  display: flex;\n  justify-content: space-between;\n  border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  border-top: 0;\n  column-gap: ${({ theme }) => theme.gridUnit}px;\n\n  form {\n    margin-block-end: 0;\n  }\n\n  .leftItems,\n  .rightItems {\n    display: flex;\n    align-items: center;\n    & > span {\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n      display: inline-block;\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n\n  .limitDropdown {\n    white-space: nowrap;\n  }\n`;\n\nconst StyledSidebar = styled.div<{ width: number; hide: boolean | undefined }>`\n  flex: 0 0 ${({ width }) => width}px;\n  width: ${({ width }) => width}px;\n  padding: ${({ theme, hide }) => (hide ? 0 : theme.gridUnit * 2.5)}px;\n  border-right: 1px solid\n    ${({ theme, hide }) =>\n      hide ? 'transparent' : theme.colors.grayscale.light2};\n`;\n\nconst StyledSqlEditor = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n\n    .schemaPane {\n      transition: transform ${theme.transitionTiming}s ease-in-out;\n    }\n\n    .queryPane {\n      flex: 1 1 auto;\n      padding: ${theme.gridUnit * 2}px;\n      overflow-y: auto;\n      overflow-x: scroll;\n    }\n\n    .schemaPane-enter-done,\n    .schemaPane-exit {\n      transform: translateX(0);\n      z-index: 7;\n    }\n\n    .schemaPane-exit-active {\n      transform: translateX(-120%);\n    }\n\n    .schemaPane-enter-active {\n      transform: translateX(0);\n      max-width: ${theme.gridUnit * 75}px;\n    }\n\n    .schemaPane-enter,\n    .schemaPane-exit-done {\n      max-width: 0;\n      transform: translateX(-120%);\n      overflow: hidden;\n    }\n\n    .schemaPane-exit-done + .queryPane {\n      margin-left: 0;\n    }\n\n    .gutter {\n      border-top: 1px solid ${theme.colors.grayscale.light2};\n      border-bottom: 1px solid ${theme.colors.grayscale.light2};\n      width: 3%;\n      margin: ${SQL_EDITOR_GUTTER_MARGIN}px 47%;\n    }\n\n    .gutter.gutter-vertical {\n      cursor: row-resize;\n    }\n  `}\n`;\n\nconst extensionsRegistry = getExtensionsRegistry();\n\nexport type Props = {\n  queryEditor: QueryEditor;\n  defaultQueryLimit: number;\n  maxRow: number;\n  displayLimit: number;\n  saveQueryWarning: string | null;\n  scheduleQueryWarning: string | null;\n};\n\nconst elementStyle = (\n  dimension: string,\n  elementSize: number,\n  gutterSize: number,\n) => ({\n  [dimension]: `calc(${elementSize}% - ${\n    gutterSize + SQL_EDITOR_GUTTER_MARGIN\n  }px)`,\n});\n\nconst SqlEditor: FC<Props> = ({\n  queryEditor,\n  defaultQueryLimit,\n  maxRow,\n  displayLimit,\n  saveQueryWarning,\n  scheduleQueryWarning,\n}) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n\n  const {\n    database,\n    latestQuery,\n    hideLeftBar,\n    currentQueryEditorId,\n    hasSqlStatement,\n  } = useSelector<\n    SqlLabRootState,\n    {\n      database?: DatabaseObject;\n      latestQuery?: QueryResponse;\n      hideLeftBar?: boolean;\n      currentQueryEditorId: QueryEditor['id'];\n      hasSqlStatement: boolean;\n    }\n  >(({ sqlLab: { unsavedQueryEditor, databases, queries, tabHistory } }) => {\n    let { dbId, latestQueryId, hideLeftBar } = queryEditor;\n    if (unsavedQueryEditor?.id === queryEditor.id) {\n      dbId = unsavedQueryEditor.dbId || dbId;\n      latestQueryId = unsavedQueryEditor.latestQueryId || latestQueryId;\n      hideLeftBar =\n        typeof unsavedQueryEditor.hideLeftBar === 'boolean'\n          ? unsavedQueryEditor.hideLeftBar\n          : hideLeftBar;\n    }\n    return {\n      hasSqlStatement: Boolean(queryEditor.sql?.trim().length > 0),\n      database: databases[dbId || ''],\n      latestQuery: queries[latestQueryId || ''],\n      hideLeftBar,\n      currentQueryEditorId: tabHistory.slice(-1)[0],\n    };\n  }, shallowEqual);\n\n  const logAction = useLogAction({ queryEditorId: queryEditor.id });\n  const isActive = currentQueryEditorId === queryEditor.id;\n  const [height, setHeight] = useState(0);\n  const [autorun, setAutorun] = useState(queryEditor.autorun);\n  const [ctas, setCtas] = useState('');\n  const [northPercent, setNorthPercent] = useState(\n    queryEditor.northPercent || INITIAL_NORTH_PERCENT,\n  );\n  const [southPercent, setSouthPercent] = useState(\n    queryEditor.southPercent || INITIAL_SOUTH_PERCENT,\n  );\n  const [autocompleteEnabled, setAutocompleteEnabled] = useState(\n    getItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, true),\n  );\n  const [renderHTMLEnabled, setRenderHTMLEnabled] = useState(\n    getItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, true),\n  );\n  const [showCreateAsModal, setShowCreateAsModal] = useState(false);\n  const [createAs, setCreateAs] = useState('');\n  const showEmptyState = useMemo(\n    () => !database || isEmpty(database),\n    [database],\n  );\n\n  const sqlEditorRef = useRef<HTMLDivElement>(null);\n  const northPaneRef = useRef<HTMLDivElement>(null);\n\n  const SqlFormExtension = extensionsRegistry.get('sqleditor.extension.form');\n\n  const startQuery = useCallback(\n    (ctasArg = false, ctas_method = CtasEnum.Table) => {\n      if (!database) {\n        return;\n      }\n\n      dispatch(\n        runQueryFromSqlEditor(\n          database,\n          queryEditor,\n          defaultQueryLimit,\n          ctasArg ? ctas : '',\n          ctasArg,\n          ctas_method,\n        ),\n      );\n      dispatch(setActiveSouthPaneTab('Results'));\n    },\n    [ctas, database, defaultQueryLimit, dispatch, queryEditor],\n  );\n\n  const formatCurrentQuery = useCallback(\n    (useShortcut?: boolean) => {\n      logAction(LOG_ACTIONS_SQLLAB_FORMAT_SQL, {\n        shortcut: Boolean(useShortcut),\n      });\n      dispatch(formatQuery(queryEditor));\n    },\n    [dispatch, queryEditor, logAction],\n  );\n\n  const stopQuery = useCallback(() => {\n    if (latestQuery && ['running', 'pending'].indexOf(latestQuery.state) >= 0) {\n      dispatch(postStopQuery(latestQuery));\n    }\n    return false;\n  }, [dispatch, latestQuery]);\n\n  const runQuery = () => {\n    if (database) {\n      startQuery();\n    }\n  };\n\n  useEffect(() => {\n    if (autorun) {\n      setAutorun(false);\n      dispatch(queryEditorSetAutorun(queryEditor, false));\n      startQuery();\n    }\n  }, [autorun, dispatch, queryEditor, startQuery]);\n\n  // One layer of abstraction for easy spying in unit tests\n  const getSqlEditorHeight = () =>\n    sqlEditorRef.current\n      ? sqlEditorRef.current.clientHeight - SQL_EDITOR_PADDING * 2\n      : 0;\n\n  const getHotkeyConfig = useCallback(() => {\n    // Get the user's OS\n    const userOS = detectOS();\n    return [\n      {\n        name: 'runQuery1',\n        key: KeyboardShortcut.CtrlR,\n        descr: KEY_MAP[KeyboardShortcut.CtrlR],\n        func: () => {\n          if (queryEditor.sql.trim() !== '') {\n            logAction(LOG_ACTIONS_SQLLAB_RUN_QUERY, { shortcut: true });\n            startQuery();\n          }\n        },\n      },\n      {\n        name: 'runQuery2',\n        key: KeyboardShortcut.CtrlEnter,\n        descr: KEY_MAP[KeyboardShortcut.CtrlEnter],\n        func: () => {\n          if (queryEditor.sql.trim() !== '') {\n            logAction(LOG_ACTIONS_SQLLAB_RUN_QUERY, { shortcut: true });\n            startQuery();\n          }\n        },\n      },\n      {\n        name: 'newTab',\n        ...(userOS === 'Windows'\n          ? {\n              key: KeyboardShortcut.CtrlQ,\n              descr: KEY_MAP[KeyboardShortcut.CtrlQ],\n            }\n          : {\n              key: KeyboardShortcut.CtrlT,\n              descr: KEY_MAP[KeyboardShortcut.CtrlT],\n            }),\n        func: () => {\n          Logger.markTimeOrigin();\n          dispatch(addNewQueryEditor());\n        },\n      },\n      {\n        name: 'stopQuery',\n        ...(userOS === 'MacOS'\n          ? {\n              key: KeyboardShortcut.CtrlX,\n              descr: KEY_MAP[KeyboardShortcut.CtrlX],\n            }\n          : {\n              key: KeyboardShortcut.CtrlE,\n              descr: KEY_MAP[KeyboardShortcut.CtrlE],\n            }),\n        func: () => {\n          logAction(LOG_ACTIONS_SQLLAB_STOP_QUERY, { shortcut: true });\n          stopQuery();\n        },\n      },\n      {\n        name: 'formatQuery',\n        key: KeyboardShortcut.CtrlShiftF,\n        descr: KEY_MAP[KeyboardShortcut.CtrlShiftF],\n        func: () => {\n          formatCurrentQuery(true);\n        },\n      },\n      {\n        name: 'switchTabToLeft',\n        key: KeyboardShortcut.CtrlLeft,\n        descr: KEY_MAP[KeyboardShortcut.CtrlLeft],\n        func: () => {\n          dispatch(switchQueryEditor(true));\n        },\n      },\n      {\n        name: 'switchTabToRight',\n        key: KeyboardShortcut.CtrlRight,\n        descr: KEY_MAP[KeyboardShortcut.CtrlRight],\n        func: () => {\n          dispatch(switchQueryEditor(false));\n        },\n      },\n    ];\n  }, [dispatch, queryEditor.sql, startQuery, stopQuery, formatCurrentQuery]);\n\n  const hotkeys = useMemo(() => {\n    // Get all hotkeys including ace editor hotkeys\n    // Get the user's OS\n    const userOS = detectOS();\n    const base = [\n      ...getHotkeyConfig(),\n      {\n        name: 'runQuery3',\n        key: KeyboardShortcut.CtrlShiftEnter,\n        descr: KEY_MAP[KeyboardShortcut.CtrlShiftEnter],\n        func: (editor: AceEditor['editor']) => {\n          if (!editor.getValue().trim()) {\n            return;\n          }\n          const session = editor.getSession();\n          const cursorPosition = editor.getCursorPosition();\n          const totalLine = session.getLength();\n          const currentRow = editor.getFirstVisibleRow();\n          const semicolonEnd = editor.find(';', {\n            backwards: false,\n            skipCurrent: true,\n          });\n          let end;\n          if (semicolonEnd) {\n            ({ end } = semicolonEnd);\n          }\n          if (!end || end.row < cursorPosition.row) {\n            end = {\n              row: totalLine + 1,\n              column: 0,\n            };\n          }\n          const semicolonStart = editor.find(';', {\n            backwards: true,\n            skipCurrent: true,\n          });\n          let start;\n          if (semicolonStart) {\n            start = semicolonStart.end;\n          }\n          let currentLine = start?.row;\n          if (\n            !currentLine ||\n            currentLine > cursorPosition.row ||\n            (currentLine === cursorPosition.row &&\n              (start?.column || 0) > cursorPosition.column)\n          ) {\n            currentLine = 0;\n          }\n          let content =\n            currentLine === start?.row\n              ? session.getLine(currentLine).slice(start.column).trim()\n              : session.getLine(currentLine).trim();\n          while (!content && currentLine < totalLine) {\n            currentLine += 1;\n            content = session.getLine(currentLine).trim();\n          }\n          if (currentLine !== start?.row) {\n            start = { row: currentLine, column: 0 };\n          }\n          editor.selection.setSelectionRange({\n            start: start ?? { row: 0, column: 0 },\n            end,\n          });\n          startQuery();\n          editor.selection.clearSelection();\n          editor.moveCursorToPosition(cursorPosition);\n          editor.scrollToRow(currentRow);\n        },\n      },\n    ];\n    if (userOS === 'MacOS') {\n      base.push({\n        name: 'previousLine',\n        key: KeyboardShortcut.CtrlP,\n        descr: KEY_MAP[KeyboardShortcut.CtrlP],\n        func: editor => {\n          editor.navigateUp();\n        },\n      });\n    }\n\n    return base;\n  }, [getHotkeyConfig, startQuery]);\n\n  const onBeforeUnload = useEffectEvent(event => {\n    if (\n      database?.extra_json?.cancel_query_on_windows_unload &&\n      latestQuery?.state === 'running'\n    ) {\n      event.preventDefault();\n      stopQuery();\n    }\n  });\n\n  const shouldLoadQueryEditor =\n    isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) &&\n    !queryEditor.loaded;\n\n  const loadQueryEditor = useEffectEvent(() => {\n    const duration = Logger.getTimestamp();\n    logAction(LOG_ACTIONS_SQLLAB_LOAD_TAB_STATE, {\n      duration,\n      queryEditorId: queryEditor.id,\n      inLocalStorage: Boolean(queryEditor.inLocalStorage),\n      hasLoaded: !shouldLoadQueryEditor,\n    });\n    if (shouldLoadQueryEditor) {\n      dispatch(fetchQueryEditor(queryEditor, displayLimit));\n    }\n  });\n\n  useEffect(() => {\n    // We need to measure the height of the sql editor post render to figure the height of\n    // the south pane so it gets rendered properly\n    setHeight(getSqlEditorHeight());\n    const handleWindowResizeWithThrottle = throttle(\n      () => setHeight(getSqlEditorHeight()),\n      WINDOW_RESIZE_THROTTLE_MS,\n    );\n    if (isActive) {\n      loadQueryEditor();\n      window.addEventListener('resize', handleWindowResizeWithThrottle);\n      window.addEventListener('beforeunload', onBeforeUnload);\n    }\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResizeWithThrottle);\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n    // TODO: Remove useEffectEvent deps once https://github.com/facebook/react/pull/25881 is released\n  }, [onBeforeUnload, loadQueryEditor, isActive]);\n\n  useEffect(() => {\n    // setup hotkeys\n    const hotkeys = getHotkeyConfig();\n    if (isActive) {\n      // MouseTrap always override the same key\n      // Unbind (reset) will be called when App component unmount\n      hotkeys.forEach(keyConfig => {\n        Mousetrap.bind([keyConfig.key], keyConfig.func);\n      });\n    }\n  }, [getHotkeyConfig, latestQuery, isActive]);\n\n  const onResizeStart = () => {\n    // Set the heights on the ace editor and the ace content area after drag starts\n    // to smooth out the visual transition to the new heights when drag ends\n    const editorEl = document.getElementsByClassName(\n      'ace_content',\n    )[0] as HTMLElement;\n    if (editorEl) {\n      editorEl.style.height = '100%';\n    }\n  };\n\n  const onResizeEnd = ([northPercent, southPercent]: number[]) => {\n    setNorthPercent(northPercent);\n    setSouthPercent(southPercent);\n\n    if (northPaneRef.current?.clientHeight) {\n      dispatch(persistEditorHeight(queryEditor, northPercent, southPercent));\n    }\n  };\n\n  const setQueryEditorAndSaveSql = useCallback(\n    sql => {\n      dispatch(queryEditorSetAndSaveSql(queryEditor, sql));\n    },\n    [dispatch, queryEditor],\n  );\n\n  const setQueryEditorAndSaveSqlWithDebounce = useMemo(\n    () => debounce(setQueryEditorAndSaveSql, SET_QUERY_EDITOR_SQL_DEBOUNCE_MS),\n    [setQueryEditorAndSaveSql],\n  );\n\n  const onSqlChanged = useEffectEvent((sql: string) => {\n    dispatch(queryEditorSetSql(queryEditor, sql));\n  });\n\n  // Return the heights for the ace editor and the south pane as an object\n  // given the height of the sql editor, north pane percent and south pane percent.\n  const getAceEditorAndSouthPaneHeights = (\n    height: number,\n    northPercent: number,\n    southPercent: number,\n  ) => ({\n    aceEditorHeight:\n      (height * northPercent) / (theme.gridUnit * 25) -\n      (SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN) -\n      SQL_TOOLBAR_HEIGHT,\n    southPaneHeight:\n      (height * southPercent) / (theme.gridUnit * 25) -\n      (SQL_EDITOR_GUTTER_HEIGHT / 2 + SQL_EDITOR_GUTTER_MARGIN),\n  });\n\n  const getQueryCostEstimate = () => {\n    logAction(LOG_ACTIONS_SQLLAB_ESTIMATE_QUERY_COST, { shortcut: false });\n    if (database) {\n      dispatch(estimateQueryCost(queryEditor));\n    }\n  };\n\n  const handleToggleAutocompleteEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsAutocompleteEnabled, !autocompleteEnabled);\n    setAutocompleteEnabled(!autocompleteEnabled);\n  };\n\n  const handleToggleRenderHTMLEnabled = () => {\n    setItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, !renderHTMLEnabled);\n    setRenderHTMLEnabled(!renderHTMLEnabled);\n  };\n\n  const createTableAs = () => {\n    startQuery(true, CtasEnum.Table);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n\n  const createViewAs = () => {\n    startQuery(true, CtasEnum.View);\n    setShowCreateAsModal(false);\n    setCtas('');\n  };\n\n  const ctasChanged = (event: ChangeEvent<HTMLInputElement>) => {\n    setCtas(event.target.value);\n  };\n\n  const renderDropdown = () => {\n    const qe = queryEditor;\n    const successful = latestQuery?.state === 'success';\n    const scheduleToolTip = successful\n      ? t('Schedule the query periodically')\n      : t('You must run the query successfully first');\n    return (\n      <Menu css={{ width: theme.gridUnit * 50 }}>\n        <Menu.Item css={{ display: 'flex', justifyContent: 'space-between' }}>\n          {' '}\n          <span>{t('Render HTML')}</span>{' '}\n          <Switch\n            checked={renderHTMLEnabled}\n            onChange={handleToggleRenderHTMLEnabled}\n          />{' '}\n        </Menu.Item>\n        <Menu.Item css={{ display: 'flex', justifyContent: 'space-between' }}>\n          {' '}\n          <span>{t('Autocomplete')}</span>{' '}\n          <Switch\n            checked={autocompleteEnabled}\n            onChange={handleToggleAutocompleteEnabled}\n          />{' '}\n        </Menu.Item>\n        {isFeatureEnabled(FeatureFlag.EnableTemplateProcessing) && (\n          <Menu.Item>\n            <TemplateParamsEditor\n              language=\"json\"\n              onChange={params => {\n                dispatch(queryEditorSetTemplateParams(qe, params));\n              }}\n              queryEditorId={qe.id}\n            />\n          </Menu.Item>\n        )}\n        <Menu.Item onClick={() => formatCurrentQuery()}>\n          {t('Format SQL')}\n        </Menu.Item>\n        {!isEmpty(scheduledQueriesConf) && (\n          <Menu.Item>\n            <ScheduleQueryButton\n              defaultLabel={qe.name}\n              sql={qe.sql}\n              onSchedule={(query: Query) => dispatch(scheduleQuery(query))}\n              schema={qe.schema}\n              dbId={qe.dbId}\n              scheduleQueryWarning={scheduleQueryWarning}\n              tooltip={scheduleToolTip}\n              disabled={!successful}\n            />\n          </Menu.Item>\n        )}\n        <Menu.Item>\n          <KeyboardShortcutButton>\n            {t('Keyboard shortcuts')}\n          </KeyboardShortcutButton>\n        </Menu.Item>\n      </Menu>\n    );\n  };\n\n  const onSaveQuery = async (query: QueryPayload, clientId: string) => {\n    const savedQuery = await dispatch(saveQuery(query, clientId));\n    dispatch(addSavedQueryToTabState(queryEditor, savedQuery));\n  };\n\n  const renderEditorBottomBar = (hideActions: boolean) => {\n    const { allow_ctas: allowCTAS, allow_cvas: allowCVAS } = database || {};\n\n    const showMenu = allowCTAS || allowCVAS;\n    const runMenuBtn = (\n      <Menu>\n        {allowCTAS && (\n          <Menu.Item\n            onClick={() => {\n              logAction(LOG_ACTIONS_SQLLAB_CREATE_TABLE_AS, {\n                shortcut: false,\n              });\n              setShowCreateAsModal(true);\n              setCreateAs(CtasEnum.Table);\n            }}\n            key=\"1\"\n          >\n            {t('CREATE TABLE AS')}\n          </Menu.Item>\n        )}\n        {allowCVAS && (\n          <Menu.Item\n            onClick={() => {\n              logAction(LOG_ACTIONS_SQLLAB_CREATE_VIEW_AS, {\n                shortcut: false,\n              });\n              setShowCreateAsModal(true);\n              setCreateAs(CtasEnum.View);\n            }}\n            key=\"2\"\n          >\n            {t('CREATE VIEW AS')}\n          </Menu.Item>\n        )}\n      </Menu>\n    );\n\n    return (\n      <StyledToolbar className=\"sql-toolbar\" id=\"js-sql-toolbar\">\n        {hideActions ? (\n          <Alert\n            type=\"warning\"\n            message={t(\n              'The database that was used to generate this query could not be found',\n            )}\n            description={t(\n              'Choose one of the available databases on the left panel.',\n            )}\n            closable={false}\n          />\n        ) : (\n          <>\n            <div className=\"leftItems\">\n              <span>\n                <RunQueryActionButton\n                  allowAsync={database?.allow_run_async === true}\n                  queryEditorId={queryEditor.id}\n                  queryState={latestQuery?.state}\n                  runQuery={runQuery}\n                  stopQuery={stopQuery}\n                  overlayCreateAsMenu={showMenu ? runMenuBtn : null}\n                />\n              </span>\n              {isFeatureEnabled(FeatureFlag.EstimateQueryCost) &&\n                database?.allows_cost_estimate && (\n                  <span>\n                    <EstimateQueryCostButton\n                      getEstimate={getQueryCostEstimate}\n                      queryEditorId={queryEditor.id}\n                      tooltip={t('Estimate the cost before running a query')}\n                    />\n                  </span>\n                )}\n              <span>\n                <QueryLimitSelect\n                  queryEditorId={queryEditor.id}\n                  maxRow={maxRow}\n                  defaultQueryLimit={defaultQueryLimit}\n                />\n              </span>\n              {latestQuery && (\n                <Timer\n                  startTime={latestQuery.startDttm}\n                  endTime={latestQuery.endDttm}\n                  status={STATE_TYPE_MAP[latestQuery.state]}\n                  isRunning={latestQuery.state === 'running'}\n                />\n              )}\n            </div>\n            <div className=\"rightItems\">\n              <span>\n                <SaveQuery\n                  queryEditorId={queryEditor.id}\n                  columns={latestQuery?.results?.columns || []}\n                  onSave={onSaveQuery}\n                  onUpdate={(query, remoteId) =>\n                    dispatch(updateSavedQuery(query, remoteId))\n                  }\n                  saveQueryWarning={saveQueryWarning}\n                  database={database}\n                />\n              </span>\n              <span>\n                <ShareSqlLabQuery queryEditorId={queryEditor.id} />\n              </span>\n              <Dropdown\n                dropdownRender={() => renderDropdown()}\n                trigger={['click']}\n              >\n                <Button buttonSize=\"xsmall\" type=\"link\" showMarginRight={false}>\n                  <Icons.EllipsisOutlined />\n                </Button>\n              </Dropdown>\n            </div>\n          </>\n        )}\n      </StyledToolbar>\n    );\n  };\n\n  const handleCursorPositionChange = (newPosition: CursorPosition) => {\n    dispatch(queryEditorSetCursorPosition(queryEditor, newPosition));\n  };\n\n  const queryPane = () => {\n    const { aceEditorHeight, southPaneHeight } =\n      getAceEditorAndSouthPaneHeights(height, northPercent, southPercent);\n    return (\n      <Split\n        expandToMin\n        className=\"queryPane\"\n        sizes={[northPercent, southPercent]}\n        elementStyle={elementStyle}\n        minSize={200}\n        direction=\"vertical\"\n        gutterSize={SQL_EDITOR_GUTTER_HEIGHT}\n        onDragStart={onResizeStart}\n        onDragEnd={onResizeEnd}\n      >\n        <div ref={northPaneRef} className=\"north-pane\">\n          {SqlFormExtension && (\n            <SqlFormExtension\n              queryEditorId={queryEditor.id}\n              setQueryEditorAndSaveSqlWithDebounce={\n                setQueryEditorAndSaveSqlWithDebounce\n              }\n              startQuery={startQuery}\n            />\n          )}\n          {isActive && (\n            <AceEditorWrapper\n              autocomplete={autocompleteEnabled}\n              onBlur={onSqlChanged}\n              onChange={onSqlChanged}\n              queryEditorId={queryEditor.id}\n              onCursorPositionChange={handleCursorPositionChange}\n              height={`${aceEditorHeight}px`}\n              hotkeys={hotkeys}\n            />\n          )}\n          {renderEditorBottomBar(showEmptyState)}\n        </div>\n        <SouthPane\n          queryEditorId={queryEditor.id}\n          latestQueryId={latestQuery?.id}\n          height={southPaneHeight}\n          displayLimit={displayLimit}\n          defaultQueryLimit={defaultQueryLimit}\n        />\n      </Split>\n    );\n  };\n\n  const createViewModalTitle =\n    createAs === CtasEnum.View ? 'CREATE VIEW AS' : 'CREATE TABLE AS';\n\n  const createModalPlaceHolder =\n    createAs === CtasEnum.View\n      ? t('Specify name to CREATE VIEW AS schema in: public')\n      : t('Specify name to CREATE TABLE AS schema in: public');\n\n  const leftBarStateClass = hideLeftBar\n    ? 'schemaPane-exit-done'\n    : 'schemaPane-enter-done';\n  return (\n    <StyledSqlEditor ref={sqlEditorRef} className=\"SqlEditor\">\n      <CSSTransition classNames=\"schemaPane\" in={!hideLeftBar} timeout={300}>\n        <ResizableSidebar\n          id={`sqllab:${queryEditor.id}`}\n          minWidth={SQL_EDITOR_LEFTBAR_WIDTH}\n          initialWidth={SQL_EDITOR_LEFTBAR_WIDTH}\n          enable={!hideLeftBar}\n        >\n          {adjustedWidth => (\n            <StyledSidebar\n              className={`schemaPane ${leftBarStateClass}`}\n              width={adjustedWidth}\n              hide={hideLeftBar}\n            >\n              <SqlEditorLeftBar\n                database={database}\n                queryEditorId={queryEditor.id}\n              />\n            </StyledSidebar>\n          )}\n        </ResizableSidebar>\n      </CSSTransition>\n      {shouldLoadQueryEditor ? (\n        <div\n          data-test=\"sqlEditor-loading\"\n          css={css`\n            flex: 1;\n            padding: ${theme.gridUnit * 4}px;\n          `}\n        >\n          <Skeleton active />\n        </div>\n      ) : showEmptyState && !hasSqlStatement ? (\n        <EmptyState\n          image=\"vector.svg\"\n          size=\"large\"\n          title={t('Select a database to write a query')}\n          description={t(\n            'Choose one of the available databases from the panel on the left.',\n          )}\n        />\n      ) : (\n        queryPane()\n      )}\n      <Modal\n        show={showCreateAsModal}\n        title={t(createViewModalTitle)}\n        onHide={() => setShowCreateAsModal(false)}\n        footer={\n          <>\n            <Button onClick={() => setShowCreateAsModal(false)}>\n              {t('Cancel')}\n            </Button>\n            {createAs === CtasEnum.Table && (\n              <Button\n                buttonStyle=\"primary\"\n                disabled={ctas.length === 0}\n                onClick={createTableAs}\n              >\n                {t('Create')}\n              </Button>\n            )}\n            {createAs === CtasEnum.View && (\n              <Button\n                buttonStyle=\"primary\"\n                disabled={ctas.length === 0}\n                onClick={createViewAs}\n              >\n                {t('Create')}\n              </Button>\n            )}\n          </>\n        }\n      >\n        <span>{t('Name')}</span>\n        <Input placeholder={createModalPlaceHolder} onChange={ctasChanged} />\n      </Modal>\n    </StyledSqlEditor>\n  );\n};\n\nexport default SqlEditor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}