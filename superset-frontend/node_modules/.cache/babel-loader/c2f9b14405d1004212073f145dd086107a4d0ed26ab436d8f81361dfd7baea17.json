{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";import _debounce from \"lodash/debounce\";import _sortBy from \"lodash/sortBy\";import _isEqual from \"lodash/isEqual\";import _uniq from \"lodash/uniq\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo, useEffect, useCallback, useMemo, useState, useRef } from 'react';\n\nimport { styled, SLOW_DEBOUNCE, t, css, useTheme } from '@superset-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { AntdForm } from 'src/components';\nimport { Icons } from 'src/components/Icons';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { StyledModal } from 'src/components/Modal';\nimport { testWithId } from 'src/utils/testUtils';\nimport { updateCascadeParentIds } from 'src/dashboard/actions/nativeFilters';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { useFilterConfigMap, useFilterConfiguration } from '../state';\nimport FilterConfigurePane from './FilterConfigurePane';\nimport FiltersConfigForm, { FilterPanels } from './FiltersConfigForm/FiltersConfigForm';\nimport Footer from './Footer/Footer';\nimport { useOpenModal, useRemoveCurrentFilter } from './state';\nimport { createHandleSave, createHandleRemoveItem, generateFilterId, getFilterIds, validateForm, NATIVE_FILTER_DIVIDER_PREFIX, hasCircularDependency } from './utils';\nimport DividerConfigForm from './DividerConfigForm';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst MODAL_MARGIN = 16;\nconst MIN_WIDTH = 880;\nconst StyledModalWrapper = styled(StyledModal)`\n  min-width: ${MIN_WIDTH}px;\n  width: ${({ expanded }) => expanded ? '100%' : MIN_WIDTH} !important;\n\n  @media (max-width: ${MIN_WIDTH + MODAL_MARGIN * 2}px) {\n    width: 100% !important;\n    min-width: auto;\n  }\n\n  .antd5-modal-body {\n    padding: 0px;\n  }\n\n  ${({ expanded }) => expanded &&\ncss`\n      height: 100%;\n\n      .antd5-modal-body {\n        flex: 1 1 auto;\n      }\n      .antd5-modal-content {\n        height: 100%;\n      }\n    `}\n`;\nexport const StyledModalBody = styled.div`\n  display: flex;\n  height: ${({ expanded }) => expanded ? '100%' : '700px'};\n  flex-direction: row;\n  flex: 1;\n  .filters-list {\n    width: ${({ theme }) => theme.gridUnit * 50}px;\n    overflow: auto;\n  }\n`;\nexport const StyledForm = styled(AntdForm)`\n  width: 100%;\n`;\nexport const StyledExpandButtonWrapper = styled.div`\n  margin-left: ${({ theme }) => theme.gridUnit * 4}px;\n`;\nexport const FILTERS_CONFIG_MODAL_TEST_ID = 'filters-config-modal';\nexport const getFiltersConfigModalTestId = testWithId(FILTERS_CONFIG_MODAL_TEST_ID);\nexport const ALLOW_DEPENDENCIES = [\n'filter_range',\n'filter_select',\n'filter_time'];\n\nconst DEFAULT_EMPTY_FILTERS = [];\nconst DEFAULT_REMOVED_FILTERS = {};\nconst DEFAULT_FORM_VALUES = {\n  filters: {}\n};\nconst DEFAULT_FILTER_CHANGES = {\n  modified: [],\n  deleted: [],\n  reordered: []\n};\n/**\n * This is the modal to configure all the dashboard-native filters.\n * Manages modal-level state, such as what filters are in the list,\n * and which filter is currently being edited.\n *\n * Calls the `save` callback with the new FilterConfiguration object\n * when the user saves the filters.\n */\nfunction FiltersConfigModal({ isOpen, initialFilterId, createNewOnOpen, onSave, onCancel }) {\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const [form] = AntdForm.useForm();\n  const configFormRef = useRef();\n  // the filter config from redux state, this does not change until modal is closed.\n  const filterConfig = useFilterConfiguration();\n  const filterConfigMap = useFilterConfigMap();\n  // this state contains the changes that we'll be sent through the PATCH endpoint\n  const [filterChanges, setFilterChanges] = useState(DEFAULT_FILTER_CHANGES);\n  const resetFilterChanges = () => {\n    setFilterChanges(DEFAULT_FILTER_CHANGES);\n  };\n  const handleModifyFilter = useCallback((filterId) => {\n    if (!filterChanges.modified.includes(filterId)) {\n      setFilterChanges((prev) => ({\n        ...prev,\n        modified: [...prev.modified, filterId]\n      }));\n    }\n  }, [filterChanges.modified]);\n  // new filter ids belong to filters have been added during\n  // this configuration session, and only exist in the form state until we submit.\n  const [newFilterIds, setNewFilterIds] = useState(DEFAULT_EMPTY_FILTERS);\n  // store ids of filters that have been removed with the time they were removed\n  // so that we can disappear them after a few secs.\n  // filters are still kept in state until form is submitted.\n  const [removedFilters, setRemovedFilters] = useState(DEFAULT_REMOVED_FILTERS);\n  const [saveAlertVisible, setSaveAlertVisible] = useState(false);\n  // The full ordered set of ((original + new) - completely removed) filter ids\n  // Use this as the canonical list of what filters are being configured!\n  // This includes filter ids that are pending removal, so check for that.\n  const filterIds = useMemo(() => _uniq([...getFilterIds(filterConfig), ...newFilterIds]).filter((id) => {var _removedFilters$id;return !removedFilters[id] || ((_removedFilters$id = removedFilters[id]) == null ? void 0 : _removedFilters$id.isPending);}), [filterConfig, newFilterIds, removedFilters]);\n  // open the first filter in the list to start\n  const initialCurrentFilterId = initialFilterId != null ? initialFilterId : filterIds[0];\n  const [currentFilterId, setCurrentFilterId] = useState(initialCurrentFilterId);\n  const [erroredFilters, setErroredFilters] = useState(DEFAULT_EMPTY_FILTERS);\n  // the form values are managed by the antd form, but we copy them to here\n  // so that we can display them (e.g. filter titles in the tab headers)\n  const [formValues, setFormValues] = useState(DEFAULT_FORM_VALUES);\n  const unsavedFiltersIds = newFilterIds.filter((id) => !removedFilters[id]);\n  // brings back a filter that was previously removed (\"Undo\")\n  const restoreFilter = useCallback((id) => {\n    const removal = removedFilters[id];\n    // Clear the removal timeout if the filter is pending deletion\n    if (removal != null && removal.isPending)\n    clearTimeout(removal.timerId);\n    setRemovedFilters((current) => ({ ...current, [id]: null }));\n    setFilterChanges((prev) => ({\n      ...prev,\n      deleted: prev.deleted.filter((deletedId) => deletedId !== id)\n    }));\n  }, [removedFilters, setRemovedFilters]);\n  const initialFilterOrder = useMemo(() => Object.keys(filterConfigMap), [filterConfigMap]);\n  // State for tracking the re-ordering of filters\n  const [orderedFilters, setOrderedFilters] = useState(initialFilterOrder);\n  // State for rendered filter to improve performance\n  const [renderedFilters, setRenderedFilters] = useState([\n  initialCurrentFilterId]\n  );\n  const getActiveFilterPanelKey = (filterId) => [\n  `${filterId}-${FilterPanels.configuration.key}`,\n  `${filterId}-${FilterPanels.settings.key}`];\n\n  const [activeFilterPanelKey, setActiveFilterPanelKey] = useState(getActiveFilterPanelKey(initialCurrentFilterId));\n  const handleTabChange = (filterId) => {\n    setCurrentFilterId(filterId);\n    setActiveFilterPanelKey(getActiveFilterPanelKey(filterId));\n  };\n  // generates a new filter id and appends it to the newFilterIds\n  const addFilter = useCallback((type) => {\n    const newFilterId = generateFilterId(type);\n    setNewFilterIds([...newFilterIds, newFilterId]);\n    handleModifyFilter(newFilterId);\n    setCurrentFilterId(newFilterId);\n    setSaveAlertVisible(false);\n    setOrderedFilters([...orderedFilters, newFilterId]);\n    setActiveFilterPanelKey(getActiveFilterPanelKey(newFilterId));\n  }, [newFilterIds, handleModifyFilter, orderedFilters]);\n  useOpenModal(isOpen, addFilter, createNewOnOpen);\n  useRemoveCurrentFilter(removedFilters, currentFilterId, orderedFilters, setCurrentFilterId);\n  const handleRemoveItem = createHandleRemoveItem(setRemovedFilters, setOrderedFilters, setSaveAlertVisible, (filterId) => {\n    setFilterChanges((prev) => ({\n      ...prev,\n      deleted: [...prev.deleted, filterId]\n    }));\n  });\n  // After this, it should be as if the modal was just opened fresh.\n  // Called when the modal is closed.\n  const resetForm = (isSaving = false) => {\n    setNewFilterIds(DEFAULT_EMPTY_FILTERS);\n    setCurrentFilterId(initialCurrentFilterId);\n    setRemovedFilters(DEFAULT_REMOVED_FILTERS);\n    setSaveAlertVisible(false);\n    setFormValues(DEFAULT_FORM_VALUES);\n    resetFilterChanges();\n    setErroredFilters(DEFAULT_EMPTY_FILTERS);\n    if (filterIds.length > 0) {\n      setActiveFilterPanelKey(getActiveFilterPanelKey(filterIds[0]));\n    }\n    if (!isSaving) {\n      setOrderedFilters(initialFilterOrder);\n    }\n    setRenderedFilters([initialCurrentFilterId]);\n    form.resetFields(['filters']);\n    form.setFieldsValue({ changed: false });\n  };\n  const getFilterTitle = useCallback((id) => {\n    const formValue = formValues.filters[id];\n    const config = filterConfigMap[id];\n    return formValue && 'name' in formValue && formValue.name ||\n    formValue && 'title' in formValue && formValue.title ||\n    config && 'name' in config && config.name ||\n    config && 'title' in config && config.title ||\n    t('[untitled]');\n  }, [filterConfigMap, formValues.filters]);\n  const canBeUsedAsDependency = useCallback((filterId) => {var _form$getFieldValue;\n    if (removedFilters[filterId]) {\n      return false;\n    }\n    const component = ((_form$getFieldValue = form.getFieldValue('filters')) == null ? void 0 : _form$getFieldValue[filterId]) || filterConfigMap[filterId];\n    return component &&\n    'filterType' in component &&\n    ALLOW_DEPENDENCIES.includes(component.filterType);\n  }, [filterConfigMap, form, removedFilters]);\n  const getAvailableFilters = useCallback((filterId) => filterIds.\n  filter((id) => id !== filterId).\n  filter((id) => canBeUsedAsDependency(id)).\n  map((id) => {var _filterConfigMap$id;return {\n      label: getFilterTitle(id),\n      value: id,\n      type: (_filterConfigMap$id = filterConfigMap[id]) == null ? void 0 : _filterConfigMap$id.filterType\n    };}), [canBeUsedAsDependency, filterConfigMap, filterIds, getFilterTitle]);\n  /**\n   * Manages dependencies of filters associated with a deleted filter.\n   *\n   * @param values the native filters form\n   * @returns the updated filterConfigMap\n   */\n  const cleanDeletedParents = (values) => {\n    const modifiedParentFilters = new Set();\n    const updatedFilterConfigMap = Object.keys(filterConfigMap).reduce((acc, key) => {var _filter$cascadeParent;\n      const filter = filterConfigMap[key];\n      const cascadeParentIds = (_filter$cascadeParent = filter.cascadeParentIds) == null ? void 0 : _filter$cascadeParent.filter((id) => canBeUsedAsDependency(id));\n      if (cascadeParentIds &&\n      !_isEqual(cascadeParentIds, filter.cascadeParentIds)) {\n        dispatch(updateCascadeParentIds(key, cascadeParentIds));\n        modifiedParentFilters.add(key);\n      }\n      return {\n        ...acc,\n        [key]: {\n          ...filter,\n          cascadeParentIds\n        }\n      };\n    }, {});\n    const filters = values == null ? void 0 : values.filters;\n    if (filters) {\n      Object.keys(filters).forEach((key) => {\n        const filter = filters[key];\n        if (!('dependencies' in filter)) {\n          return;\n        }\n        const originalDependencies = filter.dependencies || [];\n        const cleanedDependencies = originalDependencies.filter((id) => canBeUsedAsDependency(id));\n        if (!_isEqual(cleanedDependencies, originalDependencies)) {\n          filter.dependencies = cleanedDependencies;\n          modifiedParentFilters.add(key);\n        }\n      });\n    }\n    return [updatedFilterConfigMap, modifiedParentFilters];\n  };\n  const handleErroredFilters = useCallback(() => {\n    // managing left pane errored filters indicators\n    const formValidationFields = form.getFieldsError();\n    const erroredFiltersIds = [];\n    formValidationFields.forEach((field) => {\n      const filterId = field.name[1];\n      if (field.errors.length > 0 && !erroredFiltersIds.includes(filterId)) {\n        erroredFiltersIds.push(filterId);\n      }\n    });\n    // no form validation issues found, resets errored filters\n    if (!erroredFiltersIds.length && erroredFilters.length > 0) {\n      setErroredFilters(DEFAULT_EMPTY_FILTERS);\n      return;\n    }\n    // form validation issues found, sets errored filters\n    if (erroredFiltersIds.length > 0 &&\n    !_isEqual(_sortBy(erroredFilters), _sortBy(erroredFiltersIds))) {\n      setErroredFilters(erroredFiltersIds);\n    }\n  }, [form, erroredFilters]);\n  const handleSave = async () => {\n    const values = await validateForm(form, currentFilterId, setCurrentFilterId);\n    handleErroredFilters();\n    if (values) {\n      const [updatedFilterConfigMap, modifiedParentFilters] = cleanDeletedParents(values);\n      const allModified = [\n      ...new Set([\n      ...modifiedParentFilters,\n      ...filterChanges.modified]\n      )];\n\n      const actualChanges = {\n        ...filterChanges,\n        modified: allModified.length && filterChanges.deleted.length ?\n        allModified.filter((id) => !filterChanges.deleted.includes(id)) :\n        allModified,\n        reordered: filterChanges.reordered.length &&\n        !_isEqual(filterChanges.reordered, initialFilterOrder) ?\n        filterChanges.reordered :\n        []\n      };\n      createHandleSave(onSave, actualChanges, values, updatedFilterConfigMap)();\n      resetForm(true);\n      resetFilterChanges();\n    } else\n    {var _configFormRef$curren;\n      (_configFormRef$curren = configFormRef.current) == null ? void 0 : _configFormRef$curren.changeTab == null ? void 0 : _configFormRef$curren.changeTab('configuration');\n    }\n  };\n  const handleConfirmCancel = () => {\n    resetForm();\n    onCancel();\n  };\n  const handleCancel = () => {\n    const changed = form.getFieldValue('changed');\n    const didChangeOrder = orderedFilters.length !== initialFilterOrder.length ||\n    orderedFilters.some((val, index) => val !== initialFilterOrder[index]);\n    if (unsavedFiltersIds.length > 0 ||\n    form.isFieldsTouched() ||\n    changed ||\n    didChangeOrder ||\n    Object.values(removedFilters).some((f) => f == null ? void 0 : f.isPending)) {\n      setSaveAlertVisible(true);\n    } else\n    {\n      handleConfirmCancel();\n    }\n  };\n  const handleRearrange = (dragIndex, targetIndex) => {\n    const newOrderedFilter = [...orderedFilters];\n    const removed = newOrderedFilter.splice(dragIndex, 1)[0];\n    newOrderedFilter.splice(targetIndex, 0, removed);\n    setOrderedFilters(newOrderedFilter);\n    setFilterChanges((prev) => ({\n      ...prev,\n      reordered: newOrderedFilter\n    }));\n  };\n  const buildDependencyMap = useCallback(() => {\n    const dependencyMap = new Map();\n    const filters = form.getFieldValue('filters');\n    if (filters) {\n      Object.keys(filters).forEach((key) => {\n        const formItem = filters[key];\n        const configItem = filterConfigMap[key];\n        let array = [];\n        if (formItem && 'dependencies' in formItem) {\n          array = [...formItem.dependencies];\n        } else\n        if (configItem != null && configItem.cascadeParentIds) {\n          array = [...configItem.cascadeParentIds];\n        }\n        dependencyMap.set(key, array);\n      });\n    }\n    return dependencyMap;\n  }, [filterConfigMap, form]);\n  const validateDependencies = useCallback(() => {\n    const dependencyMap = buildDependencyMap();\n    filterIds.\n    filter((id) => !removedFilters[id]).\n    forEach((filterId) => {\n      const result = hasCircularDependency(dependencyMap, filterId);\n      const field = {\n        name: ['filters', filterId, 'dependencies'],\n        errors: result ? [t('Cyclic dependency detected')] : []\n      };\n      form.setFields([field]);\n    });\n    handleErroredFilters();\n  }, [\n  buildDependencyMap,\n  filterIds,\n  form,\n  handleErroredFilters,\n  removedFilters]\n  );\n  const getDependencySuggestion = useCallback((filterId) => {\n    const dependencyMap = buildDependencyMap();\n    const possibleDependencies = orderedFilters.filter((key) => key !== filterId && canBeUsedAsDependency(key));\n    const found = possibleDependencies.find((filter) => {\n      const dependencies = dependencyMap.get(filterId) || [];\n      dependencies.push(filter);\n      if (hasCircularDependency(dependencyMap, filterId)) {\n        dependencies.pop();\n        return false;\n      }\n      return true;\n    });\n    return found || possibleDependencies[0];\n  }, [buildDependencyMap, canBeUsedAsDependency, orderedFilters]);\n  const [expanded, setExpanded] = useState(false);\n  const toggleExpand = useEffectEvent(() => {\n    setExpanded(!expanded);\n  });\n  const ToggleIcon = expanded ?\n  Icons.FullscreenExitOutlined :\n  Icons.FullscreenOutlined;\n  const handleValuesChange = useMemo(() => _debounce((changes, values) => {\n    const didChangeFilterName = changes.filters &&\n    Object.values(changes.filters).some((filter) => filter.name && filter.name !== null);\n    const didChangeSectionTitle = changes.filters &&\n    Object.values(changes.filters).some((filter) => filter.title && filter.title !== null);\n    if (didChangeFilterName || didChangeSectionTitle) {\n      // we only need to set this if a name/title changed\n      setFormValues(values);\n    }\n    setSaveAlertVisible(false);\n    handleErroredFilters();\n  }, SLOW_DEBOUNCE), [handleErroredFilters]);\n  useEffect(() => {\n    if (!_isEmpty(removedFilters)) {\n      setErroredFilters((prevErroredFilters) => prevErroredFilters.filter((f) => !removedFilters[f]));\n    }\n  }, [removedFilters]);\n  useEffect(() => {\n    if (!renderedFilters.includes(currentFilterId)) {\n      setRenderedFilters([...renderedFilters, currentFilterId]);\n    }\n  }, [currentFilterId]);\n  const handleActiveFilterPanelChange = useCallback((key) => setActiveFilterPanelKey(key), [setActiveFilterPanelKey]);\n  const formList = useMemo(() => orderedFilters.map((id) => {\n    if (!renderedFilters.includes(id))\n    return null;\n    const isDivider = id.startsWith(NATIVE_FILTER_DIVIDER_PREFIX);\n    const isActive = currentFilterId === id;\n    return _jsx(\"div\", { style: {\n        height: '100%',\n        overflowY: 'auto',\n        display: isActive ? '' : 'none'\n      }, children:\n      isDivider ? _jsx(DividerConfigForm, { componentId: id, divider: filterConfigMap[id] }) : _jsx(FiltersConfigForm, { expanded: expanded, ref: configFormRef, form: form, filterId: id, filterToEdit: filterConfigMap[id], removedFilters: removedFilters, restoreFilter: restoreFilter, getAvailableFilters: getAvailableFilters, activeFilterPanelKeys: activeFilterPanelKey, handleActiveFilterPanelChange: handleActiveFilterPanelChange, isActive: isActive, setErroredFilters: setErroredFilters, validateDependencies: validateDependencies, getDependencySuggestion: getDependencySuggestion, onModifyFilter: handleModifyFilter }, id) }, id\n    );\n  }), [\n  orderedFilters,\n  renderedFilters,\n  currentFilterId,\n  filterConfigMap,\n  expanded,\n  form,\n  removedFilters,\n  restoreFilter,\n  getAvailableFilters,\n  activeFilterPanelKey,\n  handleActiveFilterPanelChange,\n  validateDependencies,\n  getDependencySuggestion,\n  handleModifyFilter]\n  );\n  useEffect(() => {\n    resetFilterChanges();\n  }, []);\n  return _jsx(StyledModalWrapper, { open: isOpen, maskClosable: false, title: t('Add and edit filters'), expanded: expanded, destroyOnClose: true, onCancel: handleCancel, onOk: handleSave, centered: true, \"data-test\": \"filter-modal\", footer: _jsxs(\"div\", { css: css`\n            display: flex;\n            justify-content: flex-end;\n            align-items: flex-end;\n          `, children: [\n      _jsx(Footer, { onDismiss: () => setSaveAlertVisible(false), onCancel: handleCancel, handleSave: handleSave, canSave: !erroredFilters.length, saveAlertVisible: saveAlertVisible, onConfirmCancel: handleConfirmCancel }),\n      _jsx(StyledExpandButtonWrapper, { children:\n        _jsx(ToggleIcon, { iconSize: \"l\", iconColor: theme.colors.grayscale.dark2, onClick: toggleExpand }) }\n      )] }\n    ), children:\n    _jsx(ErrorBoundary, { children:\n      _jsx(StyledModalBody, { expanded: expanded, children:\n        _jsx(StyledForm, { form: form, onValuesChange: handleValuesChange, layout: \"vertical\", children:\n          _jsx(FilterConfigurePane, { erroredFilters: erroredFilters, onRemove: handleRemoveItem, onAdd: addFilter, onChange: handleTabChange, getFilterTitle: getFilterTitle, currentFilterId: currentFilterId, removedFilters: removedFilters, restoreFilter: restoreFilter, onRearrange: handleRearrange, filters: orderedFilters, children:\n            formList }\n          ) }\n        ) }\n      ) }\n    ) }\n  );\n}__signature__(FiltersConfigModal, \"useDispatch{dispatch}\\nuseTheme{theme}\\nuseForm{[form]}\\nuseRef{configFormRef}\\nuseFilterConfiguration{filterConfig}\\nuseFilterConfigMap{filterConfigMap}\\nuseState{[filterChanges, setFilterChanges](DEFAULT_FILTER_CHANGES)}\\nuseCallback{handleModifyFilter}\\nuseState{[newFilterIds, setNewFilterIds](DEFAULT_EMPTY_FILTERS)}\\nuseState{[removedFilters, setRemovedFilters](DEFAULT_REMOVED_FILTERS)}\\nuseState{[saveAlertVisible, setSaveAlertVisible](false)}\\nuseMemo{filterIds}\\nuseState{[currentFilterId, setCurrentFilterId](initialCurrentFilterId)}\\nuseState{[erroredFilters, setErroredFilters](DEFAULT_EMPTY_FILTERS)}\\nuseState{[formValues, setFormValues](DEFAULT_FORM_VALUES)}\\nuseCallback{restoreFilter}\\nuseMemo{initialFilterOrder}\\nuseState{[orderedFilters, setOrderedFilters](initialFilterOrder)}\\nuseState{[renderedFilters, setRenderedFilters]([\\n        initialCurrentFilterId,\\n    ])}\\nuseState{[activeFilterPanelKey, setActiveFilterPanelKey](getActiveFilterPanelKey(initialCurrentFilterId))}\\nuseCallback{addFilter}\\nuseOpenModal{}\\nuseRemoveCurrentFilter{}\\nuseCallback{getFilterTitle}\\nuseCallback{canBeUsedAsDependency}\\nuseCallback{getAvailableFilters}\\nuseCallback{handleErroredFilters}\\nuseCallback{buildDependencyMap}\\nuseCallback{validateDependencies}\\nuseCallback{getDependencySuggestion}\\nuseState{[expanded, setExpanded](false)}\\nuseEffectEvent{toggleExpand}\\nuseMemo{handleValuesChange}\\nuseEffect{}\\nuseEffect{}\\nuseCallback{handleActiveFilterPanelChange}\\nuseMemo{formList}\\nuseEffect{}\", () => [useDispatch, useTheme, useFilterConfiguration, useFilterConfigMap, useOpenModal, useRemoveCurrentFilter, useEffectEvent]);const _default = /*#__PURE__*/\nmemo(FiltersConfigModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(MODAL_MARGIN, \"MODAL_MARGIN\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(MIN_WIDTH, \"MIN_WIDTH\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(StyledModalWrapper, \"StyledModalWrapper\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(StyledModalBody, \"StyledModalBody\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(StyledForm, \"StyledForm\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(StyledExpandButtonWrapper, \"StyledExpandButtonWrapper\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(FILTERS_CONFIG_MODAL_TEST_ID, \"FILTERS_CONFIG_MODAL_TEST_ID\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(getFiltersConfigModalTestId, \"getFiltersConfigModalTestId\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(ALLOW_DEPENDENCIES, \"ALLOW_DEPENDENCIES\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(DEFAULT_EMPTY_FILTERS, \"DEFAULT_EMPTY_FILTERS\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(DEFAULT_REMOVED_FILTERS, \"DEFAULT_REMOVED_FILTERS\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(DEFAULT_FORM_VALUES, \"DEFAULT_FORM_VALUES\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(DEFAULT_FILTER_CHANGES, \"DEFAULT_FILTER_CHANGES\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(FiltersConfigModal, \"FiltersConfigModal\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["memo","useEffect","useCallback","useMemo","useState","useRef","styled","SLOW_DEBOUNCE","t","css","useTheme","useDispatch","AntdForm","Icons","ErrorBoundary","StyledModal","testWithId","updateCascadeParentIds","useEffectEvent","useFilterConfigMap","useFilterConfiguration","FilterConfigurePane","FiltersConfigForm","FilterPanels","Footer","useOpenModal","useRemoveCurrentFilter","createHandleSave","createHandleRemoveItem","generateFilterId","getFilterIds","validateForm","NATIVE_FILTER_DIVIDER_PREFIX","hasCircularDependency","DividerConfigForm","jsx","_jsx","jsxs","_jsxs","MODAL_MARGIN","MIN_WIDTH","StyledModalWrapper","expanded","StyledModalBody","div","theme","gridUnit","StyledForm","StyledExpandButtonWrapper","FILTERS_CONFIG_MODAL_TEST_ID","getFiltersConfigModalTestId","ALLOW_DEPENDENCIES","DEFAULT_EMPTY_FILTERS","DEFAULT_REMOVED_FILTERS","DEFAULT_FORM_VALUES","filters","DEFAULT_FILTER_CHANGES","modified","deleted","reordered","FiltersConfigModal","isOpen","initialFilterId","createNewOnOpen","onSave","onCancel","dispatch","form","useForm","configFormRef","filterConfig","filterConfigMap","filterChanges","setFilterChanges","resetFilterChanges","handleModifyFilter","filterId","includes","prev","newFilterIds","setNewFilterIds","removedFilters","setRemovedFilters","saveAlertVisible","setSaveAlertVisible","filterIds","_uniq","filter","id","_removedFilters$id","isPending","initialCurrentFilterId","currentFilterId","setCurrentFilterId","erroredFilters","setErroredFilters","formValues","setFormValues","unsavedFiltersIds","restoreFilter","removal","clearTimeout","timerId","current","deletedId","initialFilterOrder","Object","keys","orderedFilters","setOrderedFilters","renderedFilters","setRenderedFilters","getActiveFilterPanelKey","configuration","key","settings","activeFilterPanelKey","setActiveFilterPanelKey","handleTabChange","addFilter","type","newFilterId","handleRemoveItem","resetForm","isSaving","length","resetFields","setFieldsValue","changed","getFilterTitle","formValue","config","name","title","canBeUsedAsDependency","_form$getFieldValue","component","getFieldValue","filterType","getAvailableFilters","map","_filterConfigMap$id","label","value","cleanDeletedParents","values","modifiedParentFilters","Set","updatedFilterConfigMap","reduce","acc","_filter$cascadeParent","cascadeParentIds","_isEqual","add","forEach","originalDependencies","dependencies","cleanedDependencies","handleErroredFilters","formValidationFields","getFieldsError","erroredFiltersIds","field","errors","push","_sortBy","handleSave","allModified","actualChanges","_configFormRef$curren","changeTab","handleConfirmCancel","handleCancel","didChangeOrder","some","val","index","isFieldsTouched","f","handleRearrange","dragIndex","targetIndex","newOrderedFilter","removed","splice","buildDependencyMap","dependencyMap","Map","formItem","configItem","array","set","validateDependencies","result","setFields","getDependencySuggestion","possibleDependencies","found","find","get","pop","setExpanded","toggleExpand","ToggleIcon","FullscreenExitOutlined","FullscreenOutlined","handleValuesChange","_debounce","changes","didChangeFilterName","didChangeSectionTitle","_isEmpty","prevErroredFilters","handleActiveFilterPanelChange","formList","isDivider","startsWith","isActive","style","height","overflowY","display","children","componentId","divider","ref","filterToEdit","activeFilterPanelKeys","onModifyFilter","open","maskClosable","destroyOnClose","onOk","centered","footer","onDismiss","canSave","onConfirmCancel","iconSize","iconColor","colors","grayscale","dark2","onClick","onValuesChange","layout","onRemove","onAdd","onChange","onRearrange","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo, useEffect, useCallback, useMemo, useState, useRef } from 'react';\nimport { uniq, isEqual, sortBy, debounce, isEmpty } from 'lodash';\nimport {\n  Filter,\n  NativeFilterType,\n  Divider,\n  styled,\n  SLOW_DEBOUNCE,\n  t,\n  css,\n  useTheme,\n} from '@superset-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { AntdForm } from 'src/components';\nimport { Icons } from 'src/components/Icons';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { StyledModal } from 'src/components/Modal';\nimport { testWithId } from 'src/utils/testUtils';\nimport { updateCascadeParentIds } from 'src/dashboard/actions/nativeFilters';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { useFilterConfigMap, useFilterConfiguration } from '../state';\nimport FilterConfigurePane from './FilterConfigurePane';\nimport FiltersConfigForm, {\n  FilterPanels,\n} from './FiltersConfigForm/FiltersConfigForm';\nimport Footer from './Footer/Footer';\nimport { useOpenModal, useRemoveCurrentFilter } from './state';\nimport {\n  FilterChangesType,\n  FilterRemoval,\n  NativeFiltersForm,\n  SaveFilterChangesType,\n} from './types';\nimport {\n  createHandleSave,\n  createHandleRemoveItem,\n  generateFilterId,\n  getFilterIds,\n  validateForm,\n  NATIVE_FILTER_DIVIDER_PREFIX,\n  hasCircularDependency,\n} from './utils';\nimport DividerConfigForm from './DividerConfigForm';\n\nconst MODAL_MARGIN = 16;\nconst MIN_WIDTH = 880;\n\nconst StyledModalWrapper = styled(StyledModal)<{ expanded: boolean }>`\n  min-width: ${MIN_WIDTH}px;\n  width: ${({ expanded }) => (expanded ? '100%' : MIN_WIDTH)} !important;\n\n  @media (max-width: ${MIN_WIDTH + MODAL_MARGIN * 2}px) {\n    width: 100% !important;\n    min-width: auto;\n  }\n\n  .antd5-modal-body {\n    padding: 0px;\n  }\n\n  ${({ expanded }) =>\n    expanded &&\n    css`\n      height: 100%;\n\n      .antd5-modal-body {\n        flex: 1 1 auto;\n      }\n      .antd5-modal-content {\n        height: 100%;\n      }\n    `}\n`;\n\nexport const StyledModalBody = styled.div<{ expanded: boolean }>`\n  display: flex;\n  height: ${({ expanded }) => (expanded ? '100%' : '700px')};\n  flex-direction: row;\n  flex: 1;\n  .filters-list {\n    width: ${({ theme }) => theme.gridUnit * 50}px;\n    overflow: auto;\n  }\n`;\n\nexport const StyledForm = styled(AntdForm)`\n  width: 100%;\n`;\n\nexport const StyledExpandButtonWrapper = styled.div`\n  margin-left: ${({ theme }) => theme.gridUnit * 4}px;\n`;\n\nexport const FILTERS_CONFIG_MODAL_TEST_ID = 'filters-config-modal';\nexport const getFiltersConfigModalTestId = testWithId(\n  FILTERS_CONFIG_MODAL_TEST_ID,\n);\n\nexport interface FiltersConfigModalProps {\n  isOpen: boolean;\n  initialFilterId?: string;\n  createNewOnOpen?: boolean;\n  onSave: (filterChanges: SaveFilterChangesType) => Promise<void>;\n  onCancel: () => void;\n}\nexport const ALLOW_DEPENDENCIES = [\n  'filter_range',\n  'filter_select',\n  'filter_time',\n];\n\nconst DEFAULT_EMPTY_FILTERS: string[] = [];\nconst DEFAULT_REMOVED_FILTERS: Record<string, FilterRemoval> = {};\nconst DEFAULT_FORM_VALUES: NativeFiltersForm = {\n  filters: {},\n};\nconst DEFAULT_FILTER_CHANGES: FilterChangesType = {\n  modified: [],\n  deleted: [],\n  reordered: [],\n};\n\n/**\n * This is the modal to configure all the dashboard-native filters.\n * Manages modal-level state, such as what filters are in the list,\n * and which filter is currently being edited.\n *\n * Calls the `save` callback with the new FilterConfiguration object\n * when the user saves the filters.\n */\nfunction FiltersConfigModal({\n  isOpen,\n  initialFilterId,\n  createNewOnOpen,\n  onSave,\n  onCancel,\n}: FiltersConfigModalProps) {\n  const dispatch = useDispatch();\n  const theme = useTheme();\n\n  const [form] = AntdForm.useForm<NativeFiltersForm>();\n\n  const configFormRef = useRef<any>();\n\n  // the filter config from redux state, this does not change until modal is closed.\n  const filterConfig = useFilterConfiguration();\n  const filterConfigMap = useFilterConfigMap();\n\n  // this state contains the changes that we'll be sent through the PATCH endpoint\n  const [filterChanges, setFilterChanges] = useState<FilterChangesType>(\n    DEFAULT_FILTER_CHANGES,\n  );\n\n  const resetFilterChanges = () => {\n    setFilterChanges(DEFAULT_FILTER_CHANGES);\n  };\n\n  const handleModifyFilter = useCallback(\n    (filterId: string) => {\n      if (!filterChanges.modified.includes(filterId)) {\n        setFilterChanges(prev => ({\n          ...prev,\n          modified: [...prev.modified, filterId],\n        }));\n      }\n    },\n    [filterChanges.modified],\n  );\n\n  // new filter ids belong to filters have been added during\n  // this configuration session, and only exist in the form state until we submit.\n  const [newFilterIds, setNewFilterIds] = useState<string[]>(\n    DEFAULT_EMPTY_FILTERS,\n  );\n\n  // store ids of filters that have been removed with the time they were removed\n  // so that we can disappear them after a few secs.\n  // filters are still kept in state until form is submitted.\n  const [removedFilters, setRemovedFilters] = useState<\n    Record<string, FilterRemoval>\n  >(DEFAULT_REMOVED_FILTERS);\n\n  const [saveAlertVisible, setSaveAlertVisible] = useState<boolean>(false);\n\n  // The full ordered set of ((original + new) - completely removed) filter ids\n  // Use this as the canonical list of what filters are being configured!\n  // This includes filter ids that are pending removal, so check for that.\n  const filterIds = useMemo(\n    () =>\n      uniq([...getFilterIds(filterConfig), ...newFilterIds]).filter(\n        id => !removedFilters[id] || removedFilters[id]?.isPending,\n      ),\n    [filterConfig, newFilterIds, removedFilters],\n  );\n\n  // open the first filter in the list to start\n  const initialCurrentFilterId = initialFilterId ?? filterIds[0];\n  const [currentFilterId, setCurrentFilterId] = useState(\n    initialCurrentFilterId,\n  );\n  const [erroredFilters, setErroredFilters] = useState<string[]>(\n    DEFAULT_EMPTY_FILTERS,\n  );\n\n  // the form values are managed by the antd form, but we copy them to here\n  // so that we can display them (e.g. filter titles in the tab headers)\n  const [formValues, setFormValues] =\n    useState<NativeFiltersForm>(DEFAULT_FORM_VALUES);\n\n  const unsavedFiltersIds = newFilterIds.filter(id => !removedFilters[id]);\n  // brings back a filter that was previously removed (\"Undo\")\n  const restoreFilter = useCallback(\n    (id: string) => {\n      const removal = removedFilters[id];\n      // Clear the removal timeout if the filter is pending deletion\n      if (removal?.isPending) clearTimeout(removal.timerId);\n\n      setRemovedFilters(current => ({ ...current, [id]: null }));\n\n      setFilterChanges(prev => ({\n        ...prev,\n        deleted: prev.deleted.filter(deletedId => deletedId !== id),\n      }));\n    },\n    [removedFilters, setRemovedFilters],\n  );\n  const initialFilterOrder = useMemo(\n    () => Object.keys(filterConfigMap),\n    [filterConfigMap],\n  );\n\n  // State for tracking the re-ordering of filters\n  const [orderedFilters, setOrderedFilters] =\n    useState<string[]>(initialFilterOrder);\n\n  // State for rendered filter to improve performance\n  const [renderedFilters, setRenderedFilters] = useState<string[]>([\n    initialCurrentFilterId,\n  ]);\n\n  const getActiveFilterPanelKey = (filterId: string) => [\n    `${filterId}-${FilterPanels.configuration.key}`,\n    `${filterId}-${FilterPanels.settings.key}`,\n  ];\n\n  const [activeFilterPanelKey, setActiveFilterPanelKey] = useState<\n    string | string[]\n  >(getActiveFilterPanelKey(initialCurrentFilterId));\n\n  const handleTabChange = (filterId: string) => {\n    setCurrentFilterId(filterId);\n    setActiveFilterPanelKey(getActiveFilterPanelKey(filterId));\n  };\n\n  // generates a new filter id and appends it to the newFilterIds\n  const addFilter = useCallback(\n    (type: NativeFilterType) => {\n      const newFilterId = generateFilterId(type);\n      setNewFilterIds([...newFilterIds, newFilterId]);\n      handleModifyFilter(newFilterId);\n      setCurrentFilterId(newFilterId);\n      setSaveAlertVisible(false);\n      setOrderedFilters([...orderedFilters, newFilterId]);\n      setActiveFilterPanelKey(getActiveFilterPanelKey(newFilterId));\n    },\n    [newFilterIds, handleModifyFilter, orderedFilters],\n  );\n\n  useOpenModal(isOpen, addFilter, createNewOnOpen);\n\n  useRemoveCurrentFilter(\n    removedFilters,\n    currentFilterId,\n    orderedFilters,\n    setCurrentFilterId,\n  );\n\n  const handleRemoveItem = createHandleRemoveItem(\n    setRemovedFilters,\n    setOrderedFilters,\n    setSaveAlertVisible,\n    filterId => {\n      setFilterChanges(prev => ({\n        ...prev,\n        deleted: [...prev.deleted, filterId],\n      }));\n    },\n  );\n\n  // After this, it should be as if the modal was just opened fresh.\n  // Called when the modal is closed.\n  const resetForm = (isSaving = false) => {\n    setNewFilterIds(DEFAULT_EMPTY_FILTERS);\n    setCurrentFilterId(initialCurrentFilterId);\n    setRemovedFilters(DEFAULT_REMOVED_FILTERS);\n    setSaveAlertVisible(false);\n    setFormValues(DEFAULT_FORM_VALUES);\n    resetFilterChanges();\n    setErroredFilters(DEFAULT_EMPTY_FILTERS);\n    if (filterIds.length > 0) {\n      setActiveFilterPanelKey(getActiveFilterPanelKey(filterIds[0]));\n    }\n    if (!isSaving) {\n      setOrderedFilters(initialFilterOrder);\n    }\n    setRenderedFilters([initialCurrentFilterId]);\n    form.resetFields(['filters']);\n    form.setFieldsValue({ changed: false });\n  };\n\n  const getFilterTitle = useCallback(\n    (id: string) => {\n      const formValue = formValues.filters[id];\n      const config = filterConfigMap[id];\n      return (\n        (formValue && 'name' in formValue && formValue.name) ||\n        (formValue && 'title' in formValue && formValue.title) ||\n        (config && 'name' in config && config.name) ||\n        (config && 'title' in config && config.title) ||\n        t('[untitled]')\n      );\n    },\n    [filterConfigMap, formValues.filters],\n  );\n\n  const canBeUsedAsDependency = useCallback(\n    (filterId: string) => {\n      if (removedFilters[filterId]) {\n        return false;\n      }\n      const component =\n        form.getFieldValue('filters')?.[filterId] || filterConfigMap[filterId];\n      return (\n        component &&\n        'filterType' in component &&\n        ALLOW_DEPENDENCIES.includes(component.filterType)\n      );\n    },\n    [filterConfigMap, form, removedFilters],\n  );\n\n  const getAvailableFilters = useCallback(\n    (filterId: string) =>\n      filterIds\n        .filter(id => id !== filterId)\n        .filter(id => canBeUsedAsDependency(id))\n        .map(id => ({\n          label: getFilterTitle(id),\n          value: id,\n          type: filterConfigMap[id]?.filterType,\n        })),\n    [canBeUsedAsDependency, filterConfigMap, filterIds, getFilterTitle],\n  );\n\n  /**\n   * Manages dependencies of filters associated with a deleted filter.\n   *\n   * @param values the native filters form\n   * @returns the updated filterConfigMap\n   */\n  const cleanDeletedParents = (values: NativeFiltersForm | null) => {\n    const modifiedParentFilters = new Set<string>();\n    const updatedFilterConfigMap = Object.keys(filterConfigMap).reduce(\n      (acc, key) => {\n        const filter = filterConfigMap[key];\n        const cascadeParentIds = filter.cascadeParentIds?.filter(id =>\n          canBeUsedAsDependency(id),\n        );\n\n        if (\n          cascadeParentIds &&\n          !isEqual(cascadeParentIds, filter.cascadeParentIds)\n        ) {\n          dispatch(updateCascadeParentIds(key, cascadeParentIds));\n          modifiedParentFilters.add(key);\n        }\n\n        return {\n          ...acc,\n          [key]: {\n            ...filter,\n            cascadeParentIds,\n          },\n        };\n      },\n      {},\n    );\n\n    const filters = values?.filters;\n    if (filters) {\n      Object.keys(filters).forEach(key => {\n        const filter = filters[key];\n\n        if (!('dependencies' in filter)) {\n          return;\n        }\n\n        const originalDependencies = filter.dependencies || [];\n        const cleanedDependencies = originalDependencies.filter(id =>\n          canBeUsedAsDependency(id),\n        );\n\n        if (!isEqual(cleanedDependencies, originalDependencies)) {\n          filter.dependencies = cleanedDependencies;\n          modifiedParentFilters.add(key);\n        }\n      });\n    }\n\n    return [updatedFilterConfigMap, modifiedParentFilters];\n  };\n\n  const handleErroredFilters = useCallback(() => {\n    // managing left pane errored filters indicators\n    const formValidationFields = form.getFieldsError();\n    const erroredFiltersIds: string[] = [];\n\n    formValidationFields.forEach(field => {\n      const filterId = field.name[1] as string;\n      if (field.errors.length > 0 && !erroredFiltersIds.includes(filterId)) {\n        erroredFiltersIds.push(filterId);\n      }\n    });\n\n    // no form validation issues found, resets errored filters\n    if (!erroredFiltersIds.length && erroredFilters.length > 0) {\n      setErroredFilters(DEFAULT_EMPTY_FILTERS);\n      return;\n    }\n    // form validation issues found, sets errored filters\n    if (\n      erroredFiltersIds.length > 0 &&\n      !isEqual(sortBy(erroredFilters), sortBy(erroredFiltersIds))\n    ) {\n      setErroredFilters(erroredFiltersIds);\n    }\n  }, [form, erroredFilters]);\n\n  const handleSave = async () => {\n    const values: NativeFiltersForm | null = await validateForm(\n      form,\n      currentFilterId,\n      setCurrentFilterId,\n    );\n\n    handleErroredFilters();\n\n    if (values) {\n      const [updatedFilterConfigMap, modifiedParentFilters] =\n        cleanDeletedParents(values);\n\n      const allModified = [\n        ...new Set([\n          ...(modifiedParentFilters as Set<string>),\n          ...filterChanges.modified,\n        ]),\n      ];\n\n      const actualChanges = {\n        ...filterChanges,\n        modified:\n          allModified.length && filterChanges.deleted.length\n            ? allModified.filter(id => !filterChanges.deleted.includes(id))\n            : allModified,\n        reordered:\n          filterChanges.reordered.length &&\n          !isEqual(filterChanges.reordered, initialFilterOrder)\n            ? filterChanges.reordered\n            : [],\n      };\n\n      createHandleSave(onSave, actualChanges, values, updatedFilterConfigMap)();\n      resetForm(true);\n      resetFilterChanges();\n    } else {\n      configFormRef.current?.changeTab?.('configuration');\n    }\n  };\n\n  const handleConfirmCancel = () => {\n    resetForm();\n    onCancel();\n  };\n\n  const handleCancel = () => {\n    const changed = form.getFieldValue('changed');\n    const didChangeOrder =\n      orderedFilters.length !== initialFilterOrder.length ||\n      orderedFilters.some((val, index) => val !== initialFilterOrder[index]);\n    if (\n      unsavedFiltersIds.length > 0 ||\n      form.isFieldsTouched() ||\n      changed ||\n      didChangeOrder ||\n      Object.values(removedFilters).some(f => f?.isPending)\n    ) {\n      setSaveAlertVisible(true);\n    } else {\n      handleConfirmCancel();\n    }\n  };\n  const handleRearrange = (dragIndex: number, targetIndex: number) => {\n    const newOrderedFilter = [...orderedFilters];\n    const removed = newOrderedFilter.splice(dragIndex, 1)[0];\n    newOrderedFilter.splice(targetIndex, 0, removed);\n    setOrderedFilters(newOrderedFilter);\n    setFilterChanges(prev => ({\n      ...prev,\n      reordered: newOrderedFilter,\n    }));\n  };\n\n  const buildDependencyMap = useCallback(() => {\n    const dependencyMap = new Map<string, string[]>();\n    const filters = form.getFieldValue('filters');\n    if (filters) {\n      Object.keys(filters).forEach(key => {\n        const formItem = filters[key];\n        const configItem = filterConfigMap[key];\n        let array: string[] = [];\n        if (formItem && 'dependencies' in formItem) {\n          array = [...formItem.dependencies];\n        } else if (configItem?.cascadeParentIds) {\n          array = [...configItem.cascadeParentIds];\n        }\n        dependencyMap.set(key, array);\n      });\n    }\n    return dependencyMap;\n  }, [filterConfigMap, form]);\n\n  const validateDependencies = useCallback(() => {\n    const dependencyMap = buildDependencyMap();\n    filterIds\n      .filter(id => !removedFilters[id])\n      .forEach(filterId => {\n        const result = hasCircularDependency(dependencyMap, filterId);\n        const field = {\n          name: ['filters', filterId, 'dependencies'],\n          errors: result ? [t('Cyclic dependency detected')] : [],\n        };\n        form.setFields([field]);\n      });\n    handleErroredFilters();\n  }, [\n    buildDependencyMap,\n    filterIds,\n    form,\n    handleErroredFilters,\n    removedFilters,\n  ]);\n\n  const getDependencySuggestion = useCallback(\n    (filterId: string) => {\n      const dependencyMap = buildDependencyMap();\n      const possibleDependencies = orderedFilters.filter(\n        key => key !== filterId && canBeUsedAsDependency(key),\n      );\n      const found = possibleDependencies.find(filter => {\n        const dependencies = dependencyMap.get(filterId) || [];\n        dependencies.push(filter);\n        if (hasCircularDependency(dependencyMap, filterId)) {\n          dependencies.pop();\n          return false;\n        }\n        return true;\n      });\n      return found || possibleDependencies[0];\n    },\n    [buildDependencyMap, canBeUsedAsDependency, orderedFilters],\n  );\n\n  const [expanded, setExpanded] = useState(false);\n  const toggleExpand = useEffectEvent(() => {\n    setExpanded(!expanded);\n  });\n  const ToggleIcon = expanded\n    ? Icons.FullscreenExitOutlined\n    : Icons.FullscreenOutlined;\n\n  const handleValuesChange = useMemo(\n    () =>\n      debounce((changes: any, values: NativeFiltersForm) => {\n        const didChangeFilterName =\n          changes.filters &&\n          Object.values(changes.filters).some(\n            (filter: any) => filter.name && filter.name !== null,\n          );\n        const didChangeSectionTitle =\n          changes.filters &&\n          Object.values(changes.filters).some(\n            (filter: any) => filter.title && filter.title !== null,\n          );\n        if (didChangeFilterName || didChangeSectionTitle) {\n          // we only need to set this if a name/title changed\n          setFormValues(values);\n        }\n        setSaveAlertVisible(false);\n        handleErroredFilters();\n      }, SLOW_DEBOUNCE),\n    [handleErroredFilters],\n  );\n\n  useEffect(() => {\n    if (!isEmpty(removedFilters)) {\n      setErroredFilters(prevErroredFilters =>\n        prevErroredFilters.filter(f => !removedFilters[f]),\n      );\n    }\n  }, [removedFilters]);\n\n  useEffect(() => {\n    if (!renderedFilters.includes(currentFilterId)) {\n      setRenderedFilters([...renderedFilters, currentFilterId]);\n    }\n  }, [currentFilterId]);\n\n  const handleActiveFilterPanelChange = useCallback(\n    key => setActiveFilterPanelKey(key),\n    [setActiveFilterPanelKey],\n  );\n\n  const formList = useMemo(\n    () =>\n      orderedFilters.map(id => {\n        if (!renderedFilters.includes(id)) return null;\n        const isDivider = id.startsWith(NATIVE_FILTER_DIVIDER_PREFIX);\n        const isActive = currentFilterId === id;\n        return (\n          <div\n            key={id}\n            style={{\n              height: '100%',\n              overflowY: 'auto',\n              display: isActive ? '' : 'none',\n            }}\n          >\n            {isDivider ? (\n              <DividerConfigForm\n                componentId={id}\n                divider={filterConfigMap[id] as Divider}\n              />\n            ) : (\n              <FiltersConfigForm\n                expanded={expanded}\n                ref={configFormRef}\n                form={form}\n                filterId={id}\n                filterToEdit={filterConfigMap[id] as Filter}\n                removedFilters={removedFilters}\n                restoreFilter={restoreFilter}\n                getAvailableFilters={getAvailableFilters}\n                key={id}\n                activeFilterPanelKeys={activeFilterPanelKey}\n                handleActiveFilterPanelChange={handleActiveFilterPanelChange}\n                isActive={isActive}\n                setErroredFilters={setErroredFilters}\n                validateDependencies={validateDependencies}\n                getDependencySuggestion={getDependencySuggestion}\n                onModifyFilter={handleModifyFilter}\n              />\n            )}\n          </div>\n        );\n      }),\n    [\n      orderedFilters,\n      renderedFilters,\n      currentFilterId,\n      filterConfigMap,\n      expanded,\n      form,\n      removedFilters,\n      restoreFilter,\n      getAvailableFilters,\n      activeFilterPanelKey,\n      handleActiveFilterPanelChange,\n      validateDependencies,\n      getDependencySuggestion,\n      handleModifyFilter,\n    ],\n  );\n\n  useEffect(() => {\n    resetFilterChanges();\n  }, []);\n\n  return (\n    <StyledModalWrapper\n      open={isOpen}\n      maskClosable={false}\n      title={t('Add and edit filters')}\n      expanded={expanded}\n      destroyOnClose\n      onCancel={handleCancel}\n      onOk={handleSave}\n      centered\n      data-test=\"filter-modal\"\n      footer={\n        <div\n          css={css`\n            display: flex;\n            justify-content: flex-end;\n            align-items: flex-end;\n          `}\n        >\n          <Footer\n            onDismiss={() => setSaveAlertVisible(false)}\n            onCancel={handleCancel}\n            handleSave={handleSave}\n            canSave={!erroredFilters.length}\n            saveAlertVisible={saveAlertVisible}\n            onConfirmCancel={handleConfirmCancel}\n          />\n          <StyledExpandButtonWrapper>\n            <ToggleIcon\n              iconSize=\"l\"\n              iconColor={theme.colors.grayscale.dark2}\n              onClick={toggleExpand}\n            />\n          </StyledExpandButtonWrapper>\n        </div>\n      }\n    >\n      <ErrorBoundary>\n        <StyledModalBody expanded={expanded}>\n          <StyledForm\n            form={form}\n            onValuesChange={handleValuesChange}\n            layout=\"vertical\"\n          >\n            <FilterConfigurePane\n              erroredFilters={erroredFilters}\n              onRemove={handleRemoveItem}\n              onAdd={addFilter}\n              onChange={handleTabChange}\n              getFilterTitle={getFilterTitle}\n              currentFilterId={currentFilterId}\n              removedFilters={removedFilters}\n              restoreFilter={restoreFilter}\n              onRearrange={handleRearrange}\n              filters={orderedFilters}\n            >\n              {formList}\n            </FilterConfigurePane>\n          </StyledForm>\n        </StyledModalBody>\n      </ErrorBoundary>\n    </StyledModalWrapper>\n  );\n}\n\nexport default memo(FiltersConfigModal);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}