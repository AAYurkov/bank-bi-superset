{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo, useCallback, useMemo, useRef } from 'react';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport geojsonExtent from '@mapbox/geojson-extent';\nimport { DeckGLContainerStyledWrapper } from '../../DeckGLContainer';\nimport { hexToRGB } from '../../utils/colors';\nimport sandboxedEval from '../../utils/sandbox';\nimport { commonLayerProps } from '../common';\nimport TooltipRow from '../../TooltipRow';\nimport fitViewport from '../../utils/fitViewport';import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst propertyMap = {\n  fillColor: 'fillColor',\n  color: 'fillColor',\n  fill: 'fillColor',\n  'fill-color': 'fillColor',\n  strokeColor: 'strokeColor',\n  'stroke-color': 'strokeColor',\n  'stroke-width': 'strokeWidth'\n};\nconst alterProps = (props, propOverrides) => {\n  const newProps = {};\n  Object.keys(props).forEach((k) => {\n    if (k in propertyMap) {\n      newProps[propertyMap[k]] = props[k];\n    } else\n    {\n      newProps[k] = props[k];\n    }\n  });\n  if (typeof props.fillColor === 'string') {\n    newProps.fillColor = hexToRGB(props.fillColor);\n  }\n  if (typeof props.strokeColor === 'string') {\n    newProps.strokeColor = hexToRGB(props.strokeColor);\n  }\n  return {\n    ...newProps,\n    ...propOverrides\n  };\n};\nlet features = [];\nconst recurseGeoJson = (node, propOverrides, extraProps) => {\n  if (node != null && node.features) {\n    node.features.forEach((obj) => {\n      recurseGeoJson(obj, propOverrides, node.extraProps || extraProps);\n    });\n  }\n  if (node != null && node.geometry) {\n    const newNode = {\n      ...node,\n      properties: alterProps(node.properties, propOverrides)\n    };\n    if (!newNode.extraProps) {\n      newNode.extraProps = extraProps;\n    }\n    features.push(newNode);\n  }\n};\nfunction setTooltipContent(o) {var _o$object;\n  return ((_o$object = o.object) == null ? void 0 : _o$object.extraProps) && _jsx(\"div\", { className: \"deckgl-tooltip\", children:\n    Object.keys(o.object.extraProps).map((prop, index) => {var _o$object$extraProps;return _jsx(TooltipRow, { label: `${prop}: `, value: `${(_o$object$extraProps = o.object.extraProps) == null ? void 0 : _o$object$extraProps[prop]}` }, `prop-${index}`);}) }\n  );\n}\nconst getFillColor = (feature) => {var _feature$properties;return feature == null ? void 0 : (_feature$properties = feature.properties) == null ? void 0 : _feature$properties.fillColor;};\nconst getLineColor = (feature) => {var _feature$properties2;return feature == null ? void 0 : (_feature$properties2 = feature.properties) == null ? void 0 : _feature$properties2.strokeColor;};\nexport function getLayer(formData, payload, onAddFilter, setTooltip) {\n  const fd = formData;\n  const fc = fd.fill_color_picker;\n  const sc = fd.stroke_color_picker;\n  const fillColor = [fc.r, fc.g, fc.b, 255 * fc.a];\n  const strokeColor = [sc.r, sc.g, sc.b, 255 * sc.a];\n  const propOverrides = {};\n  if (fillColor[3] > 0) {\n    propOverrides.fillColor = fillColor;\n  }\n  if (strokeColor[3] > 0) {\n    propOverrides.strokeColor = strokeColor;\n  }\n  features = [];\n  recurseGeoJson(payload.data, propOverrides);\n  let processedFeatures = features;\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    processedFeatures = jsFnMutator(features);\n  }\n  return new GeoJsonLayer({\n    id: `geojson-layer-${fd.slice_id}`,\n    data: processedFeatures,\n    extruded: fd.extruded,\n    filled: fd.filled,\n    stroked: fd.stroked,\n    getFillColor,\n    getLineColor,\n    getLineWidth: fd.line_width || 1,\n    pointRadiusScale: fd.point_radius_scale,\n    lineWidthUnits: fd.line_width_unit,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent)\n  });\n}\nconst DeckGLGeoJson = (props) => {var _payload$data2;\n  const containerRef = useRef();\n  const setTooltip = useCallback((tooltip) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n  const { formData, payload, setControlValue, onAddFilter, height, width } = props;\n  const viewport = useMemo(() => {\n    if (formData.autozoom) {var _payload$data, _payload$data$feature;\n      const points = (payload == null ? void 0 : (_payload$data = payload.data) == null ? void 0 : (_payload$data$feature = _payload$data.features) == null ? void 0 : _payload$data$feature.reduce == null ? void 0 : _payload$data$feature.reduce((acc, feature) => {\n        const bounds = geojsonExtent(feature);\n        if (bounds) {\n          return [...acc, [bounds[0], bounds[1]], [bounds[2], bounds[3]]];\n        }\n        return acc;\n      }, [])) || [];\n      if (points.length) {\n        return fitViewport(props.viewport, {\n          width,\n          height,\n          points\n        });\n      }\n    }\n    return props.viewport;\n  }, [\n  formData.autozoom,\n  height,\n  payload == null ? void 0 : (_payload$data2 = payload.data) == null ? void 0 : _payload$data2.features,\n  props.viewport,\n  width]\n  );\n  const layer = getLayer(formData, payload, onAddFilter, setTooltip);\n  return _jsx(DeckGLContainerStyledWrapper, { ref: containerRef, mapboxApiAccessToken: payload.data.mapboxApiKey, viewport: viewport, layers: [layer], mapStyle: formData.mapbox_style, setControlValue: setControlValue, height: height, width: width });\n};__signature__(DeckGLGeoJson, \"useRef{containerRef}\\nuseCallback{setTooltip}\\nuseMemo{viewport}\");const _default = /*#__PURE__*/\nmemo(DeckGLGeoJson);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propertyMap, \"propertyMap\", \"/Users/aryurkov/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.tsx\");reactHotLoader.register(alterProps, \"alterProps\", \"/Users/aryurkov/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.tsx\");reactHotLoader.register(features, \"features\", \"/Users/aryurkov/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.tsx\");reactHotLoader.register(recurseGeoJson, \"recurseGeoJson\", \"/Users/aryurkov/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.tsx\");reactHotLoader.register(setTooltipContent, \"setTooltipContent\", \"/Users/aryurkov/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.tsx\");reactHotLoader.register(getFillColor, \"getFillColor\", \"/Users/aryurkov/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.tsx\");reactHotLoader.register(getLineColor, \"getLineColor\", \"/Users/aryurkov/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.tsx\");reactHotLoader.register(getLayer, \"getLayer\", \"/Users/aryurkov/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.tsx\");reactHotLoader.register(DeckGLGeoJson, \"DeckGLGeoJson\", \"/Users/aryurkov/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["memo","useCallback","useMemo","useRef","GeoJsonLayer","geojsonExtent","DeckGLContainerStyledWrapper","hexToRGB","sandboxedEval","commonLayerProps","TooltipRow","fitViewport","jsx","_jsx","propertyMap","fillColor","color","fill","strokeColor","alterProps","props","propOverrides","newProps","Object","keys","forEach","k","features","recurseGeoJson","node","extraProps","obj","geometry","newNode","properties","push","setTooltipContent","o","_o$object","object","className","children","map","prop","index","_o$object$extraProps","label","value","getFillColor","feature","_feature$properties","getLineColor","_feature$properties2","getLayer","formData","payload","onAddFilter","setTooltip","fd","fc","fill_color_picker","sc","stroke_color_picker","r","g","b","a","data","processedFeatures","js_data_mutator","jsFnMutator","id","slice_id","extruded","filled","stroked","getLineWidth","line_width","pointRadiusScale","point_radius_scale","lineWidthUnits","line_width_unit","DeckGLGeoJson","_payload$data2","containerRef","tooltip","current","setControlValue","height","width","viewport","autozoom","_payload$data","_payload$data$feature","points","reduce","acc","bounds","length","layer","ref","mapboxApiAccessToken","mapboxApiKey","layers","mapStyle","mapbox_style","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/plugins/legacy-preset-chart-deckgl/src/layers/Geojson/Geojson.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo, useCallback, useMemo, useRef } from 'react';\nimport { GeoJsonLayer } from '@deck.gl/layers';\n// ignoring the eslint error below since typescript prefers 'geojson' to '@types/geojson'\n// eslint-disable-next-line import/no-unresolved\nimport { Feature, Geometry, GeoJsonProperties } from 'geojson';\nimport geojsonExtent from '@mapbox/geojson-extent';\nimport {\n  HandlerFunction,\n  JsonObject,\n  JsonValue,\n  QueryFormData,\n} from '@superset-ui/core';\n\nimport {\n  DeckGLContainerHandle,\n  DeckGLContainerStyledWrapper,\n} from '../../DeckGLContainer';\nimport { hexToRGB } from '../../utils/colors';\nimport sandboxedEval from '../../utils/sandbox';\nimport { commonLayerProps } from '../common';\nimport TooltipRow from '../../TooltipRow';\nimport fitViewport, { Viewport } from '../../utils/fitViewport';\nimport { TooltipProps } from '../../components/Tooltip';\n\ntype ProcessedFeature = Feature<Geometry, GeoJsonProperties> & {\n  properties: JsonObject;\n  extraProps?: JsonObject;\n};\n\nconst propertyMap = {\n  fillColor: 'fillColor',\n  color: 'fillColor',\n  fill: 'fillColor',\n  'fill-color': 'fillColor',\n  strokeColor: 'strokeColor',\n  'stroke-color': 'strokeColor',\n  'stroke-width': 'strokeWidth',\n};\n\nconst alterProps = (props: JsonObject, propOverrides: JsonObject) => {\n  const newProps: JsonObject = {};\n  Object.keys(props).forEach(k => {\n    if (k in propertyMap) {\n      newProps[propertyMap[k as keyof typeof propertyMap]] = props[k];\n    } else {\n      newProps[k] = props[k];\n    }\n  });\n  if (typeof props.fillColor === 'string') {\n    newProps.fillColor = hexToRGB(props.fillColor);\n  }\n  if (typeof props.strokeColor === 'string') {\n    newProps.strokeColor = hexToRGB(props.strokeColor);\n  }\n\n  return {\n    ...newProps,\n    ...propOverrides,\n  };\n};\nlet features: ProcessedFeature[] = [];\nconst recurseGeoJson = (\n  node: JsonObject,\n  propOverrides: JsonObject,\n  extraProps?: JsonObject,\n) => {\n  if (node?.features) {\n    node.features.forEach((obj: JsonObject) => {\n      recurseGeoJson(obj, propOverrides, node.extraProps || extraProps);\n    });\n  }\n  if (node?.geometry) {\n    const newNode = {\n      ...node,\n      properties: alterProps(node.properties, propOverrides),\n    } as ProcessedFeature;\n    if (!newNode.extraProps) {\n      newNode.extraProps = extraProps;\n    }\n    features.push(newNode);\n  }\n};\n\nfunction setTooltipContent(o: JsonObject) {\n  return (\n    o.object?.extraProps && (\n      <div className=\"deckgl-tooltip\">\n        {Object.keys(o.object.extraProps).map((prop, index) => (\n          <TooltipRow\n            key={`prop-${index}`}\n            label={`${prop}: `}\n            value={`${o.object.extraProps?.[prop]}`}\n          />\n        ))}\n      </div>\n    )\n  );\n}\n\nconst getFillColor = (feature: JsonObject) => feature?.properties?.fillColor;\nconst getLineColor = (feature: JsonObject) => feature?.properties?.strokeColor;\n\nexport function getLayer(\n  formData: QueryFormData,\n  payload: JsonObject,\n  onAddFilter: HandlerFunction,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n) {\n  const fd = formData;\n  const fc = fd.fill_color_picker;\n  const sc = fd.stroke_color_picker;\n  const fillColor = [fc.r, fc.g, fc.b, 255 * fc.a];\n  const strokeColor = [sc.r, sc.g, sc.b, 255 * sc.a];\n  const propOverrides: JsonObject = {};\n  if (fillColor[3] > 0) {\n    propOverrides.fillColor = fillColor;\n  }\n  if (strokeColor[3] > 0) {\n    propOverrides.strokeColor = strokeColor;\n  }\n\n  features = [];\n  recurseGeoJson(payload.data, propOverrides);\n\n  let processedFeatures = features;\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    processedFeatures = jsFnMutator(features) as ProcessedFeature[];\n  }\n\n  return new GeoJsonLayer({\n    id: `geojson-layer-${fd.slice_id}` as const,\n    data: processedFeatures,\n    extruded: fd.extruded,\n    filled: fd.filled,\n    stroked: fd.stroked,\n    getFillColor,\n    getLineColor,\n    getLineWidth: fd.line_width || 1,\n    pointRadiusScale: fd.point_radius_scale,\n    lineWidthUnits: fd.line_width_unit,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent),\n  });\n}\n\nexport type DeckGLGeoJsonProps = {\n  formData: QueryFormData;\n  payload: JsonObject;\n  setControlValue: (control: string, value: JsonValue) => void;\n  viewport: Viewport;\n  onAddFilter: HandlerFunction;\n  height: number;\n  width: number;\n};\n\nconst DeckGLGeoJson = (props: DeckGLGeoJsonProps) => {\n  const containerRef = useRef<DeckGLContainerHandle>();\n  const setTooltip = useCallback((tooltip: TooltipProps['tooltip']) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n\n  const { formData, payload, setControlValue, onAddFilter, height, width } =\n    props;\n\n  const viewport: Viewport = useMemo(() => {\n    if (formData.autozoom) {\n      const points =\n        payload?.data?.features?.reduce?.(\n          (acc: [number, number, number, number][], feature: any) => {\n            const bounds = geojsonExtent(feature);\n            if (bounds) {\n              return [...acc, [bounds[0], bounds[1]], [bounds[2], bounds[3]]];\n            }\n\n            return acc;\n          },\n          [],\n        ) || [];\n\n      if (points.length) {\n        return fitViewport(props.viewport, {\n          width,\n          height,\n          points,\n        });\n      }\n    }\n    return props.viewport;\n  }, [\n    formData.autozoom,\n    height,\n    payload?.data?.features,\n    props.viewport,\n    width,\n  ]);\n\n  const layer = getLayer(formData, payload, onAddFilter, setTooltip);\n\n  return (\n    <DeckGLContainerStyledWrapper\n      ref={containerRef}\n      mapboxApiAccessToken={payload.data.mapboxApiKey}\n      viewport={viewport}\n      layers={[layer]}\n      mapStyle={formData.mapbox_style}\n      setControlValue={setControlValue}\n      height={height}\n      width={width}\n    />\n  );\n};\n\nexport default memo(DeckGLGeoJson);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}