{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";import _kebabCase from \"lodash/kebabCase\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { isValidElement, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { ensureIsArray, t, styled, getChartControlPanelRegistry, DatasourceType, css, useTheme, isDefined, NO_TIME_RANGE, usePrevious } from '@superset-ui/core';\nimport { isCustomControlItem, isTemporalColumn, sections } from '@superset-ui/chart-controls';\nimport { useSelector } from 'react-redux';\nimport { rgba } from 'emotion-rgba';\n\nimport Collapse from 'src/components/Collapse';\nimport Tabs from 'src/components/Tabs';\nimport { PluginContext } from 'src/components/DynamicPlugins';\nimport Loading from 'src/components/Loading';\nimport Modal from 'src/components/Modal';\nimport { getSectionsToRender } from 'src/explore/controlUtils';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Icons } from 'src/components/Icons';\nimport ControlRow from './ControlRow';\nimport Control from './Control';\nimport { ExploreAlert } from './ExploreAlert';\nimport { RunQueryButton } from './RunQueryButton';\nimport { Operators } from '../constants';\nimport { Clauses } from './controls/FilterControl/types';\nimport StashFormDataContainer from './StashFormDataContainer';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst { confirm } = Modal;\nconst iconStyles = css`\n  &.anticon {\n    font-size: unset;\n    .anticon {\n      line-height: unset;\n      vertical-align: unset;\n    }\n  }\n`;\nconst actionButtonsContainerStyles = (theme) => css`\n  display: flex;\n  position: sticky;\n  bottom: 0;\n  flex-direction: column;\n  align-items: center;\n  padding: ${theme.gridUnit * 4}px;\n  z-index: 999;\n  background: linear-gradient(\n    ${rgba(theme.colors.grayscale.light5, 0)},\n    ${theme.colors.grayscale.light5} ${theme.opacity.mediumLight}\n  );\n\n  & > button {\n    min-width: 156px;\n  }\n`;\nconst Styles = styled.div`\n  position: relative;\n  height: 100%;\n  width: 100%;\n\n  // Resizable add overflow-y: auto as a style to this div\n  // To override it, we need to use !important\n  overflow: visible !important;\n  #controlSections {\n    height: 100%;\n    overflow: visible;\n  }\n  .nav-tabs {\n    flex: 0 0 1;\n  }\n  .tab-content {\n    overflow: auto;\n    flex: 1 1 100%;\n  }\n  .Select__menu {\n    max-width: 100%;\n  }\n  .type-label {\n    margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    width: ${({ theme }) => theme.gridUnit * 7}px;\n    display: inline-block;\n    text-align: center;\n    font-weight: ${({ theme }) => theme.typography.weights.bold};\n  }\n`;\nconst ControlPanelsTabs = styled(Tabs)`\n  ${({ theme, fullWidth }) => css`\n    height: 100%;\n    overflow: visible;\n    .ant-tabs-nav {\n      margin-bottom: 0;\n    }\n    .ant-tabs-nav-list {\n      width: ${fullWidth ? '100%' : '50%'};\n    }\n    .ant-tabs-tabpane {\n      height: 100%;\n    }\n    .ant-tabs-content-holder {\n      padding-top: ${theme.gridUnit * 4}px;\n    }\n\n    .ant-collapse-ghost > .ant-collapse-item {\n      &:not(:last-child) {\n        border-bottom: 1px solid ${theme.colors.grayscale.light3};\n      }\n\n      & > .ant-collapse-header {\n        font-size: ${theme.typography.sizes.s}px;\n      }\n\n      & > .ant-collapse-content > .ant-collapse-content-box {\n        padding-bottom: 0;\n        font-size: ${theme.typography.sizes.s}px;\n      }\n    }\n  `}\n`;\nconst isTimeSection = (section) => !!section.label && sections.legacyTimeseriesTime.label === section.label;\nconst hasTimeColumn = (datasource) => {var _datasource$columns;return datasource == null ? void 0 : (_datasource$columns = datasource.columns) == null ? void 0 : _datasource$columns.some((c) => c.is_dttm);};\nconst sectionsToExpand = (sections, datasource) =>\n// avoid expanding time section if datasource doesn't include time column\nsections.reduce((acc, section) => (section.expanded || !section.label) && (\n!isTimeSection(section) || hasTimeColumn(datasource)) ?\n[...acc, String(section.label)] :\nacc, []);\nfunction getState(vizType, datasource, datasourceType) {\n  const querySections = [];\n  const customizeSections = [];\n  getSectionsToRender(vizType, datasourceType).forEach((section) => {\n    // if at least one control in the section is not `renderTrigger`\n    // or asks to be displayed at the Data tab\n    if (section.tabOverride === 'data' ||\n    section.controlSetRows.some((rows) => rows.some((control) => control &&\n    typeof control === 'object' &&\n    'config' in control &&\n    control.config && (\n    !control.config.renderTrigger ||\n    control.config.tabOverride === 'data')))) {\n      querySections.push(section);\n    } else\n    if (section.controlSetRows.length > 0) {\n      customizeSections.push(section);\n    }\n  });\n  const expandedQuerySections = sectionsToExpand(querySections, datasource);\n  const expandedCustomizeSections = sectionsToExpand(customizeSections, datasource);\n  return {\n    expandedQuerySections,\n    expandedCustomizeSections,\n    querySections,\n    customizeSections\n  };\n}\nfunction useResetOnChangeRef(initialValue, resetOnChangeValue) {\n  const value = useRef(initialValue());\n  const prevResetOnChangeValue = useRef(resetOnChangeValue);\n  if (prevResetOnChangeValue.current !== resetOnChangeValue) {\n    value.current = initialValue();\n    prevResetOnChangeValue.current = resetOnChangeValue;\n  }\n  return value;\n}__signature__(useResetOnChangeRef, \"useRef{value}\\nuseRef{prevResetOnChangeValue}\");\nexport const ControlPanelsContainer = (props) => {var _props$exploreState$d3, _props$exploreState$d4;\n  const { colors } = useTheme();\n  const pluginContext = useContext(PluginContext);\n  const prevState = usePrevious(props.exploreState);\n  const prevDatasource = usePrevious(props.exploreState.datasource);\n  const prevChartStatus = usePrevious(props.chart.chartStatus);\n  const [showDatasourceAlert, setShowDatasourceAlert] = useState(false);\n  const containerRef = useRef(null);\n  const controlsTransferred = useSelector((state) => state.explore.controlsTransferred);\n  const defaultTimeFilter = useSelector((state) => {var _state$common, _state$common$conf;return ((_state$common = state.common) == null ? void 0 : (_state$common$conf = _state$common.conf) == null ? void 0 : _state$common$conf.DEFAULT_TIME_FILTER) || NO_TIME_RANGE;});\n  const { form_data, actions } = props;\n  const { setControlValue } = actions;\n  const { x_axis, adhoc_filters } = form_data;\n  const previousXAxis = usePrevious(x_axis);\n  useEffect(() => {\n    if (x_axis &&\n    x_axis !== previousXAxis &&\n    isTemporalColumn(x_axis, props.exploreState.datasource)) {\n      const noFilter = !(adhoc_filters != null && adhoc_filters.find((filter) => filter.expressionType === 'SIMPLE' &&\n      filter.operator === Operators.TemporalRange &&\n      filter.subject === x_axis));\n      if (noFilter) {\n        confirm({\n          title: t('The X-axis is not on the filters list'),\n          content: t(`The X-axis is not on the filters list which will prevent it from being used in\n            time range filters in dashboards. Would you like to add it to the filters list?`),\n          onOk: () => {\n            setControlValue('adhoc_filters', [\n            ...(adhoc_filters || []),\n            {\n              clause: Clauses.Where,\n              subject: x_axis,\n              operator: Operators.TemporalRange,\n              comparator: defaultTimeFilter,\n              expressionType: 'SIMPLE'\n            }]\n            );\n          }\n        });\n      }\n    }\n  }, [\n  x_axis,\n  adhoc_filters,\n  setControlValue,\n  defaultTimeFilter,\n  previousXAxis,\n  props.exploreState.datasource]\n  );\n  useEffect(() => {\n    let shouldUpdateControls = false;\n    const removeDatasourceWarningFromControl = (value) => {\n      if (typeof value === 'object' &&\n      isDefined(value) &&\n      'datasourceWarning' in value &&\n      value.datasourceWarning === true) {\n        shouldUpdateControls = true;\n        return { ...value, datasourceWarning: false };\n      }\n      return value;\n    };\n    if (props.chart.chartStatus === 'success' &&\n    prevChartStatus !== 'success') {\n      controlsTransferred == null ? void 0 : controlsTransferred.forEach((controlName) => {var _ensureIsArray;\n        shouldUpdateControls = false;\n        if (!isDefined(props.controls[controlName])) {\n          return;\n        }\n        const alteredControls = Array.isArray(props.controls[controlName].value) ? (_ensureIsArray =\n        ensureIsArray(props.controls[controlName].value)) == null ? void 0 : _ensureIsArray.map(removeDatasourceWarningFromControl) :\n        removeDatasourceWarningFromControl(props.controls[controlName].value);\n        if (shouldUpdateControls) {\n          props.actions.setControlValue(controlName, alteredControls);\n        }\n      });\n    }\n  }, [\n  controlsTransferred,\n  prevChartStatus,\n  props.actions,\n  props.chart.chartStatus,\n  props.controls]\n  );\n  useEffect(() => {var _props$exploreState$d, _props$exploreState$d2;\n    if (prevDatasource &&\n    prevDatasource.type !== DatasourceType.Query && (\n    ((_props$exploreState$d = props.exploreState.datasource) == null ? void 0 : _props$exploreState$d.id) !== prevDatasource.id ||\n    ((_props$exploreState$d2 = props.exploreState.datasource) == null ? void 0 : _props$exploreState$d2.type) !== prevDatasource.type)) {var _containerRef$current;\n      setShowDatasourceAlert(true);\n      (_containerRef$current = containerRef.current) == null ? void 0 : _containerRef$current.scrollTo(0, 0);\n    }\n  }, [(_props$exploreState$d3 =\n  props.exploreState.datasource) == null ? void 0 : _props$exploreState$d3.id, (_props$exploreState$d4 =\n  props.exploreState.datasource) == null ? void 0 : _props$exploreState$d4.type,\n  prevDatasource]\n  );\n  const { expandedQuerySections, expandedCustomizeSections, querySections, customizeSections } = useMemo(() => getState(form_data.viz_type, props.exploreState.datasource, props.datasource_type), [props.exploreState.datasource, form_data.viz_type, props.datasource_type]);\n  const resetTransferredControls = useCallback(() => {\n    ensureIsArray(props.exploreState.controlsTransferred).forEach((controlName) => props.actions.setControlValue(controlName, props.controls[controlName].default));\n  }, [props.actions, props.exploreState.controlsTransferred, props.controls]);\n  const handleClearFormClick = useCallback(() => {\n    resetTransferredControls();\n    setShowDatasourceAlert(false);\n  }, [resetTransferredControls]);\n  const handleContinueClick = useCallback(() => {\n    setShowDatasourceAlert(false);\n  }, []);\n  const shouldRecalculateControlState = ({ name, config }) => {\n    const { controls, chart, exploreState } = props;\n    return Boolean(config.shouldMapStateToProps == null ? void 0 : config.shouldMapStateToProps(prevState || exploreState, exploreState, controls[name], chart));\n  };\n  const renderControl = ({ name, config }) => {\n    const { controls, chart, exploreState } = props;\n    const { visibility, hidden, disableStash, ...restConfig } = config;\n    // If the control item is not an object, we have to look up the control data from\n    // the centralized controls file.\n    // When it is an object we read control data straight from `config` instead\n    const controlData = {\n      ...restConfig,\n      ...controls[name],\n      ...(shouldRecalculateControlState({ name, config }) ?\n      config == null ? void 0 : config.mapStateToProps == null ? void 0 : config.mapStateToProps(exploreState, controls[name], chart) :\n      // for other controls, `mapStateToProps` is already run in\n      // controlUtils/getControlState.ts\n      undefined),\n      name\n    };\n    const { validationErrors, label: baseLabel, description: baseDescription, ...restProps } = controlData;\n    const isVisible = visibility ?\n    visibility.call(config, props, controlData) :\n    undefined;\n    const isHidden = typeof hidden === 'function' ?\n    hidden.call(config, props, controlData) :\n    hidden;\n    const label = typeof baseLabel === 'function' ?\n    baseLabel(exploreState, controls[name], chart) :\n    baseLabel;\n    const description = typeof baseDescription === 'function' ?\n    baseDescription(exploreState, controls[name], chart) :\n    baseDescription;\n    if (name.includes('adhoc_filters')) {\n      restProps.canDelete = (valueToBeDeleted, values) => {var _controls$time_range;\n        const isTemporalRange = (filter) => filter.operator === Operators.TemporalRange;\n        if (!(controls != null && (_controls$time_range = controls.time_range) != null && _controls$time_range.value) && isTemporalRange(valueToBeDeleted)) {\n          const count = values.filter(isTemporalRange).length;\n          if (count === 1) {\n            // if temporal filter's value is \"No filter\", prevent deletion\n            // otherwise reset the value to \"No filter\"\n            if (valueToBeDeleted.comparator === defaultTimeFilter) {\n              return t(`You cannot delete the last temporal filter as it's used for time range filters in dashboards.`);\n            }\n            props.actions.setControlValue(name, values.map((val) => {\n              if (_isEqual(val, valueToBeDeleted)) {\n                return {\n                  ...val,\n                  comparator: defaultTimeFilter\n                };\n              }\n              return val;\n            }));\n            return false;\n          }\n        }\n        return true;\n      };\n    }\n    return _jsx(StashFormDataContainer, { shouldStash: isVisible === false && disableStash !== true, fieldNames: [name], children:\n      _jsx(Control, { name: name, label: label, description: description, validationErrors: validationErrors, actions: props.actions, isVisible: isVisible, hidden: isHidden, ...restProps }, `control-${name}`) }, `control-container-${name}`\n    );\n  };\n  const sectionHasHadNoErrors = useResetOnChangeRef(() => ({}), form_data.viz_type);\n  const renderControlPanelSection = (section) => {\n    const { controls } = props;\n    const { label, description, visibility } = section;\n    // Section label can be a ReactNode but in some places we want to\n    // have a string ID. Using forced type conversion for now,\n    // should probably add a `id` field to sections in the future.\n    const sectionId = String(label);\n    const isVisible = (visibility == null ? void 0 : visibility.call(this, props, controls)) !== false;\n    const hasErrors = section.controlSetRows.some((rows) => rows.some((item) => {\n      const controlName = typeof item === 'string' ?\n      item :\n      item && 'name' in item ?\n      item.name :\n      null;\n      return controlName &&\n      controlName in controls &&\n      controls[controlName].validationErrors &&\n      controls[controlName].validationErrors.length > 0;\n    }));\n    if (!hasErrors) {\n      sectionHasHadNoErrors.current[sectionId] = true;\n    }\n    const errorColor = sectionHasHadNoErrors.current[sectionId] ?\n    colors.error.base :\n    colors.warning.base;\n    const PanelHeader = () => _jsxs(\"span\", { \"data-test\": \"collapsible-control-panel-header\", children: [\n      _jsx(\"span\", { css: (theme) => css`\n            font-size: ${theme.typography.sizes.m}px;\n            line-height: 1.3;\n            font-weight: ${theme.typography.weights.medium};\n          `, children:\n        label }\n      ), ' ',\n      description && _jsx(Tooltip, { id: sectionId, title: description, children:\n        _jsx(Icons.InfoCircleOutlined, { css: iconStyles }) }\n      ),\n      hasErrors && _jsx(Tooltip, { id: `${_kebabCase('validation-errors')}-tooltip`, title: t('This section contains validation errors'), children:\n        _jsx(Icons.InfoCircleOutlined, { css: css`\n                ${iconStyles};\n                color: ${errorColor};\n              ` }) }\n      )] }\n    );\n    return _jsxs(_Fragment, { children: [\n      _jsx(StashFormDataContainer, { shouldStash: !isVisible, fieldNames: section.controlSetRows.\n        flat().\n        map((item) => item && typeof item === 'object' ?\n        'name' in item ?\n        item.name :\n        '' :\n        String(item || '')).\n        filter(Boolean) }, `sectionId-${sectionId}`),\n      isVisible && _jsx(Collapse.Panel, { css: (theme) => css`\n              margin-bottom: 0;\n              box-shadow: none;\n\n              &:last-child {\n                padding-bottom: ${theme.gridUnit * 16}px;\n                border-bottom: 0;\n              }\n\n              .panel-body {\n                margin-left: ${theme.gridUnit * 4}px;\n                padding-bottom: 0;\n              }\n\n              span.label {\n                display: inline-block;\n              }\n              ${!section.label &&\n        `\n          .ant-collapse-header {\n            display: none;\n          }\n        `}\n            `, header: _jsx(PanelHeader, {}), children:\n        section.controlSetRows.map((controlSets, i) => {\n          const renderedControls = controlSets.\n          map((controlItem) => {\n            if (!controlItem) {\n              // When the item is invalid\n              return null;\n            }\n            if (/*#__PURE__*/isValidElement(controlItem)) {\n              // When the item is a React element\n              return controlItem;\n            }\n            if (isCustomControlItem(controlItem) &&\n            controlItem.name !== 'datasource') {\n              return renderControl(controlItem);\n            }\n            return null;\n          }).\n          filter((x) => x !== null);\n          // don't show the row if it is empty\n          if (renderedControls.length === 0) {\n            return null;\n          }\n          return _jsx(ControlRow, { controls: renderedControls }, `controlsetrow-${i}`);\n        }) }, sectionId\n      )] }\n    );\n  };\n  const hasControlsTransferred = ensureIsArray(props.exploreState.controlsTransferred).length > 0;\n  const DatasourceAlert = useCallback(() => hasControlsTransferred ? _jsx(ExploreAlert, { title: t('Keep control settings?'), bodyText: t(\"You've changed datasets. Any controls with data (columns, metrics) that match this new dataset have been retained.\"), primaryButtonAction: handleContinueClick, secondaryButtonAction: handleClearFormClick, primaryButtonText: t('Continue'), secondaryButtonText: t('Clear form'), type: \"info\" }) : _jsx(ExploreAlert, { title: t('No form settings were maintained'), bodyText: t('We were unable to carry over any controls when switching to this new dataset.'), primaryButtonAction: handleContinueClick, primaryButtonText: t('Continue'), type: \"warning\" }), [handleClearFormClick, handleContinueClick, hasControlsTransferred]);\n  const dataTabHasHadNoErrors = useResetOnChangeRef(() => false, form_data.viz_type);\n  const dataTabTitle = useMemo(() => {\n    if (!props.errorMessage) {\n      dataTabHasHadNoErrors.current = true;\n    }\n    const errorColor = dataTabHasHadNoErrors.current ?\n    colors.error.base :\n    colors.warning.base;\n    return _jsxs(_Fragment, { children: [\n      _jsx(\"span\", { children: t('Data') }),\n      props.errorMessage && _jsxs(\"span\", { css: (theme) => css`\n              margin-left: ${theme.gridUnit * 2}px;\n            `, children: [\n        ' ',\n        _jsx(Tooltip, { id: \"query-error-tooltip\", placement: \"right\", title: props.errorMessage, children:\n          _jsx(Icons.ExclamationCircleOutlined, { css: css`\n                  ${iconStyles};\n                  color: ${errorColor};\n                ` }) }\n        )] }\n      )] }\n    );\n  }, [\n  colors.error.base,\n  colors.warning.base,\n  dataTabHasHadNoErrors,\n  props.errorMessage]\n  );\n  const controlPanelRegistry = getChartControlPanelRegistry();\n  if (!controlPanelRegistry.has(form_data.viz_type) && pluginContext.loading) {\n    return _jsx(Loading, {});\n  }\n  const showCustomizeTab = customizeSections.length > 0;\n  return _jsxs(Styles, { ref: containerRef, children: [\n    _jsxs(ControlPanelsTabs, { id: \"controlSections\", \"data-test\": \"control-tabs\", fullWidth: showCustomizeTab, allowOverflow: false, children: [\n      _jsx(Tabs.TabPane, { tab: dataTabTitle, children:\n        _jsxs(Collapse, { defaultActiveKey: expandedQuerySections, expandIconPosition: \"right\", ghost: true, children: [\n          showDatasourceAlert && _jsx(DatasourceAlert, {}),\n          querySections.map(renderControlPanelSection)] }\n        ) }, \"query\"\n      ),\n      showCustomizeTab && _jsx(Tabs.TabPane, { tab: t('Customize'), children:\n        _jsx(Collapse, { defaultActiveKey: expandedCustomizeSections, expandIconPosition: \"right\", ghost: true, children:\n          customizeSections.map(renderControlPanelSection) }\n        ) }, \"display\"\n      )] }\n    ),\n    _jsx(\"div\", { css: actionButtonsContainerStyles, children:\n      _jsx(RunQueryButton, { onQuery: props.onQuery, onStop: props.onStop, errorMessage: props.errorMessage, loading: props.chart.chartStatus === 'loading', isNewChart: !props.chart.queriesResponse, canStopQuery: props.canStopQuery, chartIsStale: props.chartIsStale }) }\n    )] }\n  );\n};__signature__(ControlPanelsContainer, \"useTheme{{ colors }}\\nuseContext{pluginContext}\\nusePrevious{prevState}\\nusePrevious{prevDatasource}\\nusePrevious{prevChartStatus}\\nuseState{[showDatasourceAlert, setShowDatasourceAlert](false)}\\nuseRef{containerRef}\\nuseSelector{controlsTransferred}\\nuseSelector{defaultTimeFilter}\\nusePrevious{previousXAxis}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseMemo{{ expandedQuerySections, expandedCustomizeSections, querySections, customizeSections, }}\\nuseCallback{resetTransferredControls}\\nuseCallback{handleClearFormClick}\\nuseCallback{handleContinueClick}\\nuseResetOnChangeRef{sectionHasHadNoErrors}\\nuseCallback{DatasourceAlert}\\nuseResetOnChangeRef{dataTabHasHadNoErrors}\\nuseMemo{dataTabTitle}\", () => [useTheme, usePrevious, usePrevious, usePrevious, useSelector, useSelector, usePrevious, useResetOnChangeRef, useResetOnChangeRef]);const _default =\nControlPanelsContainer;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(confirm, \"confirm\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(iconStyles, \"iconStyles\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(actionButtonsContainerStyles, \"actionButtonsContainerStyles\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(Styles, \"Styles\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(ControlPanelsTabs, \"ControlPanelsTabs\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(isTimeSection, \"isTimeSection\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(hasTimeColumn, \"hasTimeColumn\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(sectionsToExpand, \"sectionsToExpand\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(getState, \"getState\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(useResetOnChangeRef, \"useResetOnChangeRef\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(ControlPanelsContainer, \"ControlPanelsContainer\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["isValidElement","useCallback","useContext","useEffect","useMemo","useRef","useState","ensureIsArray","t","styled","getChartControlPanelRegistry","DatasourceType","css","useTheme","isDefined","NO_TIME_RANGE","usePrevious","isCustomControlItem","isTemporalColumn","sections","useSelector","rgba","Collapse","Tabs","PluginContext","Loading","Modal","getSectionsToRender","Tooltip","Icons","ControlRow","Control","ExploreAlert","RunQueryButton","Operators","Clauses","StashFormDataContainer","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","confirm","iconStyles","actionButtonsContainerStyles","theme","gridUnit","colors","grayscale","light5","opacity","mediumLight","Styles","div","typography","weights","bold","ControlPanelsTabs","fullWidth","light3","sizes","s","isTimeSection","section","label","legacyTimeseriesTime","hasTimeColumn","datasource","_datasource$columns","columns","some","c","is_dttm","sectionsToExpand","reduce","acc","expanded","String","getState","vizType","datasourceType","querySections","customizeSections","forEach","tabOverride","controlSetRows","rows","control","config","renderTrigger","push","length","expandedQuerySections","expandedCustomizeSections","useResetOnChangeRef","initialValue","resetOnChangeValue","value","prevResetOnChangeValue","current","__signature__","ControlPanelsContainer","props","_props$exploreState$d3","_props$exploreState$d4","pluginContext","prevState","exploreState","prevDatasource","prevChartStatus","chart","chartStatus","showDatasourceAlert","setShowDatasourceAlert","containerRef","controlsTransferred","state","explore","defaultTimeFilter","_state$common","_state$common$conf","common","conf","DEFAULT_TIME_FILTER","form_data","actions","setControlValue","x_axis","adhoc_filters","previousXAxis","noFilter","find","filter","expressionType","operator","TemporalRange","subject","title","content","onOk","clause","Where","comparator","shouldUpdateControls","removeDatasourceWarningFromControl","datasourceWarning","controlName","_ensureIsArray","controls","alteredControls","Array","isArray","map","_props$exploreState$d","_props$exploreState$d2","type","Query","id","_containerRef$current","scrollTo","viz_type","datasource_type","resetTransferredControls","default","handleClearFormClick","handleContinueClick","shouldRecalculateControlState","name","Boolean","shouldMapStateToProps","renderControl","visibility","hidden","disableStash","restConfig","controlData","mapStateToProps","undefined","validationErrors","baseLabel","description","baseDescription","restProps","isVisible","call","isHidden","includes","canDelete","valueToBeDeleted","values","_controls$time_range","isTemporalRange","time_range","count","val","_isEqual","shouldStash","fieldNames","children","sectionHasHadNoErrors","renderControlPanelSection","sectionId","hasErrors","item","errorColor","error","base","warning","PanelHeader","m","medium","InfoCircleOutlined","_kebabCase","flat","Panel","header","controlSets","i","renderedControls","controlItem","x","hasControlsTransferred","DatasourceAlert","bodyText","primaryButtonAction","secondaryButtonAction","primaryButtonText","secondaryButtonText","dataTabHasHadNoErrors","dataTabTitle","errorMessage","placement","ExclamationCircleOutlined","controlPanelRegistry","has","loading","showCustomizeTab","ref","allowOverflow","TabPane","tab","defaultActiveKey","expandIconPosition","ghost","onQuery","onStop","isNewChart","queriesResponse","canStopQuery","chartIsStale","_default","reactHotLoader","reactHotLoaderGlobal","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/explore/components/ControlPanelsContainer.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport {\n  isValidElement,\n  ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  ensureIsArray,\n  t,\n  styled,\n  getChartControlPanelRegistry,\n  QueryFormData,\n  DatasourceType,\n  css,\n  SupersetTheme,\n  useTheme,\n  isDefined,\n  JsonValue,\n  NO_TIME_RANGE,\n  usePrevious,\n} from '@superset-ui/core';\nimport {\n  ControlPanelSectionConfig,\n  ControlState,\n  CustomControlItem,\n  Dataset,\n  ExpandedControlItem,\n  isCustomControlItem,\n  isTemporalColumn,\n  sections,\n} from '@superset-ui/chart-controls';\nimport { useSelector } from 'react-redux';\nimport { rgba } from 'emotion-rgba';\nimport { kebabCase, isEqual } from 'lodash';\n\nimport Collapse from 'src/components/Collapse';\nimport Tabs from 'src/components/Tabs';\nimport { PluginContext } from 'src/components/DynamicPlugins';\nimport Loading from 'src/components/Loading';\nimport Modal from 'src/components/Modal';\n\nimport { getSectionsToRender } from 'src/explore/controlUtils';\nimport { ExploreActions } from 'src/explore/actions/exploreActions';\nimport { ChartState, ExplorePageState } from 'src/explore/types';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Icons } from 'src/components/Icons';\nimport ControlRow from './ControlRow';\nimport Control from './Control';\nimport { ExploreAlert } from './ExploreAlert';\nimport { RunQueryButton } from './RunQueryButton';\nimport { Operators } from '../constants';\nimport { Clauses } from './controls/FilterControl/types';\nimport StashFormDataContainer from './StashFormDataContainer';\n\nconst { confirm } = Modal;\n\nexport type ControlPanelsContainerProps = {\n  exploreState: ExplorePageState['explore'];\n  actions: ExploreActions;\n  datasource_type: DatasourceType;\n  chart: ChartState;\n  controls: Record<string, ControlState>;\n  form_data: QueryFormData;\n  isDatasourceMetaLoading: boolean;\n  errorMessage: ReactNode;\n  onQuery: () => void;\n  onStop: () => void;\n  canStopQuery: boolean;\n  chartIsStale: boolean;\n};\n\nexport type ExpandedControlPanelSectionConfig = Omit<\n  ControlPanelSectionConfig,\n  'controlSetRows'\n> & {\n  controlSetRows: ExpandedControlItem[][];\n};\n\nconst iconStyles = css`\n  &.anticon {\n    font-size: unset;\n    .anticon {\n      line-height: unset;\n      vertical-align: unset;\n    }\n  }\n`;\n\nconst actionButtonsContainerStyles = (theme: SupersetTheme) => css`\n  display: flex;\n  position: sticky;\n  bottom: 0;\n  flex-direction: column;\n  align-items: center;\n  padding: ${theme.gridUnit * 4}px;\n  z-index: 999;\n  background: linear-gradient(\n    ${rgba(theme.colors.grayscale.light5, 0)},\n    ${theme.colors.grayscale.light5} ${theme.opacity.mediumLight}\n  );\n\n  & > button {\n    min-width: 156px;\n  }\n`;\n\nconst Styles = styled.div`\n  position: relative;\n  height: 100%;\n  width: 100%;\n\n  // Resizable add overflow-y: auto as a style to this div\n  // To override it, we need to use !important\n  overflow: visible !important;\n  #controlSections {\n    height: 100%;\n    overflow: visible;\n  }\n  .nav-tabs {\n    flex: 0 0 1;\n  }\n  .tab-content {\n    overflow: auto;\n    flex: 1 1 100%;\n  }\n  .Select__menu {\n    max-width: 100%;\n  }\n  .type-label {\n    margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    width: ${({ theme }) => theme.gridUnit * 7}px;\n    display: inline-block;\n    text-align: center;\n    font-weight: ${({ theme }) => theme.typography.weights.bold};\n  }\n`;\n\nconst ControlPanelsTabs = styled(Tabs)`\n  ${({ theme, fullWidth }) => css`\n    height: 100%;\n    overflow: visible;\n    .ant-tabs-nav {\n      margin-bottom: 0;\n    }\n    .ant-tabs-nav-list {\n      width: ${fullWidth ? '100%' : '50%'};\n    }\n    .ant-tabs-tabpane {\n      height: 100%;\n    }\n    .ant-tabs-content-holder {\n      padding-top: ${theme.gridUnit * 4}px;\n    }\n\n    .ant-collapse-ghost > .ant-collapse-item {\n      &:not(:last-child) {\n        border-bottom: 1px solid ${theme.colors.grayscale.light3};\n      }\n\n      & > .ant-collapse-header {\n        font-size: ${theme.typography.sizes.s}px;\n      }\n\n      & > .ant-collapse-content > .ant-collapse-content-box {\n        padding-bottom: 0;\n        font-size: ${theme.typography.sizes.s}px;\n      }\n    }\n  `}\n`;\n\nconst isTimeSection = (section: ControlPanelSectionConfig): boolean =>\n  !!section.label && sections.legacyTimeseriesTime.label === section.label;\n\nconst hasTimeColumn = (datasource: Dataset): boolean =>\n  datasource?.columns?.some(c => c.is_dttm);\nconst sectionsToExpand = (\n  sections: ControlPanelSectionConfig[],\n  datasource: Dataset,\n): string[] =>\n  // avoid expanding time section if datasource doesn't include time column\n  sections.reduce(\n    (acc, section) =>\n      (section.expanded || !section.label) &&\n      (!isTimeSection(section) || hasTimeColumn(datasource))\n        ? [...acc, String(section.label)]\n        : acc,\n    [] as string[],\n  );\n\nfunction getState(\n  vizType: string,\n  datasource: Dataset,\n  datasourceType: DatasourceType,\n) {\n  const querySections: ControlPanelSectionConfig[] = [];\n  const customizeSections: ControlPanelSectionConfig[] = [];\n\n  getSectionsToRender(vizType, datasourceType).forEach(section => {\n    // if at least one control in the section is not `renderTrigger`\n    // or asks to be displayed at the Data tab\n    if (\n      section.tabOverride === 'data' ||\n      section.controlSetRows.some(rows =>\n        rows.some(\n          control =>\n            control &&\n            typeof control === 'object' &&\n            'config' in control &&\n            control.config &&\n            (!control.config.renderTrigger ||\n              control.config.tabOverride === 'data'),\n        ),\n      )\n    ) {\n      querySections.push(section);\n    } else if (section.controlSetRows.length > 0) {\n      customizeSections.push(section);\n    }\n  });\n  const expandedQuerySections: string[] = sectionsToExpand(\n    querySections,\n    datasource,\n  );\n  const expandedCustomizeSections: string[] = sectionsToExpand(\n    customizeSections,\n    datasource,\n  );\n  return {\n    expandedQuerySections,\n    expandedCustomizeSections,\n    querySections,\n    customizeSections,\n  };\n}\n\nfunction useResetOnChangeRef(initialValue: () => any, resetOnChangeValue: any) {\n  const value = useRef(initialValue());\n  const prevResetOnChangeValue = useRef(resetOnChangeValue);\n  if (prevResetOnChangeValue.current !== resetOnChangeValue) {\n    value.current = initialValue();\n    prevResetOnChangeValue.current = resetOnChangeValue;\n  }\n\n  return value;\n}\n\nexport const ControlPanelsContainer = (props: ControlPanelsContainerProps) => {\n  const { colors } = useTheme();\n  const pluginContext = useContext(PluginContext);\n\n  const prevState = usePrevious(props.exploreState);\n  const prevDatasource = usePrevious(props.exploreState.datasource);\n  const prevChartStatus = usePrevious(props.chart.chartStatus);\n\n  const [showDatasourceAlert, setShowDatasourceAlert] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const controlsTransferred = useSelector<\n    ExplorePageState,\n    string[] | undefined\n  >(state => state.explore.controlsTransferred);\n\n  const defaultTimeFilter = useSelector<ExplorePageState>(\n    state => state.common?.conf?.DEFAULT_TIME_FILTER || NO_TIME_RANGE,\n  );\n\n  const { form_data, actions } = props;\n  const { setControlValue } = actions;\n  const { x_axis, adhoc_filters } = form_data;\n\n  const previousXAxis = usePrevious(x_axis);\n\n  useEffect(() => {\n    if (\n      x_axis &&\n      x_axis !== previousXAxis &&\n      isTemporalColumn(x_axis, props.exploreState.datasource)\n    ) {\n      const noFilter = !adhoc_filters?.find(\n        filter =>\n          filter.expressionType === 'SIMPLE' &&\n          filter.operator === Operators.TemporalRange &&\n          filter.subject === x_axis,\n      );\n      if (noFilter) {\n        confirm({\n          title: t('The X-axis is not on the filters list'),\n          content:\n            t(`The X-axis is not on the filters list which will prevent it from being used in\n            time range filters in dashboards. Would you like to add it to the filters list?`),\n          onOk: () => {\n            setControlValue('adhoc_filters', [\n              ...(adhoc_filters || []),\n              {\n                clause: Clauses.Where,\n                subject: x_axis,\n                operator: Operators.TemporalRange,\n                comparator: defaultTimeFilter,\n                expressionType: 'SIMPLE',\n              },\n            ]);\n          },\n        });\n      }\n    }\n  }, [\n    x_axis,\n    adhoc_filters,\n    setControlValue,\n    defaultTimeFilter,\n    previousXAxis,\n    props.exploreState.datasource,\n  ]);\n\n  useEffect(() => {\n    let shouldUpdateControls = false;\n    const removeDatasourceWarningFromControl = (\n      value: JsonValue | undefined,\n    ) => {\n      if (\n        typeof value === 'object' &&\n        isDefined(value) &&\n        'datasourceWarning' in value &&\n        value.datasourceWarning === true\n      ) {\n        shouldUpdateControls = true;\n        return { ...value, datasourceWarning: false };\n      }\n      return value;\n    };\n    if (\n      props.chart.chartStatus === 'success' &&\n      prevChartStatus !== 'success'\n    ) {\n      controlsTransferred?.forEach(controlName => {\n        shouldUpdateControls = false;\n        if (!isDefined(props.controls[controlName])) {\n          return;\n        }\n        const alteredControls = Array.isArray(props.controls[controlName].value)\n          ? ensureIsArray(props.controls[controlName].value)?.map(\n              removeDatasourceWarningFromControl,\n            )\n          : removeDatasourceWarningFromControl(\n              props.controls[controlName].value,\n            );\n        if (shouldUpdateControls) {\n          props.actions.setControlValue(controlName, alteredControls);\n        }\n      });\n    }\n  }, [\n    controlsTransferred,\n    prevChartStatus,\n    props.actions,\n    props.chart.chartStatus,\n    props.controls,\n  ]);\n\n  useEffect(() => {\n    if (\n      prevDatasource &&\n      prevDatasource.type !== DatasourceType.Query &&\n      (props.exploreState.datasource?.id !== prevDatasource.id ||\n        props.exploreState.datasource?.type !== prevDatasource.type)\n    ) {\n      setShowDatasourceAlert(true);\n      containerRef.current?.scrollTo(0, 0);\n    }\n  }, [\n    props.exploreState.datasource?.id,\n    props.exploreState.datasource?.type,\n    prevDatasource,\n  ]);\n\n  const {\n    expandedQuerySections,\n    expandedCustomizeSections,\n    querySections,\n    customizeSections,\n  } = useMemo(\n    () =>\n      getState(\n        form_data.viz_type,\n        props.exploreState.datasource,\n        props.datasource_type,\n      ),\n    [props.exploreState.datasource, form_data.viz_type, props.datasource_type],\n  );\n\n  const resetTransferredControls = useCallback(() => {\n    ensureIsArray(props.exploreState.controlsTransferred).forEach(controlName =>\n      props.actions.setControlValue(\n        controlName,\n        props.controls[controlName].default,\n      ),\n    );\n  }, [props.actions, props.exploreState.controlsTransferred, props.controls]);\n\n  const handleClearFormClick = useCallback(() => {\n    resetTransferredControls();\n    setShowDatasourceAlert(false);\n  }, [resetTransferredControls]);\n\n  const handleContinueClick = useCallback(() => {\n    setShowDatasourceAlert(false);\n  }, []);\n\n  const shouldRecalculateControlState = ({\n    name,\n    config,\n  }: CustomControlItem): boolean => {\n    const { controls, chart, exploreState } = props;\n\n    return Boolean(\n      config.shouldMapStateToProps?.(\n        prevState || exploreState,\n        exploreState,\n        controls[name],\n        chart,\n      ),\n    );\n  };\n\n  const renderControl = ({ name, config }: CustomControlItem) => {\n    const { controls, chart, exploreState } = props;\n    const { visibility, hidden, disableStash, ...restConfig } = config;\n\n    // If the control item is not an object, we have to look up the control data from\n    // the centralized controls file.\n    // When it is an object we read control data straight from `config` instead\n    const controlData = {\n      ...restConfig,\n      ...controls[name],\n      ...(shouldRecalculateControlState({ name, config })\n        ? config?.mapStateToProps?.(exploreState, controls[name], chart)\n        : // for other controls, `mapStateToProps` is already run in\n          // controlUtils/getControlState.ts\n          undefined),\n      name,\n    };\n    const {\n      validationErrors,\n      label: baseLabel,\n      description: baseDescription,\n      ...restProps\n    } = controlData as ControlState & {\n      validationErrors?: any[];\n    };\n\n    const isVisible = visibility\n      ? visibility.call(config, props, controlData)\n      : undefined;\n\n    const isHidden =\n      typeof hidden === 'function'\n        ? hidden.call(config, props, controlData)\n        : hidden;\n\n    const label =\n      typeof baseLabel === 'function'\n        ? baseLabel(exploreState, controls[name], chart)\n        : baseLabel;\n\n    const description =\n      typeof baseDescription === 'function'\n        ? baseDescription(exploreState, controls[name], chart)\n        : baseDescription;\n\n    if (name.includes('adhoc_filters')) {\n      restProps.canDelete = (\n        valueToBeDeleted: Record<string, any>,\n        values: Record<string, any>[],\n      ) => {\n        const isTemporalRange = (filter: Record<string, any>) =>\n          filter.operator === Operators.TemporalRange;\n        if (!controls?.time_range?.value && isTemporalRange(valueToBeDeleted)) {\n          const count = values.filter(isTemporalRange).length;\n          if (count === 1) {\n            // if temporal filter's value is \"No filter\", prevent deletion\n            // otherwise reset the value to \"No filter\"\n            if (valueToBeDeleted.comparator === defaultTimeFilter) {\n              return t(\n                `You cannot delete the last temporal filter as it's used for time range filters in dashboards.`,\n              );\n            }\n            props.actions.setControlValue(\n              name,\n              values.map(val => {\n                if (isEqual(val, valueToBeDeleted)) {\n                  return {\n                    ...val,\n                    comparator: defaultTimeFilter,\n                  };\n                }\n                return val;\n              }),\n            );\n            return false;\n          }\n        }\n        return true;\n      };\n    }\n\n    return (\n      <StashFormDataContainer\n        shouldStash={isVisible === false && disableStash !== true}\n        fieldNames={[name]}\n        key={`control-container-${name}`}\n      >\n        <Control\n          key={`control-${name}`}\n          name={name}\n          label={label}\n          description={description}\n          validationErrors={validationErrors}\n          actions={props.actions}\n          isVisible={isVisible}\n          hidden={isHidden}\n          {...restProps}\n        />\n      </StashFormDataContainer>\n    );\n  };\n\n  const sectionHasHadNoErrors = useResetOnChangeRef(\n    () => ({}),\n    form_data.viz_type,\n  );\n\n  const renderControlPanelSection = (\n    section: ExpandedControlPanelSectionConfig,\n  ) => {\n    const { controls } = props;\n    const { label, description, visibility } = section;\n\n    // Section label can be a ReactNode but in some places we want to\n    // have a string ID. Using forced type conversion for now,\n    // should probably add a `id` field to sections in the future.\n    const sectionId = String(label);\n    const isVisible = visibility?.call(this, props, controls) !== false;\n    const hasErrors = section.controlSetRows.some(rows =>\n      rows.some(item => {\n        const controlName =\n          typeof item === 'string'\n            ? item\n            : item && 'name' in item\n              ? item.name\n              : null;\n        return (\n          controlName &&\n          controlName in controls &&\n          controls[controlName].validationErrors &&\n          controls[controlName].validationErrors.length > 0\n        );\n      }),\n    );\n\n    if (!hasErrors) {\n      sectionHasHadNoErrors.current[sectionId] = true;\n    }\n\n    const errorColor = sectionHasHadNoErrors.current[sectionId]\n      ? colors.error.base\n      : colors.warning.base;\n\n    const PanelHeader = () => (\n      <span data-test=\"collapsible-control-panel-header\">\n        <span\n          css={(theme: SupersetTheme) => css`\n            font-size: ${theme.typography.sizes.m}px;\n            line-height: 1.3;\n            font-weight: ${theme.typography.weights.medium};\n          `}\n        >\n          {label}\n        </span>{' '}\n        {description && (\n          <Tooltip id={sectionId} title={description}>\n            <Icons.InfoCircleOutlined css={iconStyles} />\n          </Tooltip>\n        )}\n        {hasErrors && (\n          <Tooltip\n            id={`${kebabCase('validation-errors')}-tooltip`}\n            title={t('This section contains validation errors')}\n          >\n            <Icons.InfoCircleOutlined\n              css={css`\n                ${iconStyles};\n                color: ${errorColor};\n              `}\n            />\n          </Tooltip>\n        )}\n      </span>\n    );\n\n    return (\n      <>\n        <StashFormDataContainer\n          key={`sectionId-${sectionId}`}\n          shouldStash={!isVisible}\n          fieldNames={section.controlSetRows\n            .flat()\n            .map(item =>\n              item && typeof item === 'object'\n                ? 'name' in item\n                  ? item.name\n                  : ''\n                : String(item || ''),\n            )\n            .filter(Boolean)}\n        />\n        {isVisible && (\n          <Collapse.Panel\n            css={theme => css`\n              margin-bottom: 0;\n              box-shadow: none;\n\n              &:last-child {\n                padding-bottom: ${theme.gridUnit * 16}px;\n                border-bottom: 0;\n              }\n\n              .panel-body {\n                margin-left: ${theme.gridUnit * 4}px;\n                padding-bottom: 0;\n              }\n\n              span.label {\n                display: inline-block;\n              }\n              ${!section.label &&\n              `\n          .ant-collapse-header {\n            display: none;\n          }\n        `}\n            `}\n            header={<PanelHeader />}\n            key={sectionId}\n          >\n            {section.controlSetRows.map((controlSets, i) => {\n              const renderedControls = controlSets\n                .map(controlItem => {\n                  if (!controlItem) {\n                    // When the item is invalid\n                    return null;\n                  }\n                  if (isValidElement(controlItem)) {\n                    // When the item is a React element\n                    return controlItem;\n                  }\n                  if (\n                    isCustomControlItem(controlItem) &&\n                    controlItem.name !== 'datasource'\n                  ) {\n                    return renderControl(controlItem);\n                  }\n                  return null;\n                })\n                .filter(x => x !== null);\n              // don't show the row if it is empty\n              if (renderedControls.length === 0) {\n                return null;\n              }\n              return (\n                <ControlRow\n                  key={`controlsetrow-${i}`}\n                  controls={renderedControls}\n                />\n              );\n            })}\n          </Collapse.Panel>\n        )}\n      </>\n    );\n  };\n\n  const hasControlsTransferred =\n    ensureIsArray(props.exploreState.controlsTransferred).length > 0;\n\n  const DatasourceAlert = useCallback(\n    () =>\n      hasControlsTransferred ? (\n        <ExploreAlert\n          title={t('Keep control settings?')}\n          bodyText={t(\n            \"You've changed datasets. Any controls with data (columns, metrics) that match this new dataset have been retained.\",\n          )}\n          primaryButtonAction={handleContinueClick}\n          secondaryButtonAction={handleClearFormClick}\n          primaryButtonText={t('Continue')}\n          secondaryButtonText={t('Clear form')}\n          type=\"info\"\n        />\n      ) : (\n        <ExploreAlert\n          title={t('No form settings were maintained')}\n          bodyText={t(\n            'We were unable to carry over any controls when switching to this new dataset.',\n          )}\n          primaryButtonAction={handleContinueClick}\n          primaryButtonText={t('Continue')}\n          type=\"warning\"\n        />\n      ),\n    [handleClearFormClick, handleContinueClick, hasControlsTransferred],\n  );\n\n  const dataTabHasHadNoErrors = useResetOnChangeRef(\n    () => false,\n    form_data.viz_type,\n  );\n\n  const dataTabTitle = useMemo(() => {\n    if (!props.errorMessage) {\n      dataTabHasHadNoErrors.current = true;\n    }\n\n    const errorColor = dataTabHasHadNoErrors.current\n      ? colors.error.base\n      : colors.warning.base;\n\n    return (\n      <>\n        <span>{t('Data')}</span>\n        {props.errorMessage && (\n          <span\n            css={(theme: SupersetTheme) => css`\n              margin-left: ${theme.gridUnit * 2}px;\n            `}\n          >\n            {' '}\n            <Tooltip\n              id=\"query-error-tooltip\"\n              placement=\"right\"\n              title={props.errorMessage}\n            >\n              <Icons.ExclamationCircleOutlined\n                css={css`\n                  ${iconStyles};\n                  color: ${errorColor};\n                `}\n              />\n            </Tooltip>\n          </span>\n        )}\n      </>\n    );\n  }, [\n    colors.error.base,\n    colors.warning.base,\n    dataTabHasHadNoErrors,\n    props.errorMessage,\n  ]);\n\n  const controlPanelRegistry = getChartControlPanelRegistry();\n  if (!controlPanelRegistry.has(form_data.viz_type) && pluginContext.loading) {\n    return <Loading />;\n  }\n\n  const showCustomizeTab = customizeSections.length > 0;\n\n  return (\n    <Styles ref={containerRef}>\n      <ControlPanelsTabs\n        id=\"controlSections\"\n        data-test=\"control-tabs\"\n        fullWidth={showCustomizeTab}\n        allowOverflow={false}\n      >\n        <Tabs.TabPane key=\"query\" tab={dataTabTitle}>\n          <Collapse\n            defaultActiveKey={expandedQuerySections}\n            expandIconPosition=\"right\"\n            ghost\n          >\n            {showDatasourceAlert && <DatasourceAlert />}\n            {querySections.map(renderControlPanelSection)}\n          </Collapse>\n        </Tabs.TabPane>\n        {showCustomizeTab && (\n          <Tabs.TabPane key=\"display\" tab={t('Customize')}>\n            <Collapse\n              defaultActiveKey={expandedCustomizeSections}\n              expandIconPosition=\"right\"\n              ghost\n            >\n              {customizeSections.map(renderControlPanelSection)}\n            </Collapse>\n          </Tabs.TabPane>\n        )}\n      </ControlPanelsTabs>\n      <div css={actionButtonsContainerStyles}>\n        <RunQueryButton\n          onQuery={props.onQuery}\n          onStop={props.onStop}\n          errorMessage={props.errorMessage}\n          loading={props.chart.chartStatus === 'loading'}\n          isNewChart={!props.chart.queriesResponse}\n          canStopQuery={props.canStopQuery}\n          chartIsStale={props.chartIsStale}\n        />\n      </div>\n    </Styles>\n  );\n};\n\nexport default ControlPanelsContainer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}