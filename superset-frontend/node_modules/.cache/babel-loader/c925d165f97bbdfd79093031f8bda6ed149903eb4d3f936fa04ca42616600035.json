{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n/**\n * Get the layer configuration object from the control panel.\n *\n * @param controlPanel The control panel\n * @returns The layer configuration object or undefined if not found\n */import { jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nexport const getLayerConfig = (controlPanel) => {\n  let layerConfig;\n  controlPanel.controlPanelSections.forEach((section) => {\n    if (!section) {\n      return;\n    }\n    const { controlSetRows } = section;\n    controlSetRows.forEach((row) => {\n      const configObject = row[0];\n      if (configObject && configObject.name === 'layer_configs') {\n        layerConfig = configObject;\n      }\n    });\n  });\n  return layerConfig;\n};\n/**\n * Mutates response of chart request into select options.\n *\n * If a currently selected value is not included in the response,\n * it will be added explicitly, in order to prevent antd from creating\n * a non-user-friendly select option.\n *\n * @param response Response json from resolved http request.\n * @param value The currently selected value of the select input.\n * @returns The list of options for the select input.\n */\nexport const selectedChartMutator = (response, value) => {\n  if (!(response != null && response.result)) {\n    if (value && typeof value === 'string') {\n      return [\n      {\n        label: JSON.parse(value).slice_name,\n        value\n      }];\n\n    }\n    return [];\n  }\n  const data = [];\n  if (value && typeof value === 'string') {\n    const parsedValue = JSON.parse(value);\n    let itemFound = false;\n    response.result.forEach((config) => {\n      const configString = JSON.stringify(config);\n      const sameId = config.id === parsedValue.id;\n      const isUpdated = configString !== value;\n      const label = config.slice_name;\n      if (sameId) {\n        itemFound = true;\n      }\n      if (!sameId || !isUpdated) {\n        data.push({\n          value: configString,\n          label\n        });\n      } else\n      {\n        data.push({\n          value: configString,\n          label: _jsxs(\"span\", { children: [\n            _jsxs(\"i\", { children: [\"(\", t('updated'), \") \"] }),\n            label] }\n          )\n        });\n        data.push({\n          value,\n          label\n        });\n      }\n    });\n    if (!itemFound) {\n      data.push({\n        value,\n        label: parsedValue.slice_name\n      });\n    }\n  } else\n  {\n    response.result.forEach((config) => {\n      const configString = JSON.stringify(config);\n      const label = config.slice_name;\n      data.push({\n        value: configString,\n        label\n      });\n    });\n  }\n  return data;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getLayerConfig, \"getLayerConfig\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/controlPanelUtil.tsx\");reactHotLoader.register(selectedChartMutator, \"selectedChartMutator\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/controlPanelUtil.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["t","jsxs","_jsxs","getLayerConfig","controlPanel","layerConfig","controlPanelSections","forEach","section","controlSetRows","row","configObject","name","selectedChartMutator","response","value","result","label","JSON","parse","slice_name","data","parsedValue","itemFound","config","configString","stringify","sameId","id","isUpdated","push","children","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/util/controlPanelUtil.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport { SelectValue } from 'antd/lib/select';\nimport { ControlPanelConfig } from '@superset-ui/chart-controls';\n\n/**\n * Get the layer configuration object from the control panel.\n *\n * @param controlPanel The control panel\n * @returns The layer configuration object or undefined if not found\n */\nexport const getLayerConfig = (controlPanel: ControlPanelConfig) => {\n  let layerConfig: any;\n  controlPanel.controlPanelSections.forEach(section => {\n    if (!section) {\n      return;\n    }\n    const { controlSetRows } = section;\n    controlSetRows.forEach((row: any[]) => {\n      const configObject = row[0] as any;\n      if (configObject && configObject.name === 'layer_configs') {\n        layerConfig = configObject;\n      }\n    });\n  });\n\n  return layerConfig;\n};\n\n/**\n * Mutates response of chart request into select options.\n *\n * If a currently selected value is not included in the response,\n * it will be added explicitly, in order to prevent antd from creating\n * a non-user-friendly select option.\n *\n * @param response Response json from resolved http request.\n * @param value The currently selected value of the select input.\n * @returns The list of options for the select input.\n */\nexport const selectedChartMutator = (\n  response: Record<string, any>,\n  value: SelectValue | undefined,\n) => {\n  if (!response?.result) {\n    if (value && typeof value === 'string') {\n      return [\n        {\n          label: JSON.parse(value).slice_name,\n          value,\n        },\n      ];\n    }\n    return [];\n  }\n\n  const data: any[] = [];\n  if (value && typeof value === 'string') {\n    const parsedValue = JSON.parse(value);\n    let itemFound = false;\n    response.result.forEach((config: any) => {\n      const configString = JSON.stringify(config);\n      const sameId = config.id === parsedValue.id;\n      const isUpdated = configString !== value;\n      const label = config.slice_name;\n\n      if (sameId) {\n        itemFound = true;\n      }\n      if (!sameId || !isUpdated) {\n        data.push({\n          value: configString,\n          label,\n        });\n      } else {\n        data.push({\n          value: configString,\n          label: (\n            <span>\n              <i>({t('updated')}) </i>\n              {label}\n            </span>\n          ),\n        });\n        data.push({\n          value,\n          label,\n        });\n      }\n    });\n\n    if (!itemFound) {\n      data.push({\n        value,\n        label: parsedValue.slice_name,\n      });\n    }\n  } else {\n    response.result.forEach((config: any) => {\n      const configString = JSON.stringify(config);\n      const label = config.slice_name;\n\n      data.push({\n        value: configString,\n        label,\n      });\n    });\n  }\n\n  return data;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}