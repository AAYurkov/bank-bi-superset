{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { util } from 'echarts';\nimport { isZoomConfigsFixed, isZoomConfigsLinear } from './typeguards';\n/**\n * Compute the position for a drag graphic.\n *\n * @param param0 configuration\n * @param param0.chart The eChart instance.\n * @param param0.x The x value of the data item.\n * @param param0.y The y value of the data item.\n * @param param0.barWidth The width of the bar.\n * @param param0.add True, if barWidth should be added. False, if barWidth should be subtracted.\n * @returns\n */\nexport const getDragGraphicPosition = ({ chart, x, y, barWidth, add }) => {\n  const valuePosition = chart.convertToPixel('grid', [x, y]);\n  const xPos = Math.round(valuePosition[0]);\n  let yPos = valuePosition[1] - barWidth / 2;\n  if (add) {\n    yPos = valuePosition[1] + barWidth / 2;\n  }\n  return [xPos, yPos];\n};\n/**\n * Create a single drag graphic with drag handler.\n * @param param0 configuration\n * @param param0.dataItem The data item to create the graphic for.\n * @param param0.dataItemIndex The index of the height/width value in the item.\n * @param param0.dataIndex The index of the dataItem in the data.\n * @param param0.onDrag Callback for dragging the bar.\n * @param param0.barWidth The width of the bar.\n * @param param0.chart The eChart instance.\n * @param param0.add True, if barWidth should be added for positioning. False, if barWidth should be subtracted.\n * @returns eChart Option for a drag graphic.\n */\nexport const createDragGraphicOption = ({ dataItem, dataItemIndex, dataIndex, onDrag, barWidth, chart, add }) => {\n  const position = getDragGraphicPosition({\n    chart,\n    x: dataItem[dataItemIndex],\n    y: dataItem[2],\n    barWidth,\n    add\n  });\n  return {\n    type: 'circle',\n    shape: {\n      // The radius of the circle.\n      r: barWidth / 4\n    },\n    x: position[0],\n    y: position[1],\n    invisible: false,\n    style: {\n      // eslint-disable-next-line theme-colors/no-literal-colors\n      fill: '#ffffff',\n      // eslint-disable-next-line theme-colors/no-literal-colors\n      stroke: '#aaa'\n    },\n    cursor: 'ew-resize',\n    draggable: 'horizontal',\n    // Give a big z value, which makes the circle cover the symbol\n    // in bar series.\n    z: 100,\n    // Util method `util.curry` (from echarts) is used here to generate a\n    // new function the same as `onDrag`, except that the\n    // first parameter is fixed to be the `dataIndex` here.\n    ondrag: util.curry(onDrag, dataIndex)\n  };\n};\n/**\n * Create a drag graphic with dragHandler for each bar.\n *\n * @param param0 configuration\n * @param param0.data The eChart data.\n * @param param0.onWidthDrag Callback for dragging width bars.\n * @param param0.onHeightDrag Callback for dragging height bars.\n * @param param0.barWidth The width of a single bar.\n * @param param0.chart The eChart instance.\n * @returns List of eChart options for the drag graphics.\n */\nexport const createDragGraphicOptions = ({ data, onWidthDrag, onHeightDrag, barWidth, chart }) => {\n  const graphics = [];\n  data.forEach((dataItem, dataIndex) => {\n    const widthGraphic = createDragGraphicOption({\n      dataItem,\n      dataIndex,\n      barWidth,\n      chart,\n      dataItemIndex: 0,\n      onDrag: onWidthDrag,\n      add: false\n    });\n    graphics.push(widthGraphic);\n    const heightGraphic = createDragGraphicOption({\n      dataItem,\n      dataIndex,\n      barWidth,\n      chart,\n      dataItemIndex: 1,\n      onDrag: onHeightDrag,\n      add: true\n    });\n    graphics.push(heightGraphic);\n  });\n  return graphics;\n};\n/**\n * Convert ZoomConfigs to eChart data.\n *\n * @param zoomConfigs The config to convert.\n * @returns eChart data representing the zoom configs.\n */\nexport const zoomConfigsToData = (zoomConfigs) => Object.keys(zoomConfigs).\nmap((k) => parseInt(k, 10)).\nmap((k) => [zoomConfigs[k].width, zoomConfigs[k].height, k]);\n/**\n * Convert eChart data to ZoomConfigs.\n *\n * @param data The eChart data to convert.\n * @returns ZoomConfigs representing the eChart data.\n */\nexport const dataToZoomConfigs = (data) => data.reduce((prev, cur) => {\n  // eslint-disable-next-line no-param-reassign\n  prev[cur[2]] = { width: cur[0], height: cur[1] };\n  return prev;\n}, {});\nexport const MAX_ZOOM_LEVEL = 28;\nexport const MIN_ZOOM_LEVEL = 0;\n/**\n * Compute values for all zoom levels with fixed shape.\n *\n * @param zoomConfigsFixed The config to base the computation upon.\n * @returns The computed values for each zoom level.\n */\nconst computeFixedConfigValues = (zoomConfigsFixed) => {\n  const values = {};\n  for (let i = MIN_ZOOM_LEVEL; i <= MAX_ZOOM_LEVEL; i += 1) {\n    const width = Math.round(zoomConfigsFixed.configs.width);\n    const height = Math.round(zoomConfigsFixed.configs.height);\n    values[i] = {\n      width: width > 0 ? width : 0,\n      height: height > 0 ? height : 0\n    };\n  }\n  return values;\n};\n/**\n * Compute values for all zoom levels with linear shape.\n *\n * @param zoomConfigsLinear The config to base the computation upon.\n * @returns The computed values for each zoom level.\n */\nconst computeLinearConfigValues = (zoomConfigsLinear) => {\n  const values = {};\n  for (let i = MIN_ZOOM_LEVEL; i <= MAX_ZOOM_LEVEL; i += 1) {\n    const aspectRatio = zoomConfigsLinear.configs.height / zoomConfigsLinear.configs.width;\n    const width = Math.round(zoomConfigsLinear.configs.width -\n    (zoomConfigsLinear.configs.zoom - i) * zoomConfigsLinear.configs.slope);\n    const height = Math.round(aspectRatio * width);\n    values[i] = {\n      width: width > 0 ? width : 0,\n      height: height > 0 ? height : 0\n    };\n  }\n  return values;\n};\n/**\n * Compute values for all zoom levels with exponential shape.\n *\n * @param zoomConfigsExp The config to base the computation upon.\n * @returns The computed values for each zoom level.\n */\nconst computeExpConfigValues = (zoomConfigsExp) => {\n  const values = {};\n  const x = Math.pow(zoomConfigsExp.configs.width, 1 / zoomConfigsExp.configs.exponent);\n  for (let i = MIN_ZOOM_LEVEL; i <= MAX_ZOOM_LEVEL; i += 1) {\n    const aspectRatio = zoomConfigsExp.configs.height / zoomConfigsExp.configs.width;\n    const width = Math.round(Math.pow(x - (zoomConfigsExp.configs.zoom - i), zoomConfigsExp.configs.exponent));\n    const height = Math.round(aspectRatio * width);\n    values[i] = {\n      width: width > 0 ? width : 0,\n      height: height > 0 ? height : 0\n    };\n  }\n  return values;\n};\n/**\n * Compute values for all zoom levels.\n *\n * @param zoomConfigs The config to base the computation upon.\n * @returns The computed values for each zoom level.\n */\nexport const computeConfigValues = (zoomConfigs) => {\n  if (isZoomConfigsFixed(zoomConfigs)) {\n    return computeFixedConfigValues(zoomConfigs);\n  }\n  if (isZoomConfigsLinear(zoomConfigs)) {\n    return computeLinearConfigValues(zoomConfigs);\n  }\n  return computeExpConfigValues(zoomConfigs);\n};\n/**\n * Convert ZoomConfigs to ZoomConfigsFixed.\n *\n * @param baseConfig The base config.\n * @returns The converted config.\n */\nexport const toFixedConfig = (baseConfig) => {\n  const zoomConfigFixed = {\n    type: 'FIXED',\n    configs: {\n      zoom: baseConfig.zoom,\n      width: baseConfig.width,\n      height: baseConfig.height\n    },\n    values: {}\n  };\n  zoomConfigFixed.values = computeFixedConfigValues(zoomConfigFixed);\n  return zoomConfigFixed;\n};\n/**\n * Convert ZoomConfigs to ZoomConfigsLinear.\n *\n * @param baseConfig The base config.\n * @returns The converted config.\n */\nexport const toLinearConfig = (baseConfig) => {\n  const zoomConfigsLinear = {\n    type: 'LINEAR',\n    configs: {\n      zoom: baseConfig.zoom,\n      width: baseConfig.width,\n      height: baseConfig.height,\n      slope: baseConfig.slope\n    },\n    values: {}\n  };\n  zoomConfigsLinear.values = computeLinearConfigValues(zoomConfigsLinear);\n  return zoomConfigsLinear;\n};\n/**\n * Convert ZoomConfigs to ZoomConfigsExp.\n *\n * @param baseConfig The base config.\n * @returns The converted config.\n */\nexport const toExpConfig = (baseConfig) => {\n  const zoomConfigExp = {\n    type: 'EXP',\n    configs: {\n      zoom: baseConfig.zoom,\n      width: baseConfig.width,\n      height: baseConfig.height,\n      exponent: baseConfig.exponent\n    },\n    values: {}\n  };\n  zoomConfigExp.values = computeExpConfigValues(zoomConfigExp);\n  return zoomConfigExp;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getDragGraphicPosition, \"getDragGraphicPosition\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");reactHotLoader.register(createDragGraphicOption, \"createDragGraphicOption\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");reactHotLoader.register(createDragGraphicOptions, \"createDragGraphicOptions\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");reactHotLoader.register(zoomConfigsToData, \"zoomConfigsToData\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");reactHotLoader.register(dataToZoomConfigs, \"dataToZoomConfigs\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");reactHotLoader.register(MAX_ZOOM_LEVEL, \"MAX_ZOOM_LEVEL\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");reactHotLoader.register(MIN_ZOOM_LEVEL, \"MIN_ZOOM_LEVEL\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");reactHotLoader.register(computeFixedConfigValues, \"computeFixedConfigValues\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");reactHotLoader.register(computeLinearConfigValues, \"computeLinearConfigValues\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");reactHotLoader.register(computeExpConfigValues, \"computeExpConfigValues\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");reactHotLoader.register(computeConfigValues, \"computeConfigValues\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");reactHotLoader.register(toFixedConfig, \"toFixedConfig\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");reactHotLoader.register(toLinearConfig, \"toLinearConfig\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");reactHotLoader.register(toExpConfig, \"toExpConfig\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["util","isZoomConfigsFixed","isZoomConfigsLinear","getDragGraphicPosition","chart","x","y","barWidth","add","valuePosition","convertToPixel","xPos","Math","round","yPos","createDragGraphicOption","dataItem","dataItemIndex","dataIndex","onDrag","position","type","shape","r","invisible","style","fill","stroke","cursor","draggable","z","ondrag","curry","createDragGraphicOptions","data","onWidthDrag","onHeightDrag","graphics","forEach","widthGraphic","push","heightGraphic","zoomConfigsToData","zoomConfigs","Object","keys","map","k","parseInt","width","height","dataToZoomConfigs","reduce","prev","cur","MAX_ZOOM_LEVEL","MIN_ZOOM_LEVEL","computeFixedConfigValues","zoomConfigsFixed","values","i","configs","computeLinearConfigValues","zoomConfigsLinear","aspectRatio","zoom","slope","computeExpConfigValues","zoomConfigsExp","pow","exponent","computeConfigValues","toFixedConfig","baseConfig","zoomConfigFixed","toLinearConfig","toExpConfig","zoomConfigExp","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ZoomConfigControl/zoomUtil.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { util } from 'echarts';\nimport { isZoomConfigsFixed, isZoomConfigsLinear } from './typeguards';\nimport {\n  CreateDragGraphicOption,\n  CreateDragGraphicOptions,\n  GetDragGraphicPositionOptions,\n  ZoomConfigs,\n  ZoomConfigsFixed,\n  ZoomConfigsLinear,\n  ZoomConfigsExp,\n} from './types';\n\n/**\n * Compute the position for a drag graphic.\n *\n * @param param0 configuration\n * @param param0.chart The eChart instance.\n * @param param0.x The x value of the data item.\n * @param param0.y The y value of the data item.\n * @param param0.barWidth The width of the bar.\n * @param param0.add True, if barWidth should be added. False, if barWidth should be subtracted.\n * @returns\n */\nexport const getDragGraphicPosition = ({\n  chart,\n  x,\n  y,\n  barWidth,\n  add,\n}: GetDragGraphicPositionOptions) => {\n  const valuePosition = chart.convertToPixel('grid', [x, y]);\n  const xPos = Math.round(valuePosition[0]);\n  let yPos = valuePosition[1] - barWidth / 2;\n  if (add) {\n    yPos = valuePosition[1] + barWidth / 2;\n  }\n  return [xPos, yPos];\n};\n\n/**\n * Create a single drag graphic with drag handler.\n * @param param0 configuration\n * @param param0.dataItem The data item to create the graphic for.\n * @param param0.dataItemIndex The index of the height/width value in the item.\n * @param param0.dataIndex The index of the dataItem in the data.\n * @param param0.onDrag Callback for dragging the bar.\n * @param param0.barWidth The width of the bar.\n * @param param0.chart The eChart instance.\n * @param param0.add True, if barWidth should be added for positioning. False, if barWidth should be subtracted.\n * @returns eChart Option for a drag graphic.\n */\nexport const createDragGraphicOption = ({\n  dataItem,\n  dataItemIndex,\n  dataIndex,\n  onDrag,\n  barWidth,\n  chart,\n  add,\n}: CreateDragGraphicOption) => {\n  const position = getDragGraphicPosition({\n    chart,\n    x: dataItem[dataItemIndex],\n    y: dataItem[2],\n    barWidth,\n    add,\n  });\n  return {\n    type: 'circle',\n\n    shape: {\n      // The radius of the circle.\n      r: barWidth / 4,\n    },\n    x: position[0],\n    y: position[1],\n    invisible: false,\n    style: {\n      // eslint-disable-next-line theme-colors/no-literal-colors\n      fill: '#ffffff',\n      // eslint-disable-next-line theme-colors/no-literal-colors\n      stroke: '#aaa',\n    },\n    cursor: 'ew-resize',\n    draggable: 'horizontal',\n    // Give a big z value, which makes the circle cover the symbol\n    // in bar series.\n    z: 100,\n    // Util method `util.curry` (from echarts) is used here to generate a\n    // new function the same as `onDrag`, except that the\n    // first parameter is fixed to be the `dataIndex` here.\n    ondrag: util.curry(onDrag, dataIndex),\n  };\n};\n\n/**\n * Create a drag graphic with dragHandler for each bar.\n *\n * @param param0 configuration\n * @param param0.data The eChart data.\n * @param param0.onWidthDrag Callback for dragging width bars.\n * @param param0.onHeightDrag Callback for dragging height bars.\n * @param param0.barWidth The width of a single bar.\n * @param param0.chart The eChart instance.\n * @returns List of eChart options for the drag graphics.\n */\nexport const createDragGraphicOptions = ({\n  data,\n  onWidthDrag,\n  onHeightDrag,\n  barWidth,\n  chart,\n}: CreateDragGraphicOptions) => {\n  const graphics: any[] = [];\n  data.forEach((dataItem: number[], dataIndex: number) => {\n    const widthGraphic = createDragGraphicOption({\n      dataItem,\n      dataIndex,\n      barWidth,\n      chart,\n      dataItemIndex: 0,\n      onDrag: onWidthDrag,\n      add: false,\n    });\n    graphics.push(widthGraphic);\n    const heightGraphic = createDragGraphicOption({\n      dataItem,\n      dataIndex,\n      barWidth,\n      chart,\n      dataItemIndex: 1,\n      onDrag: onHeightDrag,\n      add: true,\n    });\n    graphics.push(heightGraphic);\n  });\n  return graphics;\n};\n\n/**\n * Convert ZoomConfigs to eChart data.\n *\n * @param zoomConfigs The config to convert.\n * @returns eChart data representing the zoom configs.\n */\nexport const zoomConfigsToData = (zoomConfigs: ZoomConfigs['values']) =>\n  Object.keys(zoomConfigs)\n    .map((k: string) => parseInt(k, 10))\n    .map((k: number) => [zoomConfigs[k].width, zoomConfigs[k].height, k]);\n\n/**\n * Convert eChart data to ZoomConfigs.\n *\n * @param data The eChart data to convert.\n * @returns ZoomConfigs representing the eChart data.\n */\nexport const dataToZoomConfigs = (data: number[][]): ZoomConfigs['values'] =>\n  data.reduce((prev: ZoomConfigs['values'], cur: number[]) => {\n    // eslint-disable-next-line no-param-reassign\n    prev[cur[2]] = { width: cur[0], height: cur[1] };\n    return prev;\n  }, {});\n\nexport const MAX_ZOOM_LEVEL = 28;\nexport const MIN_ZOOM_LEVEL = 0;\n\n/**\n * Compute values for all zoom levels with fixed shape.\n *\n * @param zoomConfigsFixed The config to base the computation upon.\n * @returns The computed values for each zoom level.\n */\nconst computeFixedConfigValues = (zoomConfigsFixed: ZoomConfigsFixed) => {\n  const values: ZoomConfigsFixed['values'] = {};\n\n  for (let i = MIN_ZOOM_LEVEL; i <= MAX_ZOOM_LEVEL; i += 1) {\n    const width = Math.round(zoomConfigsFixed.configs.width);\n    const height = Math.round(zoomConfigsFixed.configs.height);\n    values[i] = {\n      width: width > 0 ? width : 0,\n      height: height > 0 ? height : 0,\n    };\n  }\n\n  return values;\n};\n\n/**\n * Compute values for all zoom levels with linear shape.\n *\n * @param zoomConfigsLinear The config to base the computation upon.\n * @returns The computed values for each zoom level.\n */\nconst computeLinearConfigValues = (zoomConfigsLinear: ZoomConfigsLinear) => {\n  const values: ZoomConfigsLinear['values'] = {};\n  for (let i = MIN_ZOOM_LEVEL; i <= MAX_ZOOM_LEVEL; i += 1) {\n    const aspectRatio =\n      zoomConfigsLinear.configs.height / zoomConfigsLinear.configs.width;\n    const width = Math.round(\n      zoomConfigsLinear.configs.width -\n        (zoomConfigsLinear.configs.zoom - i) * zoomConfigsLinear.configs.slope,\n    );\n    const height = Math.round(aspectRatio * width);\n    values[i] = {\n      width: width > 0 ? width : 0,\n      height: height > 0 ? height : 0,\n    };\n  }\n  return values;\n};\n\n/**\n * Compute values for all zoom levels with exponential shape.\n *\n * @param zoomConfigsExp The config to base the computation upon.\n * @returns The computed values for each zoom level.\n */\nconst computeExpConfigValues = (zoomConfigsExp: ZoomConfigsExp) => {\n  const values: ZoomConfigsExp['values'] = {};\n  const x = Math.pow(\n    zoomConfigsExp.configs.width,\n    1 / zoomConfigsExp.configs.exponent,\n  );\n  for (let i = MIN_ZOOM_LEVEL; i <= MAX_ZOOM_LEVEL; i += 1) {\n    const aspectRatio =\n      zoomConfigsExp.configs.height / zoomConfigsExp.configs.width;\n    const width = Math.round(\n      Math.pow(\n        x - (zoomConfigsExp.configs.zoom - i),\n        zoomConfigsExp.configs.exponent,\n      ),\n    );\n    const height = Math.round(aspectRatio * width);\n    values[i] = {\n      width: width > 0 ? width : 0,\n      height: height > 0 ? height : 0,\n    };\n  }\n  return values;\n};\n\n/**\n * Compute values for all zoom levels.\n *\n * @param zoomConfigs The config to base the computation upon.\n * @returns The computed values for each zoom level.\n */\nexport const computeConfigValues = (zoomConfigs: ZoomConfigs) => {\n  if (isZoomConfigsFixed(zoomConfigs)) {\n    return computeFixedConfigValues(zoomConfigs);\n  }\n  if (isZoomConfigsLinear(zoomConfigs)) {\n    return computeLinearConfigValues(zoomConfigs);\n  }\n  return computeExpConfigValues(zoomConfigs);\n};\n\n/**\n * Convert ZoomConfigs to ZoomConfigsFixed.\n *\n * @param baseConfig The base config.\n * @returns The converted config.\n */\nexport const toFixedConfig = (\n  baseConfig: ZoomConfigsFixed['configs'],\n): ZoomConfigsFixed => {\n  const zoomConfigFixed: ZoomConfigsFixed = {\n    type: 'FIXED',\n    configs: {\n      zoom: baseConfig.zoom,\n      width: baseConfig.width,\n      height: baseConfig.height,\n    },\n    values: {},\n  };\n\n  zoomConfigFixed.values = computeFixedConfigValues(zoomConfigFixed);\n  return zoomConfigFixed;\n};\n\n/**\n * Convert ZoomConfigs to ZoomConfigsLinear.\n *\n * @param baseConfig The base config.\n * @returns The converted config.\n */\nexport const toLinearConfig = (\n  baseConfig: ZoomConfigsFixed['configs'],\n): ZoomConfigsLinear => {\n  const zoomConfigsLinear: ZoomConfigsLinear = {\n    type: 'LINEAR',\n    configs: {\n      zoom: baseConfig.zoom,\n      width: baseConfig.width,\n      height: baseConfig.height,\n      slope: baseConfig.slope,\n    },\n    values: {},\n  } as ZoomConfigsLinear;\n\n  zoomConfigsLinear.values = computeLinearConfigValues(zoomConfigsLinear);\n\n  return zoomConfigsLinear;\n};\n\n/**\n * Convert ZoomConfigs to ZoomConfigsExp.\n *\n * @param baseConfig The base config.\n * @returns The converted config.\n */\nexport const toExpConfig = (\n  baseConfig: ZoomConfigsExp['configs'],\n): ZoomConfigsExp => {\n  const zoomConfigExp: ZoomConfigsExp = {\n    type: 'EXP',\n    configs: {\n      zoom: baseConfig.zoom,\n      width: baseConfig.width,\n      height: baseConfig.height,\n      exponent: baseConfig.exponent,\n    },\n    values: {},\n  } as ZoomConfigsExp;\n\n  zoomConfigExp.values = computeExpConfigValues(zoomConfigExp);\n\n  return zoomConfigExp;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}