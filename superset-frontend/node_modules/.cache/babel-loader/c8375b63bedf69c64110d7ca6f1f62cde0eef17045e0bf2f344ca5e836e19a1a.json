{"ast":null,"code":"import _mapKeys from \"lodash/mapKeys\";import _invert from \"lodash/invert\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { nanoid } from 'nanoid';\nimport rison from 'rison';\nimport {\n  FeatureFlag,\n  SupersetClient,\n  t,\n  isFeatureEnabled,\n  COMMON_ERR_MESSAGES,\n  getClientErrorObject } from\n'@superset-ui/core';\n\n\nimport { now } from 'src/utils/dates';\nimport {\n  addDangerToast as addDangerToastAction,\n  addInfoToast as addInfoToastAction,\n  addSuccessToast as addSuccessToastAction,\n  addWarningToast as addWarningToastAction } from\n'src/components/MessageToasts/actions';\nimport { LOG_ACTIONS_SQLLAB_FETCH_FAILED_QUERY } from 'src/logger/LogUtils';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport { logEvent } from 'src/logger/actions';\nimport { newQueryTabName } from '../utils/newQueryTabName';\nimport getInitialState from '../reducers/getInitialState';\nimport { rehydratePersistedState } from '../utils/reduxStateToLocalStorageHelper';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_QUERY_EDITOR = 'ADD_QUERY_EDITOR';\nexport const UPDATE_QUERY_EDITOR = 'UPDATE_QUERY_EDITOR';\nexport const QUERY_EDITOR_SAVED = 'QUERY_EDITOR_SAVED';\nexport const CLONE_QUERY_TO_NEW_TAB = 'CLONE_QUERY_TO_NEW_TAB';\nexport const REMOVE_QUERY_EDITOR = 'REMOVE_QUERY_EDITOR';\nexport const MERGE_TABLE = 'MERGE_TABLE';\nexport const REMOVE_TABLES = 'REMOVE_TABLES';\nexport const END_QUERY = 'END_QUERY';\nexport const REMOVE_QUERY = 'REMOVE_QUERY';\nexport const EXPAND_TABLE = 'EXPAND_TABLE';\nexport const COLLAPSE_TABLE = 'COLLAPSE_TABLE';\nexport const QUERY_EDITOR_SETDB = 'QUERY_EDITOR_SETDB';\nexport const QUERY_EDITOR_SET_CATALOG = 'QUERY_EDITOR_SET_CATALOG';\nexport const QUERY_EDITOR_SET_SCHEMA = 'QUERY_EDITOR_SET_SCHEMA';\nexport const QUERY_EDITOR_SET_TITLE = 'QUERY_EDITOR_SET_TITLE';\nexport const QUERY_EDITOR_SET_AUTORUN = 'QUERY_EDITOR_SET_AUTORUN';\nexport const QUERY_EDITOR_SET_SQL = 'QUERY_EDITOR_SET_SQL';\nexport const QUERY_EDITOR_SET_CURSOR_POSITION =\n'QUERY_EDITOR_SET_CURSOR_POSITION';\nexport const QUERY_EDITOR_SET_QUERY_LIMIT = 'QUERY_EDITOR_SET_QUERY_LIMIT';\nexport const QUERY_EDITOR_SET_TEMPLATE_PARAMS =\n'QUERY_EDITOR_SET_TEMPLATE_PARAMS';\nexport const QUERY_EDITOR_SET_SELECTED_TEXT = 'QUERY_EDITOR_SET_SELECTED_TEXT';\nexport const QUERY_EDITOR_SET_FUNCTION_NAMES =\n'QUERY_EDITOR_SET_FUNCTION_NAMES';\nexport const QUERY_EDITOR_PERSIST_HEIGHT = 'QUERY_EDITOR_PERSIST_HEIGHT';\nexport const QUERY_EDITOR_TOGGLE_LEFT_BAR = 'QUERY_EDITOR_TOGGLE_LEFT_BAR';\nexport const MIGRATE_QUERY_EDITOR = 'MIGRATE_QUERY_EDITOR';\nexport const MIGRATE_TAB_HISTORY = 'MIGRATE_TAB_HISTORY';\nexport const MIGRATE_TABLE = 'MIGRATE_TABLE';\nexport const MIGRATE_QUERY = 'MIGRATE_QUERY';\n\nexport const SET_DATABASES = 'SET_DATABASES';\nexport const SET_ACTIVE_QUERY_EDITOR = 'SET_ACTIVE_QUERY_EDITOR';\nexport const LOAD_QUERY_EDITOR = 'LOAD_QUERY_EDITOR';\nexport const SET_TABLES = 'SET_TABLES';\nexport const SET_ACTIVE_SOUTHPANE_TAB = 'SET_ACTIVE_SOUTHPANE_TAB';\nexport const REFRESH_QUERIES = 'REFRESH_QUERIES';\nexport const SET_USER_OFFLINE = 'SET_USER_OFFLINE';\nexport const RUN_QUERY = 'RUN_QUERY';\nexport const START_QUERY = 'START_QUERY';\nexport const STOP_QUERY = 'STOP_QUERY';\nexport const REQUEST_QUERY_RESULTS = 'REQUEST_QUERY_RESULTS';\nexport const QUERY_SUCCESS = 'QUERY_SUCCESS';\nexport const QUERY_FAILED = 'QUERY_FAILED';\nexport const CLEAR_INACTIVE_QUERIES = 'CLEAR_INACTIVE_QUERIES';\nexport const CLEAR_QUERY_RESULTS = 'CLEAR_QUERY_RESULTS';\nexport const REMOVE_DATA_PREVIEW = 'REMOVE_DATA_PREVIEW';\nexport const CHANGE_DATA_PREVIEW_ID = 'CHANGE_DATA_PREVIEW_ID';\n\nexport const COST_ESTIMATE_STARTED = 'COST_ESTIMATE_STARTED';\nexport const COST_ESTIMATE_RETURNED = 'COST_ESTIMATE_RETURNED';\nexport const COST_ESTIMATE_FAILED = 'COST_ESTIMATE_FAILED';\n\nexport const CREATE_DATASOURCE_STARTED = 'CREATE_DATASOURCE_STARTED';\nexport const CREATE_DATASOURCE_SUCCESS = 'CREATE_DATASOURCE_SUCCESS';\nexport const CREATE_DATASOURCE_FAILED = 'CREATE_DATASOURCE_FAILED';\n\nexport const SET_EDITOR_TAB_LAST_UPDATE = 'SET_EDITOR_TAB_LAST_UPDATE';\nexport const SET_LAST_UPDATED_ACTIVE_TAB = 'SET_LAST_UPDATED_ACTIVE_TAB';\nexport const CLEAR_DESTROYED_QUERY_EDITOR = 'CLEAR_DESTROYED_QUERY_EDITOR';\n\nexport const addInfoToast = addInfoToastAction;\nexport const addSuccessToast = addSuccessToastAction;\nexport const addDangerToast = addDangerToastAction;\nexport const addWarningToast = addWarningToastAction;\n\nexport const CtasEnum = {\n  Table: 'TABLE',\n  View: 'VIEW'\n};\nconst ERR_MSG_CANT_LOAD_QUERY = t(\"The query couldn't be loaded\");\n\n// a map of SavedQuery field names to the different names used client-side,\n// because for now making the names consistent is too complicated\n// so it might as well only happen in one place\nconst queryClientMapping = {\n  id: 'remoteId',\n  db_id: 'dbId',\n  label: 'name',\n  template_parameters: 'templateParams'\n};\nconst queryServerMapping = _invert(queryClientMapping);\n\n// uses a mapping like those above to convert object key names to another style\nconst fieldConverter = (mapping) => (obj) =>\n_mapKeys(obj, (value, key) => key in mapping ? mapping[key] : key);\n\nexport const convertQueryToServer = fieldConverter(queryServerMapping);\nexport const convertQueryToClient = fieldConverter(queryClientMapping);\n\nexport function getUpToDateQuery(rootState, queryEditor, key) {\n  const {\n    sqlLab: { unsavedQueryEditor, queryEditors }\n  } = rootState;\n  const id = key != null ? key : queryEditor.id;\n  return {\n    id,\n    ...queryEditors.find((qe) => qe.id === id),\n    ...(id === unsavedQueryEditor.id && unsavedQueryEditor)\n  };\n}\n\nexport function resetState(data) {\n  return (dispatch, getState) => {\n    const { common } = getState();\n    const initialState = getInitialState({\n      ...getBootstrapData(),\n      common,\n      ...data\n    });\n\n    dispatch({\n      type: RESET_STATE,\n      sqlLabInitialState: initialState.sqlLab\n    });\n    rehydratePersistedState(dispatch, initialState);\n  };\n}\n\nexport function updateQueryEditor(alterations) {\n  return { type: UPDATE_QUERY_EDITOR, alterations };\n}\n\nexport function setEditorTabLastUpdate(timestamp) {\n  return { type: SET_EDITOR_TAB_LAST_UPDATE, timestamp };\n}\n\nexport function scheduleQuery(query) {\n  return (dispatch) =>\n  SupersetClient.post({\n    endpoint: '/api/v1/saved_query/',\n    jsonPayload: query,\n    stringify: false\n  }).\n  then(() =>\n  dispatch(\n    addSuccessToast(\n      t(\n        'Your query has been scheduled. To see details of your query, navigate to Saved queries'\n      )\n    )\n  )\n  ).\n  catch(() =>\n  dispatch(addDangerToast(t('Your query could not be scheduled')))\n  );\n}\n\nexport function estimateQueryCost(queryEditor) {\n  return (dispatch, getState) => {\n    const { dbId, catalog, schema, sql, selectedText, templateParams } =\n    getUpToDateQuery(getState(), queryEditor);\n    const requestSql = selectedText || sql;\n\n    const postPayload = {\n      database_id: dbId,\n      catalog,\n      schema,\n      sql: requestSql,\n      template_params: JSON.parse(templateParams || '{}')\n    };\n\n    return Promise.all([\n    dispatch({ type: COST_ESTIMATE_STARTED, query: queryEditor }),\n    SupersetClient.post({\n      endpoint: '/api/v1/sqllab/estimate/',\n      body: JSON.stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' }\n    }).\n    then(({ json }) =>\n    dispatch({ type: COST_ESTIMATE_RETURNED, query: queryEditor, json })\n    ).\n    catch((response) =>\n    getClientErrorObject(response).then((error) => {\n      const message =\n      error.error ||\n      error.statusText ||\n      t('Failed at retrieving results');\n      return dispatch({\n        type: COST_ESTIMATE_FAILED,\n        query: queryEditor,\n        error: message\n      });\n    })\n    )]\n    );\n  };\n}\n\nexport function clearInactiveQueries(interval) {\n  return { type: CLEAR_INACTIVE_QUERIES, interval };\n}\n\nexport function startQuery(query, runPreviewOnly) {\n  Object.assign(query, {\n    id: query.id ? query.id : nanoid(11),\n    progress: 0,\n    startDttm: now(),\n    state: query.runAsync ? 'pending' : 'running',\n    cached: false\n  });\n  return { type: START_QUERY, query, runPreviewOnly };\n}\n\nexport function querySuccess(query, results) {\n  return { type: QUERY_SUCCESS, query, results };\n}\n\nexport function logFailedQuery(query, errors) {\n  return function (dispatch) {\n    const eventData = {\n      has_err: true,\n      start_offset: query.startDttm,\n      ts: new Date().getTime()\n    };\n    errors == null ? void 0 : errors.forEach(({ error_type: errorType, message, extra }) => {var _extra$issue_codes;\n      const issueCodes = (extra == null ? void 0 : (_extra$issue_codes = extra.issue_codes) == null ? void 0 : _extra$issue_codes.map(({ code }) => code)) || [-1];\n      dispatch(\n        logEvent(LOG_ACTIONS_SQLLAB_FETCH_FAILED_QUERY, {\n          ...eventData,\n          error_type: errorType,\n          issue_codes: issueCodes,\n          error_details: message\n        })\n      );\n    });\n  };\n}\n\nexport function queryFailed(query, msg, link, errors) {\n  return function (dispatch) {\n    dispatch(logFailedQuery(query, errors));\n    dispatch({ type: QUERY_FAILED, query, msg, link, errors });\n  };\n}\n\nexport function stopQuery(query) {\n  return { type: STOP_QUERY, query };\n}\n\nexport function clearQueryResults(query) {\n  return { type: CLEAR_QUERY_RESULTS, query };\n}\n\nexport function removeDataPreview(table) {\n  return { type: REMOVE_DATA_PREVIEW, table };\n}\n\nexport function requestQueryResults(query) {\n  return { type: REQUEST_QUERY_RESULTS, query };\n}\n\nexport function fetchQueryResults(query, displayLimit, timeoutInMs) {\n  return function (dispatch, getState) {var _getState$common$conf, _getState$common;\n    const { SQLLAB_QUERY_RESULT_TIMEOUT } = (_getState$common$conf = (_getState$common = getState().common) == null ? void 0 : _getState$common.conf) != null ? _getState$common$conf : {};\n    dispatch(requestQueryResults(query));\n\n    const queryParams = rison.encode({\n      key: query.resultsKey,\n      rows: displayLimit || null\n    });\n    const timeout = timeoutInMs != null ? timeoutInMs : SQLLAB_QUERY_RESULT_TIMEOUT;\n    const controller = new AbortController();\n    return SupersetClient.get({\n      endpoint: `/api/v1/sqllab/results/?q=${queryParams}`,\n      parseMethod: 'json-bigint',\n      ...(timeout && { timeout, signal: controller.signal })\n    }).\n    then(({ json }) => dispatch(querySuccess(query, json))).\n    catch((response) => {\n      controller.abort();\n      getClientErrorObject(response).then((error) => {\n        const message =\n        error.error ||\n        error.statusText ||\n        t('Failed at retrieving results');\n\n        return dispatch(\n          queryFailed(query, message, error.link, error.errors)\n        );\n      });\n    });\n  };\n}\n\nexport function runQuery(query, runPreviewOnly) {\n  return function (dispatch) {\n    dispatch(startQuery(query, runPreviewOnly));\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      runAsync: query.runAsync,\n      catalog: query.catalog,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      tab: query.tab,\n      tmp_table_name: query.tempTable,\n      select_as_cta: query.ctas,\n      ctas_method: query.ctas_method,\n      templateParams: query.templateParams,\n      queryLimit: query.queryLimit,\n      expand_data: true\n    };\n\n    const search = window.location.search || '';\n    return SupersetClient.post({\n      endpoint: `/api/v1/sqllab/execute/${search}`,\n      body: JSON.stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' },\n      parseMethod: 'json-bigint'\n    }).\n    then(({ json }) => {\n      if (!query.runAsync) {\n        dispatch(querySuccess(query, json));\n      }\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then((error) => {\n      let message =\n      error.error ||\n      error.message ||\n      error.statusText ||\n      t('Unknown error');\n      if (message.includes('CSRF token')) {\n        message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n      }\n      dispatch(queryFailed(query, message, error.link, error.errors));\n    })\n    );\n  };\n}\n\nexport function runQueryFromSqlEditor(\ndatabase,\nqueryEditor,\ndefaultQueryLimit,\ntempTable,\nctas,\nctasMethod)\n{\n  return function (dispatch, getState) {\n    const qe = getUpToDateQuery(getState(), queryEditor, queryEditor.id);\n    const query = {\n      dbId: qe.dbId,\n      sql: qe.selectedText || qe.sql,\n      sqlEditorId: qe.id,\n      tab: qe.name,\n      catalog: qe.catalog,\n      schema: qe.schema,\n      tempTable,\n      templateParams: qe.templateParams,\n      queryLimit: qe.queryLimit || defaultQueryLimit,\n      runAsync: database ? database.allow_run_async : false,\n      ctas,\n      ctas_method: ctasMethod,\n      updateTabState: !qe.selectedText\n    };\n    dispatch(runQuery(query));\n  };\n}\n\nexport function reRunQuery(query) {\n  // run Query with a new id\n  return function (dispatch) {\n    dispatch(runQuery({ ...query, id: nanoid(11) }));\n  };\n}\n\nexport function postStopQuery(query) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/api/v1/query/stop',\n      body: JSON.stringify({ client_id: query.id }),\n      headers: { 'Content-Type': 'application/json' }\n    }).\n    then(() => dispatch(stopQuery(query))).\n    then(() => dispatch(addSuccessToast(t('Query was stopped.')))).\n    catch(() => dispatch(addDangerToast(t('Failed to stop query.'))));\n  };\n}\n\nexport function setDatabases(databases) {\n  return { type: SET_DATABASES, databases };\n}\n\nfunction migrateTable(table, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI('/tableschemaview/'),\n    postPayload: { table: { ...table, queryEditorId } }\n  }).\n  then(({ json }) => {\n    const newTable = {\n      ...table,\n      id: json.id,\n      queryEditorId\n    };\n    return dispatch({ type: MIGRATE_TABLE, oldTable: table, newTable });\n  }).\n  catch(() =>\n  dispatch(\n    addWarningToast(\n      t(\n        'Unable to migrate table schema state to backend. Superset will retry ' +\n        'later. Please contact your administrator if this problem persists.'\n      )\n    )\n  )\n  );\n}\n\nfunction migrateQuery(queryId, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI(`/tabstateview/${queryEditorId}/migrate_query`),\n    postPayload: { queryId }\n  }).\n  then(() => dispatch({ type: MIGRATE_QUERY, queryId, queryEditorId })).\n  catch(() =>\n  dispatch(\n    addWarningToast(\n      t(\n        'Unable to migrate query state to backend. Superset will retry later. ' +\n        'Please contact your administrator if this problem persists.'\n      )\n    )\n  )\n  );\n}\n\n/**\n * Persist QueryEditor from local storage to backend tab state.\n * This ensures that when new tabs are created, query editors are\n * asynchronously stored in local storage and periodically synchronized\n * with the backend.\n * When switching to persistence mode, the QueryEditors previously\n * stored in local storage will also be synchronized to the backend\n * through syncQueryEditor.\n */\nexport function syncQueryEditor(queryEditor) {\n  return function (dispatch, getState) {\n    const { tables, queries } = getState().sqlLab;\n    const localStorageTables = tables.filter(\n      (table) => table.inLocalStorage && table.queryEditorId === queryEditor.id\n    );\n    const localStorageQueries = Object.values(queries).filter(\n      (query) => query.inLocalStorage && query.sqlEditorId === queryEditor.id\n    );\n    return SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor }\n    }).\n    then(({ json }) => {\n      const newQueryEditor = {\n        ...queryEditor,\n        id: json.id.toString(),\n        inLocalStorage: false,\n        loaded: true\n      };\n      dispatch({\n        type: MIGRATE_QUERY_EDITOR,\n        oldQueryEditor: queryEditor,\n        newQueryEditor\n      });\n      dispatch({\n        type: MIGRATE_TAB_HISTORY,\n        oldId: queryEditor.id,\n        newId: newQueryEditor.id\n      });\n      return Promise.all([\n      ...localStorageTables.map((table) =>\n      migrateTable(table, newQueryEditor.id, dispatch)\n      ),\n      ...localStorageQueries.map((query) =>\n      migrateQuery(query.id, newQueryEditor.id, dispatch)\n      )]\n      );\n    }).\n    catch(() =>\n    dispatch(\n      addWarningToast(\n        t(\n          'Unable to migrate query editor state to backend. Superset will retry ' +\n          'later. Please contact your administrator if this problem persists.'\n        )\n      )\n    )\n    );\n  };\n}\n\nexport function addQueryEditor(queryEditor) {\n  const newQueryEditor = {\n    ...queryEditor,\n    id: nanoid(11),\n    loaded: true,\n    inLocalStorage: true\n  };\n  return {\n    type: ADD_QUERY_EDITOR,\n    queryEditor: newQueryEditor\n  };\n}\n\nexport function addNewQueryEditor() {\n  return function (dispatch, getState) {\n    const {\n      sqlLab: { queryEditors, tabHistory, unsavedQueryEditor, databases },\n      common\n    } = getState();\n    const defaultDbId = common.conf.SQLLAB_DEFAULT_DBID;\n    const activeQueryEditor = queryEditors.find(\n      (qe) => qe.id === tabHistory[tabHistory.length - 1]\n    );\n    const dbIds = Object.values(databases).map((database) => database.id);\n    const firstDbId = dbIds.length > 0 ? Math.min(...dbIds) : undefined;\n    const { dbId, catalog, schema, queryLimit, autorun } = {\n      ...queryEditors[0],\n      ...activeQueryEditor,\n      ...(unsavedQueryEditor.id === (activeQueryEditor == null ? void 0 : activeQueryEditor.id) &&\n      unsavedQueryEditor)\n    };\n    const warning = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) ?\n    '' :\n    t(\n      '-- Note: Unless you save your query, these tabs will NOT persist if you clear your cookies or change browsers.\\n\\n'\n    );\n\n    const name = newQueryTabName(\n      (queryEditors == null ? void 0 : queryEditors.map((qe) => ({\n        ...qe,\n        ...(qe.id === unsavedQueryEditor.id && unsavedQueryEditor)\n      }))) || []\n    );\n\n    return dispatch(\n      addQueryEditor({\n        dbId: dbId || defaultDbId || firstDbId,\n        catalog: catalog != null ? catalog : null,\n        schema: schema != null ? schema : null,\n        autorun: autorun != null ? autorun : false,\n        sql: `${warning}SELECT ...`,\n        queryLimit: queryLimit || common.conf.DEFAULT_SQLLAB_LIMIT,\n        name\n      })\n    );\n  };\n}\n\nexport function cloneQueryToNewTab(query, autorun) {\n  return function (dispatch, getState) {\n    const state = getState();\n    const { queryEditors, unsavedQueryEditor, tabHistory } = state.sqlLab;\n    const sourceQueryEditor = {\n      ...queryEditors.find((qe) => qe.id === tabHistory[tabHistory.length - 1]),\n      ...(tabHistory[tabHistory.length - 1] === unsavedQueryEditor.id &&\n      unsavedQueryEditor)\n    };\n    const queryEditor = {\n      name: t('Copy of %s', sourceQueryEditor.name),\n      dbId: query.dbId ? query.dbId : null,\n      catalog: query.catalog ? query.catalog : null,\n      schema: query.schema ? query.schema : null,\n      autorun,\n      sql: query.sql,\n      queryLimit: sourceQueryEditor.queryLimit,\n      maxRow: sourceQueryEditor.maxRow,\n      templateParams: sourceQueryEditor.templateParams\n    };\n    return dispatch(addQueryEditor(queryEditor));\n  };\n}\n\nexport function setLastUpdatedActiveTab(queryEditorId) {\n  return {\n    type: SET_LAST_UPDATED_ACTIVE_TAB,\n    queryEditorId\n  };\n}\n\nexport function setActiveQueryEditor(queryEditor) {\n  return {\n    type: SET_ACTIVE_QUERY_EDITOR,\n    queryEditor\n  };\n}\n\nexport function switchQueryEditor(goBackward = false) {\n  return function (dispatch, getState) {\n    const { sqlLab } = getState();\n    const { queryEditors, tabHistory } = sqlLab;\n    const qeid = tabHistory[tabHistory.length - 1];\n    const currentIndex = queryEditors.findIndex((qe) => qe.id === qeid);\n    const nextIndex = goBackward ?\n    currentIndex - 1 + queryEditors.length :\n    currentIndex + 1;\n    const newQueryEditor = queryEditors[nextIndex % queryEditors.length];\n\n    dispatch(setActiveQueryEditor(newQueryEditor));\n  };\n}\n\nexport function loadQueryEditor(queryEditor) {\n  return { type: LOAD_QUERY_EDITOR, queryEditor };\n}\n\nexport function setTables(tableSchemas) {\n  const tables = tableSchemas.\n  filter((tableSchema) => tableSchema.description !== null).\n  map((tableSchema) => {\n    const {\n      columns,\n      selectStar,\n      primaryKey,\n      foreignKeys,\n      indexes,\n      dataPreviewQueryId\n    } = tableSchema.description;\n    return {\n      dbId: tableSchema.database_id,\n      queryEditorId: tableSchema.tab_state_id.toString(),\n      catalog: tableSchema.catalog,\n      schema: tableSchema.schema,\n      name: tableSchema.table,\n      expanded: tableSchema.expanded,\n      id: tableSchema.id,\n      dataPreviewQueryId,\n      columns,\n      selectStar,\n      primaryKey,\n      foreignKeys,\n      indexes,\n      isMetadataLoading: false,\n      isExtraMetadataLoading: false\n    };\n  });\n  return { type: SET_TABLES, tables };\n}\n\nexport function fetchQueryEditor(queryEditor, displayLimit) {\n  return function (dispatch) {\n    SupersetClient.get({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`)\n    }).\n    then(({ json }) => {var _json$latest_query, _json$saved_query;\n      const loadedQueryEditor = {\n        id: json.id.toString(),\n        loaded: true,\n        name: json.label,\n        sql: json.sql,\n        selectedText: null,\n        latestQueryId: (_json$latest_query = json.latest_query) == null ? void 0 : _json$latest_query.id,\n        autorun: json.autorun,\n        dbId: json.database_id,\n        templateParams: json.template_params,\n        catalog: json.catalog,\n        schema: json.schema,\n        queryLimit: json.query_limit,\n        remoteId: (_json$saved_query = json.saved_query) == null ? void 0 : _json$saved_query.id,\n        hideLeftBar: json.hide_left_bar\n      };\n      dispatch(loadQueryEditor(loadedQueryEditor));\n      dispatch(setTables(json.table_schemas || []));\n      if (json.latest_query && json.latest_query.resultsKey) {\n        dispatch(fetchQueryResults(json.latest_query, displayLimit));\n      }\n    }).\n    catch((response) => {\n      if (response.status !== 404) {\n        return dispatch(\n          addDangerToast(t('An error occurred while fetching tab state'))\n        );\n      }\n      return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n    });\n  };\n}\n\nexport function setActiveSouthPaneTab(tabId) {\n  return { type: SET_ACTIVE_SOUTHPANE_TAB, tabId };\n}\n\nexport function toggleLeftBar(queryEditor) {\n  const hideLeftBar = !queryEditor.hideLeftBar;\n  return {\n    type: QUERY_EDITOR_TOGGLE_LEFT_BAR,\n    queryEditor,\n    hideLeftBar\n  };\n}\n\nexport function clearDestoryedQueryEditor(queryEditorId) {\n  return { type: CLEAR_DESTROYED_QUERY_EDITOR, queryEditorId };\n}\n\nexport function removeQueryEditor(queryEditor) {\n  return { type: REMOVE_QUERY_EDITOR, queryEditor };\n}\n\nexport function removeAllOtherQueryEditors(queryEditor) {\n  return function (dispatch, getState) {var _sqlLab$queryEditors;\n    const { sqlLab } = getState();\n    (_sqlLab$queryEditors = sqlLab.queryEditors) == null ? void 0 : _sqlLab$queryEditors.forEach((otherQueryEditor) => {\n      if (otherQueryEditor.id !== queryEditor.id) {\n        dispatch(removeQueryEditor(otherQueryEditor));\n      }\n    });\n  };\n}\n\nexport function removeQuery(query) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) ?\n    SupersetClient.delete({\n      endpoint: encodeURI(\n        `/tabstateview/${query.sqlEditorId}/query/${query.id}`\n      )\n    }) :\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_QUERY, query })).\n    catch(() =>\n    dispatch(\n      addDangerToast(\n        t(\n          'An error occurred while removing query. Please contact your administrator.'\n        )\n      )\n    )\n    );\n  };\n}\n\nexport function queryEditorSetDb(queryEditor, dbId) {\n  return { type: QUERY_EDITOR_SETDB, queryEditor, dbId };\n}\n\nexport function queryEditorSetCatalog(queryEditor, catalog) {\n  return {\n    type: QUERY_EDITOR_SET_CATALOG,\n    queryEditor: queryEditor || {},\n    catalog\n  };\n}\n\nexport function queryEditorSetSchema(queryEditor, schema) {\n  return {\n    type: QUERY_EDITOR_SET_SCHEMA,\n    queryEditor: queryEditor || {},\n    schema\n  };\n}\n\nexport function queryEditorSetAutorun(queryEditor, autorun) {\n  return { type: QUERY_EDITOR_SET_AUTORUN, queryEditor, autorun };\n}\n\nexport function queryEditorSetTitle(queryEditor, name, id) {\n  return {\n    type: QUERY_EDITOR_SET_TITLE,\n    queryEditor: { ...queryEditor, id },\n    name\n  };\n}\n\nexport function saveQuery(query, clientId) {\n  const { id, ...payload } = convertQueryToServer(query);\n\n  return (dispatch) =>\n  SupersetClient.post({\n    endpoint: '/api/v1/saved_query/',\n    jsonPayload: convertQueryToServer(payload)\n  }).\n  then((result) => {\n    const savedQuery = convertQueryToClient({\n      id: result.json.id,\n      ...result.json.result\n    });\n    dispatch({\n      type: QUERY_EDITOR_SAVED,\n      query,\n      clientId,\n      result: savedQuery\n    });\n    dispatch(queryEditorSetTitle(query, query.name, clientId));\n    return savedQuery;\n  }).\n  catch(() =>\n  dispatch(addDangerToast(t('Your query could not be saved')))\n  );\n}\n\nexport const addSavedQueryToTabState =\n(queryEditor, savedQuery) => (dispatch) => {\n  const sync = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) ?\n  SupersetClient.put({\n    endpoint: `/tabstateview/${queryEditor.id}`,\n    postPayload: { saved_query_id: savedQuery.remoteId }\n  }) :\n  Promise.resolve();\n\n  return sync.\n  catch(() => {\n    dispatch(addDangerToast(t('Your query was not properly saved')));\n  }).\n  then(() => {\n    dispatch(addSuccessToast(t('Your query was saved')));\n  });\n};\n\nexport function updateSavedQuery(query, clientId) {\n  const { id, ...payload } = convertQueryToServer(query);\n\n  return (dispatch) =>\n  SupersetClient.put({\n    endpoint: `/api/v1/saved_query/${query.remoteId}`,\n    jsonPayload: convertQueryToServer(payload)\n  }).\n  then(() => {\n    dispatch(addSuccessToast(t('Your query was updated')));\n    dispatch(queryEditorSetTitle(query, query.name, clientId));\n  }).\n  catch((e) => {\n    const message = t('Your query could not be updated');\n    // eslint-disable-next-line no-console\n    console.error(message, e);\n    dispatch(addDangerToast(message));\n  }).\n  then(() => dispatch(updateQueryEditor(query)));\n}\n\nexport function queryEditorSetSql(queryEditor, sql, queryId) {\n  return { type: QUERY_EDITOR_SET_SQL, queryEditor, sql, queryId };\n}\n\nexport function queryEditorSetCursorPosition(queryEditor, position) {\n  return { type: QUERY_EDITOR_SET_CURSOR_POSITION, queryEditor, position };\n}\n\nexport function queryEditorSetAndSaveSql(targetQueryEditor, sql, queryId) {\n  return function (dispatch, getState) {\n    const queryEditor = getUpToDateQuery(getState(), targetQueryEditor);\n    // saved query and set tab state use this action\n    dispatch(queryEditorSetSql(queryEditor, sql, queryId));\n    if (isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)) {\n      return SupersetClient.put({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n        postPayload: { sql, latest_query_id: queryId }\n      }).catch(() =>\n      dispatch(\n        addDangerToast(\n          t(\n            'An error occurred while storing your query in the backend. To ' +\n            'avoid losing your changes, please save your query using the ' +\n            '\"Save Query\" button.'\n          )\n        )\n      )\n      );\n    }\n    return Promise.resolve();\n  };\n}\n\nexport function formatQuery(queryEditor) {\n  return function (dispatch, getState) {\n    const { sql } = getUpToDateQuery(getState(), queryEditor);\n    return SupersetClient.post({\n      endpoint: `/api/v1/sqllab/format_sql/`,\n      // TODO (betodealmeida): pass engine as a parameter for better formatting\n      body: JSON.stringify({ sql }),\n      headers: { 'Content-Type': 'application/json' }\n    }).then(({ json }) => {\n      dispatch(queryEditorSetSql(queryEditor, json.result));\n    });\n  };\n}\n\nexport function queryEditorSetQueryLimit(queryEditor, queryLimit) {\n  return {\n    type: QUERY_EDITOR_SET_QUERY_LIMIT,\n    queryEditor,\n    queryLimit\n  };\n}\n\nexport function queryEditorSetTemplateParams(queryEditor, templateParams) {\n  return {\n    type: QUERY_EDITOR_SET_TEMPLATE_PARAMS,\n    queryEditor,\n    templateParams\n  };\n}\n\nexport function queryEditorSetSelectedText(queryEditor, sql) {\n  return { type: QUERY_EDITOR_SET_SELECTED_TEXT, queryEditor, sql };\n}\n\nexport function mergeTable(table, query, prepend) {\n  return { type: MERGE_TABLE, table, query, prepend };\n}\n\nexport function addTable(queryEditor, tableName, catalogName, schemaName) {\n  return function (dispatch, getState) {\n    const { dbId } = getUpToDateQuery(getState(), queryEditor, queryEditor.id);\n    const table = {\n      dbId,\n      queryEditorId: queryEditor.id,\n      catalog: catalogName,\n      schema: schemaName,\n      name: tableName\n    };\n    dispatch(\n      mergeTable({\n        ...table,\n        id: nanoid(11),\n        expanded: true\n      })\n    );\n  };\n}\n\nexport function runTablePreviewQuery(newTable, runPreviewOnly) {\n  return function (dispatch, getState) {\n    const {\n      sqlLab: { databases }\n    } = getState();\n    const database = databases[newTable.dbId];\n    const { dbId, catalog, schema } = newTable;\n\n    if (database && !database.disable_data_preview) {var _newTable$previewQuer;\n      const dataPreviewQuery = {\n        id: (_newTable$previewQuer = newTable.previewQueryId) != null ? _newTable$previewQuer : nanoid(11),\n        dbId,\n        catalog,\n        schema,\n        sql: newTable.selectStar,\n        tableName: newTable.name,\n        sqlEditorId: null,\n        tab: '',\n        runAsync: database.allow_run_async,\n        ctas: false,\n        isDataPreview: true\n      };\n      if (runPreviewOnly) {\n        return dispatch(runQuery(dataPreviewQuery, runPreviewOnly));\n      }\n      return Promise.all([\n      dispatch(\n        mergeTable(\n          {\n            id: newTable.id,\n            dbId: newTable.dbId,\n            catalog: newTable.catalog,\n            schema: newTable.schema,\n            name: newTable.name,\n            queryEditorId: newTable.queryEditorId,\n            dataPreviewQueryId: dataPreviewQuery.id\n          },\n          dataPreviewQuery\n        )\n      ),\n      dispatch(runQuery(dataPreviewQuery))]\n      );\n    }\n    return Promise.resolve();\n  };\n}\n\nexport function syncTable(table, tableMetadata) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) ?\n    SupersetClient.post({\n      endpoint: encodeURI('/tableschemaview/'),\n      postPayload: { table: { ...tableMetadata, ...table } }\n    }) :\n    Promise.resolve({ json: { id: table.id } });\n\n    return sync.\n    then(({ json: resultJson }) => {\n      const newTable = { ...table, id: `${resultJson.id}` };\n      dispatch(\n        mergeTable({\n          ...newTable,\n          expanded: true,\n          initialized: true\n        })\n      );\n    }).\n    catch(() =>\n    dispatch(\n      addDangerToast(\n        t(\n          'An error occurred while fetching table metadata. ' +\n          'Please contact your administrator.'\n        )\n      )\n    )\n    );\n  };\n}\n\nexport function changeDataPreviewId(oldQueryId, newQuery) {\n  return { type: CHANGE_DATA_PREVIEW_ID, oldQueryId, newQuery };\n}\n\nexport function reFetchQueryResults(query) {\n  return function (dispatch) {\n    const newQuery = {\n      id: nanoid(),\n      dbId: query.dbId,\n      sql: query.sql,\n      tableName: query.tableName,\n      sqlEditorId: null,\n      tab: '',\n      runAsync: false,\n      ctas: false,\n      queryLimit: query.queryLimit,\n      isDataPreview: query.isDataPreview\n    };\n    dispatch(runQuery(newQuery));\n    dispatch(changeDataPreviewId(query.id, newQuery));\n  };\n}\n\nexport function expandTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n      postPayload: { expanded: true }\n    }) :\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: EXPAND_TABLE, table })).\n    catch(() =>\n    dispatch(\n      addDangerToast(\n        t(\n          'An error occurred while expanding the table schema. ' +\n          'Please contact your administrator.'\n        )\n      )\n    )\n    );\n  };\n}\n\nexport function collapseTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n      postPayload: { expanded: false }\n    }) :\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: COLLAPSE_TABLE, table })).\n    catch(() =>\n    dispatch(\n      addDangerToast(\n        t(\n          'An error occurred while collapsing the table schema. ' +\n          'Please contact your administrator.'\n        )\n      )\n    )\n    );\n  };\n}\n\nexport function removeTables(tables) {\n  return function (dispatch) {var _tables$filter;\n    const tablesToRemove = (_tables$filter = tables == null ? void 0 : tables.filter(Boolean)) != null ? _tables$filter : [];\n    const sync = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence) ?\n    Promise.all(\n      tablesToRemove.map((table) =>\n      table.initialized ?\n      SupersetClient.delete({\n        endpoint: encodeURI(`/tableschemaview/${table.id}`)\n      }) :\n      Promise.resolve()\n      )\n    ) :\n    Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_TABLES, tables: tablesToRemove })).\n    catch(() =>\n    dispatch(\n      addDangerToast(\n        t(\n          'An error occurred while removing the table schema. ' +\n          'Please contact your administrator.'\n        )\n      )\n    )\n    );\n  };\n}\n\nexport function refreshQueries(alteredQueries) {\n  return { type: REFRESH_QUERIES, alteredQueries };\n}\n\nexport function setUserOffline(offline) {\n  return { type: SET_USER_OFFLINE, offline };\n}\n\nexport function persistEditorHeight(queryEditor, northPercent, southPercent) {\n  return {\n    type: QUERY_EDITOR_PERSIST_HEIGHT,\n    queryEditor,\n    northPercent,\n    southPercent\n  };\n}\n\nexport function popPermalink(key) {\n  return function (dispatch) {\n    return SupersetClient.get({ endpoint: `/api/v1/sqllab/permalink/${key}` }).\n    then(({ json }) =>\n    dispatch(\n      addQueryEditor({\n        name: json.name ? json.name : t('Shared query'),\n        dbId: json.dbId ? parseInt(json.dbId, 10) : null,\n        catalog: json.catalog ? json.catalog : null,\n        schema: json.schema ? json.schema : null,\n        autorun: json.autorun ? json.autorun : false,\n        sql: json.sql ? json.sql : 'SELECT ...',\n        templateParams: json.templateParams\n      })\n    )\n    ).\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\n\nexport function popStoredQuery(urlId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/sqllab/permalink/kv:${urlId}`\n    }).\n    then(({ json }) =>\n    dispatch(\n      addQueryEditor({\n        name: json.name ? json.name : t('Shared query'),\n        dbId: json.dbId ? parseInt(json.dbId, 10) : null,\n        catalog: json.catalog ? json.catalog : null,\n        schema: json.schema ? json.schema : null,\n        autorun: json.autorun ? json.autorun : false,\n        sql: json.sql ? json.sql : 'SELECT ...',\n        templateParams: json.templateParams\n      })\n    )\n    ).\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popSavedQuery(saveQueryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/saved_query/${saveQueryId}`\n    }).\n    then(({ json }) => {\n      const queryEditorProps = {\n        ...convertQueryToClient(json.result),\n        loaded: true,\n        autorun: false\n      };\n      const tmpAdaptedProps = {\n        name: queryEditorProps.name,\n        dbId: queryEditorProps.database.id,\n        catalog: queryEditorProps.catalog,\n        schema: queryEditorProps.schema,\n        sql: queryEditorProps.sql,\n        templateParams: queryEditorProps.templateParams,\n        remoteId: queryEditorProps.remoteId\n      };\n      return dispatch(addQueryEditor(tmpAdaptedProps));\n    }).\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popQuery(queryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/query/${queryId}`\n    }).\n    then(({ json }) => {\n      const queryData = json.result;\n      const queryEditorProps = {\n        dbId: queryData.database.id,\n        catalog: queryData.catalog,\n        schema: queryData.schema,\n        sql: queryData.sql,\n        name: t('Copy of %s', queryData.tab_name),\n        autorun: false\n      };\n      return dispatch(addQueryEditor(queryEditorProps));\n    }).\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popDatasourceQuery(datasourceKey, sql) {\n  return function (dispatch) {\n    const QUERY_TEXT = t('Query');\n    const datasetId = datasourceKey.split('__')[0];\n\n    const queryParams = rison.encode({\n      keys: ['none'],\n      columns: ['name', 'schema', 'database.id', 'select_star']\n    });\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/${datasetId}?q=${queryParams}`\n    }).\n    then(({ json }) =>\n    dispatch(\n      addQueryEditor({\n        name: `${QUERY_TEXT} ${json.result.name}`,\n        dbId: json.result.database.id,\n        schema: json.result.schema,\n        autorun: sql !== undefined,\n        sql: sql || json.result.select_star\n      })\n    )\n    ).\n    catch(() =>\n    dispatch(addDangerToast(t(\"The datasource couldn't be loaded\")))\n    );\n  };\n}\nexport function createDatasourceStarted() {\n  return { type: CREATE_DATASOURCE_STARTED };\n}\nexport function createDatasourceSuccess(data) {\n  const datasource = `${data.id}__table`;\n  return { type: CREATE_DATASOURCE_SUCCESS, datasource };\n}\nexport function createDatasourceFailed(err) {\n  return { type: CREATE_DATASOURCE_FAILED, err };\n}\n\nexport function createDatasource(vizOptions) {\n  return (dispatch) => {\n    dispatch(createDatasourceStarted());\n    const { dbId, catalog, schema, datasourceName, sql } = vizOptions;\n    return SupersetClient.post({\n      endpoint: '/api/v1/dataset/',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        database: dbId,\n        catalog,\n        schema,\n        sql,\n        table_name: datasourceName,\n        is_managed_externally: false,\n        external_url: null\n      })\n    }).\n    then(({ json }) => {\n      dispatch(createDatasourceSuccess(json));\n\n      return Promise.resolve(json);\n    }).\n    catch((error) => {\n      getClientErrorObject(error).then((e) => {\n        dispatch(addDangerToast(e.error));\n      });\n      dispatch(\n        createDatasourceFailed(\n          t('An error occurred while creating the data source')\n        )\n      );\n\n      return Promise.reject();\n    });\n  };\n}\n\nexport function createCtasDatasource(vizOptions) {\n  return (dispatch) => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/api/v1/dataset/get_or_create/',\n      jsonPayload: vizOptions\n    }).\n    then(({ json }) => {\n      dispatch(createDatasourceSuccess(json.result));\n\n      return json.result;\n    }).\n    catch(() => {\n      const errorMsg = t('An error occurred while creating the data source');\n      dispatch(createDatasourceFailed(errorMsg));\n      return Promise.reject(new Error(errorMsg));\n    });\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(RESET_STATE, \"RESET_STATE\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(ADD_QUERY_EDITOR, \"ADD_QUERY_EDITOR\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(UPDATE_QUERY_EDITOR, \"UPDATE_QUERY_EDITOR\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SAVED, \"QUERY_EDITOR_SAVED\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CLONE_QUERY_TO_NEW_TAB, \"CLONE_QUERY_TO_NEW_TAB\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_QUERY_EDITOR, \"REMOVE_QUERY_EDITOR\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MERGE_TABLE, \"MERGE_TABLE\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_TABLES, \"REMOVE_TABLES\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(END_QUERY, \"END_QUERY\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_QUERY, \"REMOVE_QUERY\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(EXPAND_TABLE, \"EXPAND_TABLE\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COLLAPSE_TABLE, \"COLLAPSE_TABLE\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SETDB, \"QUERY_EDITOR_SETDB\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_CATALOG, \"QUERY_EDITOR_SET_CATALOG\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SCHEMA, \"QUERY_EDITOR_SET_SCHEMA\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TITLE, \"QUERY_EDITOR_SET_TITLE\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_AUTORUN, \"QUERY_EDITOR_SET_AUTORUN\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SQL, \"QUERY_EDITOR_SET_SQL\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_CURSOR_POSITION, \"QUERY_EDITOR_SET_CURSOR_POSITION\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_QUERY_LIMIT, \"QUERY_EDITOR_SET_QUERY_LIMIT\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TEMPLATE_PARAMS, \"QUERY_EDITOR_SET_TEMPLATE_PARAMS\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SELECTED_TEXT, \"QUERY_EDITOR_SET_SELECTED_TEXT\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_FUNCTION_NAMES, \"QUERY_EDITOR_SET_FUNCTION_NAMES\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_PERSIST_HEIGHT, \"QUERY_EDITOR_PERSIST_HEIGHT\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_TOGGLE_LEFT_BAR, \"QUERY_EDITOR_TOGGLE_LEFT_BAR\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_QUERY_EDITOR, \"MIGRATE_QUERY_EDITOR\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_TAB_HISTORY, \"MIGRATE_TAB_HISTORY\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_TABLE, \"MIGRATE_TABLE\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_QUERY, \"MIGRATE_QUERY\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_DATABASES, \"SET_DATABASES\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_ACTIVE_QUERY_EDITOR, \"SET_ACTIVE_QUERY_EDITOR\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(LOAD_QUERY_EDITOR, \"LOAD_QUERY_EDITOR\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_TABLES, \"SET_TABLES\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_ACTIVE_SOUTHPANE_TAB, \"SET_ACTIVE_SOUTHPANE_TAB\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REFRESH_QUERIES, \"REFRESH_QUERIES\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_USER_OFFLINE, \"SET_USER_OFFLINE\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(RUN_QUERY, \"RUN_QUERY\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(START_QUERY, \"START_QUERY\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(STOP_QUERY, \"STOP_QUERY\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REQUEST_QUERY_RESULTS, \"REQUEST_QUERY_RESULTS\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_SUCCESS, \"QUERY_SUCCESS\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_FAILED, \"QUERY_FAILED\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CLEAR_INACTIVE_QUERIES, \"CLEAR_INACTIVE_QUERIES\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CLEAR_QUERY_RESULTS, \"CLEAR_QUERY_RESULTS\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_DATA_PREVIEW, \"REMOVE_DATA_PREVIEW\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CHANGE_DATA_PREVIEW_ID, \"CHANGE_DATA_PREVIEW_ID\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_STARTED, \"COST_ESTIMATE_STARTED\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_RETURNED, \"COST_ESTIMATE_RETURNED\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_FAILED, \"COST_ESTIMATE_FAILED\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_STARTED, \"CREATE_DATASOURCE_STARTED\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_SUCCESS, \"CREATE_DATASOURCE_SUCCESS\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_FAILED, \"CREATE_DATASOURCE_FAILED\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_EDITOR_TAB_LAST_UPDATE, \"SET_EDITOR_TAB_LAST_UPDATE\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_LAST_UPDATED_ACTIVE_TAB, \"SET_LAST_UPDATED_ACTIVE_TAB\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CLEAR_DESTROYED_QUERY_EDITOR, \"CLEAR_DESTROYED_QUERY_EDITOR\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addInfoToast, \"addInfoToast\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addSuccessToast, \"addSuccessToast\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addDangerToast, \"addDangerToast\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addWarningToast, \"addWarningToast\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CtasEnum, \"CtasEnum\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(ERR_MSG_CANT_LOAD_QUERY, \"ERR_MSG_CANT_LOAD_QUERY\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryClientMapping, \"queryClientMapping\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryServerMapping, \"queryServerMapping\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(fieldConverter, \"fieldConverter\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(convertQueryToServer, \"convertQueryToServer\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(convertQueryToClient, \"convertQueryToClient\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(getUpToDateQuery, \"getUpToDateQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(resetState, \"resetState\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(updateQueryEditor, \"updateQueryEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setEditorTabLastUpdate, \"setEditorTabLastUpdate\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(scheduleQuery, \"scheduleQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(estimateQueryCost, \"estimateQueryCost\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(clearInactiveQueries, \"clearInactiveQueries\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(startQuery, \"startQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(querySuccess, \"querySuccess\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(logFailedQuery, \"logFailedQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryFailed, \"queryFailed\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(stopQuery, \"stopQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(clearQueryResults, \"clearQueryResults\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeDataPreview, \"removeDataPreview\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(requestQueryResults, \"requestQueryResults\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(fetchQueryResults, \"fetchQueryResults\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(runQuery, \"runQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(runQueryFromSqlEditor, \"runQueryFromSqlEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(reRunQuery, \"reRunQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(postStopQuery, \"postStopQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setDatabases, \"setDatabases\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateTable, \"migrateTable\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateQuery, \"migrateQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(syncQueryEditor, \"syncQueryEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addQueryEditor, \"addQueryEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addNewQueryEditor, \"addNewQueryEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(cloneQueryToNewTab, \"cloneQueryToNewTab\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setLastUpdatedActiveTab, \"setLastUpdatedActiveTab\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setActiveQueryEditor, \"setActiveQueryEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(switchQueryEditor, \"switchQueryEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(loadQueryEditor, \"loadQueryEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setTables, \"setTables\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(fetchQueryEditor, \"fetchQueryEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setActiveSouthPaneTab, \"setActiveSouthPaneTab\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(toggleLeftBar, \"toggleLeftBar\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(clearDestoryedQueryEditor, \"clearDestoryedQueryEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeQueryEditor, \"removeQueryEditor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeAllOtherQueryEditors, \"removeAllOtherQueryEditors\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeQuery, \"removeQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetDb, \"queryEditorSetDb\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetCatalog, \"queryEditorSetCatalog\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSchema, \"queryEditorSetSchema\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetAutorun, \"queryEditorSetAutorun\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTitle, \"queryEditorSetTitle\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(saveQuery, \"saveQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addSavedQueryToTabState, \"addSavedQueryToTabState\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(updateSavedQuery, \"updateSavedQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSql, \"queryEditorSetSql\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetCursorPosition, \"queryEditorSetCursorPosition\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetAndSaveSql, \"queryEditorSetAndSaveSql\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(formatQuery, \"formatQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetQueryLimit, \"queryEditorSetQueryLimit\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTemplateParams, \"queryEditorSetTemplateParams\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSelectedText, \"queryEditorSetSelectedText\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(mergeTable, \"mergeTable\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addTable, \"addTable\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(runTablePreviewQuery, \"runTablePreviewQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(syncTable, \"syncTable\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(changeDataPreviewId, \"changeDataPreviewId\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(reFetchQueryResults, \"reFetchQueryResults\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(expandTable, \"expandTable\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(collapseTable, \"collapseTable\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeTables, \"removeTables\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(refreshQueries, \"refreshQueries\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setUserOffline, \"setUserOffline\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(persistEditorHeight, \"persistEditorHeight\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popPermalink, \"popPermalink\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popStoredQuery, \"popStoredQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popSavedQuery, \"popSavedQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popQuery, \"popQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popDatasourceQuery, \"popDatasourceQuery\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceStarted, \"createDatasourceStarted\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceSuccess, \"createDatasourceSuccess\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceFailed, \"createDatasourceFailed\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasource, \"createDatasource\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createCtasDatasource, \"createCtasDatasource\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["nanoid","rison","FeatureFlag","SupersetClient","t","isFeatureEnabled","COMMON_ERR_MESSAGES","getClientErrorObject","now","addDangerToast","addDangerToastAction","addInfoToast","addInfoToastAction","addSuccessToast","addSuccessToastAction","addWarningToast","addWarningToastAction","LOG_ACTIONS_SQLLAB_FETCH_FAILED_QUERY","getBootstrapData","logEvent","newQueryTabName","getInitialState","rehydratePersistedState","RESET_STATE","ADD_QUERY_EDITOR","UPDATE_QUERY_EDITOR","QUERY_EDITOR_SAVED","CLONE_QUERY_TO_NEW_TAB","REMOVE_QUERY_EDITOR","MERGE_TABLE","REMOVE_TABLES","END_QUERY","REMOVE_QUERY","EXPAND_TABLE","COLLAPSE_TABLE","QUERY_EDITOR_SETDB","QUERY_EDITOR_SET_CATALOG","QUERY_EDITOR_SET_SCHEMA","QUERY_EDITOR_SET_TITLE","QUERY_EDITOR_SET_AUTORUN","QUERY_EDITOR_SET_SQL","QUERY_EDITOR_SET_CURSOR_POSITION","QUERY_EDITOR_SET_QUERY_LIMIT","QUERY_EDITOR_SET_TEMPLATE_PARAMS","QUERY_EDITOR_SET_SELECTED_TEXT","QUERY_EDITOR_SET_FUNCTION_NAMES","QUERY_EDITOR_PERSIST_HEIGHT","QUERY_EDITOR_TOGGLE_LEFT_BAR","MIGRATE_QUERY_EDITOR","MIGRATE_TAB_HISTORY","MIGRATE_TABLE","MIGRATE_QUERY","SET_DATABASES","SET_ACTIVE_QUERY_EDITOR","LOAD_QUERY_EDITOR","SET_TABLES","SET_ACTIVE_SOUTHPANE_TAB","REFRESH_QUERIES","SET_USER_OFFLINE","RUN_QUERY","START_QUERY","STOP_QUERY","REQUEST_QUERY_RESULTS","QUERY_SUCCESS","QUERY_FAILED","CLEAR_INACTIVE_QUERIES","CLEAR_QUERY_RESULTS","REMOVE_DATA_PREVIEW","CHANGE_DATA_PREVIEW_ID","COST_ESTIMATE_STARTED","COST_ESTIMATE_RETURNED","COST_ESTIMATE_FAILED","CREATE_DATASOURCE_STARTED","CREATE_DATASOURCE_SUCCESS","CREATE_DATASOURCE_FAILED","SET_EDITOR_TAB_LAST_UPDATE","SET_LAST_UPDATED_ACTIVE_TAB","CLEAR_DESTROYED_QUERY_EDITOR","CtasEnum","Table","View","ERR_MSG_CANT_LOAD_QUERY","queryClientMapping","id","db_id","label","template_parameters","queryServerMapping","_invert","fieldConverter","mapping","obj","_mapKeys","value","key","convertQueryToServer","convertQueryToClient","getUpToDateQuery","rootState","queryEditor","sqlLab","unsavedQueryEditor","queryEditors","find","qe","resetState","data","dispatch","getState","common","initialState","type","sqlLabInitialState","updateQueryEditor","alterations","setEditorTabLastUpdate","timestamp","scheduleQuery","query","post","endpoint","jsonPayload","stringify","then","catch","estimateQueryCost","dbId","catalog","schema","sql","selectedText","templateParams","requestSql","postPayload","database_id","template_params","JSON","parse","Promise","all","body","headers","json","response","error","message","statusText","clearInactiveQueries","interval","startQuery","runPreviewOnly","Object","assign","progress","startDttm","state","runAsync","cached","querySuccess","results","logFailedQuery","errors","eventData","has_err","start_offset","ts","Date","getTime","forEach","error_type","errorType","extra","_extra$issue_codes","issueCodes","issue_codes","map","code","error_details","queryFailed","msg","link","stopQuery","clearQueryResults","removeDataPreview","table","requestQueryResults","fetchQueryResults","displayLimit","timeoutInMs","_getState$common$conf","_getState$common","SQLLAB_QUERY_RESULT_TIMEOUT","conf","queryParams","encode","resultsKey","rows","timeout","controller","AbortController","get","parseMethod","signal","abort","runQuery","client_id","sql_editor_id","sqlEditorId","tab","tmp_table_name","tempTable","select_as_cta","ctas","ctas_method","queryLimit","expand_data","search","window","location","includes","SESSION_TIMED_OUT","runQueryFromSqlEditor","database","defaultQueryLimit","ctasMethod","name","allow_run_async","updateTabState","reRunQuery","postStopQuery","setDatabases","databases","migrateTable","queryEditorId","encodeURI","newTable","oldTable","migrateQuery","queryId","syncQueryEditor","tables","queries","localStorageTables","filter","inLocalStorage","localStorageQueries","values","newQueryEditor","toString","loaded","oldQueryEditor","oldId","newId","addQueryEditor","addNewQueryEditor","tabHistory","defaultDbId","SQLLAB_DEFAULT_DBID","activeQueryEditor","length","dbIds","firstDbId","Math","min","undefined","autorun","warning","SqllabBackendPersistence","DEFAULT_SQLLAB_LIMIT","cloneQueryToNewTab","sourceQueryEditor","maxRow","setLastUpdatedActiveTab","setActiveQueryEditor","switchQueryEditor","goBackward","qeid","currentIndex","findIndex","nextIndex","loadQueryEditor","setTables","tableSchemas","tableSchema","description","columns","selectStar","primaryKey","foreignKeys","indexes","dataPreviewQueryId","tab_state_id","expanded","isMetadataLoading","isExtraMetadataLoading","fetchQueryEditor","_json$latest_query","_json$saved_query","loadedQueryEditor","latestQueryId","latest_query","query_limit","remoteId","saved_query","hideLeftBar","hide_left_bar","table_schemas","status","setActiveSouthPaneTab","tabId","toggleLeftBar","clearDestoryedQueryEditor","removeQueryEditor","removeAllOtherQueryEditors","_sqlLab$queryEditors","otherQueryEditor","removeQuery","sync","delete","resolve","queryEditorSetDb","queryEditorSetCatalog","queryEditorSetSchema","queryEditorSetAutorun","queryEditorSetTitle","saveQuery","clientId","payload","result","savedQuery","addSavedQueryToTabState","put","saved_query_id","updateSavedQuery","e","console","queryEditorSetSql","queryEditorSetCursorPosition","position","queryEditorSetAndSaveSql","targetQueryEditor","latest_query_id","formatQuery","queryEditorSetQueryLimit","queryEditorSetTemplateParams","queryEditorSetSelectedText","mergeTable","prepend","addTable","tableName","catalogName","schemaName","runTablePreviewQuery","disable_data_preview","_newTable$previewQuer","dataPreviewQuery","previewQueryId","isDataPreview","syncTable","tableMetadata","resultJson","initialized","changeDataPreviewId","oldQueryId","newQuery","reFetchQueryResults","expandTable","collapseTable","removeTables","_tables$filter","tablesToRemove","Boolean","refreshQueries","alteredQueries","setUserOffline","offline","persistEditorHeight","northPercent","southPercent","popPermalink","parseInt","popStoredQuery","urlId","popSavedQuery","saveQueryId","queryEditorProps","tmpAdaptedProps","popQuery","queryData","tab_name","popDatasourceQuery","datasourceKey","QUERY_TEXT","datasetId","split","keys","select_star","createDatasourceStarted","createDatasourceSuccess","datasource","createDatasourceFailed","err","createDatasource","vizOptions","datasourceName","table_name","is_managed_externally","external_url","reject","createCtasDatasource","errorMsg","Error","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/SqlLab/actions/sqlLab.js"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { nanoid } from 'nanoid';\nimport rison from 'rison';\nimport {\n  FeatureFlag,\n  SupersetClient,\n  t,\n  isFeatureEnabled,\n  COMMON_ERR_MESSAGES,\n  getClientErrorObject,\n} from '@superset-ui/core';\nimport { invert, mapKeys } from 'lodash';\n\nimport { now } from 'src/utils/dates';\nimport {\n  addDangerToast as addDangerToastAction,\n  addInfoToast as addInfoToastAction,\n  addSuccessToast as addSuccessToastAction,\n  addWarningToast as addWarningToastAction,\n} from 'src/components/MessageToasts/actions';\nimport { LOG_ACTIONS_SQLLAB_FETCH_FAILED_QUERY } from 'src/logger/LogUtils';\nimport getBootstrapData from 'src/utils/getBootstrapData';\nimport { logEvent } from 'src/logger/actions';\nimport { newQueryTabName } from '../utils/newQueryTabName';\nimport getInitialState from '../reducers/getInitialState';\nimport { rehydratePersistedState } from '../utils/reduxStateToLocalStorageHelper';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_QUERY_EDITOR = 'ADD_QUERY_EDITOR';\nexport const UPDATE_QUERY_EDITOR = 'UPDATE_QUERY_EDITOR';\nexport const QUERY_EDITOR_SAVED = 'QUERY_EDITOR_SAVED';\nexport const CLONE_QUERY_TO_NEW_TAB = 'CLONE_QUERY_TO_NEW_TAB';\nexport const REMOVE_QUERY_EDITOR = 'REMOVE_QUERY_EDITOR';\nexport const MERGE_TABLE = 'MERGE_TABLE';\nexport const REMOVE_TABLES = 'REMOVE_TABLES';\nexport const END_QUERY = 'END_QUERY';\nexport const REMOVE_QUERY = 'REMOVE_QUERY';\nexport const EXPAND_TABLE = 'EXPAND_TABLE';\nexport const COLLAPSE_TABLE = 'COLLAPSE_TABLE';\nexport const QUERY_EDITOR_SETDB = 'QUERY_EDITOR_SETDB';\nexport const QUERY_EDITOR_SET_CATALOG = 'QUERY_EDITOR_SET_CATALOG';\nexport const QUERY_EDITOR_SET_SCHEMA = 'QUERY_EDITOR_SET_SCHEMA';\nexport const QUERY_EDITOR_SET_TITLE = 'QUERY_EDITOR_SET_TITLE';\nexport const QUERY_EDITOR_SET_AUTORUN = 'QUERY_EDITOR_SET_AUTORUN';\nexport const QUERY_EDITOR_SET_SQL = 'QUERY_EDITOR_SET_SQL';\nexport const QUERY_EDITOR_SET_CURSOR_POSITION =\n  'QUERY_EDITOR_SET_CURSOR_POSITION';\nexport const QUERY_EDITOR_SET_QUERY_LIMIT = 'QUERY_EDITOR_SET_QUERY_LIMIT';\nexport const QUERY_EDITOR_SET_TEMPLATE_PARAMS =\n  'QUERY_EDITOR_SET_TEMPLATE_PARAMS';\nexport const QUERY_EDITOR_SET_SELECTED_TEXT = 'QUERY_EDITOR_SET_SELECTED_TEXT';\nexport const QUERY_EDITOR_SET_FUNCTION_NAMES =\n  'QUERY_EDITOR_SET_FUNCTION_NAMES';\nexport const QUERY_EDITOR_PERSIST_HEIGHT = 'QUERY_EDITOR_PERSIST_HEIGHT';\nexport const QUERY_EDITOR_TOGGLE_LEFT_BAR = 'QUERY_EDITOR_TOGGLE_LEFT_BAR';\nexport const MIGRATE_QUERY_EDITOR = 'MIGRATE_QUERY_EDITOR';\nexport const MIGRATE_TAB_HISTORY = 'MIGRATE_TAB_HISTORY';\nexport const MIGRATE_TABLE = 'MIGRATE_TABLE';\nexport const MIGRATE_QUERY = 'MIGRATE_QUERY';\n\nexport const SET_DATABASES = 'SET_DATABASES';\nexport const SET_ACTIVE_QUERY_EDITOR = 'SET_ACTIVE_QUERY_EDITOR';\nexport const LOAD_QUERY_EDITOR = 'LOAD_QUERY_EDITOR';\nexport const SET_TABLES = 'SET_TABLES';\nexport const SET_ACTIVE_SOUTHPANE_TAB = 'SET_ACTIVE_SOUTHPANE_TAB';\nexport const REFRESH_QUERIES = 'REFRESH_QUERIES';\nexport const SET_USER_OFFLINE = 'SET_USER_OFFLINE';\nexport const RUN_QUERY = 'RUN_QUERY';\nexport const START_QUERY = 'START_QUERY';\nexport const STOP_QUERY = 'STOP_QUERY';\nexport const REQUEST_QUERY_RESULTS = 'REQUEST_QUERY_RESULTS';\nexport const QUERY_SUCCESS = 'QUERY_SUCCESS';\nexport const QUERY_FAILED = 'QUERY_FAILED';\nexport const CLEAR_INACTIVE_QUERIES = 'CLEAR_INACTIVE_QUERIES';\nexport const CLEAR_QUERY_RESULTS = 'CLEAR_QUERY_RESULTS';\nexport const REMOVE_DATA_PREVIEW = 'REMOVE_DATA_PREVIEW';\nexport const CHANGE_DATA_PREVIEW_ID = 'CHANGE_DATA_PREVIEW_ID';\n\nexport const COST_ESTIMATE_STARTED = 'COST_ESTIMATE_STARTED';\nexport const COST_ESTIMATE_RETURNED = 'COST_ESTIMATE_RETURNED';\nexport const COST_ESTIMATE_FAILED = 'COST_ESTIMATE_FAILED';\n\nexport const CREATE_DATASOURCE_STARTED = 'CREATE_DATASOURCE_STARTED';\nexport const CREATE_DATASOURCE_SUCCESS = 'CREATE_DATASOURCE_SUCCESS';\nexport const CREATE_DATASOURCE_FAILED = 'CREATE_DATASOURCE_FAILED';\n\nexport const SET_EDITOR_TAB_LAST_UPDATE = 'SET_EDITOR_TAB_LAST_UPDATE';\nexport const SET_LAST_UPDATED_ACTIVE_TAB = 'SET_LAST_UPDATED_ACTIVE_TAB';\nexport const CLEAR_DESTROYED_QUERY_EDITOR = 'CLEAR_DESTROYED_QUERY_EDITOR';\n\nexport const addInfoToast = addInfoToastAction;\nexport const addSuccessToast = addSuccessToastAction;\nexport const addDangerToast = addDangerToastAction;\nexport const addWarningToast = addWarningToastAction;\n\nexport const CtasEnum = {\n  Table: 'TABLE',\n  View: 'VIEW',\n};\nconst ERR_MSG_CANT_LOAD_QUERY = t(\"The query couldn't be loaded\");\n\n// a map of SavedQuery field names to the different names used client-side,\n// because for now making the names consistent is too complicated\n// so it might as well only happen in one place\nconst queryClientMapping = {\n  id: 'remoteId',\n  db_id: 'dbId',\n  label: 'name',\n  template_parameters: 'templateParams',\n};\nconst queryServerMapping = invert(queryClientMapping);\n\n// uses a mapping like those above to convert object key names to another style\nconst fieldConverter = mapping => obj =>\n  mapKeys(obj, (value, key) => (key in mapping ? mapping[key] : key));\n\nexport const convertQueryToServer = fieldConverter(queryServerMapping);\nexport const convertQueryToClient = fieldConverter(queryClientMapping);\n\nexport function getUpToDateQuery(rootState, queryEditor, key) {\n  const {\n    sqlLab: { unsavedQueryEditor, queryEditors },\n  } = rootState;\n  const id = key ?? queryEditor.id;\n  return {\n    id,\n    ...queryEditors.find(qe => qe.id === id),\n    ...(id === unsavedQueryEditor.id && unsavedQueryEditor),\n  };\n}\n\nexport function resetState(data) {\n  return (dispatch, getState) => {\n    const { common } = getState();\n    const initialState = getInitialState({\n      ...getBootstrapData(),\n      common,\n      ...data,\n    });\n\n    dispatch({\n      type: RESET_STATE,\n      sqlLabInitialState: initialState.sqlLab,\n    });\n    rehydratePersistedState(dispatch, initialState);\n  };\n}\n\nexport function updateQueryEditor(alterations) {\n  return { type: UPDATE_QUERY_EDITOR, alterations };\n}\n\nexport function setEditorTabLastUpdate(timestamp) {\n  return { type: SET_EDITOR_TAB_LAST_UPDATE, timestamp };\n}\n\nexport function scheduleQuery(query) {\n  return dispatch =>\n    SupersetClient.post({\n      endpoint: '/api/v1/saved_query/',\n      jsonPayload: query,\n      stringify: false,\n    })\n      .then(() =>\n        dispatch(\n          addSuccessToast(\n            t(\n              'Your query has been scheduled. To see details of your query, navigate to Saved queries',\n            ),\n          ),\n        ),\n      )\n      .catch(() =>\n        dispatch(addDangerToast(t('Your query could not be scheduled'))),\n      );\n}\n\nexport function estimateQueryCost(queryEditor) {\n  return (dispatch, getState) => {\n    const { dbId, catalog, schema, sql, selectedText, templateParams } =\n      getUpToDateQuery(getState(), queryEditor);\n    const requestSql = selectedText || sql;\n\n    const postPayload = {\n      database_id: dbId,\n      catalog,\n      schema,\n      sql: requestSql,\n      template_params: JSON.parse(templateParams || '{}'),\n    };\n\n    return Promise.all([\n      dispatch({ type: COST_ESTIMATE_STARTED, query: queryEditor }),\n      SupersetClient.post({\n        endpoint: '/api/v1/sqllab/estimate/',\n        body: JSON.stringify(postPayload),\n        headers: { 'Content-Type': 'application/json' },\n      })\n        .then(({ json }) =>\n          dispatch({ type: COST_ESTIMATE_RETURNED, query: queryEditor, json }),\n        )\n        .catch(response =>\n          getClientErrorObject(response).then(error => {\n            const message =\n              error.error ||\n              error.statusText ||\n              t('Failed at retrieving results');\n            return dispatch({\n              type: COST_ESTIMATE_FAILED,\n              query: queryEditor,\n              error: message,\n            });\n          }),\n        ),\n    ]);\n  };\n}\n\nexport function clearInactiveQueries(interval) {\n  return { type: CLEAR_INACTIVE_QUERIES, interval };\n}\n\nexport function startQuery(query, runPreviewOnly) {\n  Object.assign(query, {\n    id: query.id ? query.id : nanoid(11),\n    progress: 0,\n    startDttm: now(),\n    state: query.runAsync ? 'pending' : 'running',\n    cached: false,\n  });\n  return { type: START_QUERY, query, runPreviewOnly };\n}\n\nexport function querySuccess(query, results) {\n  return { type: QUERY_SUCCESS, query, results };\n}\n\nexport function logFailedQuery(query, errors) {\n  return function (dispatch) {\n    const eventData = {\n      has_err: true,\n      start_offset: query.startDttm,\n      ts: new Date().getTime(),\n    };\n    errors?.forEach(({ error_type: errorType, message, extra }) => {\n      const issueCodes = extra?.issue_codes?.map(({ code }) => code) || [-1];\n      dispatch(\n        logEvent(LOG_ACTIONS_SQLLAB_FETCH_FAILED_QUERY, {\n          ...eventData,\n          error_type: errorType,\n          issue_codes: issueCodes,\n          error_details: message,\n        }),\n      );\n    });\n  };\n}\n\nexport function queryFailed(query, msg, link, errors) {\n  return function (dispatch) {\n    dispatch(logFailedQuery(query, errors));\n    dispatch({ type: QUERY_FAILED, query, msg, link, errors });\n  };\n}\n\nexport function stopQuery(query) {\n  return { type: STOP_QUERY, query };\n}\n\nexport function clearQueryResults(query) {\n  return { type: CLEAR_QUERY_RESULTS, query };\n}\n\nexport function removeDataPreview(table) {\n  return { type: REMOVE_DATA_PREVIEW, table };\n}\n\nexport function requestQueryResults(query) {\n  return { type: REQUEST_QUERY_RESULTS, query };\n}\n\nexport function fetchQueryResults(query, displayLimit, timeoutInMs) {\n  return function (dispatch, getState) {\n    const { SQLLAB_QUERY_RESULT_TIMEOUT } = getState().common?.conf ?? {};\n    dispatch(requestQueryResults(query));\n\n    const queryParams = rison.encode({\n      key: query.resultsKey,\n      rows: displayLimit || null,\n    });\n    const timeout = timeoutInMs ?? SQLLAB_QUERY_RESULT_TIMEOUT;\n    const controller = new AbortController();\n    return SupersetClient.get({\n      endpoint: `/api/v1/sqllab/results/?q=${queryParams}`,\n      parseMethod: 'json-bigint',\n      ...(timeout && { timeout, signal: controller.signal }),\n    })\n      .then(({ json }) => dispatch(querySuccess(query, json)))\n      .catch(response => {\n        controller.abort();\n        getClientErrorObject(response).then(error => {\n          const message =\n            error.error ||\n            error.statusText ||\n            t('Failed at retrieving results');\n\n          return dispatch(\n            queryFailed(query, message, error.link, error.errors),\n          );\n        });\n      });\n  };\n}\n\nexport function runQuery(query, runPreviewOnly) {\n  return function (dispatch) {\n    dispatch(startQuery(query, runPreviewOnly));\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      runAsync: query.runAsync,\n      catalog: query.catalog,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      tab: query.tab,\n      tmp_table_name: query.tempTable,\n      select_as_cta: query.ctas,\n      ctas_method: query.ctas_method,\n      templateParams: query.templateParams,\n      queryLimit: query.queryLimit,\n      expand_data: true,\n    };\n\n    const search = window.location.search || '';\n    return SupersetClient.post({\n      endpoint: `/api/v1/sqllab/execute/${search}`,\n      body: JSON.stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' },\n      parseMethod: 'json-bigint',\n    })\n      .then(({ json }) => {\n        if (!query.runAsync) {\n          dispatch(querySuccess(query, json));\n        }\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          let message =\n            error.error ||\n            error.message ||\n            error.statusText ||\n            t('Unknown error');\n          if (message.includes('CSRF token')) {\n            message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n          }\n          dispatch(queryFailed(query, message, error.link, error.errors));\n        }),\n      );\n  };\n}\n\nexport function runQueryFromSqlEditor(\n  database,\n  queryEditor,\n  defaultQueryLimit,\n  tempTable,\n  ctas,\n  ctasMethod,\n) {\n  return function (dispatch, getState) {\n    const qe = getUpToDateQuery(getState(), queryEditor, queryEditor.id);\n    const query = {\n      dbId: qe.dbId,\n      sql: qe.selectedText || qe.sql,\n      sqlEditorId: qe.id,\n      tab: qe.name,\n      catalog: qe.catalog,\n      schema: qe.schema,\n      tempTable,\n      templateParams: qe.templateParams,\n      queryLimit: qe.queryLimit || defaultQueryLimit,\n      runAsync: database ? database.allow_run_async : false,\n      ctas,\n      ctas_method: ctasMethod,\n      updateTabState: !qe.selectedText,\n    };\n    dispatch(runQuery(query));\n  };\n}\n\nexport function reRunQuery(query) {\n  // run Query with a new id\n  return function (dispatch) {\n    dispatch(runQuery({ ...query, id: nanoid(11) }));\n  };\n}\n\nexport function postStopQuery(query) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/api/v1/query/stop',\n      body: JSON.stringify({ client_id: query.id }),\n      headers: { 'Content-Type': 'application/json' },\n    })\n      .then(() => dispatch(stopQuery(query)))\n      .then(() => dispatch(addSuccessToast(t('Query was stopped.'))))\n      .catch(() => dispatch(addDangerToast(t('Failed to stop query.'))));\n  };\n}\n\nexport function setDatabases(databases) {\n  return { type: SET_DATABASES, databases };\n}\n\nfunction migrateTable(table, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI('/tableschemaview/'),\n    postPayload: { table: { ...table, queryEditorId } },\n  })\n    .then(({ json }) => {\n      const newTable = {\n        ...table,\n        id: json.id,\n        queryEditorId,\n      };\n      return dispatch({ type: MIGRATE_TABLE, oldTable: table, newTable });\n    })\n    .catch(() =>\n      dispatch(\n        addWarningToast(\n          t(\n            'Unable to migrate table schema state to backend. Superset will retry ' +\n              'later. Please contact your administrator if this problem persists.',\n          ),\n        ),\n      ),\n    );\n}\n\nfunction migrateQuery(queryId, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI(`/tabstateview/${queryEditorId}/migrate_query`),\n    postPayload: { queryId },\n  })\n    .then(() => dispatch({ type: MIGRATE_QUERY, queryId, queryEditorId }))\n    .catch(() =>\n      dispatch(\n        addWarningToast(\n          t(\n            'Unable to migrate query state to backend. Superset will retry later. ' +\n              'Please contact your administrator if this problem persists.',\n          ),\n        ),\n      ),\n    );\n}\n\n/**\n * Persist QueryEditor from local storage to backend tab state.\n * This ensures that when new tabs are created, query editors are\n * asynchronously stored in local storage and periodically synchronized\n * with the backend.\n * When switching to persistence mode, the QueryEditors previously\n * stored in local storage will also be synchronized to the backend\n * through syncQueryEditor.\n */\nexport function syncQueryEditor(queryEditor) {\n  return function (dispatch, getState) {\n    const { tables, queries } = getState().sqlLab;\n    const localStorageTables = tables.filter(\n      table => table.inLocalStorage && table.queryEditorId === queryEditor.id,\n    );\n    const localStorageQueries = Object.values(queries).filter(\n      query => query.inLocalStorage && query.sqlEditorId === queryEditor.id,\n    );\n    return SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor },\n    })\n      .then(({ json }) => {\n        const newQueryEditor = {\n          ...queryEditor,\n          id: json.id.toString(),\n          inLocalStorage: false,\n          loaded: true,\n        };\n        dispatch({\n          type: MIGRATE_QUERY_EDITOR,\n          oldQueryEditor: queryEditor,\n          newQueryEditor,\n        });\n        dispatch({\n          type: MIGRATE_TAB_HISTORY,\n          oldId: queryEditor.id,\n          newId: newQueryEditor.id,\n        });\n        return Promise.all([\n          ...localStorageTables.map(table =>\n            migrateTable(table, newQueryEditor.id, dispatch),\n          ),\n          ...localStorageQueries.map(query =>\n            migrateQuery(query.id, newQueryEditor.id, dispatch),\n          ),\n        ]);\n      })\n      .catch(() =>\n        dispatch(\n          addWarningToast(\n            t(\n              'Unable to migrate query editor state to backend. Superset will retry ' +\n                'later. Please contact your administrator if this problem persists.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function addQueryEditor(queryEditor) {\n  const newQueryEditor = {\n    ...queryEditor,\n    id: nanoid(11),\n    loaded: true,\n    inLocalStorage: true,\n  };\n  return {\n    type: ADD_QUERY_EDITOR,\n    queryEditor: newQueryEditor,\n  };\n}\n\nexport function addNewQueryEditor() {\n  return function (dispatch, getState) {\n    const {\n      sqlLab: { queryEditors, tabHistory, unsavedQueryEditor, databases },\n      common,\n    } = getState();\n    const defaultDbId = common.conf.SQLLAB_DEFAULT_DBID;\n    const activeQueryEditor = queryEditors.find(\n      qe => qe.id === tabHistory[tabHistory.length - 1],\n    );\n    const dbIds = Object.values(databases).map(database => database.id);\n    const firstDbId = dbIds.length > 0 ? Math.min(...dbIds) : undefined;\n    const { dbId, catalog, schema, queryLimit, autorun } = {\n      ...queryEditors[0],\n      ...activeQueryEditor,\n      ...(unsavedQueryEditor.id === activeQueryEditor?.id &&\n        unsavedQueryEditor),\n    };\n    const warning = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)\n      ? ''\n      : t(\n          '-- Note: Unless you save your query, these tabs will NOT persist if you clear your cookies or change browsers.\\n\\n',\n        );\n\n    const name = newQueryTabName(\n      queryEditors?.map(qe => ({\n        ...qe,\n        ...(qe.id === unsavedQueryEditor.id && unsavedQueryEditor),\n      })) || [],\n    );\n\n    return dispatch(\n      addQueryEditor({\n        dbId: dbId || defaultDbId || firstDbId,\n        catalog: catalog ?? null,\n        schema: schema ?? null,\n        autorun: autorun ?? false,\n        sql: `${warning}SELECT ...`,\n        queryLimit: queryLimit || common.conf.DEFAULT_SQLLAB_LIMIT,\n        name,\n      }),\n    );\n  };\n}\n\nexport function cloneQueryToNewTab(query, autorun) {\n  return function (dispatch, getState) {\n    const state = getState();\n    const { queryEditors, unsavedQueryEditor, tabHistory } = state.sqlLab;\n    const sourceQueryEditor = {\n      ...queryEditors.find(qe => qe.id === tabHistory[tabHistory.length - 1]),\n      ...(tabHistory[tabHistory.length - 1] === unsavedQueryEditor.id &&\n        unsavedQueryEditor),\n    };\n    const queryEditor = {\n      name: t('Copy of %s', sourceQueryEditor.name),\n      dbId: query.dbId ? query.dbId : null,\n      catalog: query.catalog ? query.catalog : null,\n      schema: query.schema ? query.schema : null,\n      autorun,\n      sql: query.sql,\n      queryLimit: sourceQueryEditor.queryLimit,\n      maxRow: sourceQueryEditor.maxRow,\n      templateParams: sourceQueryEditor.templateParams,\n    };\n    return dispatch(addQueryEditor(queryEditor));\n  };\n}\n\nexport function setLastUpdatedActiveTab(queryEditorId) {\n  return {\n    type: SET_LAST_UPDATED_ACTIVE_TAB,\n    queryEditorId,\n  };\n}\n\nexport function setActiveQueryEditor(queryEditor) {\n  return {\n    type: SET_ACTIVE_QUERY_EDITOR,\n    queryEditor,\n  };\n}\n\nexport function switchQueryEditor(goBackward = false) {\n  return function (dispatch, getState) {\n    const { sqlLab } = getState();\n    const { queryEditors, tabHistory } = sqlLab;\n    const qeid = tabHistory[tabHistory.length - 1];\n    const currentIndex = queryEditors.findIndex(qe => qe.id === qeid);\n    const nextIndex = goBackward\n      ? currentIndex - 1 + queryEditors.length\n      : currentIndex + 1;\n    const newQueryEditor = queryEditors[nextIndex % queryEditors.length];\n\n    dispatch(setActiveQueryEditor(newQueryEditor));\n  };\n}\n\nexport function loadQueryEditor(queryEditor) {\n  return { type: LOAD_QUERY_EDITOR, queryEditor };\n}\n\nexport function setTables(tableSchemas) {\n  const tables = tableSchemas\n    .filter(tableSchema => tableSchema.description !== null)\n    .map(tableSchema => {\n      const {\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        dataPreviewQueryId,\n      } = tableSchema.description;\n      return {\n        dbId: tableSchema.database_id,\n        queryEditorId: tableSchema.tab_state_id.toString(),\n        catalog: tableSchema.catalog,\n        schema: tableSchema.schema,\n        name: tableSchema.table,\n        expanded: tableSchema.expanded,\n        id: tableSchema.id,\n        dataPreviewQueryId,\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        isMetadataLoading: false,\n        isExtraMetadataLoading: false,\n      };\n    });\n  return { type: SET_TABLES, tables };\n}\n\nexport function fetchQueryEditor(queryEditor, displayLimit) {\n  return function (dispatch) {\n    SupersetClient.get({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n    })\n      .then(({ json }) => {\n        const loadedQueryEditor = {\n          id: json.id.toString(),\n          loaded: true,\n          name: json.label,\n          sql: json.sql,\n          selectedText: null,\n          latestQueryId: json.latest_query?.id,\n          autorun: json.autorun,\n          dbId: json.database_id,\n          templateParams: json.template_params,\n          catalog: json.catalog,\n          schema: json.schema,\n          queryLimit: json.query_limit,\n          remoteId: json.saved_query?.id,\n          hideLeftBar: json.hide_left_bar,\n        };\n        dispatch(loadQueryEditor(loadedQueryEditor));\n        dispatch(setTables(json.table_schemas || []));\n        if (json.latest_query && json.latest_query.resultsKey) {\n          dispatch(fetchQueryResults(json.latest_query, displayLimit));\n        }\n      })\n      .catch(response => {\n        if (response.status !== 404) {\n          return dispatch(\n            addDangerToast(t('An error occurred while fetching tab state')),\n          );\n        }\n        return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n      });\n  };\n}\n\nexport function setActiveSouthPaneTab(tabId) {\n  return { type: SET_ACTIVE_SOUTHPANE_TAB, tabId };\n}\n\nexport function toggleLeftBar(queryEditor) {\n  const hideLeftBar = !queryEditor.hideLeftBar;\n  return {\n    type: QUERY_EDITOR_TOGGLE_LEFT_BAR,\n    queryEditor,\n    hideLeftBar,\n  };\n}\n\nexport function clearDestoryedQueryEditor(queryEditorId) {\n  return { type: CLEAR_DESTROYED_QUERY_EDITOR, queryEditorId };\n}\n\nexport function removeQueryEditor(queryEditor) {\n  return { type: REMOVE_QUERY_EDITOR, queryEditor };\n}\n\nexport function removeAllOtherQueryEditors(queryEditor) {\n  return function (dispatch, getState) {\n    const { sqlLab } = getState();\n    sqlLab.queryEditors?.forEach(otherQueryEditor => {\n      if (otherQueryEditor.id !== queryEditor.id) {\n        dispatch(removeQueryEditor(otherQueryEditor));\n      }\n    });\n  };\n}\n\nexport function removeQuery(query) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)\n      ? SupersetClient.delete({\n          endpoint: encodeURI(\n            `/tabstateview/${query.sqlEditorId}/query/${query.id}`,\n          ),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_QUERY, query }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing query. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetDb(queryEditor, dbId) {\n  return { type: QUERY_EDITOR_SETDB, queryEditor, dbId };\n}\n\nexport function queryEditorSetCatalog(queryEditor, catalog) {\n  return {\n    type: QUERY_EDITOR_SET_CATALOG,\n    queryEditor: queryEditor || {},\n    catalog,\n  };\n}\n\nexport function queryEditorSetSchema(queryEditor, schema) {\n  return {\n    type: QUERY_EDITOR_SET_SCHEMA,\n    queryEditor: queryEditor || {},\n    schema,\n  };\n}\n\nexport function queryEditorSetAutorun(queryEditor, autorun) {\n  return { type: QUERY_EDITOR_SET_AUTORUN, queryEditor, autorun };\n}\n\nexport function queryEditorSetTitle(queryEditor, name, id) {\n  return {\n    type: QUERY_EDITOR_SET_TITLE,\n    queryEditor: { ...queryEditor, id },\n    name,\n  };\n}\n\nexport function saveQuery(query, clientId) {\n  const { id, ...payload } = convertQueryToServer(query);\n\n  return dispatch =>\n    SupersetClient.post({\n      endpoint: '/api/v1/saved_query/',\n      jsonPayload: convertQueryToServer(payload),\n    })\n      .then(result => {\n        const savedQuery = convertQueryToClient({\n          id: result.json.id,\n          ...result.json.result,\n        });\n        dispatch({\n          type: QUERY_EDITOR_SAVED,\n          query,\n          clientId,\n          result: savedQuery,\n        });\n        dispatch(queryEditorSetTitle(query, query.name, clientId));\n        return savedQuery;\n      })\n      .catch(() =>\n        dispatch(addDangerToast(t('Your query could not be saved'))),\n      );\n}\n\nexport const addSavedQueryToTabState =\n  (queryEditor, savedQuery) => dispatch => {\n    const sync = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)\n      ? SupersetClient.put({\n          endpoint: `/tabstateview/${queryEditor.id}`,\n          postPayload: { saved_query_id: savedQuery.remoteId },\n        })\n      : Promise.resolve();\n\n    return sync\n      .catch(() => {\n        dispatch(addDangerToast(t('Your query was not properly saved')));\n      })\n      .then(() => {\n        dispatch(addSuccessToast(t('Your query was saved')));\n      });\n  };\n\nexport function updateSavedQuery(query, clientId) {\n  const { id, ...payload } = convertQueryToServer(query);\n\n  return dispatch =>\n    SupersetClient.put({\n      endpoint: `/api/v1/saved_query/${query.remoteId}`,\n      jsonPayload: convertQueryToServer(payload),\n    })\n      .then(() => {\n        dispatch(addSuccessToast(t('Your query was updated')));\n        dispatch(queryEditorSetTitle(query, query.name, clientId));\n      })\n      .catch(e => {\n        const message = t('Your query could not be updated');\n        // eslint-disable-next-line no-console\n        console.error(message, e);\n        dispatch(addDangerToast(message));\n      })\n      .then(() => dispatch(updateQueryEditor(query)));\n}\n\nexport function queryEditorSetSql(queryEditor, sql, queryId) {\n  return { type: QUERY_EDITOR_SET_SQL, queryEditor, sql, queryId };\n}\n\nexport function queryEditorSetCursorPosition(queryEditor, position) {\n  return { type: QUERY_EDITOR_SET_CURSOR_POSITION, queryEditor, position };\n}\n\nexport function queryEditorSetAndSaveSql(targetQueryEditor, sql, queryId) {\n  return function (dispatch, getState) {\n    const queryEditor = getUpToDateQuery(getState(), targetQueryEditor);\n    // saved query and set tab state use this action\n    dispatch(queryEditorSetSql(queryEditor, sql, queryId));\n    if (isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)) {\n      return SupersetClient.put({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n        postPayload: { sql, latest_query_id: queryId },\n      }).catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while storing your query in the backend. To ' +\n                'avoid losing your changes, please save your query using the ' +\n                '\"Save Query\" button.',\n            ),\n          ),\n        ),\n      );\n    }\n    return Promise.resolve();\n  };\n}\n\nexport function formatQuery(queryEditor) {\n  return function (dispatch, getState) {\n    const { sql } = getUpToDateQuery(getState(), queryEditor);\n    return SupersetClient.post({\n      endpoint: `/api/v1/sqllab/format_sql/`,\n      // TODO (betodealmeida): pass engine as a parameter for better formatting\n      body: JSON.stringify({ sql }),\n      headers: { 'Content-Type': 'application/json' },\n    }).then(({ json }) => {\n      dispatch(queryEditorSetSql(queryEditor, json.result));\n    });\n  };\n}\n\nexport function queryEditorSetQueryLimit(queryEditor, queryLimit) {\n  return {\n    type: QUERY_EDITOR_SET_QUERY_LIMIT,\n    queryEditor,\n    queryLimit,\n  };\n}\n\nexport function queryEditorSetTemplateParams(queryEditor, templateParams) {\n  return {\n    type: QUERY_EDITOR_SET_TEMPLATE_PARAMS,\n    queryEditor,\n    templateParams,\n  };\n}\n\nexport function queryEditorSetSelectedText(queryEditor, sql) {\n  return { type: QUERY_EDITOR_SET_SELECTED_TEXT, queryEditor, sql };\n}\n\nexport function mergeTable(table, query, prepend) {\n  return { type: MERGE_TABLE, table, query, prepend };\n}\n\nexport function addTable(queryEditor, tableName, catalogName, schemaName) {\n  return function (dispatch, getState) {\n    const { dbId } = getUpToDateQuery(getState(), queryEditor, queryEditor.id);\n    const table = {\n      dbId,\n      queryEditorId: queryEditor.id,\n      catalog: catalogName,\n      schema: schemaName,\n      name: tableName,\n    };\n    dispatch(\n      mergeTable({\n        ...table,\n        id: nanoid(11),\n        expanded: true,\n      }),\n    );\n  };\n}\n\nexport function runTablePreviewQuery(newTable, runPreviewOnly) {\n  return function (dispatch, getState) {\n    const {\n      sqlLab: { databases },\n    } = getState();\n    const database = databases[newTable.dbId];\n    const { dbId, catalog, schema } = newTable;\n\n    if (database && !database.disable_data_preview) {\n      const dataPreviewQuery = {\n        id: newTable.previewQueryId ?? nanoid(11),\n        dbId,\n        catalog,\n        schema,\n        sql: newTable.selectStar,\n        tableName: newTable.name,\n        sqlEditorId: null,\n        tab: '',\n        runAsync: database.allow_run_async,\n        ctas: false,\n        isDataPreview: true,\n      };\n      if (runPreviewOnly) {\n        return dispatch(runQuery(dataPreviewQuery, runPreviewOnly));\n      }\n      return Promise.all([\n        dispatch(\n          mergeTable(\n            {\n              id: newTable.id,\n              dbId: newTable.dbId,\n              catalog: newTable.catalog,\n              schema: newTable.schema,\n              name: newTable.name,\n              queryEditorId: newTable.queryEditorId,\n              dataPreviewQueryId: dataPreviewQuery.id,\n            },\n            dataPreviewQuery,\n          ),\n        ),\n        dispatch(runQuery(dataPreviewQuery)),\n      ]);\n    }\n    return Promise.resolve();\n  };\n}\n\nexport function syncTable(table, tableMetadata) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)\n      ? SupersetClient.post({\n          endpoint: encodeURI('/tableschemaview/'),\n          postPayload: { table: { ...tableMetadata, ...table } },\n        })\n      : Promise.resolve({ json: { id: table.id } });\n\n    return sync\n      .then(({ json: resultJson }) => {\n        const newTable = { ...table, id: `${resultJson.id}` };\n        dispatch(\n          mergeTable({\n            ...newTable,\n            expanded: true,\n            initialized: true,\n          }),\n        );\n      })\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while fetching table metadata. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function changeDataPreviewId(oldQueryId, newQuery) {\n  return { type: CHANGE_DATA_PREVIEW_ID, oldQueryId, newQuery };\n}\n\nexport function reFetchQueryResults(query) {\n  return function (dispatch) {\n    const newQuery = {\n      id: nanoid(),\n      dbId: query.dbId,\n      sql: query.sql,\n      tableName: query.tableName,\n      sqlEditorId: null,\n      tab: '',\n      runAsync: false,\n      ctas: false,\n      queryLimit: query.queryLimit,\n      isDataPreview: query.isDataPreview,\n    };\n    dispatch(runQuery(newQuery));\n    dispatch(changeDataPreviewId(query.id, newQuery));\n  };\n}\n\nexport function expandTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n          postPayload: { expanded: true },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: EXPAND_TABLE, table }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while expanding the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function collapseTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n          postPayload: { expanded: false },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: COLLAPSE_TABLE, table }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while collapsing the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function removeTables(tables) {\n  return function (dispatch) {\n    const tablesToRemove = tables?.filter(Boolean) ?? [];\n    const sync = isFeatureEnabled(FeatureFlag.SqllabBackendPersistence)\n      ? Promise.all(\n          tablesToRemove.map(table =>\n            table.initialized\n              ? SupersetClient.delete({\n                  endpoint: encodeURI(`/tableschemaview/${table.id}`),\n                })\n              : Promise.resolve(),\n          ),\n        )\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_TABLES, tables: tablesToRemove }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function refreshQueries(alteredQueries) {\n  return { type: REFRESH_QUERIES, alteredQueries };\n}\n\nexport function setUserOffline(offline) {\n  return { type: SET_USER_OFFLINE, offline };\n}\n\nexport function persistEditorHeight(queryEditor, northPercent, southPercent) {\n  return {\n    type: QUERY_EDITOR_PERSIST_HEIGHT,\n    queryEditor,\n    northPercent,\n    southPercent,\n  };\n}\n\nexport function popPermalink(key) {\n  return function (dispatch) {\n    return SupersetClient.get({ endpoint: `/api/v1/sqllab/permalink/${key}` })\n      .then(({ json }) =>\n        dispatch(\n          addQueryEditor({\n            name: json.name ? json.name : t('Shared query'),\n            dbId: json.dbId ? parseInt(json.dbId, 10) : null,\n            catalog: json.catalog ? json.catalog : null,\n            schema: json.schema ? json.schema : null,\n            autorun: json.autorun ? json.autorun : false,\n            sql: json.sql ? json.sql : 'SELECT ...',\n            templateParams: json.templateParams,\n          }),\n        ),\n      )\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\n\nexport function popStoredQuery(urlId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/sqllab/permalink/kv:${urlId}`,\n    })\n      .then(({ json }) =>\n        dispatch(\n          addQueryEditor({\n            name: json.name ? json.name : t('Shared query'),\n            dbId: json.dbId ? parseInt(json.dbId, 10) : null,\n            catalog: json.catalog ? json.catalog : null,\n            schema: json.schema ? json.schema : null,\n            autorun: json.autorun ? json.autorun : false,\n            sql: json.sql ? json.sql : 'SELECT ...',\n            templateParams: json.templateParams,\n          }),\n        ),\n      )\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popSavedQuery(saveQueryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/saved_query/${saveQueryId}`,\n    })\n      .then(({ json }) => {\n        const queryEditorProps = {\n          ...convertQueryToClient(json.result),\n          loaded: true,\n          autorun: false,\n        };\n        const tmpAdaptedProps = {\n          name: queryEditorProps.name,\n          dbId: queryEditorProps.database.id,\n          catalog: queryEditorProps.catalog,\n          schema: queryEditorProps.schema,\n          sql: queryEditorProps.sql,\n          templateParams: queryEditorProps.templateParams,\n          remoteId: queryEditorProps.remoteId,\n        };\n        return dispatch(addQueryEditor(tmpAdaptedProps));\n      })\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popQuery(queryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/query/${queryId}`,\n    })\n      .then(({ json }) => {\n        const queryData = json.result;\n        const queryEditorProps = {\n          dbId: queryData.database.id,\n          catalog: queryData.catalog,\n          schema: queryData.schema,\n          sql: queryData.sql,\n          name: t('Copy of %s', queryData.tab_name),\n          autorun: false,\n        };\n        return dispatch(addQueryEditor(queryEditorProps));\n      })\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popDatasourceQuery(datasourceKey, sql) {\n  return function (dispatch) {\n    const QUERY_TEXT = t('Query');\n    const datasetId = datasourceKey.split('__')[0];\n\n    const queryParams = rison.encode({\n      keys: ['none'],\n      columns: ['name', 'schema', 'database.id', 'select_star'],\n    });\n\n    return SupersetClient.get({\n      endpoint: `/api/v1/dataset/${datasetId}?q=${queryParams}`,\n    })\n      .then(({ json }) =>\n        dispatch(\n          addQueryEditor({\n            name: `${QUERY_TEXT} ${json.result.name}`,\n            dbId: json.result.database.id,\n            schema: json.result.schema,\n            autorun: sql !== undefined,\n            sql: sql || json.result.select_star,\n          }),\n        ),\n      )\n      .catch(() =>\n        dispatch(addDangerToast(t(\"The datasource couldn't be loaded\"))),\n      );\n  };\n}\nexport function createDatasourceStarted() {\n  return { type: CREATE_DATASOURCE_STARTED };\n}\nexport function createDatasourceSuccess(data) {\n  const datasource = `${data.id}__table`;\n  return { type: CREATE_DATASOURCE_SUCCESS, datasource };\n}\nexport function createDatasourceFailed(err) {\n  return { type: CREATE_DATASOURCE_FAILED, err };\n}\n\nexport function createDatasource(vizOptions) {\n  return dispatch => {\n    dispatch(createDatasourceStarted());\n    const { dbId, catalog, schema, datasourceName, sql } = vizOptions;\n    return SupersetClient.post({\n      endpoint: '/api/v1/dataset/',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        database: dbId,\n        catalog,\n        schema,\n        sql,\n        table_name: datasourceName,\n        is_managed_externally: false,\n        external_url: null,\n      }),\n    })\n      .then(({ json }) => {\n        dispatch(createDatasourceSuccess(json));\n\n        return Promise.resolve(json);\n      })\n      .catch(error => {\n        getClientErrorObject(error).then(e => {\n          dispatch(addDangerToast(e.error));\n        });\n        dispatch(\n          createDatasourceFailed(\n            t('An error occurred while creating the data source'),\n          ),\n        );\n\n        return Promise.reject();\n      });\n  };\n}\n\nexport function createCtasDatasource(vizOptions) {\n  return dispatch => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/api/v1/dataset/get_or_create/',\n      jsonPayload: vizOptions,\n    })\n      .then(({ json }) => {\n        dispatch(createDatasourceSuccess(json.result));\n\n        return json.result;\n      })\n      .catch(() => {\n        const errorMsg = t('An error occurred while creating the data source');\n        dispatch(createDatasourceFailed(errorMsg));\n        return Promise.reject(new Error(errorMsg));\n      });\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}