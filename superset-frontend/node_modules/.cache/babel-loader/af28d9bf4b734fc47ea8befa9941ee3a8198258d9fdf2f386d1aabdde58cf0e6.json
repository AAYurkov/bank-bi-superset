{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useState } from 'react';\nimport { getClientErrorObject, SupersetClient, t } from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { Switch } from 'src/components/Switch';\nimport Collapse from 'src/components/Collapse';\nimport { AntdForm, AsyncSelect, Col, Row, Select, Upload } from 'src/components';\nimport { Icons } from 'src/components/Icons';\nimport { Input, InputNumber } from 'src/components/Input';\nimport rison from 'rison';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { antdCollapseStyles, antDModalNoPaddingStyles, antDModalStyles, formStyles, StyledFormItem, StyledSwitchContainer } from './styles';\nimport ColumnsPreview from './ColumnsPreview';\nimport StyledFormItemWithTip from './StyledFormItemWithTip';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst CSVSpecificFields = [\n'delimiter',\n'skip_initial_space',\n'skip_blank_lines',\n'day_first',\n'column_data_types',\n'column_dates',\n'decimal_character',\n'null_values',\n'index_column',\n'header_row',\n'rows_to_read',\n'skip_rows'];\n\nconst ExcelSpecificFields = [\n'sheet_name',\n'column_dates',\n'decimal_character',\n'null_values',\n'index_column',\n'header_row',\n'rows_to_read',\n'skip_rows'];\n\nconst ColumnarSpecificFields = [];\nconst NonNullFields = ['rows_to_read', 'index_column'];\nconst AllSpecificFields = [\n...CSVSpecificFields,\n...ExcelSpecificFields,\n...ColumnarSpecificFields];\n\nconst UploadTypeToSpecificFields = {\n  csv: CSVSpecificFields,\n  excel: ExcelSpecificFields,\n  columnar: ColumnarSpecificFields\n};\nconst isFieldATypeSpecificField = (field, type) => UploadTypeToSpecificFields[type].includes(field);\nconst defaultUploadInfo = {\n  table_name: '',\n  schema: '',\n  sheet_name: undefined,\n  delimiter: ',',\n  already_exists: 'fail',\n  skip_initial_space: false,\n  skip_blank_lines: false,\n  day_first: false,\n  decimal_character: '.',\n  null_values: [],\n  header_row: '0',\n  rows_to_read: null,\n  skip_rows: '0',\n  column_dates: [],\n  index_column: null,\n  dataframe_index: false,\n  index_label: '',\n  columns_read: [],\n  column_data_types: ''\n};\n// Allowed extensions to accept for file upload, users can always override this\n// by selecting all file extensions on the OS file picker. Also \".txt\" will\n// allow all files to be selected.\nconst allowedExtensionsToAccept = {\n  csv: '.csv, .tsv',\n  excel: '.xls, .xlsx',\n  columnar: '.parquet, .zip'\n};\nconst extensionsToLabel = {\n  csv: 'CSV',\n  excel: 'Excel',\n  columnar: 'Columnar'\n};\nexport const validateUploadFileExtension = (file, allowedExtensions) => {\n  const extensionMatch = file.name.match(/.+\\.([^.]+)$/);\n  if (!extensionMatch) {\n    return false;\n  }\n  const fileType = extensionMatch[1].toLowerCase();\n  const lowerCaseAllowedExtensions = allowedExtensions.map((ext) => ext.toLowerCase());\n  return lowerCaseAllowedExtensions.includes(fileType);\n};\nconst SwitchContainer = ({ label, dataTest, children, ...switchProps }) => _jsxs(StyledSwitchContainer, { children: [\n  _jsx(Switch, { \"data-test\": dataTest, ...switchProps }),\n  _jsx(\"div\", { className: \"switch-label\", children: label }),\n  children] }\n);\nconst UploadDataModal = ({ addDangerToast, addSuccessToast, onHide, show, allowedExtensions, type = 'csv' }) => {\n  const [form] = AntdForm.useForm();\n  const [currentDatabaseId, setCurrentDatabaseId] = useState(0);\n  const [fileList, setFileList] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [sheetNames, setSheetNames] = useState([]);\n  const [sheetsColumnNames, setSheetsColumnNames] = useState({});\n  const [delimiter, setDelimiter] = useState(',');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentSchema, setCurrentSchema] = useState();\n  const [currentDataframeIndex, setCurrentDataframeIndex] = useState(false);\n  const [previewUploadedFile, setPreviewUploadedFile] = useState(true);\n  const [fileLoading, setFileLoading] = useState(false);\n  const createTypeToEndpointMap = (databaseId) => `/api/v1/database/${databaseId}/upload/`;\n  const nullValuesOptions = [\n  {\n    value: '\"\"',\n    label: 'Empty Strings \"\"'\n  },\n  {\n    value: 'None',\n    label: 'None'\n  },\n  {\n    value: 'nan',\n    label: 'nan'\n  },\n  {\n    value: 'null',\n    label: 'null'\n  },\n  {\n    value: 'N/A',\n    label: 'N/A'\n  }];\n\n  const delimiterOptions = [\n  {\n    value: ',',\n    label: 'Comma \",\"'\n  },\n  {\n    value: ';',\n    label: 'Semicolon \";\"'\n  },\n  {\n    value: '\\t',\n    label: 'Tab \"\\\\t\"'\n  },\n  {\n    value: '|',\n    label: 'Pipe'\n  }];\n\n  const tableAlreadyExistsOptions = [\n  {\n    value: 'fail',\n    label: 'Fail'\n  },\n  {\n    value: 'replace',\n    label: 'Replace'\n  },\n  {\n    value: 'append',\n    label: 'Append'\n  }];\n\n  const onChangePreviewUploadedFile = (value) => {\n    setPreviewUploadedFile(value);\n  };\n  const onChangeDatabase = (database) => {\n    setCurrentDatabaseId(database == null ? void 0 : database.value);\n    setCurrentSchema(undefined);\n    form.setFieldsValue({ schema: undefined });\n  };\n  const onChangeSchema = (schema) => {\n    setCurrentSchema(schema == null ? void 0 : schema.value);\n  };\n  const onChangeDelimiter = (value) => {\n    setDelimiter(value);\n  };\n  const clearModal = () => {\n    setFileList([]);\n    setColumns([]);\n    setCurrentSchema('');\n    setCurrentDatabaseId(0);\n    setSheetNames([]);\n    setIsLoading(false);\n    setDelimiter(',');\n    setPreviewUploadedFile(true);\n    setFileLoading(false);\n    setSheetsColumnNames({});\n    form.resetFields();\n  };\n  const loadDatabaseOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode_uri({\n      filters: [\n      {\n        col: 'allow_file_upload',\n        opr: 'eq',\n        value: true\n      }],\n\n      page,\n      page_size: pageSize\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/database/?q=${query}`\n    }).then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.id,\n        label: item.database_name\n      }));\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const loadSchemaOptions = useMemo(() => (input = '', page, pageSize) => {\n    if (!currentDatabaseId) {\n      return Promise.resolve({ data: [], totalCount: 0 });\n    }\n    return SupersetClient.get({\n      endpoint: `/api/v1/database/${currentDatabaseId}/schemas/?q=(upload_allowed:!t)`\n    }).then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item,\n        label: item\n      }));\n      return { data: list, totalCount: response.json.count };\n    });\n  }, [currentDatabaseId]);\n  const loadFileMetadata = (file) => {\n    const fields = form.getFieldsValue();\n    const mergedValues = { ...defaultUploadInfo, ...fields };\n    const formData = new FormData();\n    formData.append('file', file);\n    if (type === 'csv') {\n      formData.append('delimiter', mergedValues.delimiter);\n    }\n    formData.append('type', type);\n    setFileLoading(true);\n    return SupersetClient.post({\n      endpoint: '/api/v1/database/upload_metadata/',\n      body: formData,\n      headers: { Accept: 'application/json' }\n    }).\n    then((response) => {\n      const { items } = response.json.result;\n      if (items && type !== 'excel') {\n        setColumns(items[0].column_names);\n      } else\n      {\n        const { allSheetNames, sheetColumnNamesMap } = items.reduce((acc, item) => {\n          acc.allSheetNames.push(item.sheet_name);\n          acc.sheetColumnNamesMap[item.sheet_name] = item.column_names;\n          return acc;\n        }, { allSheetNames: [], sheetColumnNamesMap: {} });\n        setColumns(items[0].column_names);\n        setSheetNames(allSheetNames);\n        form.setFieldsValue({ sheet_name: allSheetNames[0] });\n        setSheetsColumnNames(sheetColumnNamesMap);\n      }\n    }).\n    catch((response) => getClientErrorObject(response).then((error) => {\n      addDangerToast(error.error || 'Error');\n      setColumns([]);\n      form.setFieldsValue({ sheet_name: undefined });\n      setSheetNames([]);\n    })).\n    finally(() => {\n      setFileLoading(false);\n    });\n  };\n  const getAllFieldsNotInType = () => {\n    const specificFields = UploadTypeToSpecificFields[type] || [];\n    return [...AllSpecificFields].filter((field) => !specificFields.includes(field));\n  };\n  const appendFormData = (formData, data) => {\n    const allFieldsNotInType = getAllFieldsNotInType();\n    Object.entries(data).forEach(([key, value]) => {\n      if (!(allFieldsNotInType.includes(key) ||\n      NonNullFields.includes(key) && (\n      value === undefined || value === null))) {\n        formData.append(key, value);\n      }\n    });\n  };\n  const onClose = () => {\n    clearModal();\n    onHide();\n  };\n  const onFinish = () => {var _fileList$;\n    const fields = form.getFieldsValue();\n    delete fields.database;\n    fields.schema = currentSchema;\n    const mergedValues = { ...defaultUploadInfo, ...fields };\n    const formData = new FormData();\n    const file = (_fileList$ = fileList[0]) == null ? void 0 : _fileList$.originFileObj;\n    if (file) {\n      formData.append('file', file);\n    }\n    appendFormData(formData, mergedValues);\n    setIsLoading(true);\n    const endpoint = createTypeToEndpointMap(currentDatabaseId);\n    formData.append('type', type);\n    return SupersetClient.post({\n      endpoint,\n      body: formData,\n      headers: { Accept: 'application/json' }\n    }).\n    then(() => {\n      addSuccessToast(t('Data imported'));\n      setIsLoading(false);\n      onClose();\n    }).\n    catch((response) => getClientErrorObject(response).then((error) => {\n      addDangerToast(error.error || 'Error');\n    })).\n    finally(() => {\n      setIsLoading(false);\n    });\n  };\n  const onRemoveFile = (removedFile) => {\n    setFileList(fileList.filter((file) => file.uid !== removedFile.uid));\n    setColumns([]);\n    setSheetNames([]);\n    form.setFieldsValue({ sheet_name: undefined });\n    return false;\n  };\n  const onSheetNameChange = (value) => {var _sheetsColumnNames$va;\n    setColumns((_sheetsColumnNames$va = sheetsColumnNames[value]) != null ? _sheetsColumnNames$va : []);\n  };\n  const columnsToOptions = () => columns.map((column) => ({\n    value: column,\n    label: column\n  }));\n  const sheetNamesToOptions = () => sheetNames.map((sheetName) => ({\n    value: sheetName,\n    label: sheetName\n  }));\n  const onChangeFile = async (info) => {\n    setFileList([\n    {\n      ...info.file,\n      status: 'done'\n    }]\n    );\n    if (!previewUploadedFile) {\n      return;\n    }\n    await loadFileMetadata(info.file.originFileObj);\n  };\n  useEffect(() => {\n    if (columns.length > 0 &&\n    fileList[0].originFileObj &&\n    fileList[0].originFileObj instanceof File) {\n      if (!previewUploadedFile) {\n        return;\n      }\n      loadFileMetadata(fileList[0].originFileObj).then((r) => r);\n    }\n  }, [delimiter]);\n  const validateUpload = (_, value) => {\n    if (fileList.length === 0) {\n      return Promise.reject(t('Uploading a file is required'));\n    }\n    if (!validateUploadFileExtension(fileList[0], allowedExtensions)) {\n      return Promise.reject(t('Upload a file with a valid extension. Valid: [%s]', allowedExtensions.join(',')));\n    }\n    return Promise.resolve();\n  };\n  const validateDatabase = (_, value) => {\n    if (!currentDatabaseId) {\n      return Promise.reject(t('Selecting a database is required'));\n    }\n    return Promise.resolve();\n  };\n  const uploadTitles = {\n    csv: t('CSV upload'),\n    excel: t('Excel upload'),\n    columnar: t('Columnar upload')\n  };\n  const UploadTitle = () => {\n    const title = uploadTitles[type] || t('Upload');\n    return _jsx(\"h4\", { children: title });\n  };\n  return _jsx(Modal, { css: (theme) => [\n    antDModalNoPaddingStyles,\n    antDModalStyles(theme),\n    formStyles(theme)],\n    primaryButtonLoading: isLoading, name: \"database\", \"data-test\": \"upload-modal\", onHandledPrimaryAction: form.submit, onHide: onClose, width: \"500px\", primaryButtonName: \"Upload\", centered: true, show: show, title: _jsx(UploadTitle, {}), children:\n    _jsx(AntdForm, { form: form, onFinish: onFinish, \"data-test\": \"dashboard-edit-properties-form\", layout: \"vertical\", initialValues: defaultUploadInfo, children:\n      _jsxs(Collapse, { expandIconPosition: \"right\", accordion: true, defaultActiveKey: \"general\", css: (theme) => antdCollapseStyles(theme), children: [\n        _jsxs(Collapse.Panel, { header: _jsxs(\"div\", { children: [\n            _jsx(\"h4\", { children: t('General information') }),\n            _jsx(\"p\", { className: \"helper\", children: t('Upload a file to a database.') })] }\n          ), children: [\n          _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItem, { label: t('%(label)s file', {\n                  label: extensionsToLabel[type]\n                }), name: \"file\", required: true, rules: [{ validator: validateUpload }], children:\n                _jsx(Upload, { name: \"modelFile\", id: \"modelFile\", \"data-test\": \"model-file-input\", accept: allowedExtensionsToAccept[type], fileList: fileList, onChange: onChangeFile, onRemove: onRemoveFile\n                  // upload is handled by hook\n                  , customRequest: () => {}, children:\n                  _jsx(Button, { \"aria-label\": t('Select'), icon: _jsx(Icons.UploadOutlined, {}), loading: fileLoading, children:\n                    t('Select') }\n                  ) }\n                ) }\n              ) }\n            ) }\n          ),\n          _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItem, { children:\n                _jsx(SwitchContainer, { label: t('Preview uploaded file'), dataTest: \"previewUploadedFile\", onChange: onChangePreviewUploadedFile, checked: previewUploadedFile }) }\n              ) }\n            ) }\n          ),\n          previewUploadedFile && _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(ColumnsPreview, { columns: columns }) }\n            ) }\n          ),\n          _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItem, { label: t('Database'), required: true, name: \"database\", rules: [{ validator: validateDatabase }], children:\n                _jsx(AsyncSelect, { ariaLabel: t('Select a database'), options: loadDatabaseOptions, onChange: onChangeDatabase, allowClear: true, placeholder: t('Select a database to upload the file to') }) }\n              ) }\n            ) }\n          ),\n          _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItem, { label: t('Schema'), name: \"schema\", children:\n                _jsx(AsyncSelect, { ariaLabel: t('Select a schema'), options: loadSchemaOptions, onChange: onChangeSchema, allowClear: true, placeholder: t('Select a schema if the database supports this') }) }\n              ) }\n            ) }\n          ),\n          _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItem, { label: t('Table name'), name: \"table_name\", required: true, rules: [\n                { required: true, message: 'Table name is required' }], children:\n\n                _jsx(Input, { \"aria-label\": t('Table Name'), name: \"table_name\", \"data-test\": \"properties-modal-name-input\", type: \"text\", placeholder: t('Name of table to be created') }) }\n              ) }\n            ) }\n          ),\n          isFieldATypeSpecificField('delimiter', type) && _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItemWithTip, { label: t('Delimiter'), tip: t('Select a delimiter for this data'), name: \"delimiter\", children:\n                _jsx(Select, { ariaLabel: t('Choose a delimiter'), options: delimiterOptions, onChange: onChangeDelimiter, allowNewOptions: true }) }\n              ) }\n            ) }\n          ),\n          isFieldATypeSpecificField('sheet_name', type) && _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItem, { label: t('Sheet name'), name: \"sheet_name\", children:\n                _jsx(Select, { ariaLabel: t('Choose sheet name'), options: sheetNamesToOptions(), onChange: onSheetNameChange, allowNewOptions: true, placeholder: t('Select a sheet name from the uploaded file') }) }\n              ) }\n            ) }\n          )] }, \"general\"\n        ),\n        _jsxs(Collapse.Panel, { header: _jsxs(\"div\", { children: [\n            _jsx(\"h4\", { children: t('File settings') }),\n            _jsx(\"p\", { className: \"helper\", children:\n              t('Adjust how spaces, blank lines, null values are handled and other file wide settings.') }\n            )] }\n          ), children: [\n          _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItemWithTip, { label: t('If table already exists'), tip: t('What should happen if the table already exists'), name: \"already_exists\", children:\n                _jsx(Select, { ariaLabel: t('Choose already exists'), options: tableAlreadyExistsOptions, onChange: () => {} }) }\n              ) }\n            ) }\n          ),\n          isFieldATypeSpecificField('column_dates', type) && _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItem, { label: t('Columns to be parsed as dates'), name: \"column_dates\", children:\n                _jsx(Select, { ariaLabel: t('Choose columns to be parsed as dates'), mode: \"multiple\", options: columnsToOptions(), allowClear: true, allowNewOptions: true, placeholder: t('Select column names from a dropdown list that should be parsed as dates.') }) }\n              ) }\n            ) }\n          ),\n          isFieldATypeSpecificField('decimal_character', type) && _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItemWithTip, { label: t('Decimal character'), tip: t('Character to interpret as decimal point'), name: \"decimal_character\", children:\n                _jsx(Input, { type: \"text\" }) }\n              ) }\n            ) }\n          ),\n          isFieldATypeSpecificField('null_values', type) && _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItemWithTip, { label: t('Null Values'), tip: t('Choose values that should be treated as null. Warning: Hive database supports only a single value'), name: \"null_values\", children:\n                _jsx(Select, { mode: \"multiple\", options: nullValuesOptions, allowClear: true, allowNewOptions: true }) }\n              ) }\n            ) }\n          ),\n          isFieldATypeSpecificField('skip_initial_space', type) && _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItem, { name: \"skip_initial_space\", children:\n                _jsx(SwitchContainer, { label: t('Skip spaces after delimiter'), dataTest: \"skipInitialSpace\" }) }\n              ) }\n            ) }\n          ),\n          isFieldATypeSpecificField('skip_blank_lines', type) && _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItem, { name: \"skip_blank_lines\", children:\n                _jsx(SwitchContainer, { label: t('Skip blank lines rather than interpreting them as Not A Number values'), dataTest: \"skipBlankLines\" }) }\n              ) }\n            ) }\n          ),\n          isFieldATypeSpecificField('day_first', type) && _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItem, { name: \"day_first\", children:\n                _jsx(SwitchContainer, { label: t('DD/MM format dates, international and European format'), dataTest: \"dayFirst\" }) }\n              ) }\n            ) }\n          )] }, \"2\"\n        ),\n        _jsxs(Collapse.Panel, { header: _jsxs(\"div\", { children: [\n            _jsx(\"h4\", { children: t('Columns') }),\n            _jsx(\"p\", { className: \"helper\", children:\n              t('Adjust column settings such as specifying the columns to read, how duplicates are handled, column data types, and more.') }\n            )] }\n          ), children: [\n          _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItem, { label: t('Columns to read'), name: \"columns_read\", children:\n                _jsx(Select, { ariaLabel: t('Choose columns to read'), mode: \"multiple\", options: columnsToOptions(), allowClear: true, allowNewOptions: true, placeholder: t('List of the column names that should be read') }) }\n              ) }\n            ) }\n          ),\n          isFieldATypeSpecificField('column_data_types', type) && _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItemWithTip, { label: t('Column data types'), tip: t('A dictionary with column names and their data types if you need to change the defaults. Example: {\"user_id\":\"int\"}. Check Python\\'s Pandas library for supported data types.'), name: \"column_data_types\", children:\n                _jsx(Input, { \"aria-label\": t('Column data types'), type: \"text\" }) }\n              ) }\n            ) }\n          ),\n          _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItem, { name: \"dataframe_index\", children:\n                _jsx(SwitchContainer, { label: t('Create dataframe index'), dataTest: \"dataFrameIndex\", onChange: setCurrentDataframeIndex }) }\n              ) }\n            ) }\n          ),\n          currentDataframeIndex &&\n          isFieldATypeSpecificField('index_column', type) && _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItemWithTip, { label: t('Index column'), tip: t('Column to use as the index of the dataframe. If None is given, Index label is used.'), name: \"index_column\", children:\n                _jsx(Select, { ariaLabel: t('Choose index column'), options: columns.map((column) => ({\n                    value: column,\n                    label: column\n                  })), allowClear: true, allowNewOptions: true }) }\n              ) }\n            ) }\n          ),\n          currentDataframeIndex && _jsx(Row, { children:\n            _jsx(Col, { span: 24, children:\n              _jsx(StyledFormItemWithTip, { label: t('Index label'), tip: t(\"Label for the index column. Don't use an existing column name.\"), name: \"index_label\", children:\n                _jsx(Input, { \"aria-label\": t('Index label'), type: \"text\" }) }\n              ) }\n            ) }\n          )] }, \"3\"\n        ),\n        isFieldATypeSpecificField('header_row', type) &&\n        isFieldATypeSpecificField('rows_to_read', type) &&\n        isFieldATypeSpecificField('skip_rows', type) && _jsx(Collapse.Panel, { header: _jsxs(\"div\", { children: [\n            _jsx(\"h4\", { children: t('Rows') }),\n            _jsx(\"p\", { className: \"helper\", children:\n              t('Set header rows and the number of rows to read or skip.') }\n            )] }\n          ), children:\n          _jsxs(Row, { children: [\n            _jsx(Col, { span: 8, children:\n              _jsx(StyledFormItemWithTip, { label: t('Header row'), tip: t('Row containing the headers to use as column names (0 is first line of data).'), name: \"header_row\", rules: [\n                { required: true, message: 'Header row is required' }], children:\n\n                _jsx(InputNumber, { \"aria-label\": t('Header row'), type: \"text\", min: 0 }) }\n              ) }\n            ),\n            _jsx(Col, { span: 8, children:\n              _jsx(StyledFormItemWithTip, { label: t('Rows to read'), tip: t('Number of rows of file to read. Leave empty (default) to read all rows'), name: \"rows_to_read\", children:\n                _jsx(InputNumber, { \"aria-label\": t('Rows to read'), min: 1 }) }\n              ) }\n            ),\n            _jsx(Col, { span: 8, children:\n              _jsx(StyledFormItemWithTip, { label: t('Skip rows'), tip: t('Number of rows to skip at start of file.'), name: \"skip_rows\", rules: [\n                { required: true, message: 'Skip rows is required' }], children:\n\n                _jsx(InputNumber, { \"aria-label\": t('Skip rows'), min: 0 }) }\n              ) }\n            )] }\n          ) }, \"4\"\n        )] }\n      ) }\n    ) }\n  );\n};__signature__(UploadDataModal, \"useForm{[form]}\\nuseState{[currentDatabaseId, setCurrentDatabaseId](0)}\\nuseState{[fileList, setFileList]([])}\\nuseState{[columns, setColumns]([])}\\nuseState{[sheetNames, setSheetNames]([])}\\nuseState{[sheetsColumnNames, setSheetsColumnNames]({})}\\nuseState{[delimiter, setDelimiter](',')}\\nuseState{[isLoading, setIsLoading](false)}\\nuseState{[currentSchema, setCurrentSchema]}\\nuseState{[currentDataframeIndex, setCurrentDataframeIndex](false)}\\nuseState{[previewUploadedFile, setPreviewUploadedFile](true)}\\nuseState{[fileLoading, setFileLoading](false)}\\nuseMemo{loadDatabaseOptions}\\nuseMemo{loadSchemaOptions}\\nuseEffect{}\");const _default =\nwithToasts(UploadDataModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CSVSpecificFields, \"CSVSpecificFields\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(ExcelSpecificFields, \"ExcelSpecificFields\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(ColumnarSpecificFields, \"ColumnarSpecificFields\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(NonNullFields, \"NonNullFields\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(AllSpecificFields, \"AllSpecificFields\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(UploadTypeToSpecificFields, \"UploadTypeToSpecificFields\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(isFieldATypeSpecificField, \"isFieldATypeSpecificField\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(defaultUploadInfo, \"defaultUploadInfo\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(allowedExtensionsToAccept, \"allowedExtensionsToAccept\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(extensionsToLabel, \"extensionsToLabel\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(validateUploadFileExtension, \"validateUploadFileExtension\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(SwitchContainer, \"SwitchContainer\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(UploadDataModal, \"UploadDataModal\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useEffect","useMemo","useState","getClientErrorObject","SupersetClient","t","Modal","Button","Switch","Collapse","AntdForm","AsyncSelect","Col","Row","Select","Upload","Icons","Input","InputNumber","rison","withToasts","antdCollapseStyles","antDModalNoPaddingStyles","antDModalStyles","formStyles","StyledFormItem","StyledSwitchContainer","ColumnsPreview","StyledFormItemWithTip","jsx","_jsx","jsxs","_jsxs","CSVSpecificFields","ExcelSpecificFields","ColumnarSpecificFields","NonNullFields","AllSpecificFields","UploadTypeToSpecificFields","csv","excel","columnar","isFieldATypeSpecificField","field","type","includes","defaultUploadInfo","table_name","schema","sheet_name","undefined","delimiter","already_exists","skip_initial_space","skip_blank_lines","day_first","decimal_character","null_values","header_row","rows_to_read","skip_rows","column_dates","index_column","dataframe_index","index_label","columns_read","column_data_types","allowedExtensionsToAccept","extensionsToLabel","validateUploadFileExtension","file","allowedExtensions","extensionMatch","name","match","fileType","toLowerCase","lowerCaseAllowedExtensions","map","ext","SwitchContainer","label","dataTest","children","switchProps","className","UploadDataModal","addDangerToast","addSuccessToast","onHide","show","form","useForm","currentDatabaseId","setCurrentDatabaseId","fileList","setFileList","columns","setColumns","sheetNames","setSheetNames","sheetsColumnNames","setSheetsColumnNames","setDelimiter","isLoading","setIsLoading","currentSchema","setCurrentSchema","currentDataframeIndex","setCurrentDataframeIndex","previewUploadedFile","setPreviewUploadedFile","fileLoading","setFileLoading","createTypeToEndpointMap","databaseId","nullValuesOptions","value","delimiterOptions","tableAlreadyExistsOptions","onChangePreviewUploadedFile","onChangeDatabase","database","setFieldsValue","onChangeSchema","onChangeDelimiter","clearModal","resetFields","loadDatabaseOptions","input","page","pageSize","query","encode_uri","filters","col","opr","page_size","get","endpoint","then","response","list","json","result","item","id","database_name","data","totalCount","count","loadSchemaOptions","Promise","resolve","loadFileMetadata","fields","getFieldsValue","mergedValues","formData","FormData","append","post","body","headers","Accept","items","column_names","allSheetNames","sheetColumnNamesMap","reduce","acc","push","catch","error","finally","getAllFieldsNotInType","specificFields","filter","appendFormData","allFieldsNotInType","Object","entries","forEach","key","onClose","onFinish","_fileList$","originFileObj","onRemoveFile","removedFile","uid","onSheetNameChange","_sheetsColumnNames$va","columnsToOptions","column","sheetNamesToOptions","sheetName","onChangeFile","info","status","length","File","r","validateUpload","_","reject","join","validateDatabase","uploadTitles","UploadTitle","title","css","theme","primaryButtonLoading","onHandledPrimaryAction","submit","width","primaryButtonName","centered","layout","initialValues","expandIconPosition","accordion","defaultActiveKey","Panel","header","span","required","rules","validator","accept","onChange","onRemove","customRequest","icon","UploadOutlined","loading","checked","ariaLabel","options","allowClear","placeholder","message","tip","allowNewOptions","mode","min","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/features/databases/UploadDataModel/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  FunctionComponent,\n  useEffect,\n  useMemo,\n  useState,\n  ReactNode,\n  FC,\n} from 'react';\n\nimport {\n  getClientErrorObject,\n  SupersetClient,\n  SupersetTheme,\n  t,\n} from '@superset-ui/core';\nimport Modal from 'src/components/Modal';\nimport Button from 'src/components/Button';\nimport { Switch, SwitchProps } from 'src/components/Switch';\nimport Collapse from 'src/components/Collapse';\nimport {\n  AntdForm,\n  AsyncSelect,\n  Col,\n  Row,\n  Select,\n  Upload,\n} from 'src/components';\nimport { Icons } from 'src/components/Icons';\nimport { Input, InputNumber } from 'src/components/Input';\nimport rison from 'rison';\n// eslint-disable-next-line no-restricted-imports\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface'; // TODO: Remove antd\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport {\n  antdCollapseStyles,\n  antDModalNoPaddingStyles,\n  antDModalStyles,\n  formStyles,\n  StyledFormItem,\n  StyledSwitchContainer,\n} from './styles';\nimport ColumnsPreview from './ColumnsPreview';\nimport StyledFormItemWithTip from './StyledFormItemWithTip';\n\ntype UploadType = 'csv' | 'excel' | 'columnar';\n\ninterface UploadDataModalProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onHide: () => void;\n  show: boolean;\n  allowedExtensions: string[];\n  type: UploadType;\n}\n\nconst CSVSpecificFields = [\n  'delimiter',\n  'skip_initial_space',\n  'skip_blank_lines',\n  'day_first',\n  'column_data_types',\n  'column_dates',\n  'decimal_character',\n  'null_values',\n  'index_column',\n  'header_row',\n  'rows_to_read',\n  'skip_rows',\n];\n\nconst ExcelSpecificFields = [\n  'sheet_name',\n  'column_dates',\n  'decimal_character',\n  'null_values',\n  'index_column',\n  'header_row',\n  'rows_to_read',\n  'skip_rows',\n];\n\nconst ColumnarSpecificFields: string[] = [];\n\nconst NonNullFields = ['rows_to_read', 'index_column'];\n\nconst AllSpecificFields = [\n  ...CSVSpecificFields,\n  ...ExcelSpecificFields,\n  ...ColumnarSpecificFields,\n];\n\nconst UploadTypeToSpecificFields: Record<UploadType, string[]> = {\n  csv: CSVSpecificFields,\n  excel: ExcelSpecificFields,\n  columnar: ColumnarSpecificFields,\n};\n\nconst isFieldATypeSpecificField = (field: string, type: UploadType) =>\n  UploadTypeToSpecificFields[type].includes(field);\n\ninterface UploadInfo {\n  table_name: string;\n  schema: string;\n  sheet_name?: string;\n  delimiter: string;\n  already_exists: string;\n  skip_initial_space: boolean;\n  skip_blank_lines: boolean;\n  day_first: boolean;\n  decimal_character: string;\n  null_values: Array<string>;\n  header_row: string;\n  rows_to_read: string | null;\n  skip_rows: string;\n  column_dates: Array<string>;\n  index_column: string | null;\n  dataframe_index: boolean;\n  index_label: string;\n  columns_read: Array<string>;\n  column_data_types: string;\n}\n\nconst defaultUploadInfo: UploadInfo = {\n  table_name: '',\n  schema: '',\n  sheet_name: undefined,\n  delimiter: ',',\n  already_exists: 'fail',\n  skip_initial_space: false,\n  skip_blank_lines: false,\n  day_first: false,\n  decimal_character: '.',\n  null_values: [],\n  header_row: '0',\n  rows_to_read: null,\n  skip_rows: '0',\n  column_dates: [],\n  index_column: null,\n  dataframe_index: false,\n  index_label: '',\n  columns_read: [],\n  column_data_types: '',\n};\n\n// Allowed extensions to accept for file upload, users can always override this\n// by selecting all file extensions on the OS file picker. Also \".txt\" will\n// allow all files to be selected.\nconst allowedExtensionsToAccept = {\n  csv: '.csv, .tsv',\n  excel: '.xls, .xlsx',\n  columnar: '.parquet, .zip',\n};\n\nconst extensionsToLabel: Record<UploadType, string> = {\n  csv: 'CSV',\n  excel: 'Excel',\n  columnar: 'Columnar',\n};\n\nexport const validateUploadFileExtension = (\n  file: UploadFile<any>,\n  allowedExtensions: string[],\n) => {\n  const extensionMatch = file.name.match(/.+\\.([^.]+)$/);\n  if (!extensionMatch) {\n    return false;\n  }\n\n  const fileType = extensionMatch[1].toLowerCase();\n  const lowerCaseAllowedExtensions = allowedExtensions.map(ext =>\n    ext.toLowerCase(),\n  );\n  return lowerCaseAllowedExtensions.includes(fileType);\n};\n\ninterface StyledSwitchContainerProps extends SwitchProps {\n  label: string;\n  dataTest: string;\n  children?: ReactNode;\n}\n\nconst SwitchContainer = ({\n  label,\n  dataTest,\n  children,\n  ...switchProps\n}: StyledSwitchContainerProps) => (\n  <StyledSwitchContainer>\n    <Switch data-test={dataTest} {...switchProps} />\n    <div className=\"switch-label\">{label}</div>\n    {children}\n  </StyledSwitchContainer>\n);\n\nconst UploadDataModal: FunctionComponent<UploadDataModalProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  onHide,\n  show,\n  allowedExtensions,\n  type = 'csv',\n}) => {\n  const [form] = AntdForm.useForm();\n  const [currentDatabaseId, setCurrentDatabaseId] = useState<number>(0);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [columns, setColumns] = useState<string[]>([]);\n  const [sheetNames, setSheetNames] = useState<string[]>([]);\n  const [sheetsColumnNames, setSheetsColumnNames] = useState<\n    Record<string, string[]>\n  >({});\n  const [delimiter, setDelimiter] = useState<string>(',');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [currentSchema, setCurrentSchema] = useState<string | undefined>();\n  const [currentDataframeIndex, setCurrentDataframeIndex] =\n    useState<boolean>(false);\n  const [previewUploadedFile, setPreviewUploadedFile] = useState<boolean>(true);\n  const [fileLoading, setFileLoading] = useState<boolean>(false);\n\n  const createTypeToEndpointMap = (databaseId: number) =>\n    `/api/v1/database/${databaseId}/upload/`;\n\n  const nullValuesOptions = [\n    {\n      value: '\"\"',\n      label: 'Empty Strings \"\"',\n    },\n    {\n      value: 'None',\n      label: 'None',\n    },\n    {\n      value: 'nan',\n      label: 'nan',\n    },\n    {\n      value: 'null',\n      label: 'null',\n    },\n    {\n      value: 'N/A',\n      label: 'N/A',\n    },\n  ];\n\n  const delimiterOptions = [\n    {\n      value: ',',\n      label: 'Comma \",\"',\n    },\n    {\n      value: ';',\n      label: 'Semicolon \";\"',\n    },\n    {\n      value: '\\t',\n      label: 'Tab \"\\\\t\"',\n    },\n    {\n      value: '|',\n      label: 'Pipe',\n    },\n  ];\n\n  const tableAlreadyExistsOptions = [\n    {\n      value: 'fail',\n      label: 'Fail',\n    },\n    {\n      value: 'replace',\n      label: 'Replace',\n    },\n    {\n      value: 'append',\n      label: 'Append',\n    },\n  ];\n\n  const onChangePreviewUploadedFile = (value: boolean) => {\n    setPreviewUploadedFile(value);\n  };\n\n  const onChangeDatabase = (database: { value: number; label: string }) => {\n    setCurrentDatabaseId(database?.value);\n    setCurrentSchema(undefined);\n    form.setFieldsValue({ schema: undefined });\n  };\n\n  const onChangeSchema = (schema: { value: string; label: string }) => {\n    setCurrentSchema(schema?.value);\n  };\n\n  const onChangeDelimiter = (value: string) => {\n    setDelimiter(value);\n  };\n\n  const clearModal = () => {\n    setFileList([]);\n    setColumns([]);\n    setCurrentSchema('');\n    setCurrentDatabaseId(0);\n    setSheetNames([]);\n    setIsLoading(false);\n    setDelimiter(',');\n    setPreviewUploadedFile(true);\n    setFileLoading(false);\n    setSheetsColumnNames({});\n    form.resetFields();\n  };\n\n  const loadDatabaseOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filters: [\n            {\n              col: 'allow_file_upload',\n              opr: 'eq',\n              value: true,\n            },\n          ],\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/database/?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { id: number; database_name: string }) => ({\n              value: item.id,\n              label: item.database_name,\n            }),\n          );\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const loadSchemaOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        if (!currentDatabaseId) {\n          return Promise.resolve({ data: [], totalCount: 0 });\n        }\n        return SupersetClient.get({\n          endpoint: `/api/v1/database/${currentDatabaseId}/schemas/?q=(upload_allowed:!t)`,\n        }).then(response => {\n          const list = response.json.result.map((item: string) => ({\n            value: item,\n            label: item,\n          }));\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [currentDatabaseId],\n  );\n\n  const loadFileMetadata = (file: File) => {\n    const fields = form.getFieldsValue();\n    const mergedValues = { ...defaultUploadInfo, ...fields };\n    const formData = new FormData();\n    formData.append('file', file);\n    if (type === 'csv') {\n      formData.append('delimiter', mergedValues.delimiter);\n    }\n    formData.append('type', type);\n    setFileLoading(true);\n    return SupersetClient.post({\n      endpoint: '/api/v1/database/upload_metadata/',\n      body: formData,\n      headers: { Accept: 'application/json' },\n    })\n      .then(response => {\n        const { items } = response.json.result;\n        if (items && type !== 'excel') {\n          setColumns(items[0].column_names);\n        } else {\n          const { allSheetNames, sheetColumnNamesMap } = items.reduce(\n            (\n              acc: {\n                allSheetNames: string[];\n                sheetColumnNamesMap: Record<string, string[]>;\n              },\n              item: { sheet_name: string; column_names: string[] },\n            ) => {\n              acc.allSheetNames.push(item.sheet_name);\n              acc.sheetColumnNamesMap[item.sheet_name] = item.column_names;\n              return acc;\n            },\n            { allSheetNames: [], sheetColumnNamesMap: {} },\n          );\n          setColumns(items[0].column_names);\n          setSheetNames(allSheetNames);\n          form.setFieldsValue({ sheet_name: allSheetNames[0] });\n          setSheetsColumnNames(sheetColumnNamesMap);\n        }\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          addDangerToast(error.error || 'Error');\n          setColumns([]);\n          form.setFieldsValue({ sheet_name: undefined });\n          setSheetNames([]);\n        }),\n      )\n      .finally(() => {\n        setFileLoading(false);\n      });\n  };\n\n  const getAllFieldsNotInType = (): string[] => {\n    const specificFields = UploadTypeToSpecificFields[type] || [];\n    return [...AllSpecificFields].filter(\n      field => !specificFields.includes(field),\n    );\n  };\n\n  const appendFormData = (formData: FormData, data: Record<string, any>) => {\n    const allFieldsNotInType = getAllFieldsNotInType();\n    Object.entries(data).forEach(([key, value]) => {\n      if (\n        !(\n          allFieldsNotInType.includes(key) ||\n          (NonNullFields.includes(key) &&\n            (value === undefined || value === null))\n        )\n      ) {\n        formData.append(key, value);\n      }\n    });\n  };\n\n  const onClose = () => {\n    clearModal();\n    onHide();\n  };\n\n  const onFinish = () => {\n    const fields = form.getFieldsValue();\n    delete fields.database;\n    fields.schema = currentSchema;\n    const mergedValues = { ...defaultUploadInfo, ...fields };\n    const formData = new FormData();\n    const file = fileList[0]?.originFileObj;\n    if (file) {\n      formData.append('file', file);\n    }\n    appendFormData(formData, mergedValues);\n    setIsLoading(true);\n    const endpoint = createTypeToEndpointMap(currentDatabaseId);\n    formData.append('type', type);\n    return SupersetClient.post({\n      endpoint,\n      body: formData,\n      headers: { Accept: 'application/json' },\n    })\n      .then(() => {\n        addSuccessToast(t('Data imported'));\n        setIsLoading(false);\n        onClose();\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          addDangerToast(error.error || 'Error');\n        }),\n      )\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const onRemoveFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    setColumns([]);\n    setSheetNames([]);\n    form.setFieldsValue({ sheet_name: undefined });\n    return false;\n  };\n\n  const onSheetNameChange = (value: string) => {\n    setColumns(sheetsColumnNames[value] ?? []);\n  };\n\n  const columnsToOptions = () =>\n    columns.map(column => ({\n      value: column,\n      label: column,\n    }));\n\n  const sheetNamesToOptions = () =>\n    sheetNames.map(sheetName => ({\n      value: sheetName,\n      label: sheetName,\n    }));\n\n  const onChangeFile = async (info: UploadChangeParam<any>) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n    if (!previewUploadedFile) {\n      return;\n    }\n    await loadFileMetadata(info.file.originFileObj);\n  };\n\n  useEffect(() => {\n    if (\n      columns.length > 0 &&\n      fileList[0].originFileObj &&\n      fileList[0].originFileObj instanceof File\n    ) {\n      if (!previewUploadedFile) {\n        return;\n      }\n      loadFileMetadata(fileList[0].originFileObj).then(r => r);\n    }\n  }, [delimiter]);\n\n  const validateUpload = (_: any, value: string) => {\n    if (fileList.length === 0) {\n      return Promise.reject(t('Uploading a file is required'));\n    }\n    if (!validateUploadFileExtension(fileList[0], allowedExtensions)) {\n      return Promise.reject(\n        t(\n          'Upload a file with a valid extension. Valid: [%s]',\n          allowedExtensions.join(','),\n        ),\n      );\n    }\n    return Promise.resolve();\n  };\n\n  const validateDatabase = (_: any, value: string) => {\n    if (!currentDatabaseId) {\n      return Promise.reject(t('Selecting a database is required'));\n    }\n    return Promise.resolve();\n  };\n\n  const uploadTitles = {\n    csv: t('CSV upload'),\n    excel: t('Excel upload'),\n    columnar: t('Columnar upload'),\n  };\n\n  const UploadTitle: FC = () => {\n    const title = uploadTitles[type] || t('Upload');\n    return <h4>{title}</h4>;\n  };\n\n  return (\n    <Modal\n      css={(theme: SupersetTheme) => [\n        antDModalNoPaddingStyles,\n        antDModalStyles(theme),\n        formStyles(theme),\n      ]}\n      primaryButtonLoading={isLoading}\n      name=\"database\"\n      data-test=\"upload-modal\"\n      onHandledPrimaryAction={form.submit}\n      onHide={onClose}\n      width=\"500px\"\n      primaryButtonName=\"Upload\"\n      centered\n      show={show}\n      title={<UploadTitle />}\n    >\n      <AntdForm\n        form={form}\n        onFinish={onFinish}\n        data-test=\"dashboard-edit-properties-form\"\n        layout=\"vertical\"\n        initialValues={defaultUploadInfo}\n      >\n        <Collapse\n          expandIconPosition=\"right\"\n          accordion\n          defaultActiveKey=\"general\"\n          css={(theme: SupersetTheme) => antdCollapseStyles(theme)}\n        >\n          <Collapse.Panel\n            header={\n              <div>\n                <h4>{t('General information')}</h4>\n                <p className=\"helper\">{t('Upload a file to a database.')}</p>\n              </div>\n            }\n            key=\"general\"\n          >\n            <Row>\n              <Col span={24}>\n                <StyledFormItem\n                  label={t('%(label)s file', {\n                    label: extensionsToLabel[type],\n                  })}\n                  name=\"file\"\n                  required\n                  rules={[{ validator: validateUpload }]}\n                >\n                  <Upload\n                    name=\"modelFile\"\n                    id=\"modelFile\"\n                    data-test=\"model-file-input\"\n                    accept={allowedExtensionsToAccept[type]}\n                    fileList={fileList}\n                    onChange={onChangeFile}\n                    onRemove={onRemoveFile}\n                    // upload is handled by hook\n                    customRequest={() => {}}\n                  >\n                    <Button\n                      aria-label={t('Select')}\n                      icon={<Icons.UploadOutlined />}\n                      loading={fileLoading}\n                    >\n                      {t('Select')}\n                    </Button>\n                  </Upload>\n                </StyledFormItem>\n              </Col>\n            </Row>\n            <Row>\n              <Col span={24}>\n                <StyledFormItem>\n                  <SwitchContainer\n                    label={t('Preview uploaded file')}\n                    dataTest=\"previewUploadedFile\"\n                    onChange={onChangePreviewUploadedFile}\n                    checked={previewUploadedFile}\n                  />\n                </StyledFormItem>\n              </Col>\n            </Row>\n            {previewUploadedFile && (\n              <Row>\n                <Col span={24}>\n                  <ColumnsPreview columns={columns} />\n                </Col>\n              </Row>\n            )}\n            <Row>\n              <Col span={24}>\n                <StyledFormItem\n                  label={t('Database')}\n                  required\n                  name=\"database\"\n                  rules={[{ validator: validateDatabase }]}\n                >\n                  <AsyncSelect\n                    ariaLabel={t('Select a database')}\n                    options={loadDatabaseOptions}\n                    onChange={onChangeDatabase}\n                    allowClear\n                    placeholder={t('Select a database to upload the file to')}\n                  />\n                </StyledFormItem>\n              </Col>\n            </Row>\n            <Row>\n              <Col span={24}>\n                <StyledFormItem label={t('Schema')} name=\"schema\">\n                  <AsyncSelect\n                    ariaLabel={t('Select a schema')}\n                    options={loadSchemaOptions}\n                    onChange={onChangeSchema}\n                    allowClear\n                    placeholder={t(\n                      'Select a schema if the database supports this',\n                    )}\n                  />\n                </StyledFormItem>\n              </Col>\n            </Row>\n            <Row>\n              <Col span={24}>\n                <StyledFormItem\n                  label={t('Table name')}\n                  name=\"table_name\"\n                  required\n                  rules={[\n                    { required: true, message: 'Table name is required' },\n                  ]}\n                >\n                  <Input\n                    aria-label={t('Table Name')}\n                    name=\"table_name\"\n                    data-test=\"properties-modal-name-input\"\n                    type=\"text\"\n                    placeholder={t('Name of table to be created')}\n                  />\n                </StyledFormItem>\n              </Col>\n            </Row>\n            {isFieldATypeSpecificField('delimiter', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItemWithTip\n                    label={t('Delimiter')}\n                    tip={t('Select a delimiter for this data')}\n                    name=\"delimiter\"\n                  >\n                    <Select\n                      ariaLabel={t('Choose a delimiter')}\n                      options={delimiterOptions}\n                      onChange={onChangeDelimiter}\n                      allowNewOptions\n                    />\n                  </StyledFormItemWithTip>\n                </Col>\n              </Row>\n            )}\n            {isFieldATypeSpecificField('sheet_name', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItem label={t('Sheet name')} name=\"sheet_name\">\n                    <Select\n                      ariaLabel={t('Choose sheet name')}\n                      options={sheetNamesToOptions()}\n                      onChange={onSheetNameChange}\n                      allowNewOptions\n                      placeholder={t(\n                        'Select a sheet name from the uploaded file',\n                      )}\n                    />\n                  </StyledFormItem>\n                </Col>\n              </Row>\n            )}\n          </Collapse.Panel>\n          <Collapse.Panel\n            header={\n              <div>\n                <h4>{t('File settings')}</h4>\n                <p className=\"helper\">\n                  {t(\n                    'Adjust how spaces, blank lines, null values are handled and other file wide settings.',\n                  )}\n                </p>\n              </div>\n            }\n            key=\"2\"\n          >\n            <Row>\n              <Col span={24}>\n                <StyledFormItemWithTip\n                  label={t('If table already exists')}\n                  tip={t('What should happen if the table already exists')}\n                  name=\"already_exists\"\n                >\n                  <Select\n                    ariaLabel={t('Choose already exists')}\n                    options={tableAlreadyExistsOptions}\n                    onChange={() => {}}\n                  />\n                </StyledFormItemWithTip>\n              </Col>\n            </Row>\n            {isFieldATypeSpecificField('column_dates', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItem\n                    label={t('Columns to be parsed as dates')}\n                    name=\"column_dates\"\n                  >\n                    <Select\n                      ariaLabel={t('Choose columns to be parsed as dates')}\n                      mode=\"multiple\"\n                      options={columnsToOptions()}\n                      allowClear\n                      allowNewOptions\n                      placeholder={t(\n                        'Select column names from a dropdown list that should be parsed as dates.',\n                      )}\n                    />\n                  </StyledFormItem>\n                </Col>\n              </Row>\n            )}\n            {isFieldATypeSpecificField('decimal_character', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItemWithTip\n                    label={t('Decimal character')}\n                    tip={t('Character to interpret as decimal point')}\n                    name=\"decimal_character\"\n                  >\n                    <Input type=\"text\" />\n                  </StyledFormItemWithTip>\n                </Col>\n              </Row>\n            )}\n            {isFieldATypeSpecificField('null_values', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItemWithTip\n                    label={t('Null Values')}\n                    tip={t(\n                      'Choose values that should be treated as null. Warning: Hive database supports only a single value',\n                    )}\n                    name=\"null_values\"\n                  >\n                    <Select\n                      mode=\"multiple\"\n                      options={nullValuesOptions}\n                      allowClear\n                      allowNewOptions\n                    />\n                  </StyledFormItemWithTip>\n                </Col>\n              </Row>\n            )}\n            {isFieldATypeSpecificField('skip_initial_space', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItem name=\"skip_initial_space\">\n                    <SwitchContainer\n                      label={t('Skip spaces after delimiter')}\n                      dataTest=\"skipInitialSpace\"\n                    />\n                  </StyledFormItem>\n                </Col>\n              </Row>\n            )}\n            {isFieldATypeSpecificField('skip_blank_lines', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItem name=\"skip_blank_lines\">\n                    <SwitchContainer\n                      label={t(\n                        'Skip blank lines rather than interpreting them as Not A Number values',\n                      )}\n                      dataTest=\"skipBlankLines\"\n                    />\n                  </StyledFormItem>\n                </Col>\n              </Row>\n            )}\n            {isFieldATypeSpecificField('day_first', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItem name=\"day_first\">\n                    <SwitchContainer\n                      label={t(\n                        'DD/MM format dates, international and European format',\n                      )}\n                      dataTest=\"dayFirst\"\n                    />\n                  </StyledFormItem>\n                </Col>\n              </Row>\n            )}\n          </Collapse.Panel>\n          <Collapse.Panel\n            header={\n              <div>\n                <h4>{t('Columns')}</h4>\n                <p className=\"helper\">\n                  {t(\n                    'Adjust column settings such as specifying the columns to read, how duplicates are handled, column data types, and more.',\n                  )}\n                </p>\n              </div>\n            }\n            key=\"3\"\n          >\n            <Row>\n              <Col span={24}>\n                <StyledFormItem\n                  label={t('Columns to read')}\n                  name=\"columns_read\"\n                >\n                  <Select\n                    ariaLabel={t('Choose columns to read')}\n                    mode=\"multiple\"\n                    options={columnsToOptions()}\n                    allowClear\n                    allowNewOptions\n                    placeholder={t(\n                      'List of the column names that should be read',\n                    )}\n                  />\n                </StyledFormItem>\n              </Col>\n            </Row>\n            {isFieldATypeSpecificField('column_data_types', type) && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItemWithTip\n                    label={t('Column data types')}\n                    tip={t(\n                      'A dictionary with column names and their data types if you need to change the defaults. Example: {\"user_id\":\"int\"}. Check Python\\'s Pandas library for supported data types.',\n                    )}\n                    name=\"column_data_types\"\n                  >\n                    <Input aria-label={t('Column data types')} type=\"text\" />\n                  </StyledFormItemWithTip>\n                </Col>\n              </Row>\n            )}\n            <Row>\n              <Col span={24}>\n                <StyledFormItem name=\"dataframe_index\">\n                  <SwitchContainer\n                    label={t('Create dataframe index')}\n                    dataTest=\"dataFrameIndex\"\n                    onChange={setCurrentDataframeIndex}\n                  />\n                </StyledFormItem>\n              </Col>\n            </Row>\n            {currentDataframeIndex &&\n              isFieldATypeSpecificField('index_column', type) && (\n                <Row>\n                  <Col span={24}>\n                    <StyledFormItemWithTip\n                      label={t('Index column')}\n                      tip={t(\n                        'Column to use as the index of the dataframe. If None is given, Index label is used.',\n                      )}\n                      name=\"index_column\"\n                    >\n                      <Select\n                        ariaLabel={t('Choose index column')}\n                        options={columns.map(column => ({\n                          value: column,\n                          label: column,\n                        }))}\n                        allowClear\n                        allowNewOptions\n                      />\n                    </StyledFormItemWithTip>\n                  </Col>\n                </Row>\n              )}\n            {currentDataframeIndex && (\n              <Row>\n                <Col span={24}>\n                  <StyledFormItemWithTip\n                    label={t('Index label')}\n                    tip={t(\n                      \"Label for the index column. Don't use an existing column name.\",\n                    )}\n                    name=\"index_label\"\n                  >\n                    <Input aria-label={t('Index label')} type=\"text\" />\n                  </StyledFormItemWithTip>\n                </Col>\n              </Row>\n            )}\n          </Collapse.Panel>\n          {isFieldATypeSpecificField('header_row', type) &&\n            isFieldATypeSpecificField('rows_to_read', type) &&\n            isFieldATypeSpecificField('skip_rows', type) && (\n              <Collapse.Panel\n                header={\n                  <div>\n                    <h4>{t('Rows')}</h4>\n                    <p className=\"helper\">\n                      {t(\n                        'Set header rows and the number of rows to read or skip.',\n                      )}\n                    </p>\n                  </div>\n                }\n                key=\"4\"\n              >\n                <Row>\n                  <Col span={8}>\n                    <StyledFormItemWithTip\n                      label={t('Header row')}\n                      tip={t(\n                        'Row containing the headers to use as column names (0 is first line of data).',\n                      )}\n                      name=\"header_row\"\n                      rules={[\n                        { required: true, message: 'Header row is required' },\n                      ]}\n                    >\n                      <InputNumber\n                        aria-label={t('Header row')}\n                        type=\"text\"\n                        min={0}\n                      />\n                    </StyledFormItemWithTip>\n                  </Col>\n                  <Col span={8}>\n                    <StyledFormItemWithTip\n                      label={t('Rows to read')}\n                      tip={t(\n                        'Number of rows of file to read. Leave empty (default) to read all rows',\n                      )}\n                      name=\"rows_to_read\"\n                    >\n                      <InputNumber aria-label={t('Rows to read')} min={1} />\n                    </StyledFormItemWithTip>\n                  </Col>\n                  <Col span={8}>\n                    <StyledFormItemWithTip\n                      label={t('Skip rows')}\n                      tip={t('Number of rows to skip at start of file.')}\n                      name=\"skip_rows\"\n                      rules={[\n                        { required: true, message: 'Skip rows is required' },\n                      ]}\n                    >\n                      <InputNumber aria-label={t('Skip rows')} min={0} />\n                    </StyledFormItemWithTip>\n                  </Col>\n                </Row>\n              </Collapse.Panel>\n            )}\n        </Collapse>\n      </AntdForm>\n    </Modal>\n  );\n};\n\nexport default withToasts(UploadDataModal);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}