{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\nimport { CategoricalColorNamespace, NumberFormats, getColumnLabel, getValueFormatter, tooltipHtml } from '@superset-ui/core';\nimport { LegendOrientation, LegendType } from '../types';\nimport { defaultGrid, defaultYAxis } from '../defaults';\nimport { getLegendProps } from '../utils/series';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { getPercentFormatter } from '../utils/formatters';\nexport default function transformProps(chartProps) {\n  const refs = {};\n  let focusedSeries;\n  const { datasource: { currencyFormats = {}, columnFormats = {} }, formData, height, hooks, legendState = {}, queriesData, theme, width } = chartProps;\n  const { onLegendStateChanged } = hooks;\n  const { colorScheme, column, groupby = [], normalize, showLegend, showValue, sliceId, xAxisFormat, xAxisTitle, yAxisTitle, yAxisFormat } = formData;\n  const { data } = queriesData[0];\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n  const formatter = (format) => getValueFormatter(column, currencyFormats, columnFormats, format, undefined);\n  const xAxisFormatter = formatter(xAxisFormat);\n  const yAxisFormatter = formatter(yAxisFormat);\n  const percentFormatter = getPercentFormatter(NumberFormats.PERCENT_2_POINT);\n  const groupbySet = new Set(groupby);\n  const xAxisData = Object.keys(data[0]).\n  filter((key) => !groupbySet.has(key)).\n  map((key) => {\n    const array = key.split(' - ').map((value) => parseFloat(value));\n    return `${xAxisFormatter(array[0])} - ${xAxisFormatter(array[1])}`;\n  });\n  const barSeries = data.map((datum) => {\n    const seriesName = groupby.length > 0 ?\n    groupby.map((key) => datum[getColumnLabel(key)]).join(', ') :\n    getColumnLabel(column);\n    const seriesData = Object.keys(datum).\n    filter((key) => groupbySet.has(key) === false).\n    map((key) => datum[key]);\n    return {\n      name: seriesName,\n      type: 'bar',\n      data: seriesData,\n      itemStyle: {\n        color: colorFn(seriesName, sliceId)\n      },\n      label: {\n        show: showValue,\n        position: 'top',\n        formatter: (params) => {\n          const { value } = params;\n          return yAxisFormatter.format(value);\n        }\n      }\n    };\n  });\n  const legendOptions = barSeries.map((series) => series.name);\n  if (_isEmpty(legendState)) {\n    legendOptions.forEach((legend) => {\n      legendState[legend] = true;\n    });\n  }\n  const tooltipFormatter = (params) => {\n    const title = params[0].name;\n    const rows = params.map((param) => {\n      const { marker, seriesName, value } = param;\n      return [`${marker}${seriesName}`, yAxisFormatter.format(value)];\n    });\n    if (groupby.length > 0) {\n      const total = params.reduce((acc, param) => acc + param.value, 0);\n      if (!normalize) {\n        rows.forEach((row, i) => row.push(percentFormatter.format(params[i].value / (total || 1))));\n      }\n      const totalRow = ['Total', yAxisFormatter.format(total)];\n      if (!normalize) {\n        totalRow.push(percentFormatter.format(1));\n      }\n      rows.push(totalRow);\n    }\n    return tooltipHtml(rows, title, focusedSeries);\n  };\n  const onFocusedSeries = (index) => {\n    focusedSeries = index;\n  };\n  const echartOptions = {\n    grid: {\n      ...defaultGrid,\n      left: '5%',\n      right: '5%',\n      top: '10%',\n      bottom: '10%'\n    },\n    xAxis: {\n      data: xAxisData,\n      name: xAxisTitle,\n      nameGap: 35,\n      type: 'category',\n      nameLocation: 'middle'\n    },\n    yAxis: {\n      ...defaultYAxis,\n      name: yAxisTitle,\n      nameGap: normalize ? 55 : 40,\n      type: 'value',\n      nameLocation: 'middle',\n      axisLabel: {\n        formatter: (value) => yAxisFormatter.format(value)\n      }\n    },\n    series: barSeries,\n    legend: {\n      ...getLegendProps(LegendType.Scroll, LegendOrientation.Top, showLegend, theme, false, legendState),\n      data: legendOptions\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      trigger: 'axis',\n      formatter: tooltipFormatter\n    }\n  };\n  return {\n    refs,\n    formData,\n    width,\n    height,\n    echartOptions,\n    onFocusedSeries,\n    onLegendStateChanged\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(transformProps, \"transformProps\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/Histogram/transformProps.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["CategoricalColorNamespace","NumberFormats","getColumnLabel","getValueFormatter","tooltipHtml","LegendOrientation","LegendType","defaultGrid","defaultYAxis","getLegendProps","getDefaultTooltip","getPercentFormatter","transformProps","chartProps","refs","focusedSeries","datasource","currencyFormats","columnFormats","formData","height","hooks","legendState","queriesData","theme","width","onLegendStateChanged","colorScheme","column","groupby","normalize","showLegend","showValue","sliceId","xAxisFormat","xAxisTitle","yAxisTitle","yAxisFormat","data","colorFn","getScale","formatter","format","undefined","xAxisFormatter","yAxisFormatter","percentFormatter","PERCENT_2_POINT","groupbySet","Set","xAxisData","Object","keys","filter","key","has","map","array","split","value","parseFloat","barSeries","datum","seriesName","length","join","seriesData","name","type","itemStyle","color","label","show","position","params","legendOptions","series","_isEmpty","forEach","legend","tooltipFormatter","title","rows","param","marker","total","reduce","acc","row","i","push","totalRow","onFocusedSeries","index","echartOptions","grid","left","right","top","bottom","xAxis","nameGap","nameLocation","yAxis","axisLabel","Scroll","Top","tooltip","trigger","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-echarts/src/Histogram/transformProps.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport type { ComposeOption } from 'echarts/core';\nimport type { BarSeriesOption } from 'echarts/charts';\nimport type { GridComponentOption } from 'echarts/components';\nimport type { CallbackDataParams } from 'echarts/types/src/util/types';\nimport { isEmpty } from 'lodash';\nimport {\n  CategoricalColorNamespace,\n  NumberFormats,\n  getColumnLabel,\n  getValueFormatter,\n  tooltipHtml,\n} from '@superset-ui/core';\nimport { HistogramChartProps, HistogramTransformedProps } from './types';\nimport { LegendOrientation, LegendType, Refs } from '../types';\nimport { defaultGrid, defaultYAxis } from '../defaults';\nimport { getLegendProps } from '../utils/series';\nimport { getDefaultTooltip } from '../utils/tooltip';\nimport { getPercentFormatter } from '../utils/formatters';\n\nexport default function transformProps(\n  chartProps: HistogramChartProps,\n): HistogramTransformedProps {\n  const refs: Refs = {};\n  let focusedSeries: number | undefined;\n  const {\n    datasource: { currencyFormats = {}, columnFormats = {} },\n    formData,\n    height,\n    hooks,\n    legendState = {},\n    queriesData,\n    theme,\n    width,\n  } = chartProps;\n  const { onLegendStateChanged } = hooks;\n  const {\n    colorScheme,\n    column,\n    groupby = [],\n    normalize,\n    showLegend,\n    showValue,\n    sliceId,\n    xAxisFormat,\n    xAxisTitle,\n    yAxisTitle,\n    yAxisFormat,\n  } = formData;\n  const { data } = queriesData[0];\n  const colorFn = CategoricalColorNamespace.getScale(colorScheme);\n\n  const formatter = (format: string) =>\n    getValueFormatter(\n      column,\n      currencyFormats,\n      columnFormats,\n      format,\n      undefined,\n    );\n  const xAxisFormatter = formatter(xAxisFormat);\n  const yAxisFormatter = formatter(yAxisFormat);\n\n  const percentFormatter = getPercentFormatter(NumberFormats.PERCENT_2_POINT);\n  const groupbySet = new Set(groupby);\n  const xAxisData: string[] = Object.keys(data[0])\n    .filter(key => !groupbySet.has(key))\n    .map(key => {\n      const array = key.split(' - ').map(value => parseFloat(value));\n      return `${xAxisFormatter(array[0])} - ${xAxisFormatter(array[1])}`;\n    });\n  const barSeries: BarSeriesOption[] = data.map(datum => {\n    const seriesName =\n      groupby.length > 0\n        ? groupby.map(key => datum[getColumnLabel(key)]).join(', ')\n        : getColumnLabel(column);\n    const seriesData = Object.keys(datum)\n      .filter(key => groupbySet.has(key) === false)\n      .map(key => datum[key] as number);\n    return {\n      name: seriesName,\n      type: 'bar',\n      data: seriesData,\n      itemStyle: {\n        color: colorFn(seriesName, sliceId),\n      },\n      label: {\n        show: showValue,\n        position: 'top',\n        formatter: params => {\n          const { value } = params;\n          return yAxisFormatter.format(value as number);\n        },\n      },\n    };\n  });\n\n  const legendOptions = barSeries.map(series => series.name as string);\n  if (isEmpty(legendState)) {\n    legendOptions.forEach(legend => {\n      legendState[legend] = true;\n    });\n  }\n\n  const tooltipFormatter = (params: CallbackDataParams[]) => {\n    const title = params[0].name;\n    const rows = params.map(param => {\n      const { marker, seriesName, value } = param;\n      return [`${marker}${seriesName}`, yAxisFormatter.format(value as number)];\n    });\n    if (groupby.length > 0) {\n      const total = params.reduce(\n        (acc, param) => acc + (param.value as number),\n        0,\n      );\n      if (!normalize) {\n        rows.forEach((row, i) =>\n          row.push(\n            percentFormatter.format((params[i].value as number) / (total || 1)),\n          ),\n        );\n      }\n      const totalRow = ['Total', yAxisFormatter.format(total)];\n      if (!normalize) {\n        totalRow.push(percentFormatter.format(1));\n      }\n      rows.push(totalRow);\n    }\n    return tooltipHtml(rows, title, focusedSeries);\n  };\n\n  const onFocusedSeries = (index?: number | undefined) => {\n    focusedSeries = index;\n  };\n\n  type EChartsOption = ComposeOption<GridComponentOption | BarSeriesOption>;\n\n  const echartOptions: EChartsOption = {\n    grid: {\n      ...defaultGrid,\n      left: '5%',\n      right: '5%',\n      top: '10%',\n      bottom: '10%',\n    },\n    xAxis: {\n      data: xAxisData,\n      name: xAxisTitle,\n      nameGap: 35,\n      type: 'category',\n      nameLocation: 'middle',\n    },\n    yAxis: {\n      ...defaultYAxis,\n      name: yAxisTitle,\n      nameGap: normalize ? 55 : 40,\n      type: 'value',\n      nameLocation: 'middle',\n      axisLabel: {\n        formatter: (value: number) => yAxisFormatter.format(value),\n      },\n    },\n    series: barSeries,\n    legend: {\n      ...getLegendProps(\n        LegendType.Scroll,\n        LegendOrientation.Top,\n        showLegend,\n        theme,\n        false,\n        legendState,\n      ),\n      data: legendOptions,\n    },\n    tooltip: {\n      ...getDefaultTooltip(refs),\n      trigger: 'axis',\n      formatter: tooltipFormatter,\n    },\n  };\n\n  return {\n    refs,\n    formData,\n    width,\n    height,\n    echartOptions,\n    onFocusedSeries,\n    onLegendStateChanged,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}