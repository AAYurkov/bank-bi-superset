{"ast":null,"code":"import _sortBy from \"lodash/sortBy\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo } from 'react';\nimport { css, ColorSchemeGroup, t, useTheme, getLabelsColorMap, CategoricalColorNamespace } from '@superset-ui/core';\n// eslint-disable-next-line no-restricted-imports\nimport AntdSelect from 'antd/lib/select'; // TODO: Remove antd\n\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Icons } from 'src/components/Icons';\nimport { StyledSelect } from 'src/components/Select/styles';\nimport { handleFilterOptionHelper } from 'src/components/Select/utils';\nimport { getColorNamespace } from 'src/utils/colorScheme';\nimport ColorSchemeLabel from './ColorSchemeLabel';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst { Option, OptGroup } = AntdSelect;\nconst CUSTOM_LABEL_ALERT = t(`The colors of this chart might be overridden by custom label colors of the related dashboard.\n    Check the JSON metadata in the Advanced settings.`);\nconst DASHBOARD_ALERT = t(`The color scheme is determined by the related dashboard.\n        Edit the color scheme in the dashboard properties.`);\nconst DASHBOARD_CONTEXT_ALERT = t(`You are viewing this chart in a dashboard context with labels shared across multiple charts.\n        The color scheme selection is disabled.`);\nconst DASHBOARD_CONTEXT_TOOLTIP = t(`You are viewing this chart in the context of a dashboard that is directly affecting its colors.\n        To edit the color scheme, open this chart outside of the dashboard.`);\nconst Label = ({ label, dashboardId, hasSharedLabelsColor, hasCustomLabelsColor, hasDashboardColorScheme }) => {\n  const theme = useTheme();\n  if (hasSharedLabelsColor || hasCustomLabelsColor || hasDashboardColorScheme) {\n    const alertTitle = hasCustomLabelsColor && !hasSharedLabelsColor ?\n    CUSTOM_LABEL_ALERT :\n    dashboardId && hasDashboardColorScheme ?\n    DASHBOARD_ALERT :\n    DASHBOARD_CONTEXT_ALERT;\n    return _jsxs(_Fragment, { children: [\n      label, ' ',\n      _jsx(Tooltip, { title: alertTitle, children:\n        _jsx(Icons.WarningOutlined, { iconColor: theme.colors.warning.base, css: css`\n              vertical-align: baseline;\n            `, iconSize: \"s\" }) }\n      )] }\n    );\n  }\n  return _jsx(_Fragment, { children: label });\n};__signature__(Label, \"useTheme{theme}\", () => [useTheme]);\nconst ColorSchemeControl = ({ hasCustomLabelsColor = false, hasDashboardColorScheme = false, mapLabelsColors = {}, sharedLabelsColors = [], dashboardId, colorNamespace, chartId, label = t('Color scheme'), onChange = () => {}, value, clearable = false, defaultScheme, choices = [], schemes = {}, isLinear, ...rest }) => {var _colorMapInstance$cha;\n  const countSharedLabelsColor = sharedLabelsColors.length;\n  const colorMapInstance = getLabelsColorMap();\n  const chartLabels = chartId ?\n  ((_colorMapInstance$cha = colorMapInstance.chartsLabelsMap.get(chartId)) == null ? void 0 : _colorMapInstance$cha.labels) || [] :\n  [];\n  const hasSharedLabelsColor = !!(dashboardId &&\n  countSharedLabelsColor > 0 &&\n  chartLabels.some((label) => sharedLabelsColors.includes(label)));\n  const hasDashboardScheme = dashboardId && hasDashboardColorScheme;\n  const showDashboardLockedOption = hasDashboardScheme || hasSharedLabelsColor;\n  const theme = useTheme();\n  const currentScheme = useMemo(() => {\n    if (showDashboardLockedOption) {\n      return 'dashboard';\n    }\n    let result = value || defaultScheme;\n    if (result === 'SUPERSET_DEFAULT') {var _schemesObject$SUPERS;\n      const schemesObject = typeof schemes === 'function' ? schemes() : schemes;\n      result = schemesObject == null ? void 0 : (_schemesObject$SUPERS = schemesObject.SUPERSET_DEFAULT) == null ? void 0 : _schemesObject$SUPERS.id;\n    }\n    return result;\n  }, [defaultScheme, schemes, showDashboardLockedOption, value]);\n  const options = useMemo(() => {\n    if (showDashboardLockedOption) {\n      return [\n      _jsx(Option, { value: \"dashboard\", label: t('Dashboard'), children:\n        _jsx(Tooltip, { title: DASHBOARD_CONTEXT_TOOLTIP, children:\n          t('Dashboard scheme') }\n        ) }, \"dashboard\"\n      )];\n\n    }\n    const schemesObject = typeof schemes === 'function' ? schemes() : schemes;\n    const controlChoices = typeof choices === 'function' ? choices() : choices;\n    const allColorOptions = [];\n    const filteredColorOptions = controlChoices.filter((o) => {\n      const option = o[0];\n      const isValidColorOption = option !== 'SUPERSET_DEFAULT' && !allColorOptions.includes(option);\n      allColorOptions.push(option);\n      return isValidColorOption;\n    });\n    const groups = filteredColorOptions.reduce((acc, [value]) => {var _schemesObject$value, _currentScheme$group;\n      const currentScheme = schemesObject[value];\n      // For categorical scheme, display all the colors\n      // For sequential scheme, show 10 or interpolate to 10.\n      // Sequential schemes usually have at most 10 colors.\n      let colors = [];\n      if (currentScheme) {\n        colors = isLinear ?\n        currentScheme.getColors(10) :\n        currentScheme.colors;\n      }\n      const option = {\n        customLabel: _jsx(ColorSchemeLabel, { id: currentScheme.id, label: currentScheme.label, colors: colors }),\n        label: (schemesObject == null ? void 0 : (_schemesObject$value = schemesObject[value]) == null ? void 0 : _schemesObject$value.label) || value,\n        value\n      };\n      acc[(_currentScheme$group = currentScheme.group) != null ? _currentScheme$group : ColorSchemeGroup.Other].options.push(option);\n      return acc;\n    }, {\n      [ColorSchemeGroup.Custom]: {\n        title: ColorSchemeGroup.Custom,\n        label: t('Custom color palettes'),\n        options: []\n      },\n      [ColorSchemeGroup.Featured]: {\n        title: ColorSchemeGroup.Featured,\n        label: t('Featured color palettes'),\n        options: []\n      },\n      [ColorSchemeGroup.Other]: {\n        title: ColorSchemeGroup.Other,\n        label: t('Other color palettes'),\n        options: []\n      }\n    });\n    const nonEmptyGroups = Object.values(groups).\n    filter((group) => group.options.length > 0).\n    map((group) => ({\n      ...group,\n      options: _sortBy(group.options, (opt) => opt.label)\n    }));\n    // if there are no featured or custom color schemes, return the ungrouped options\n    if (nonEmptyGroups.length === 1 &&\n    nonEmptyGroups[0].title === ColorSchemeGroup.Other) {\n      return nonEmptyGroups[0].options.map((opt, index) => _jsx(Option, { value: opt.value, label: opt.label, children:\n        opt.customLabel }, index\n      ));\n    }\n    return nonEmptyGroups.map((group, groupIndex) => _jsx(OptGroup, { label: group.label, children:\n      group.options.map((opt, optIndex) => _jsx(Option, { value: opt.value, label: opt.label, children:\n        opt.customLabel }, `${groupIndex}-${optIndex}`\n      )) }, groupIndex\n    ));\n  }, [choices, hasDashboardScheme, hasSharedLabelsColor, isLinear, schemes]);\n  // We can't pass on change directly because it receives a second\n  // parameter and it would be interpreted as the error parameter\n  const handleOnChange = (value) => {\n    if (chartId) {\n      colorMapInstance.setOwnColorScheme(chartId, value);\n      if (dashboardId) {\n        const colorNameSpace = getColorNamespace(colorNamespace);\n        const categoricalNamespace = CategoricalColorNamespace.getNamespace(colorNameSpace);\n        const sharedLabelsSet = new Set(sharedLabelsColors);\n        // reset colors except shared and custom labels to keep dashboard consistency\n        const resettableLabels = Object.keys(mapLabelsColors).filter((l) => !sharedLabelsSet.has(l));\n        categoricalNamespace.resetColorsForLabels(resettableLabels);\n      }\n    }\n    onChange(value);\n  };\n  return _jsxs(_Fragment, { children: [\n    _jsx(ControlHeader, { ...rest, label: _jsx(Label, { label: label, dashboardId: dashboardId, hasCustomLabelsColor: hasCustomLabelsColor, hasDashboardColorScheme: hasDashboardColorScheme, hasSharedLabelsColor: hasSharedLabelsColor }) }),\n    _jsx(StyledSelect, { css: css`\n          width: 100%;\n          & .ant-select-item.ant-select-item-group {\n            padding-left: ${theme.gridUnit}px;\n            font-size: ${theme.typography.sizes.m}px;\n          }\n          & .ant-select-item-option-grouped {\n            padding-left: ${theme.gridUnit * 3}px;\n          }\n        `, \"aria-label\": t('Select color scheme'), allowClear: clearable, disabled: hasDashboardScheme || hasSharedLabelsColor, onChange: handleOnChange, placeholder: t('Select scheme'), value: currentScheme, getPopupContainer: (triggerNode) => triggerNode.parentNode, showSearch: true, filterOption: (search, option) => handleFilterOptionHelper(search, option, ['label', 'value'], true), children:\n      options }\n    )] }\n  );\n};__signature__(ColorSchemeControl, \"useTheme{theme}\\nuseMemo{currentScheme}\\nuseMemo{options}\", () => [useTheme]);const _default =\nColorSchemeControl;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Option, \"Option\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ColorSchemeControl/index.tsx\");reactHotLoader.register(OptGroup, \"OptGroup\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ColorSchemeControl/index.tsx\");reactHotLoader.register(CUSTOM_LABEL_ALERT, \"CUSTOM_LABEL_ALERT\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ColorSchemeControl/index.tsx\");reactHotLoader.register(DASHBOARD_ALERT, \"DASHBOARD_ALERT\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ColorSchemeControl/index.tsx\");reactHotLoader.register(DASHBOARD_CONTEXT_ALERT, \"DASHBOARD_CONTEXT_ALERT\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ColorSchemeControl/index.tsx\");reactHotLoader.register(DASHBOARD_CONTEXT_TOOLTIP, \"DASHBOARD_CONTEXT_TOOLTIP\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ColorSchemeControl/index.tsx\");reactHotLoader.register(Label, \"Label\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ColorSchemeControl/index.tsx\");reactHotLoader.register(ColorSchemeControl, \"ColorSchemeControl\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ColorSchemeControl/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ColorSchemeControl/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useMemo","css","ColorSchemeGroup","t","useTheme","getLabelsColorMap","CategoricalColorNamespace","AntdSelect","ControlHeader","Tooltip","Icons","StyledSelect","handleFilterOptionHelper","getColorNamespace","ColorSchemeLabel","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Option","OptGroup","CUSTOM_LABEL_ALERT","DASHBOARD_ALERT","DASHBOARD_CONTEXT_ALERT","DASHBOARD_CONTEXT_TOOLTIP","Label","label","dashboardId","hasSharedLabelsColor","hasCustomLabelsColor","hasDashboardColorScheme","theme","alertTitle","children","title","WarningOutlined","iconColor","colors","warning","base","iconSize","__signature__","ColorSchemeControl","mapLabelsColors","sharedLabelsColors","colorNamespace","chartId","onChange","value","clearable","defaultScheme","choices","schemes","isLinear","rest","_colorMapInstance$cha","countSharedLabelsColor","length","colorMapInstance","chartLabels","chartsLabelsMap","get","labels","some","includes","hasDashboardScheme","showDashboardLockedOption","currentScheme","result","_schemesObject$SUPERS","schemesObject","SUPERSET_DEFAULT","id","options","controlChoices","allColorOptions","filteredColorOptions","filter","o","option","isValidColorOption","push","groups","reduce","acc","_schemesObject$value","_currentScheme$group","getColors","customLabel","group","Other","Custom","Featured","nonEmptyGroups","Object","values","map","_sortBy","opt","index","groupIndex","optIndex","handleOnChange","setOwnColorScheme","colorNameSpace","categoricalNamespace","getNamespace","sharedLabelsSet","Set","resettableLabels","keys","l","has","resetColorsForLabels","gridUnit","typography","sizes","m","allowClear","disabled","placeholder","getPopupContainer","triggerNode","parentNode","showSearch","filterOption","search","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ColorSchemeControl/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useMemo, ReactNode } from 'react';\n\nimport {\n  css,\n  ColorScheme,\n  ColorSchemeGroup,\n  SequentialScheme,\n  t,\n  useTheme,\n  getLabelsColorMap,\n  CategoricalColorNamespace,\n} from '@superset-ui/core';\n// eslint-disable-next-line no-restricted-imports\nimport AntdSelect from 'antd/lib/select'; // TODO: Remove antd\nimport { sortBy } from 'lodash';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { Tooltip } from 'src/components/Tooltip';\nimport { Icons } from 'src/components/Icons';\nimport { SelectOptionsType } from 'src/components/Select/types';\nimport { StyledSelect } from 'src/components/Select/styles';\nimport { handleFilterOptionHelper } from 'src/components/Select/utils';\nimport { getColorNamespace } from 'src/utils/colorScheme';\nimport ColorSchemeLabel from './ColorSchemeLabel';\n\nconst { Option, OptGroup } = AntdSelect;\n\nexport type OptionData = SelectOptionsType[number]['options'][number];\n\nexport interface ColorSchemes {\n  [key: string]: ColorScheme;\n}\n\nexport interface ColorSchemeControlProps {\n  hasCustomLabelsColor: boolean;\n  hasDashboardColorScheme?: boolean;\n  hasSharedLabelsColor?: boolean;\n  sharedLabelsColors?: string[];\n  mapLabelsColors?: Record<string, any>;\n  colorNamespace?: string;\n  chartId?: number;\n  dashboardId?: number;\n  label?: string;\n  name: string;\n  onChange?: (value: string) => void;\n  value: string;\n  clearable: boolean;\n  defaultScheme?: string;\n  choices: string[][] | (() => string[][]);\n  schemes: ColorSchemes | (() => ColorSchemes);\n  isLinear?: boolean;\n  description?: string;\n  hovered?: boolean;\n}\n\nconst CUSTOM_LABEL_ALERT = t(\n  `The colors of this chart might be overridden by custom label colors of the related dashboard.\n    Check the JSON metadata in the Advanced settings.`,\n);\n\nconst DASHBOARD_ALERT = t(\n  `The color scheme is determined by the related dashboard.\n        Edit the color scheme in the dashboard properties.`,\n);\n\nconst DASHBOARD_CONTEXT_ALERT = t(\n  `You are viewing this chart in a dashboard context with labels shared across multiple charts.\n        The color scheme selection is disabled.`,\n);\n\nconst DASHBOARD_CONTEXT_TOOLTIP = t(\n  `You are viewing this chart in the context of a dashboard that is directly affecting its colors.\n        To edit the color scheme, open this chart outside of the dashboard.`,\n);\n\nconst Label = ({\n  label,\n  dashboardId,\n  hasSharedLabelsColor,\n  hasCustomLabelsColor,\n  hasDashboardColorScheme,\n}: Pick<\n  ColorSchemeControlProps,\n  | 'label'\n  | 'dashboardId'\n  | 'hasCustomLabelsColor'\n  | 'hasSharedLabelsColor'\n  | 'hasDashboardColorScheme'\n>) => {\n  const theme = useTheme();\n  if (hasSharedLabelsColor || hasCustomLabelsColor || hasDashboardColorScheme) {\n    const alertTitle =\n      hasCustomLabelsColor && !hasSharedLabelsColor\n        ? CUSTOM_LABEL_ALERT\n        : dashboardId && hasDashboardColorScheme\n          ? DASHBOARD_ALERT\n          : DASHBOARD_CONTEXT_ALERT;\n    return (\n      <>\n        {label}{' '}\n        <Tooltip title={alertTitle}>\n          <Icons.WarningOutlined\n            iconColor={theme.colors.warning.base}\n            css={css`\n              vertical-align: baseline;\n            `}\n            iconSize=\"s\"\n          />\n        </Tooltip>\n      </>\n    );\n  }\n  return <>{label}</>;\n};\n\nconst ColorSchemeControl = ({\n  hasCustomLabelsColor = false,\n  hasDashboardColorScheme = false,\n  mapLabelsColors = {},\n  sharedLabelsColors = [],\n  dashboardId,\n  colorNamespace,\n  chartId,\n  label = t('Color scheme'),\n  onChange = () => {},\n  value,\n  clearable = false,\n  defaultScheme,\n  choices = [],\n  schemes = {},\n  isLinear,\n  ...rest\n}: ColorSchemeControlProps) => {\n  const countSharedLabelsColor = sharedLabelsColors.length;\n  const colorMapInstance = getLabelsColorMap();\n  const chartLabels = chartId\n    ? colorMapInstance.chartsLabelsMap.get(chartId)?.labels || []\n    : [];\n  const hasSharedLabelsColor = !!(\n    dashboardId &&\n    countSharedLabelsColor > 0 &&\n    chartLabels.some(label => sharedLabelsColors.includes(label))\n  );\n  const hasDashboardScheme = dashboardId && hasDashboardColorScheme;\n  const showDashboardLockedOption = hasDashboardScheme || hasSharedLabelsColor;\n  const theme = useTheme();\n  const currentScheme = useMemo(() => {\n    if (showDashboardLockedOption) {\n      return 'dashboard';\n    }\n    let result = value || defaultScheme;\n    if (result === 'SUPERSET_DEFAULT') {\n      const schemesObject = typeof schemes === 'function' ? schemes() : schemes;\n      result = schemesObject?.SUPERSET_DEFAULT?.id;\n    }\n    return result;\n  }, [defaultScheme, schemes, showDashboardLockedOption, value]);\n\n  const options = useMemo(() => {\n    if (showDashboardLockedOption) {\n      return [\n        <Option value=\"dashboard\" label={t('Dashboard')} key=\"dashboard\">\n          <Tooltip title={DASHBOARD_CONTEXT_TOOLTIP}>\n            {t('Dashboard scheme')}\n          </Tooltip>\n        </Option>,\n      ];\n    }\n    const schemesObject = typeof schemes === 'function' ? schemes() : schemes;\n    const controlChoices = typeof choices === 'function' ? choices() : choices;\n    const allColorOptions: string[] = [];\n    const filteredColorOptions = controlChoices.filter(o => {\n      const option = o[0];\n      const isValidColorOption =\n        option !== 'SUPERSET_DEFAULT' && !allColorOptions.includes(option);\n      allColorOptions.push(option);\n      return isValidColorOption;\n    });\n\n    const groups = filteredColorOptions.reduce(\n      (acc, [value]) => {\n        const currentScheme = schemesObject[value];\n\n        // For categorical scheme, display all the colors\n        // For sequential scheme, show 10 or interpolate to 10.\n        // Sequential schemes usually have at most 10 colors.\n        let colors: string[] = [];\n        if (currentScheme) {\n          colors = isLinear\n            ? (currentScheme as SequentialScheme).getColors(10)\n            : currentScheme.colors;\n        }\n        const option = {\n          customLabel: (\n            <ColorSchemeLabel\n              id={currentScheme.id}\n              label={currentScheme.label}\n              colors={colors}\n            />\n          ) as ReactNode,\n          label: schemesObject?.[value]?.label || value,\n          value,\n        };\n        acc[currentScheme.group ?? ColorSchemeGroup.Other].options.push(option);\n        return acc;\n      },\n      {\n        [ColorSchemeGroup.Custom]: {\n          title: ColorSchemeGroup.Custom,\n          label: t('Custom color palettes'),\n          options: [] as OptionData,\n        },\n        [ColorSchemeGroup.Featured]: {\n          title: ColorSchemeGroup.Featured,\n          label: t('Featured color palettes'),\n          options: [] as OptionData,\n        },\n        [ColorSchemeGroup.Other]: {\n          title: ColorSchemeGroup.Other,\n          label: t('Other color palettes'),\n          options: [] as OptionData,\n        },\n      },\n    );\n    const nonEmptyGroups = Object.values(groups)\n      .filter(group => group.options.length > 0)\n      .map(group => ({\n        ...group,\n        options: sortBy(group.options, opt => opt.label),\n      }));\n\n    // if there are no featured or custom color schemes, return the ungrouped options\n    if (\n      nonEmptyGroups.length === 1 &&\n      nonEmptyGroups[0].title === ColorSchemeGroup.Other\n    ) {\n      return nonEmptyGroups[0].options.map((opt, index) => (\n        <Option value={opt.value} label={opt.label} key={index}>\n          {opt.customLabel}\n        </Option>\n      ));\n    }\n    return nonEmptyGroups.map((group, groupIndex) => (\n      <OptGroup label={group.label} key={groupIndex}>\n        {group.options.map((opt, optIndex) => (\n          <Option\n            value={opt.value}\n            label={opt.label}\n            key={`${groupIndex}-${optIndex}`}\n          >\n            {opt.customLabel}\n          </Option>\n        ))}\n      </OptGroup>\n    ));\n  }, [choices, hasDashboardScheme, hasSharedLabelsColor, isLinear, schemes]);\n\n  // We can't pass on change directly because it receives a second\n  // parameter and it would be interpreted as the error parameter\n  const handleOnChange = (value: string) => {\n    if (chartId) {\n      colorMapInstance.setOwnColorScheme(chartId, value);\n      if (dashboardId) {\n        const colorNameSpace = getColorNamespace(colorNamespace);\n        const categoricalNamespace =\n          CategoricalColorNamespace.getNamespace(colorNameSpace);\n\n        const sharedLabelsSet = new Set(sharedLabelsColors);\n        // reset colors except shared and custom labels to keep dashboard consistency\n        const resettableLabels = Object.keys(mapLabelsColors).filter(\n          l => !sharedLabelsSet.has(l),\n        );\n        categoricalNamespace.resetColorsForLabels(resettableLabels);\n      }\n    }\n\n    onChange(value);\n  };\n\n  return (\n    <>\n      <ControlHeader\n        {...rest}\n        label={\n          <Label\n            label={label}\n            dashboardId={dashboardId}\n            hasCustomLabelsColor={hasCustomLabelsColor}\n            hasDashboardColorScheme={hasDashboardColorScheme}\n            hasSharedLabelsColor={hasSharedLabelsColor}\n          />\n        }\n      />\n      <StyledSelect\n        css={css`\n          width: 100%;\n          & .ant-select-item.ant-select-item-group {\n            padding-left: ${theme.gridUnit}px;\n            font-size: ${theme.typography.sizes.m}px;\n          }\n          & .ant-select-item-option-grouped {\n            padding-left: ${theme.gridUnit * 3}px;\n          }\n        `}\n        aria-label={t('Select color scheme')}\n        allowClear={clearable}\n        disabled={hasDashboardScheme || hasSharedLabelsColor}\n        onChange={handleOnChange}\n        placeholder={t('Select scheme')}\n        value={currentScheme}\n        getPopupContainer={triggerNode => triggerNode.parentNode}\n        showSearch\n        filterOption={(search, option) =>\n          handleFilterOptionHelper(\n            search,\n            option as OptionData,\n            ['label', 'value'],\n            true,\n          )\n        }\n      >\n        {options}\n      </StyledSelect>\n    </>\n  );\n};\n\nexport default ColorSchemeControl;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}