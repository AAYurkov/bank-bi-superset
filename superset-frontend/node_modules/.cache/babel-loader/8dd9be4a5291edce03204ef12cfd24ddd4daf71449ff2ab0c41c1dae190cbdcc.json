{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nconst transformToFolderStructure = (metricsToDisplay, columnsToDisplay, folderConfig, allMetrics, allColumns) => {\n  const metricsMap = new Map();\n  const columnsMap = new Map();\n  metricsToDisplay.forEach((metric) => {\n    metricsMap.set(metric.uuid, metric);\n  });\n  columnsToDisplay.forEach((column) => {\n    columnsMap.set(column.uuid, column);\n  });\n  let metricsInFolders = 0;\n  let columnsInFolders = 0;\n  const processFolder = (datasourceFolder, parentId) => {\n    const folder = {\n      id: datasourceFolder.uuid,\n      name: datasourceFolder.name,\n      description: datasourceFolder.description,\n      isCollapsed: false,\n      items: [],\n      totalItems: 0,\n      showingItems: 0,\n      parentId\n    };\n    if (datasourceFolder.children && datasourceFolder.children.length > 0) {\n      if (!folder.subFolders) {\n        folder.subFolders = [];\n      }\n      datasourceFolder.children.forEach((child) => {\n        if (child.type === 'folder') {\n          const subFolder = processFolder(child, folder.id);\n          folder.subFolders.push(subFolder);\n          folder.totalItems += subFolder.totalItems;\n          folder.showingItems += subFolder.showingItems;\n        } else\n        if (child.type === 'metric') {\n          folder.totalItems += 1;\n          metricsInFolders += 1;\n          const metric = metricsMap.get(child.uuid);\n          if (metric) {\n            folder.items.push(metric);\n            metricsMap.delete(metric.uuid);\n            folder.showingItems += 1;\n          }\n        } else\n        if (child.type === 'column') {\n          folder.totalItems += 1;\n          columnsInFolders += 1;\n          const column = columnsMap.get(child.uuid);\n          if (column) {\n            folder.items.push(column);\n            columnsMap.delete(column.uuid);\n            folder.showingItems += 1;\n          }\n        }\n      });\n    }\n    return folder;\n  };\n  if (!folderConfig) {\n    return [\n    {\n      id: 'metrics-default',\n      name: t('Metrics'),\n      isCollapsed: false,\n      items: metricsToDisplay,\n      totalItems: allMetrics.length,\n      showingItems: metricsToDisplay.length\n    },\n    {\n      id: 'columns-default',\n      name: t('Columns'),\n      isCollapsed: false,\n      items: columnsToDisplay,\n      totalItems: allColumns.length,\n      showingItems: columnsToDisplay.length\n    }];\n\n  }\n  const folders = folderConfig.map((config) => processFolder(config));\n  const unassignedMetrics = metricsToDisplay.filter((metric) => metricsMap.has(metric.uuid));\n  const unassignedColumns = columnsToDisplay.filter((column) => columnsMap.has(column.uuid));\n  if (unassignedMetrics.length > 0) {\n    folders.push({\n      id: 'metrics-default',\n      name: t('Metrics'),\n      isCollapsed: false,\n      items: unassignedMetrics,\n      totalItems: allMetrics.length - metricsInFolders,\n      showingItems: unassignedMetrics.length\n    });\n  }\n  if (unassignedColumns.length > 0) {\n    folders.push({\n      id: 'columns-default',\n      name: t('Columns'),\n      isCollapsed: false,\n      items: unassignedColumns,\n      totalItems: allColumns.length - columnsInFolders,\n      showingItems: unassignedColumns.length\n    });\n  }\n  return folders;\n};\nexport const transformDatasourceWithFolders = (metricsToDisplay, columnsToDisplay, folderConfig, allMetrics, allColumns) => {\n  const metricsWithType = metricsToDisplay.map((metric) => ({\n    ...metric,\n    type: 'metric'\n  }));\n  const columnsWithType = columnsToDisplay.map((column) => ({\n    ...column,\n    type: 'column'\n  }));\n  return transformToFolderStructure(metricsWithType, columnsWithType, folderConfig, allMetrics, allColumns);\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(transformToFolderStructure, \"transformToFolderStructure\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/DatasourcePanel/transformDatasourceFolders.ts\");reactHotLoader.register(transformDatasourceWithFolders, \"transformDatasourceWithFolders\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/DatasourcePanel/transformDatasourceFolders.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["t","transformToFolderStructure","metricsToDisplay","columnsToDisplay","folderConfig","allMetrics","allColumns","metricsMap","Map","columnsMap","forEach","metric","set","uuid","column","metricsInFolders","columnsInFolders","processFolder","datasourceFolder","parentId","folder","id","name","description","isCollapsed","items","totalItems","showingItems","children","length","subFolders","child","type","subFolder","push","get","delete","folders","map","config","unassignedMetrics","filter","has","unassignedColumns","transformDatasourceWithFolders","metricsWithType","columnsWithType","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/explore/components/DatasourcePanel/transformDatasourceFolders.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Metric, t } from '@superset-ui/core';\nimport {\n  ColumnItem,\n  DatasourceFolder,\n  DatasourcePanelColumn,\n  Folder,\n  MetricItem,\n} from './types';\n\nconst transformToFolderStructure = (\n  metricsToDisplay: MetricItem[],\n  columnsToDisplay: ColumnItem[],\n  folderConfig: DatasourceFolder[] | undefined,\n  allMetrics: Metric[],\n  allColumns: DatasourcePanelColumn[],\n): Folder[] => {\n  const metricsMap = new Map<string, MetricItem>();\n  const columnsMap = new Map<string, ColumnItem>();\n\n  metricsToDisplay.forEach(metric => {\n    metricsMap.set(metric.uuid, metric);\n  });\n\n  columnsToDisplay.forEach(column => {\n    columnsMap.set(column.uuid, column);\n  });\n\n  let metricsInFolders = 0;\n  let columnsInFolders = 0;\n  const processFolder = (\n    datasourceFolder: DatasourceFolder,\n    parentId?: string,\n  ): Folder => {\n    const folder: Folder = {\n      id: datasourceFolder.uuid,\n      name: datasourceFolder.name,\n      description: datasourceFolder.description,\n      isCollapsed: false,\n      items: [],\n      totalItems: 0,\n      showingItems: 0,\n      parentId,\n    };\n\n    if (datasourceFolder.children && datasourceFolder.children.length > 0) {\n      if (!folder.subFolders) {\n        folder.subFolders = [];\n      }\n\n      datasourceFolder.children.forEach(child => {\n        if (child.type === 'folder') {\n          const subFolder = processFolder(child as DatasourceFolder, folder.id);\n          folder.subFolders!.push(subFolder);\n          folder.totalItems += subFolder.totalItems;\n          folder.showingItems += subFolder.showingItems;\n        } else if (child.type === 'metric') {\n          folder.totalItems += 1;\n          metricsInFolders += 1;\n          const metric = metricsMap.get(child.uuid);\n          if (metric) {\n            folder.items.push(metric);\n            metricsMap.delete(metric.uuid);\n            folder.showingItems += 1;\n          }\n        } else if (child.type === 'column') {\n          folder.totalItems += 1;\n          columnsInFolders += 1;\n          const column = columnsMap.get(child.uuid);\n          if (column) {\n            folder.items.push(column);\n            columnsMap.delete(column.uuid);\n            folder.showingItems += 1;\n          }\n        }\n      });\n    }\n\n    return folder;\n  };\n\n  if (!folderConfig) {\n    return [\n      {\n        id: 'metrics-default',\n        name: t('Metrics'),\n        isCollapsed: false,\n        items: metricsToDisplay,\n        totalItems: allMetrics.length,\n        showingItems: metricsToDisplay.length,\n      },\n      {\n        id: 'columns-default',\n        name: t('Columns'),\n        isCollapsed: false,\n        items: columnsToDisplay,\n        totalItems: allColumns.length,\n        showingItems: columnsToDisplay.length,\n      },\n    ];\n  }\n\n  const folders = folderConfig.map(config => processFolder(config));\n\n  const unassignedMetrics = metricsToDisplay.filter(metric =>\n    metricsMap.has(metric.uuid),\n  );\n  const unassignedColumns = columnsToDisplay.filter(column =>\n    columnsMap.has(column.uuid),\n  );\n\n  if (unassignedMetrics.length > 0) {\n    folders.push({\n      id: 'metrics-default',\n      name: t('Metrics'),\n      isCollapsed: false,\n      items: unassignedMetrics,\n      totalItems: allMetrics.length - metricsInFolders,\n      showingItems: unassignedMetrics.length,\n    });\n  }\n\n  if (unassignedColumns.length > 0) {\n    folders.push({\n      id: 'columns-default',\n      name: t('Columns'),\n      isCollapsed: false,\n      items: unassignedColumns,\n      totalItems: allColumns.length - columnsInFolders,\n      showingItems: unassignedColumns.length,\n    });\n  }\n\n  return folders;\n};\n\nexport const transformDatasourceWithFolders = (\n  metricsToDisplay: Metric[],\n  columnsToDisplay: DatasourcePanelColumn[],\n  folderConfig: DatasourceFolder[] | undefined,\n  allMetrics: Metric[],\n  allColumns: DatasourcePanelColumn[],\n): Folder[] => {\n  const metricsWithType: MetricItem[] = metricsToDisplay.map(metric => ({\n    ...metric,\n    type: 'metric',\n  }));\n  const columnsWithType: ColumnItem[] = columnsToDisplay.map(column => ({\n    ...column,\n    type: 'column',\n  }));\n\n  return transformToFolderStructure(\n    metricsWithType,\n    columnsWithType,\n    folderConfig,\n    allMetrics,\n    allColumns,\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}