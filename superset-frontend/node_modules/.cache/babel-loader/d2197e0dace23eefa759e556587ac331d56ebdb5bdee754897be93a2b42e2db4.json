{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// TODO: Remove fa-icon\n/* eslint-disable icons/no-fa-icons-usage */\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { css, getExtensionsRegistry, SafeMarkdown, styled, t } from '@superset-ui/core';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Icons } from 'src/components/Icons';\nimport { Skeleton, AntdBreadcrumb as Breadcrumb, Button } from 'src/components';\nimport { Dropdown } from 'src/components/Dropdown';\nimport FilterableTable from 'src/components/FilterableTable';\nimport Tabs from 'src/components/Tabs';\nimport { tableApiUtil, useTableExtendedMetadataQuery, useTableMetadataQuery } from 'src/hooks/apiResources';\nimport { runTablePreviewQuery } from 'src/SqlLab/actions/sqlLab';\nimport Alert from 'src/components/Alert';\nimport { Menu } from 'src/components/Menu';\nimport Card from 'src/components/Card';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport ResultSet from '../ResultSet';\nimport ShowSQL from '../ShowSQL';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst extensionsRegistry = getExtensionsRegistry();\nconst COLUMN_KEYS = ['column_name', 'column_type', 'keys', 'comment'];\n// TODO: Remove fa-icon\nconst MENUS = [\n{\n  key: 'refresh-table',\n  label: t('Refresh table schema'),\n  icon: _jsx(Icons.SyncOutlined, { iconSize: \"s\", \"aria-hidden\": true })\n},\n{\n  key: 'copy-select-statement',\n  label: t('Copy SELECT statement'),\n  icon: _jsx(Icons.CopyOutlined, { iconSize: \"s\", \"aria-hidden\": true })\n},\n{\n  key: 'show-create-view-statement',\n  label: t('Show CREATE VIEW statement'),\n  icon: _jsx(Icons.EyeOutlined, { iconSize: \"s\", \"aria-hidden\": true })\n}];\n\nconst TAB_HEADER_HEIGHT = 80;\nconst PREVIEW_TOP_ACTION_HEIGHT = 30;\nconst PREVIEW_QUERY_LIMIT = 100;\nconst Title = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  column-gap: ${({ theme }) => theme.gridUnit}px;\n  font-size: ${({ theme }) => theme.typography.sizes.l}px;\n  font-weight: ${({ theme }) => theme.typography.weights.bold};\n`;\nconst renderWell = (partitions) => {\n  if (!partitions) {\n    return null;\n  }\n  const { partitionQuery } = partitions;\n  let partitionClipBoard;\n  if (partitionQuery) {\n    const tt = t('Copy partition query to clipboard');\n    partitionClipBoard = _jsx(CopyToClipboard, { text: partitionQuery, shouldShowText: false, tooltipText: tt, copyNode: _jsx(Icons.CopyOutlined, { iconSize: \"s\" }) });\n  }\n  const latest = Object.entries(partitions.latest || []).\n  map(([key, value]) => `${key}=${value}`).\n  join('/');\n  return _jsx(Card, { size: \"small\", children:\n    _jsxs(\"div\", { children: [\n      _jsxs(\"small\", { children: [\n        t('latest partition:'), \" \", latest] }\n      ), ' ',\n      partitionClipBoard] }\n    ) }\n  );\n};\nconst TablePreview = ({ dbId, catalog, schema, tableName }) => {var _extensionsRegistry$g, _extensionsRegistry$g2;\n  const dispatch = useDispatch();\n  const [databaseName, backend, disableDataPreview] = useSelector(({ sqlLab: { databases } }) => {var _databases$dbId, _databases$dbId2, _databases$dbId3;return [(_databases$dbId =\n    databases[dbId]) == null ? void 0 : _databases$dbId.database_name, (_databases$dbId2 =\n    databases[dbId]) == null ? void 0 : _databases$dbId2.backend, (_databases$dbId3 =\n    databases[dbId]) == null ? void 0 : _databases$dbId3.disable_data_preview];},\n  shallowEqual);\n  const copyStatementActionRef = useRef(null);\n  const showViewStatementActionRef = useRef(null);\n  const [previewQueryId, setPreviewQueryId] = useState();\n  const { currentData: tableMetadata, isLoading: isMetadataLoading, isFetching: isMetadataRefreshing, isError: hasMetadataError, error: metadataError } = useTableMetadataQuery({\n    dbId,\n    catalog,\n    schema: schema != null ? schema : '',\n    table: tableName != null ? tableName : ''\n  }, { skip: !dbId || !schema || !tableName });\n  const { currentData: tableExtendedMetadata, error: metadataExtrError } = useTableExtendedMetadataQuery({\n    dbId,\n    catalog,\n    schema: schema != null ? schema : '',\n    table: tableName != null ? tableName : ''\n  }, { skip: !dbId || !schema || !tableName });\n  const data = useMemo(() => {var _tableMetadata$column;return ((_tableMetadata$column = tableMetadata == null ? void 0 : tableMetadata.columns.length) != null ? _tableMetadata$column : 0) > 0 ?\n    tableMetadata == null ? void 0 : tableMetadata.columns.map(({ name, type, longType, keys, comment }) => ({\n      column_name: name,\n      column_type: longType || type,\n      keys,\n      comment\n    })) :\n    undefined;}, [tableMetadata]);\n  const hasKeys = useMemo(() => data == null ? void 0 : data.some(({ keys }) => Boolean(keys == null ? void 0 : keys.length)), [data]);\n  const columns = useMemo(() => hasKeys ? COLUMN_KEYS : COLUMN_KEYS.filter((name) => name !== 'keys'), [hasKeys]);\n  const tableData = {\n    dataPreviewQueryId: previewQueryId,\n    ...tableMetadata,\n    ...tableExtendedMetadata\n  };\n  const refreshTableMetadata = () => {\n    dispatch(tableApiUtil.invalidateTags([{ type: 'TableMetadatas', id: tableName }]));\n  };\n  const ResultTable = (_extensionsRegistry$g = extensionsRegistry.get('sqleditor.extension.resultTable')) != null ? _extensionsRegistry$g :\n  FilterableTable;\n  const customTabs = (_extensionsRegistry$g2 = extensionsRegistry.get('sqleditor.extension.tablePreview')) != null ? _extensionsRegistry$g2 : [];\n  const onTabSwitch = useCallback((activeKey) => {\n    if (activeKey === 'sample' && !previewQueryId) {\n      const queryId = nanoid(11);\n      dispatch(runTablePreviewQuery({\n        previewQueryId: queryId,\n        dbId,\n        catalog,\n        schema,\n        name: tableName,\n        selectStar: tableData.selectStar\n      }, true));\n      setPreviewQueryId(queryId);\n    }\n  }, [\n  previewQueryId,\n  dbId,\n  catalog,\n  schema,\n  tableName,\n  tableData.selectStar,\n  dispatch]\n  );\n  const dropdownMenu = useMemo(() => {\n    let menus = [...MENUS];\n    if (!tableData.selectStar) {\n      menus = menus.filter(({ key }) => key !== 'copy-select-statement');\n    }\n    if (!tableData.view) {\n      menus = menus.filter(({ key }) => key !== 'show-create-view-statement');\n    }\n    return menus;\n  }, [tableData.view, tableData.selectStar]);\n  if (isMetadataLoading) {\n    return _jsx(Skeleton, { active: true });\n  }\n  if (hasMetadataError || metadataExtrError) {var _ref;\n    return _jsx(Alert, { type: \"warning\", message: (_ref = metadataError || metadataExtrError) == null ? void 0 : _ref.error });\n  }\n  if (!data) {\n    return _jsx(Alert, { type: \"warning\", message: t('Cannot find the table (%s) metadata.', tableName), closable: false });\n  }\n  return _jsxs(\"div\", { css: css`\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      `, children: [\n    _jsxs(Breadcrumb, { separator: \">\", children: [\n      _jsx(Breadcrumb.Item, { children: backend }),\n      _jsx(Breadcrumb.Item, { children: databaseName }),\n      catalog && _jsx(Breadcrumb.Item, { children: catalog }),\n      schema && _jsx(Breadcrumb.Item, { children: schema }),\n      _jsx(Breadcrumb.Item, { children: \" \" })] }\n    ),\n    _jsxs(\"div\", { style: { display: 'none' }, children: [\n      _jsx(CopyToClipboard, { copyNode: _jsx(\"button\", { type: \"button\", ref: copyStatementActionRef, children: \"invisible button\" }\n\n        ), text: tableData.selectStar, shouldShowText: false }),\n      tableData.view && _jsx(ShowSQL, { sql: tableData.view, tooltipText: t('Show CREATE VIEW statement'), title: t('CREATE VIEW statement'), triggerNode: _jsx(\"button\", { type: \"button\", ref: showViewStatementActionRef, children: \"invisible button\" }\n\n        ) })] }\n    ),\n    _jsxs(Title, { children: [\n      _jsx(Icons.InsertRowAboveOutlined, { iconSize: \"l\" }),\n      tableName,\n      _jsx(Dropdown, { dropdownRender: () => _jsx(Menu, { onClick: ({ key }) => {\n            if (key === 'refresh-table') {\n              refreshTableMetadata();\n            }\n            if (key === 'copy-select-statement') {var _copyStatementActionR;\n              (_copyStatementActionR = copyStatementActionRef.current) == null ? void 0 : _copyStatementActionR.click();\n            }\n            if (key === 'show-create-view-statement') {var _showViewStatementAct;\n              (_showViewStatementAct = showViewStatementActionRef.current) == null ? void 0 : _showViewStatementAct.click();\n            }\n          }, items: dropdownMenu }), trigger: ['click'], children:\n        _jsx(Button, { buttonSize: \"xsmall\", type: \"link\", children:\n          _jsx(Icons.DownSquareOutlined, { iconSize: \"m\", style: { marginTop: 2, marginLeft: 4 }, \"aria-label\": t('Table actions') }) }\n        ) }\n      )] }\n    ),\n    isMetadataRefreshing ? _jsx(Skeleton, { active: true }) : _jsxs(_Fragment, { children: [\n      tableData.comment && _jsx(SafeMarkdown, { source: tableData.comment }),\n      renderWell(tableData.partitions),\n      _jsx(\"div\", { css: css`\n              flex: 1 1 auto;\n            `, children:\n        _jsx(AutoSizer, { disableWidth: true, children:\n          ({ height }) => _jsxs(Tabs, { fullWidth: false, onTabClick: onTabSwitch, css: css`\n                    height: ${height}px;\n                  `, children: [\n            _jsx(Tabs.TabPane, { tab: t('Columns (%s)', data.length), children:\n              _jsx(ResultTable, { queryId: \"table-columns\", height: height - TAB_HEADER_HEIGHT, data: data, orderedColumnKeys: columns }) }, \"columns\"\n            ),\n            (tableData == null ? void 0 : tableData.selectStar) && !disableDataPreview && _jsx(Tabs.TabPane, { tab: t('Data preview'), children:\n              previewQueryId && _jsx(ResultSet, { queryId: previewQueryId, visualize: false, csv: false, cache: true, height: height -\n                TAB_HEADER_HEIGHT -\n                PREVIEW_TOP_ACTION_HEIGHT, displayLimit: PREVIEW_QUERY_LIMIT, defaultQueryLimit: PREVIEW_QUERY_LIMIT }) }, \"sample\"\n            ),\n            (tableData == null ? void 0 : tableData.indexes) && tableData.indexes.length > 0 && _jsx(Tabs.TabPane, { tab: t('Indexes (%s)', tableData.indexes.length), children:\n              tableData.indexes.map((ix, i) => _jsx(\"pre\", { className: \"code\", children:\n                JSON.stringify(ix, null, '  ') }, i\n              )) }, \"indexes\"\n            ),\n            (tableData == null ? void 0 : tableData.metadata) && _jsx(Tabs.TabPane, { tab: t('Metadata'), children:\n              _jsx(ResultTable, { queryId: \"table-metadata\", height: height - TAB_HEADER_HEIGHT, data: Object.entries(tableData.metadata).map(([name, value]) => ({ name, value })), orderedColumnKeys: ['name', 'value'] }) }, \"metadata\"\n            ),\n            customTabs.map(([title, ExtComponent]) => _jsx(Tabs.TabPane, { tab: title, children:\n              _jsx(ExtComponent, { dbId: Number(dbId), schema: schema != null ? schema : '', tableName: tableName }) }, title\n            ))] }\n          ) }\n        ) }\n      )] }\n    )] }\n  );\n};__signature__(TablePreview, \"useDispatch{dispatch}\\nuseSelector{[databaseName, backend, disableDataPreview]}\\nuseRef{copyStatementActionRef}\\nuseRef{showViewStatementActionRef}\\nuseState{[previewQueryId, setPreviewQueryId]}\\nuseTableMetadataQuery{{ currentData: tableMetadata, isLoading: isMetadataLoading, isFetching: isMetadataRefreshing, isError: hasMetadataError, error: metadataError, }}\\nuseTableExtendedMetadataQuery{{ currentData: tableExtendedMetadata, error: metadataExtrError }}\\nuseMemo{data}\\nuseMemo{hasKeys}\\nuseMemo{columns}\\nuseCallback{onTabSwitch}\\nuseMemo{dropdownMenu}\", () => [useDispatch, useSelector, useTableMetadataQuery, useTableExtendedMetadataQuery]);const _default =\nTablePreview;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(extensionsRegistry, \"extensionsRegistry\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/TablePreview/index.tsx\");reactHotLoader.register(COLUMN_KEYS, \"COLUMN_KEYS\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/TablePreview/index.tsx\");reactHotLoader.register(MENUS, \"MENUS\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/TablePreview/index.tsx\");reactHotLoader.register(TAB_HEADER_HEIGHT, \"TAB_HEADER_HEIGHT\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/TablePreview/index.tsx\");reactHotLoader.register(PREVIEW_TOP_ACTION_HEIGHT, \"PREVIEW_TOP_ACTION_HEIGHT\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/TablePreview/index.tsx\");reactHotLoader.register(PREVIEW_QUERY_LIMIT, \"PREVIEW_QUERY_LIMIT\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/TablePreview/index.tsx\");reactHotLoader.register(Title, \"Title\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/TablePreview/index.tsx\");reactHotLoader.register(renderWell, \"renderWell\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/TablePreview/index.tsx\");reactHotLoader.register(TablePreview, \"TablePreview\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/TablePreview/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/TablePreview/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useCallback","useMemo","useRef","useState","shallowEqual","useDispatch","useSelector","nanoid","css","getExtensionsRegistry","SafeMarkdown","styled","t","AutoSizer","Icons","Skeleton","AntdBreadcrumb","Breadcrumb","Button","Dropdown","FilterableTable","Tabs","tableApiUtil","useTableExtendedMetadataQuery","useTableMetadataQuery","runTablePreviewQuery","Alert","Menu","Card","CopyToClipboard","ResultSet","ShowSQL","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","extensionsRegistry","COLUMN_KEYS","MENUS","key","label","icon","SyncOutlined","iconSize","CopyOutlined","EyeOutlined","TAB_HEADER_HEIGHT","PREVIEW_TOP_ACTION_HEIGHT","PREVIEW_QUERY_LIMIT","Title","div","theme","gridUnit","typography","sizes","l","weights","bold","renderWell","partitions","partitionQuery","partitionClipBoard","tt","text","shouldShowText","tooltipText","copyNode","latest","Object","entries","map","value","join","size","children","TablePreview","dbId","catalog","schema","tableName","_extensionsRegistry$g","_extensionsRegistry$g2","dispatch","databaseName","backend","disableDataPreview","sqlLab","databases","_databases$dbId","_databases$dbId2","_databases$dbId3","database_name","disable_data_preview","copyStatementActionRef","showViewStatementActionRef","previewQueryId","setPreviewQueryId","currentData","tableMetadata","isLoading","isMetadataLoading","isFetching","isMetadataRefreshing","isError","hasMetadataError","error","metadataError","table","skip","tableExtendedMetadata","metadataExtrError","data","_tableMetadata$column","columns","length","name","type","longType","keys","comment","column_name","column_type","undefined","hasKeys","some","Boolean","filter","tableData","dataPreviewQueryId","refreshTableMetadata","invalidateTags","id","ResultTable","get","customTabs","onTabSwitch","activeKey","queryId","selectStar","dropdownMenu","menus","view","active","_ref","message","closable","separator","Item","style","display","ref","sql","title","triggerNode","InsertRowAboveOutlined","dropdownRender","onClick","_copyStatementActionR","current","click","_showViewStatementAct","items","trigger","buttonSize","DownSquareOutlined","marginTop","marginLeft","source","disableWidth","height","fullWidth","onTabClick","TabPane","tab","orderedColumnKeys","visualize","csv","cache","displayLimit","defaultQueryLimit","indexes","ix","i","className","JSON","stringify","metadata","ExtComponent","Number","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/TablePreview/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// TODO: Remove fa-icon\n/* eslint-disable icons/no-fa-icons-usage */\nimport { type FC, useCallback, useMemo, useRef, useState } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport {\n  ClientErrorObject,\n  css,\n  getExtensionsRegistry,\n  SafeMarkdown,\n  styled,\n  t,\n} from '@superset-ui/core';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Icons } from 'src/components/Icons';\nimport type { SqlLabRootState } from 'src/SqlLab/types';\nimport { Skeleton, AntdBreadcrumb as Breadcrumb, Button } from 'src/components';\nimport { Dropdown } from 'src/components/Dropdown';\nimport FilterableTable from 'src/components/FilterableTable';\nimport Tabs from 'src/components/Tabs';\nimport {\n  tableApiUtil,\n  TableMetaData,\n  useTableExtendedMetadataQuery,\n  useTableMetadataQuery,\n} from 'src/hooks/apiResources';\nimport { runTablePreviewQuery } from 'src/SqlLab/actions/sqlLab';\nimport Alert from 'src/components/Alert';\nimport { Menu } from 'src/components/Menu';\nimport Card from 'src/components/Card';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport ResultSet from '../ResultSet';\nimport ShowSQL from '../ShowSQL';\n\ntype Props = {\n  dbId: number | string;\n  schema?: string;\n  catalog?: string | null;\n  tableName: string;\n};\n\nconst extensionsRegistry = getExtensionsRegistry();\n\nconst COLUMN_KEYS = ['column_name', 'column_type', 'keys', 'comment'];\n// TODO: Remove fa-icon\nconst MENUS = [\n  {\n    key: 'refresh-table',\n    label: t('Refresh table schema'),\n    icon: <Icons.SyncOutlined iconSize=\"s\" aria-hidden />,\n  },\n  {\n    key: 'copy-select-statement',\n    label: t('Copy SELECT statement'),\n    icon: <Icons.CopyOutlined iconSize=\"s\" aria-hidden />,\n  },\n  {\n    key: 'show-create-view-statement',\n    label: t('Show CREATE VIEW statement'),\n    icon: <Icons.EyeOutlined iconSize=\"s\" aria-hidden />,\n  },\n];\nconst TAB_HEADER_HEIGHT = 80;\nconst PREVIEW_TOP_ACTION_HEIGHT = 30;\nconst PREVIEW_QUERY_LIMIT = 100;\n\nconst Title = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  column-gap: ${({ theme }) => theme.gridUnit}px;\n  font-size: ${({ theme }) => theme.typography.sizes.l}px;\n  font-weight: ${({ theme }) => theme.typography.weights.bold};\n`;\n\nconst renderWell = (partitions: TableMetaData['partitions']) => {\n  if (!partitions) {\n    return null;\n  }\n  const { partitionQuery } = partitions;\n  let partitionClipBoard;\n  if (partitionQuery) {\n    const tt = t('Copy partition query to clipboard');\n    partitionClipBoard = (\n      <CopyToClipboard\n        text={partitionQuery}\n        shouldShowText={false}\n        tooltipText={tt}\n        copyNode={<Icons.CopyOutlined iconSize=\"s\" />}\n      />\n    );\n  }\n  const latest = Object.entries(partitions.latest || [])\n    .map(([key, value]) => `${key}=${value}`)\n    .join('/');\n\n  return (\n    <Card size=\"small\">\n      <div>\n        <small>\n          {t('latest partition:')} {latest}\n        </small>{' '}\n        {partitionClipBoard}\n      </div>\n    </Card>\n  );\n};\n\nconst TablePreview: FC<Props> = ({ dbId, catalog, schema, tableName }) => {\n  const dispatch = useDispatch();\n  const [databaseName, backend, disableDataPreview] = useSelector<\n    SqlLabRootState,\n    string[]\n  >(\n    ({ sqlLab: { databases } }) => [\n      databases[dbId]?.database_name,\n      databases[dbId]?.backend,\n      databases[dbId]?.disable_data_preview,\n    ],\n    shallowEqual,\n  );\n  const copyStatementActionRef = useRef<HTMLButtonElement | null>(null);\n  const showViewStatementActionRef = useRef<HTMLButtonElement | null>(null);\n  const [previewQueryId, setPreviewQueryId] = useState<string>();\n  const {\n    currentData: tableMetadata,\n    isLoading: isMetadataLoading,\n    isFetching: isMetadataRefreshing,\n    isError: hasMetadataError,\n    error: metadataError,\n  } = useTableMetadataQuery(\n    {\n      dbId,\n      catalog,\n      schema: schema ?? '',\n      table: tableName ?? '',\n    },\n    { skip: !dbId || !schema || !tableName },\n  );\n  const { currentData: tableExtendedMetadata, error: metadataExtrError } =\n    useTableExtendedMetadataQuery(\n      {\n        dbId,\n        catalog,\n        schema: schema ?? '',\n        table: tableName ?? '',\n      },\n      { skip: !dbId || !schema || !tableName },\n    );\n  const data = useMemo(\n    () =>\n      (tableMetadata?.columns.length ?? 0) > 0\n        ? tableMetadata?.columns.map(\n            ({ name, type, longType, keys, comment }) => ({\n              column_name: name,\n              column_type: longType || type,\n              keys,\n              comment,\n            }),\n          )\n        : undefined,\n    [tableMetadata],\n  );\n  const hasKeys = useMemo(\n    () => data?.some(({ keys }) => Boolean(keys?.length)),\n    [data],\n  );\n  const columns = useMemo(\n    () => (hasKeys ? COLUMN_KEYS : COLUMN_KEYS.filter(name => name !== 'keys')),\n    [hasKeys],\n  );\n  const tableData = {\n    dataPreviewQueryId: previewQueryId,\n    ...tableMetadata,\n    ...tableExtendedMetadata,\n  };\n  const refreshTableMetadata = () => {\n    dispatch(\n      tableApiUtil.invalidateTags([{ type: 'TableMetadatas', id: tableName }]),\n    );\n  };\n  const ResultTable =\n    extensionsRegistry.get('sqleditor.extension.resultTable') ??\n    FilterableTable;\n  const customTabs =\n    extensionsRegistry.get('sqleditor.extension.tablePreview') ?? [];\n  const onTabSwitch = useCallback(\n    (activeKey: string) => {\n      if (activeKey === 'sample' && !previewQueryId) {\n        const queryId = nanoid(11);\n        dispatch(\n          runTablePreviewQuery(\n            {\n              previewQueryId: queryId,\n              dbId,\n              catalog,\n              schema,\n              name: tableName,\n              selectStar: tableData.selectStar,\n            },\n            true,\n          ),\n        );\n        setPreviewQueryId(queryId);\n      }\n    },\n    [\n      previewQueryId,\n      dbId,\n      catalog,\n      schema,\n      tableName,\n      tableData.selectStar,\n      dispatch,\n    ],\n  );\n\n  const dropdownMenu = useMemo(() => {\n    let menus = [...MENUS];\n    if (!tableData.selectStar) {\n      menus = menus.filter(({ key }) => key !== 'copy-select-statement');\n    }\n    if (!tableData.view) {\n      menus = menus.filter(({ key }) => key !== 'show-create-view-statement');\n    }\n    return menus;\n  }, [tableData.view, tableData.selectStar]);\n\n  if (isMetadataLoading) {\n    return <Skeleton active />;\n  }\n\n  if (hasMetadataError || metadataExtrError) {\n    return (\n      <Alert\n        type=\"warning\"\n        message={\n          ((metadataError || metadataExtrError) as ClientErrorObject)?.error\n        }\n      />\n    );\n  }\n  if (!data) {\n    return (\n      <Alert\n        type=\"warning\"\n        message={t('Cannot find the table (%s) metadata.', tableName)}\n        closable={false}\n      />\n    );\n  }\n  return (\n    <div\n      css={css`\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      `}\n    >\n      <Breadcrumb separator=\">\">\n        <Breadcrumb.Item>{backend}</Breadcrumb.Item>\n        <Breadcrumb.Item>{databaseName}</Breadcrumb.Item>\n        {catalog && <Breadcrumb.Item>{catalog}</Breadcrumb.Item>}\n        {schema && <Breadcrumb.Item>{schema}</Breadcrumb.Item>}\n        <Breadcrumb.Item> </Breadcrumb.Item>\n      </Breadcrumb>\n      <div style={{ display: 'none' }}>\n        <CopyToClipboard\n          copyNode={\n            <button type=\"button\" ref={copyStatementActionRef}>\n              invisible button\n            </button>\n          }\n          text={tableData.selectStar}\n          shouldShowText={false}\n        />\n        {tableData.view && (\n          <ShowSQL\n            sql={tableData.view}\n            tooltipText={t('Show CREATE VIEW statement')}\n            title={t('CREATE VIEW statement')}\n            triggerNode={\n              <button type=\"button\" ref={showViewStatementActionRef}>\n                invisible button\n              </button>\n            }\n          />\n        )}\n      </div>\n      <Title>\n        <Icons.InsertRowAboveOutlined iconSize=\"l\" />\n        {tableName}\n        <Dropdown\n          dropdownRender={() => (\n            <Menu\n              onClick={({ key }) => {\n                if (key === 'refresh-table') {\n                  refreshTableMetadata();\n                }\n                if (key === 'copy-select-statement') {\n                  copyStatementActionRef.current?.click();\n                }\n                if (key === 'show-create-view-statement') {\n                  showViewStatementActionRef.current?.click();\n                }\n              }}\n              items={dropdownMenu}\n            />\n          )}\n          trigger={['click']}\n        >\n          <Button buttonSize=\"xsmall\" type=\"link\">\n            <Icons.DownSquareOutlined\n              iconSize=\"m\"\n              style={{ marginTop: 2, marginLeft: 4 }}\n              aria-label={t('Table actions')}\n            />\n          </Button>\n        </Dropdown>\n      </Title>\n      {isMetadataRefreshing ? (\n        <Skeleton active />\n      ) : (\n        <>\n          {tableData.comment && <SafeMarkdown source={tableData.comment} />}\n          {renderWell(tableData.partitions)}\n          <div\n            css={css`\n              flex: 1 1 auto;\n            `}\n          >\n            <AutoSizer disableWidth>\n              {({ height }) => (\n                <Tabs\n                  fullWidth={false}\n                  onTabClick={onTabSwitch}\n                  css={css`\n                    height: ${height}px;\n                  `}\n                >\n                  <Tabs.TabPane\n                    tab={t('Columns (%s)', data.length)}\n                    key=\"columns\"\n                  >\n                    <ResultTable\n                      queryId=\"table-columns\"\n                      height={height - TAB_HEADER_HEIGHT}\n                      data={data}\n                      orderedColumnKeys={columns}\n                    />\n                  </Tabs.TabPane>\n                  {tableData?.selectStar && !disableDataPreview && (\n                    <Tabs.TabPane tab={t('Data preview')} key=\"sample\">\n                      {previewQueryId && (\n                        <ResultSet\n                          queryId={previewQueryId}\n                          visualize={false}\n                          csv={false}\n                          cache\n                          height={\n                            height -\n                            TAB_HEADER_HEIGHT -\n                            PREVIEW_TOP_ACTION_HEIGHT\n                          }\n                          displayLimit={PREVIEW_QUERY_LIMIT}\n                          defaultQueryLimit={PREVIEW_QUERY_LIMIT}\n                        />\n                      )}\n                    </Tabs.TabPane>\n                  )}\n                  {tableData?.indexes && tableData.indexes.length > 0 && (\n                    <Tabs.TabPane\n                      tab={t('Indexes (%s)', tableData.indexes.length)}\n                      key=\"indexes\"\n                    >\n                      {tableData.indexes.map((ix, i) => (\n                        <pre className=\"code\" key={i}>\n                          {JSON.stringify(ix, null, '  ')}\n                        </pre>\n                      ))}\n                    </Tabs.TabPane>\n                  )}\n                  {tableData?.metadata && (\n                    <Tabs.TabPane tab={t('Metadata')} key=\"metadata\">\n                      <ResultTable\n                        queryId=\"table-metadata\"\n                        height={height - TAB_HEADER_HEIGHT}\n                        data={Object.entries(tableData.metadata).map(\n                          ([name, value]) => ({ name, value }),\n                        )}\n                        orderedColumnKeys={['name', 'value']}\n                      />\n                    </Tabs.TabPane>\n                  )}\n                  {customTabs.map(([title, ExtComponent]) => (\n                    <Tabs.TabPane tab={title} key={title}>\n                      <ExtComponent\n                        dbId={Number(dbId)}\n                        schema={schema ?? ''}\n                        tableName={tableName}\n                      />\n                    </Tabs.TabPane>\n                  ))}\n                </Tabs>\n              )}\n            </AutoSizer>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default TablePreview;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}