{"ast":null,"code":"import { css as _css } from \"@emotion/react\";import _pick from \"lodash/pick\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect, useState, memo } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport Alert from 'src/components/Alert';\nimport Button from 'src/components/Button';\nimport { nanoid } from 'nanoid';\nimport { QueryState, styled, t, tn, useTheme, usePrevious, css, getNumberFormatter, getExtensionsRegistry, ErrorTypeEnum } from '@superset-ui/core';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport { SaveDatasetModal } from 'src/SqlLab/components/SaveDatasetModal';\nimport { EXPLORE_CHART_DEFAULT } from 'src/SqlLab/types';\nimport { mountExploreUrl } from 'src/explore/exploreUtils';\nimport { postFormData } from 'src/explore/exploreUtils/formData';\nimport ProgressBar from 'src/components/ProgressBar';\nimport Loading from 'src/components/Loading';\nimport Card from 'src/components/Card';\nimport Label from 'src/components/Label';\nimport { Tooltip } from 'src/components/Tooltip';\nimport FilterableTable from 'src/components/FilterableTable';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { prepareCopyToClipboardTabularData } from 'src/utils/common';\nimport { getItem, LocalStorageKeys } from 'src/utils/localStorageHelpers';\nimport Modal from 'src/components/Modal';\nimport { addQueryEditor, clearQueryResults, CtasEnum, fetchQueryResults, reFetchQueryResults, reRunQuery } from 'src/SqlLab/actions/sqlLab';\nimport { URL_PARAMS } from 'src/constants';\nimport useLogAction from 'src/logger/useLogAction';\nimport { LOG_ACTIONS_SQLLAB_COPY_RESULT_TO_CLIPBOARD, LOG_ACTIONS_SQLLAB_CREATE_CHART, LOG_ACTIONS_SQLLAB_DOWNLOAD_CSV } from 'src/logger/LogUtils';\nimport { Icons } from 'src/components/Icons';\nimport { findPermission } from 'src/utils/findPermission';\nimport ExploreCtasResultsButton from '../ExploreCtasResultsButton';\nimport ExploreResultsButton from '../ExploreResultsButton';\nimport HighlightedSql from '../HighlightedSql';\nimport QueryStateLabel from '../QueryStateLabel';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nvar LimitingFactor;\n(function (LimitingFactor) {\n  LimitingFactor[\"Query\"] = \"QUERY\";\n  LimitingFactor[\"QueryAndDropdown\"] = \"QUERY_AND_DROPDOWN\";\n  LimitingFactor[\"Dropdown\"] = \"DROPDOWN\";\n  LimitingFactor[\"NotLimited\"] = \"NOT_LIMITED\";\n})(LimitingFactor || (LimitingFactor = {}));\nconst ResultContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: ${({ theme }) => theme.gridUnit * 2}px;\n`;\nconst ResultlessStyles = styled.div`\n  position: relative;\n  min-height: ${({ theme }) => theme.gridUnit * 25}px;\n  [role='alert'] {\n    margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n  .sql-result-track-job {\n    margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n`;\n// Making text render line breaks/tabs as is as monospace,\n// but wrapping text too so text doesn't overflow\nconst MonospaceDiv = styled.div`\n  font-family: ${({ theme }) => theme.typography.families.monospace};\n  white-space: pre;\n  word-break: break-word;\n  overflow-x: auto;\n  white-space: pre-wrap;\n`;\nconst ReturnedRows = styled.div`\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  line-height: 1;\n`;\nconst ResultSetControls = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\nconst ResultSetButtons = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  padding-right: ${({ theme }) => 2 * theme.gridUnit}px;\n`;\nconst copyButtonStyles = css`\n  &:hover {\n    text-decoration: unset;\n  }\n  span > :first-of-type {\n    margin: 0px;\n  }\n`;\nconst ROWS_CHIP_WIDTH = 100;\nconst GAP = 8;\nconst extensionsRegistry = getExtensionsRegistry();\nconst ResultSet = ({ cache = false, csv = true, database = {}, displayLimit, height, queryId, search = true, showSql = false, showSqlInline = false, visualize = true, defaultQueryLimit }) => {var _extensionsRegistry$g, _query$results2, _query$extra$progress, _query$extra2;\n  const user = useSelector(({ user }) => user, shallowEqual);\n  const query = useSelector(({ sqlLab: { queries } }) => _pick(queries[queryId], [\n  'id',\n  'errorMessage',\n  'cached',\n  'results',\n  'resultsKey',\n  'dbId',\n  'tab',\n  'sql',\n  'sqlEditorId',\n  'templateParams',\n  'schema',\n  'rows',\n  'queryLimit',\n  'limitingFactor',\n  'trackingUrl',\n  'state',\n  'errors',\n  'link',\n  'ctas',\n  'ctas_method',\n  'tempSchema',\n  'tempTable',\n  'isDataPreview',\n  'progress',\n  'extra']\n  ), shallowEqual);\n  const ResultTable = (_extensionsRegistry$g = extensionsRegistry.get('sqleditor.extension.resultTable')) != null ? _extensionsRegistry$g :\n  FilterableTable;\n  const theme = useTheme();\n  const [searchText, setSearchText] = useState('');\n  const [cachedData, setCachedData] = useState([]);\n  const [showSaveDatasetModal, setShowSaveDatasetModal] = useState(false);\n  const [alertIsOpen, setAlertIsOpen] = useState(false);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const logAction = useLogAction({ queryId, sqlEditorId: query.sqlEditorId });\n  const reRunQueryIfSessionTimeoutErrorOnMount = useCallback(() => {\n    if (query.errorMessage &&\n    query.errorMessage.indexOf('session timed out') > 0) {\n      dispatch(reRunQuery(query));\n    }\n  }, []);\n  useEffect(() => {\n    // only do this the first time the component is rendered/mounted\n    reRunQueryIfSessionTimeoutErrorOnMount();\n  }, [reRunQueryIfSessionTimeoutErrorOnMount]);\n  const fetchResults = (q, timeout) => {\n    dispatch(fetchQueryResults(q, displayLimit, timeout));\n  };\n  const prevQuery = usePrevious(query);\n  useEffect(() => {var _query$results, _query$results$data;\n    if (cache && query.cached && (query == null ? void 0 : (_query$results = query.results) == null ? void 0 : (_query$results$data = _query$results.data) == null ? void 0 : _query$results$data.length) > 0) {\n      setCachedData(query.results.data);\n      dispatch(clearQueryResults(query));\n    }\n    if (query.resultsKey && query.resultsKey !== (prevQuery == null ? void 0 : prevQuery.resultsKey)) {\n      fetchResults(query);\n    }\n  }, [query, cache]);\n  const calculateAlertRefHeight = (alertElement) => {\n    if (alertElement) {\n      setAlertIsOpen(true);\n    } else\n    {\n      setAlertIsOpen(false);\n    }\n  };\n  const popSelectStar = (tempSchema, tempTable) => {\n    const qe = {\n      id: nanoid(11),\n      name: tempTable,\n      autorun: false,\n      dbId: query.dbId,\n      sql: `SELECT * FROM ${tempSchema ? `${tempSchema}.` : ''}${tempTable}`\n    };\n    dispatch(addQueryEditor(qe));\n  };\n  const changeSearch = (event) => {\n    setSearchText(event.target.value);\n  };\n  const createExploreResultsOnClick = async (clickEvent) => {\n    const { results } = query;\n    const openInNewWindow = clickEvent.metaKey;\n    logAction(LOG_ACTIONS_SQLLAB_CREATE_CHART, {});\n    if (results != null && results.query_id) {\n      const key = await postFormData(results.query_id, 'query', {\n        ...EXPLORE_CHART_DEFAULT,\n        datasource: `${results.query_id}__query`,\n        ...{\n          all_columns: results.columns.map((column) => column.column_name)\n        }\n      });\n      const url = mountExploreUrl(null, {\n        [URL_PARAMS.formDataKey.name]: key\n      });\n      if (openInNewWindow) {\n        window.open(url, '_blank', 'noreferrer');\n      } else\n      {\n        history.push(url);\n      }\n    } else\n    {\n      addDangerToast(t('Unable to create chart without a query id.'));\n    }\n  };\n  const getExportCsvUrl = (clientId) => `/api/v1/sqllab/export/${clientId}/`;\n  const renderControls = () => {\n    if (search || visualize || csv) {var _results$data;\n      const { results, queryLimit, limitingFactor, rows } = query;\n      const limit = queryLimit || results.query.limit;\n      const rowsCount = Math.min(rows || 0, (results == null ? void 0 : (_results$data = results.data) == null ? void 0 : _results$data.length) || 0);\n      let { data } = query.results;\n      if (cache && query.cached) {\n        data = cachedData;\n      }\n      const { columns } = query.results;\n      // Added compute logic to stop user from being able to Save & Explore\n      const datasource = {\n        columns: query.results.columns,\n        name: (query == null ? void 0 : query.tab) || 'Untitled',\n        dbId: query == null ? void 0 : query.dbId,\n        sql: query == null ? void 0 : query.sql,\n        templateParams: query == null ? void 0 : query.templateParams,\n        schema: query == null ? void 0 : query.schema\n      };\n      const canExportData = findPermission('can_export_csv', 'SQLLab', user == null ? void 0 : user.roles);\n      return _jsxs(ResultSetControls, { children: [\n        _jsx(SaveDatasetModal, { visible: showSaveDatasetModal, onHide: () => setShowSaveDatasetModal(false), buttonTextOnSave: t('Save & Explore'), buttonTextOnOverwrite: t('Overwrite & Explore'), modalDescription: t('Save this query as a virtual dataset to continue exploring'), datasource: datasource }),\n        _jsxs(ResultSetButtons, { children: [\n          visualize && (database == null ? void 0 : database.allows_virtual_table_explore) && _jsx(ExploreResultsButton, { database: database, onClick: createExploreResultsOnClick }),\n          csv && canExportData && _jsxs(Button, { css: copyButtonStyles, buttonSize: \"small\", href: getExportCsvUrl(query.id), \"data-test\": \"export-csv-button\", onClick: () => {\n              logAction(LOG_ACTIONS_SQLLAB_DOWNLOAD_CSV, {});\n              if (limitingFactor === LimitingFactor.Dropdown &&\n              limit === rowsCount) {\n                Modal.warning({\n                  title: t('Download is on the way'),\n                  content: t('Downloading %(rows)s rows based on the LIMIT configuration. If you want the entire result set, you need to adjust the LIMIT.', { rows: rowsCount.toLocaleString() })\n                });\n              }\n            }, children: [\n            _jsx(Icons.DownloadOutlined, { iconSize: \"m\", iconColor: theme.colors.primary.dark2 }), ' ',\n            t('Download to CSV')] }\n          ),\n\n          canExportData && _jsx(CopyToClipboard, { text: prepareCopyToClipboardTabularData(data, columns), wrapped: false, copyNode: _jsxs(Button, { css: copyButtonStyles, buttonSize: \"small\", \"data-test\": \"copy-to-clipboard-button\", children: [\n              _jsx(Icons.CopyOutlined, { iconSize: \"s\", iconColor: theme.colors.primary.dark2 }), ' ',\n              t('Copy to Clipboard')] }\n            ), hideTooltip: true, onCopyEnd: () => logAction(LOG_ACTIONS_SQLLAB_COPY_RESULT_TO_CLIPBOARD, {}) })] }\n        ),\n        search && _jsx(\"input\", { type: \"text\", onChange: changeSearch, value: searchText, className: \"form-control input-sm\", placeholder: t('Filter results') })] }\n      );\n    }\n    return _jsx(\"div\", {});\n  };\n  const renderRowsReturned = (alertMessage) => {var _user$roles, _results$data2;\n    const { results, rows, queryLimit, limitingFactor } = query;\n    let limitMessage = '';\n    const limitReached = results == null ? void 0 : results.displayLimitReached;\n    const limit = queryLimit || results.query.limit;\n    const isAdmin = !!(user != null && (_user$roles = user.roles) != null && _user$roles.Admin);\n    const rowsCount = Math.min(rows || 0, (results == null ? void 0 : (_results$data2 = results.data) == null ? void 0 : _results$data2.length) || 0);\n    const displayMaxRowsReachedMessage = {\n      withAdmin: t('The number of results displayed is limited to %(rows)d by the configuration DISPLAY_MAX_ROW. ' +\n      'Please add additional limits/filters or download to csv to see more rows up to ' +\n      'the %(limit)d limit.', { rows: rowsCount, limit }),\n      withoutAdmin: t('The number of results displayed is limited to %(rows)d. ' +\n      'Please add additional limits/filters, download to csv, or contact an admin ' +\n      'to see more rows up to the %(limit)d limit.', { rows: rowsCount, limit })\n    };\n    const shouldUseDefaultDropdownAlert = limit === defaultQueryLimit && limitingFactor === LimitingFactor.Dropdown;\n    if (limitingFactor === LimitingFactor.Query && csv) {\n      limitMessage = t('The number of rows displayed is limited to %(rows)d by the query', { rows });\n    } else\n    if (limitingFactor === LimitingFactor.Dropdown &&\n    !shouldUseDefaultDropdownAlert) {\n      limitMessage = t('The number of rows displayed is limited to %(rows)d by the limit dropdown.', { rows });\n    } else\n    if (limitingFactor === LimitingFactor.QueryAndDropdown) {\n      limitMessage = t('The number of rows displayed is limited to %(rows)d by the query and limit dropdown.', { rows });\n    }\n    const formattedRowCount = getNumberFormatter()(rows);\n    const rowsReturnedMessage = t('%(rows)d rows returned', {\n      rows\n    });\n    const tooltipText = `${rowsReturnedMessage}. ${limitMessage}`;\n    if (alertMessage) {\n      return _jsxs(_Fragment, { children: [\n        !limitReached && shouldUseDefaultDropdownAlert && _jsx(\"div\", { ref: calculateAlertRefHeight, children:\n          _jsx(Alert, { type: \"warning\", message: t('%(rows)d rows returned', { rows }), onClose: () => setAlertIsOpen(false), description: t('The number of rows displayed is limited to %(rows)d by the dropdown.', { rows }) }) }\n        ),\n        limitReached && _jsx(\"div\", { ref: calculateAlertRefHeight, children:\n          _jsx(Alert, { type: \"warning\", onClose: () => setAlertIsOpen(false), message: t('%(rows)d rows returned', { rows: rowsCount }), description: isAdmin ?\n            displayMaxRowsReachedMessage.withAdmin :\n            displayMaxRowsReachedMessage.withoutAdmin }) }\n        )] }\n      );\n    }\n    const showRowsReturned = showSqlInline || !limitReached && !shouldUseDefaultDropdownAlert;\n    return _jsx(_Fragment, { children:\n      showRowsReturned && _jsx(ReturnedRows, { children:\n        _jsx(Tooltip, { id: \"sqllab-rowcount-tooltip\", title: tooltipText, placement: \"left\", children:\n          _jsxs(Label, { css: css`\n                  line-height: ${theme.typography.sizes.l}px;\n                `, children: [\n            limitMessage && _jsx(Icons.ExclamationCircleOutlined, { css: css`\n                      font-size: ${theme.typography.sizes.m}px;\n                      margin-right: ${theme.gridUnit}px;\n                    ` }),\n            tn('%s row', '%s rows', rows, formattedRowCount)] }\n          ) }\n        ) }\n      ) }\n    );\n  };\n  const limitReached = query == null ? void 0 : (_query$results2 = query.results) == null ? void 0 : _query$results2.displayLimitReached;\n  let sql;\n  let exploreDBId = query.dbId;\n  if (database != null && database.explore_database_id) {\n    exploreDBId = database.explore_database_id;\n  }\n  let trackingUrl;\n  if (query.trackingUrl &&\n  query.state !== QueryState.Success &&\n  query.state !== QueryState.Fetching) {\n    trackingUrl = _jsx(Button, { className: \"sql-result-track-job\", buttonSize: \"small\", href: query.trackingUrl, target: \"_blank\", children:\n      query.state === QueryState.Running ?\n      t('Track job') :\n      t('See query details') }\n    );\n  }\n  if (showSql) {\n    sql = _jsx(HighlightedSql, { sql: query.sql, ...(showSqlInline && { maxLines: 1, maxWidth: 60 }) });\n  }\n  if (query.state === QueryState.Stopped) {\n    return _jsx(Alert, { type: \"warning\", message: t('Query was stopped') });\n  }\n  if (query.state === QueryState.Failed) {var _query$extra;\n    const errors = [...(((_query$extra = query.extra) == null ? void 0 : _query$extra.errors) || []), ...(query.errors || [])];\n    return _jsxs(ResultlessStyles, { children: [\n      errors.map((error, index) => _jsx(ErrorMessageWithStackTrace, { title: t('Database error'), error: error, subtitle: _jsx(MonospaceDiv, { children: error.message }), copyText: error.message || undefined, link: query.link, source: \"sqllab\" }, index)),\n      errors.some((error) => (error == null ? void 0 : error.error_type) === ErrorTypeEnum.FRONTEND_TIMEOUT_ERROR) ? _jsx(Button, { className: \"sql-result-track-job\", buttonSize: \"small\", onClick: () => fetchResults(query, 0), children:\n        t('Retry fetching results') }\n      ) : trackingUrl] }\n    );\n  }\n  if (query.state === QueryState.Success && query.ctas) {\n    const { tempSchema, tempTable } = query;\n    let object = 'Table';\n    if (query.ctas_method === CtasEnum.View) {\n      object = 'View';\n    }\n    return _jsx(\"div\", { children:\n      _jsx(Alert, { type: \"info\", message: _jsxs(_Fragment, { children: [\n          t(object), \" [\",\n          _jsxs(\"strong\", { children: [\n            tempSchema ? `${tempSchema}.` : '',\n            tempTable] }\n          ), \"] \",\n          t('was created'), \" \\xA0\",\n          _jsxs(ButtonGroup, { children: [\n            _jsx(Button, { buttonSize: \"small\", css: /*#__PURE__*/_css({ marginRight: theme.gridUnit }, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ResultSet;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), onClick: () => popSelectStar(tempSchema, tempTable), children:\n              t('Query in a new tab') }\n            ),\n            _jsx(ExploreCtasResultsButton, { table: tempTable, schema: tempSchema, dbId: exploreDBId })] }\n          )] }\n        ) }) }\n    );\n  }\n  if (query.state === QueryState.Success && query.results) {\n    const { results } = query;\n    // Accounts for offset needed for height of ResultSetRowsReturned component if !limitReached\n    const rowMessageHeight = !limitReached ? 32 : 0;\n    // Accounts for offset needed for height of Alert if this.state.alertIsOpen\n    const alertContainerHeight = 70;\n    // We need to calculate the height of this.renderRowsReturned()\n    // if we want results panel to be proper height because the\n    // FilterTable component needs an explicit height to render\n    // the Table component\n    const rowsHeight = alertIsOpen ?\n    height - alertContainerHeight :\n    height - rowMessageHeight;\n    let data;\n    if (cache && query.cached) {\n      data = cachedData;\n    } else\n    if (results != null && results.data) {\n      ({ data } = results);\n    }\n    if (data && data.length > 0) {\n      const expandedColumns = results.expanded_columns ?\n      results.expanded_columns.map((col) => col.column_name) :\n      [];\n      const allowHTML = getItem(LocalStorageKeys.SqllabIsRenderHtmlEnabled, true);\n      return _jsxs(ResultContainer, { children: [\n        renderControls(),\n        showSql && showSqlInline ? _jsxs(_Fragment, { children: [\n          _jsxs(\"div\", { css: css`\n                  display: flex;\n                  justify-content: space-between;\n                  gap: ${GAP}px;\n                `, children: [\n            _jsx(Card, { css: [\n              css`\n                      height: 28px;\n                      width: calc(100% - ${ROWS_CHIP_WIDTH + GAP}px);\n                      code {\n                        width: 100%;\n                        overflow: hidden;\n                        white-space: nowrap !important;\n                        text-overflow: ellipsis;\n                        display: block;\n                      }\n                    `, process.env.NODE_ENV === \"production\" ? \"\" : \";label:ResultSet;\", process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"], children:\n\n              sql }\n            ),\n            renderRowsReturned(false)] }\n          ),\n          renderRowsReturned(true)] }\n        ) : _jsxs(_Fragment, { children: [\n          renderRowsReturned(false),\n          renderRowsReturned(true),\n          sql] }\n        ),\n        _jsx(ResultTable, { data: data, queryId: query.id, orderedColumnKeys: results.columns.map((col) => col.column_name), height: rowsHeight, filterText: searchText, expandedColumns: expandedColumns, allowHTML: allowHTML })] }\n      );\n    }\n    if (data && data.length === 0) {\n      return _jsx(Alert, { type: \"warning\", message: t('The query returned no data') });\n    }\n  }\n  if (query.cached || query.state === QueryState.Success && !query.results) {\n    if (query.isDataPreview) {\n      return _jsx(Button, { buttonSize: \"small\", buttonStyle: \"primary\", onClick: () => dispatch(reFetchQueryResults({\n          ...query,\n          isDataPreview: true\n        })), children:\n        t('Fetch data preview') }\n      );\n    }\n    if (query.resultsKey) {\n      return _jsx(Button, { buttonSize: \"small\", buttonStyle: \"primary\", onClick: () => fetchResults(query), children:\n        t('Refetch results') }\n      );\n    }\n  }\n  let progressBar;\n  if (query.progress > 0) {\n    progressBar = _jsx(ProgressBar, { percent: parseInt(query.progress.toFixed(0), 10), striped: true });\n  }\n  const progressMsg = (_query$extra$progress = query == null ? void 0 : (_query$extra2 = query.extra) == null ? void 0 : _query$extra2.progress) != null ? _query$extra$progress : null;\n  return _jsxs(ResultlessStyles, { children: [\n    _jsx(\"div\", { children: !progressBar && _jsx(Loading, { position: \"normal\" }) }),\n\n    _jsx(\"div\", { children: query.progress === 100 && _jsx(Loading, { position: \"normal\" }) }),\n    _jsx(QueryStateLabel, { query: query }),\n    _jsx(\"div\", { children: progressMsg && _jsx(Alert, { type: \"success\", message: progressMsg }) }),\n    _jsx(\"div\", { children: query.progress !== 100 && progressBar }),\n    trackingUrl && _jsx(\"div\", { children: trackingUrl })] }\n  );\n};__signature__(ResultSet, \"useSelector{user}\\nuseSelector{query}\\nuseTheme{theme}\\nuseState{[searchText, setSearchText]('')}\\nuseState{[cachedData, setCachedData]([])}\\nuseState{[showSaveDatasetModal, setShowSaveDatasetModal](false)}\\nuseState{[alertIsOpen, setAlertIsOpen](false)}\\nuseHistory{history}\\nuseDispatch{dispatch}\\nuseLogAction{logAction}\\nuseCallback{reRunQueryIfSessionTimeoutErrorOnMount}\\nuseEffect{}\\nusePrevious{prevQuery}\\nuseEffect{}\", () => [useSelector, useSelector, useTheme, useHistory, useDispatch, useLogAction, usePrevious]);const _default = /*#__PURE__*/\nmemo(ResultSet);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(LimitingFactor, \"LimitingFactor\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(ResultContainer, \"ResultContainer\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(ResultlessStyles, \"ResultlessStyles\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(MonospaceDiv, \"MonospaceDiv\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(ReturnedRows, \"ReturnedRows\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(ResultSetControls, \"ResultSetControls\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(ResultSetButtons, \"ResultSetButtons\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(copyButtonStyles, \"copyButtonStyles\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(ROWS_CHIP_WIDTH, \"ROWS_CHIP_WIDTH\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(GAP, \"GAP\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(extensionsRegistry, \"extensionsRegistry\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(ResultSet, \"ResultSet\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useCallback","useEffect","useState","memo","shallowEqual","useDispatch","useSelector","useHistory","ButtonGroup","Alert","Button","nanoid","QueryState","styled","t","tn","useTheme","usePrevious","css","getNumberFormatter","getExtensionsRegistry","ErrorTypeEnum","ErrorMessageWithStackTrace","SaveDatasetModal","EXPLORE_CHART_DEFAULT","mountExploreUrl","postFormData","ProgressBar","Loading","Card","Label","Tooltip","FilterableTable","CopyToClipboard","addDangerToast","prepareCopyToClipboardTabularData","getItem","LocalStorageKeys","Modal","addQueryEditor","clearQueryResults","CtasEnum","fetchQueryResults","reFetchQueryResults","reRunQuery","URL_PARAMS","useLogAction","LOG_ACTIONS_SQLLAB_COPY_RESULT_TO_CLIPBOARD","LOG_ACTIONS_SQLLAB_CREATE_CHART","LOG_ACTIONS_SQLLAB_DOWNLOAD_CSV","Icons","findPermission","ExploreCtasResultsButton","ExploreResultsButton","HighlightedSql","QueryStateLabel","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","LimitingFactor","ResultContainer","div","theme","gridUnit","ResultlessStyles","MonospaceDiv","typography","families","monospace","ReturnedRows","sizes","s","ResultSetControls","ResultSetButtons","copyButtonStyles","ROWS_CHIP_WIDTH","GAP","extensionsRegistry","ResultSet","cache","csv","database","displayLimit","height","queryId","search","showSql","showSqlInline","visualize","defaultQueryLimit","_extensionsRegistry$g","_query$results2","_query$extra$progress","_query$extra2","user","query","sqlLab","queries","_pick","ResultTable","get","searchText","setSearchText","cachedData","setCachedData","showSaveDatasetModal","setShowSaveDatasetModal","alertIsOpen","setAlertIsOpen","history","dispatch","logAction","sqlEditorId","reRunQueryIfSessionTimeoutErrorOnMount","errorMessage","indexOf","fetchResults","q","timeout","prevQuery","_query$results","_query$results$data","cached","results","data","length","resultsKey","calculateAlertRefHeight","alertElement","popSelectStar","tempSchema","tempTable","qe","id","name","autorun","dbId","sql","changeSearch","event","target","value","createExploreResultsOnClick","clickEvent","openInNewWindow","metaKey","query_id","key","datasource","all_columns","columns","map","column","column_name","url","formDataKey","window","open","push","getExportCsvUrl","clientId","renderControls","_results$data","queryLimit","limitingFactor","rows","limit","rowsCount","Math","min","tab","templateParams","schema","canExportData","roles","children","visible","onHide","buttonTextOnSave","buttonTextOnOverwrite","modalDescription","allows_virtual_table_explore","onClick","buttonSize","href","Dropdown","warning","title","content","toLocaleString","DownloadOutlined","iconSize","iconColor","colors","primary","dark2","text","wrapped","copyNode","CopyOutlined","hideTooltip","onCopyEnd","type","onChange","className","placeholder","renderRowsReturned","alertMessage","_user$roles","_results$data2","limitMessage","limitReached","displayLimitReached","isAdmin","Admin","displayMaxRowsReachedMessage","withAdmin","withoutAdmin","shouldUseDefaultDropdownAlert","Query","QueryAndDropdown","formattedRowCount","rowsReturnedMessage","tooltipText","ref","message","onClose","description","showRowsReturned","placement","l","ExclamationCircleOutlined","m","exploreDBId","explore_database_id","trackingUrl","state","Success","Fetching","Running","maxLines","maxWidth","Stopped","Failed","_query$extra","errors","extra","error","index","subtitle","copyText","undefined","link","source","some","error_type","FRONTEND_TIMEOUT_ERROR","ctas","object","ctas_method","View","_css","marginRight","process","env","NODE_ENV","table","rowMessageHeight","alertContainerHeight","rowsHeight","expandedColumns","expanded_columns","col","allowHTML","SqllabIsRenderHtmlEnabled","orderedColumnKeys","filterText","isDataPreview","buttonStyle","progressBar","progress","percent","parseInt","toFixed","striped","progressMsg","position","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/SqlLab/components/ResultSet/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  ChangeEvent,\n  MouseEvent,\n} from 'react';\n\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { pick } from 'lodash';\nimport ButtonGroup from 'src/components/ButtonGroup';\nimport Alert from 'src/components/Alert';\nimport Button from 'src/components/Button';\nimport { nanoid } from 'nanoid';\nimport {\n  QueryState,\n  styled,\n  t,\n  tn,\n  useTheme,\n  usePrevious,\n  css,\n  getNumberFormatter,\n  getExtensionsRegistry,\n  ErrorTypeEnum,\n} from '@superset-ui/core';\nimport ErrorMessageWithStackTrace from 'src/components/ErrorMessage/ErrorMessageWithStackTrace';\nimport {\n  ISaveableDatasource,\n  ISimpleColumn,\n  SaveDatasetModal,\n} from 'src/SqlLab/components/SaveDatasetModal';\nimport { EXPLORE_CHART_DEFAULT, SqlLabRootState } from 'src/SqlLab/types';\nimport { mountExploreUrl } from 'src/explore/exploreUtils';\nimport { postFormData } from 'src/explore/exploreUtils/formData';\nimport ProgressBar from 'src/components/ProgressBar';\nimport Loading from 'src/components/Loading';\nimport Card from 'src/components/Card';\nimport Label from 'src/components/Label';\nimport { Tooltip } from 'src/components/Tooltip';\nimport FilterableTable from 'src/components/FilterableTable';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { addDangerToast } from 'src/components/MessageToasts/actions';\nimport { prepareCopyToClipboardTabularData } from 'src/utils/common';\nimport { getItem, LocalStorageKeys } from 'src/utils/localStorageHelpers';\nimport Modal from 'src/components/Modal';\nimport {\n  addQueryEditor,\n  clearQueryResults,\n  CtasEnum,\n  fetchQueryResults,\n  reFetchQueryResults,\n  reRunQuery,\n} from 'src/SqlLab/actions/sqlLab';\nimport { URL_PARAMS } from 'src/constants';\nimport useLogAction from 'src/logger/useLogAction';\nimport {\n  LOG_ACTIONS_SQLLAB_COPY_RESULT_TO_CLIPBOARD,\n  LOG_ACTIONS_SQLLAB_CREATE_CHART,\n  LOG_ACTIONS_SQLLAB_DOWNLOAD_CSV,\n} from 'src/logger/LogUtils';\nimport { Icons } from 'src/components/Icons';\nimport { findPermission } from 'src/utils/findPermission';\nimport ExploreCtasResultsButton from '../ExploreCtasResultsButton';\nimport ExploreResultsButton from '../ExploreResultsButton';\nimport HighlightedSql from '../HighlightedSql';\nimport QueryStateLabel from '../QueryStateLabel';\n\nenum LimitingFactor {\n  Query = 'QUERY',\n  QueryAndDropdown = 'QUERY_AND_DROPDOWN',\n  Dropdown = 'DROPDOWN',\n  NotLimited = 'NOT_LIMITED',\n}\n\nexport interface ResultSetProps {\n  cache?: boolean;\n  csv?: boolean;\n  database?: Record<string, any>;\n  displayLimit: number;\n  height: number;\n  queryId: string;\n  search?: boolean;\n  showSql?: boolean;\n  showSqlInline?: boolean;\n  visualize?: boolean;\n  defaultQueryLimit: number;\n}\n\nconst ResultContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: ${({ theme }) => theme.gridUnit * 2}px;\n`;\n\nconst ResultlessStyles = styled.div`\n  position: relative;\n  min-height: ${({ theme }) => theme.gridUnit * 25}px;\n  [role='alert'] {\n    margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n  .sql-result-track-job {\n    margin-top: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n`;\n\n// Making text render line breaks/tabs as is as monospace,\n// but wrapping text too so text doesn't overflow\nconst MonospaceDiv = styled.div`\n  font-family: ${({ theme }) => theme.typography.families.monospace};\n  white-space: pre;\n  word-break: break-word;\n  overflow-x: auto;\n  white-space: pre-wrap;\n`;\n\nconst ReturnedRows = styled.div`\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  line-height: 1;\n`;\n\nconst ResultSetControls = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst ResultSetButtons = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  padding-right: ${({ theme }) => 2 * theme.gridUnit}px;\n`;\n\nconst copyButtonStyles = css`\n  &:hover {\n    text-decoration: unset;\n  }\n  span > :first-of-type {\n    margin: 0px;\n  }\n`;\n\nconst ROWS_CHIP_WIDTH = 100;\nconst GAP = 8;\n\nconst extensionsRegistry = getExtensionsRegistry();\n\nconst ResultSet = ({\n  cache = false,\n  csv = true,\n  database = {},\n  displayLimit,\n  height,\n  queryId,\n  search = true,\n  showSql = false,\n  showSqlInline = false,\n  visualize = true,\n  defaultQueryLimit,\n}: ResultSetProps) => {\n  const user = useSelector(({ user }: SqlLabRootState) => user, shallowEqual);\n  const query = useSelector(\n    ({ sqlLab: { queries } }: SqlLabRootState) =>\n      pick(queries[queryId], [\n        'id',\n        'errorMessage',\n        'cached',\n        'results',\n        'resultsKey',\n        'dbId',\n        'tab',\n        'sql',\n        'sqlEditorId',\n        'templateParams',\n        'schema',\n        'rows',\n        'queryLimit',\n        'limitingFactor',\n        'trackingUrl',\n        'state',\n        'errors',\n        'link',\n        'ctas',\n        'ctas_method',\n        'tempSchema',\n        'tempTable',\n        'isDataPreview',\n        'progress',\n        'extra',\n      ]),\n    shallowEqual,\n  );\n  const ResultTable =\n    extensionsRegistry.get('sqleditor.extension.resultTable') ??\n    FilterableTable;\n  const theme = useTheme();\n  const [searchText, setSearchText] = useState('');\n  const [cachedData, setCachedData] = useState<Record<string, unknown>[]>([]);\n  const [showSaveDatasetModal, setShowSaveDatasetModal] = useState(false);\n  const [alertIsOpen, setAlertIsOpen] = useState(false);\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const logAction = useLogAction({ queryId, sqlEditorId: query.sqlEditorId });\n\n  const reRunQueryIfSessionTimeoutErrorOnMount = useCallback(() => {\n    if (\n      query.errorMessage &&\n      query.errorMessage.indexOf('session timed out') > 0\n    ) {\n      dispatch(reRunQuery(query));\n    }\n  }, []);\n\n  useEffect(() => {\n    // only do this the first time the component is rendered/mounted\n    reRunQueryIfSessionTimeoutErrorOnMount();\n  }, [reRunQueryIfSessionTimeoutErrorOnMount]);\n\n  const fetchResults = (q: typeof query, timeout?: number) => {\n    dispatch(fetchQueryResults(q, displayLimit, timeout));\n  };\n\n  const prevQuery = usePrevious(query);\n  useEffect(() => {\n    if (cache && query.cached && query?.results?.data?.length > 0) {\n      setCachedData(query.results.data);\n      dispatch(clearQueryResults(query));\n    }\n    if (query.resultsKey && query.resultsKey !== prevQuery?.resultsKey) {\n      fetchResults(query);\n    }\n  }, [query, cache]);\n\n  const calculateAlertRefHeight = (alertElement: HTMLElement | null) => {\n    if (alertElement) {\n      setAlertIsOpen(true);\n    } else {\n      setAlertIsOpen(false);\n    }\n  };\n\n  const popSelectStar = (tempSchema: string | null, tempTable: string) => {\n    const qe = {\n      id: nanoid(11),\n      name: tempTable,\n      autorun: false,\n      dbId: query.dbId,\n      sql: `SELECT * FROM ${tempSchema ? `${tempSchema}.` : ''}${tempTable}`,\n    };\n    dispatch(addQueryEditor(qe));\n  };\n\n  const changeSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    setSearchText(event.target.value);\n  };\n\n  const createExploreResultsOnClick = async (clickEvent: MouseEvent) => {\n    const { results } = query;\n\n    const openInNewWindow = clickEvent.metaKey;\n    logAction(LOG_ACTIONS_SQLLAB_CREATE_CHART, {});\n    if (results?.query_id) {\n      const key = await postFormData(results.query_id, 'query', {\n        ...EXPLORE_CHART_DEFAULT,\n        datasource: `${results.query_id}__query`,\n        ...{\n          all_columns: results.columns.map(column => column.column_name),\n        },\n      });\n      const url = mountExploreUrl(null, {\n        [URL_PARAMS.formDataKey.name]: key,\n      });\n      if (openInNewWindow) {\n        window.open(url, '_blank', 'noreferrer');\n      } else {\n        history.push(url);\n      }\n    } else {\n      addDangerToast(t('Unable to create chart without a query id.'));\n    }\n  };\n\n  const getExportCsvUrl = (clientId: string) =>\n    `/api/v1/sqllab/export/${clientId}/`;\n\n  const renderControls = () => {\n    if (search || visualize || csv) {\n      const { results, queryLimit, limitingFactor, rows } = query;\n      const limit = queryLimit || results.query.limit;\n      const rowsCount = Math.min(rows || 0, results?.data?.length || 0);\n      let { data } = query.results;\n      if (cache && query.cached) {\n        data = cachedData;\n      }\n      const { columns } = query.results;\n      // Added compute logic to stop user from being able to Save & Explore\n\n      const datasource: ISaveableDatasource = {\n        columns: query.results.columns as ISimpleColumn[],\n        name: query?.tab || 'Untitled',\n        dbId: query?.dbId,\n        sql: query?.sql,\n        templateParams: query?.templateParams,\n        schema: query?.schema,\n      };\n\n      const canExportData = findPermission(\n        'can_export_csv',\n        'SQLLab',\n        user?.roles,\n      );\n\n      return (\n        <ResultSetControls>\n          <SaveDatasetModal\n            visible={showSaveDatasetModal}\n            onHide={() => setShowSaveDatasetModal(false)}\n            buttonTextOnSave={t('Save & Explore')}\n            buttonTextOnOverwrite={t('Overwrite & Explore')}\n            modalDescription={t(\n              'Save this query as a virtual dataset to continue exploring',\n            )}\n            datasource={datasource}\n          />\n          <ResultSetButtons>\n            {visualize && database?.allows_virtual_table_explore && (\n              <ExploreResultsButton\n                database={database}\n                onClick={createExploreResultsOnClick}\n              />\n            )}\n            {csv && canExportData && (\n              <Button\n                css={copyButtonStyles}\n                buttonSize=\"small\"\n                href={getExportCsvUrl(query.id)}\n                data-test=\"export-csv-button\"\n                onClick={() => {\n                  logAction(LOG_ACTIONS_SQLLAB_DOWNLOAD_CSV, {});\n                  if (\n                    limitingFactor === LimitingFactor.Dropdown &&\n                    limit === rowsCount\n                  ) {\n                    Modal.warning({\n                      title: t('Download is on the way'),\n                      content: t(\n                        'Downloading %(rows)s rows based on the LIMIT configuration. If you want the entire result set, you need to adjust the LIMIT.',\n                        { rows: rowsCount.toLocaleString() },\n                      ),\n                    });\n                  }\n                }}\n              >\n                <Icons.DownloadOutlined\n                  iconSize=\"m\"\n                  iconColor={theme.colors.primary.dark2}\n                />{' '}\n                {t('Download to CSV')}\n              </Button>\n            )}\n\n            {canExportData && (\n              <CopyToClipboard\n                text={prepareCopyToClipboardTabularData(data, columns)}\n                wrapped={false}\n                copyNode={\n                  <Button\n                    css={copyButtonStyles}\n                    buttonSize=\"small\"\n                    data-test=\"copy-to-clipboard-button\"\n                  >\n                    <Icons.CopyOutlined\n                      iconSize=\"s\"\n                      iconColor={theme.colors.primary.dark2}\n                    />{' '}\n                    {t('Copy to Clipboard')}\n                  </Button>\n                }\n                hideTooltip\n                onCopyEnd={() =>\n                  logAction(LOG_ACTIONS_SQLLAB_COPY_RESULT_TO_CLIPBOARD, {})\n                }\n              />\n            )}\n          </ResultSetButtons>\n          {search && (\n            <input\n              type=\"text\"\n              onChange={changeSearch}\n              value={searchText}\n              className=\"form-control input-sm\"\n              placeholder={t('Filter results')}\n            />\n          )}\n        </ResultSetControls>\n      );\n    }\n    return <div />;\n  };\n\n  const renderRowsReturned = (alertMessage: boolean) => {\n    const { results, rows, queryLimit, limitingFactor } = query;\n    let limitMessage = '';\n    const limitReached = results?.displayLimitReached;\n    const limit = queryLimit || results.query.limit;\n    const isAdmin = !!user?.roles?.Admin;\n    const rowsCount = Math.min(rows || 0, results?.data?.length || 0);\n\n    const displayMaxRowsReachedMessage = {\n      withAdmin: t(\n        'The number of results displayed is limited to %(rows)d by the configuration DISPLAY_MAX_ROW. ' +\n          'Please add additional limits/filters or download to csv to see more rows up to ' +\n          'the %(limit)d limit.',\n        { rows: rowsCount, limit },\n      ),\n      withoutAdmin: t(\n        'The number of results displayed is limited to %(rows)d. ' +\n          'Please add additional limits/filters, download to csv, or contact an admin ' +\n          'to see more rows up to the %(limit)d limit.',\n        { rows: rowsCount, limit },\n      ),\n    };\n    const shouldUseDefaultDropdownAlert =\n      limit === defaultQueryLimit && limitingFactor === LimitingFactor.Dropdown;\n\n    if (limitingFactor === LimitingFactor.Query && csv) {\n      limitMessage = t(\n        'The number of rows displayed is limited to %(rows)d by the query',\n        { rows },\n      );\n    } else if (\n      limitingFactor === LimitingFactor.Dropdown &&\n      !shouldUseDefaultDropdownAlert\n    ) {\n      limitMessage = t(\n        'The number of rows displayed is limited to %(rows)d by the limit dropdown.',\n        { rows },\n      );\n    } else if (limitingFactor === LimitingFactor.QueryAndDropdown) {\n      limitMessage = t(\n        'The number of rows displayed is limited to %(rows)d by the query and limit dropdown.',\n        { rows },\n      );\n    }\n    const formattedRowCount = getNumberFormatter()(rows);\n    const rowsReturnedMessage = t('%(rows)d rows returned', {\n      rows,\n    });\n\n    const tooltipText = `${rowsReturnedMessage}. ${limitMessage}`;\n\n    if (alertMessage) {\n      return (\n        <>\n          {!limitReached && shouldUseDefaultDropdownAlert && (\n            <div ref={calculateAlertRefHeight}>\n              <Alert\n                type=\"warning\"\n                message={t('%(rows)d rows returned', { rows })}\n                onClose={() => setAlertIsOpen(false)}\n                description={t(\n                  'The number of rows displayed is limited to %(rows)d by the dropdown.',\n                  { rows },\n                )}\n              />\n            </div>\n          )}\n          {limitReached && (\n            <div ref={calculateAlertRefHeight}>\n              <Alert\n                type=\"warning\"\n                onClose={() => setAlertIsOpen(false)}\n                message={t('%(rows)d rows returned', { rows: rowsCount })}\n                description={\n                  isAdmin\n                    ? displayMaxRowsReachedMessage.withAdmin\n                    : displayMaxRowsReachedMessage.withoutAdmin\n                }\n              />\n            </div>\n          )}\n        </>\n      );\n    }\n    const showRowsReturned =\n      showSqlInline || (!limitReached && !shouldUseDefaultDropdownAlert);\n\n    return (\n      <>\n        {showRowsReturned && (\n          <ReturnedRows>\n            <Tooltip\n              id=\"sqllab-rowcount-tooltip\"\n              title={tooltipText}\n              placement=\"left\"\n            >\n              <Label\n                css={css`\n                  line-height: ${theme.typography.sizes.l}px;\n                `}\n              >\n                {limitMessage && (\n                  <Icons.ExclamationCircleOutlined\n                    css={css`\n                      font-size: ${theme.typography.sizes.m}px;\n                      margin-right: ${theme.gridUnit}px;\n                    `}\n                  />\n                )}\n                {tn('%s row', '%s rows', rows, formattedRowCount)}\n              </Label>\n            </Tooltip>\n          </ReturnedRows>\n        )}\n      </>\n    );\n  };\n\n  const limitReached = query?.results?.displayLimitReached;\n  let sql;\n  let exploreDBId = query.dbId;\n  if (database?.explore_database_id) {\n    exploreDBId = database.explore_database_id;\n  }\n\n  let trackingUrl;\n  if (\n    query.trackingUrl &&\n    query.state !== QueryState.Success &&\n    query.state !== QueryState.Fetching\n  ) {\n    trackingUrl = (\n      <Button\n        className=\"sql-result-track-job\"\n        buttonSize=\"small\"\n        href={query.trackingUrl}\n        target=\"_blank\"\n      >\n        {query.state === QueryState.Running\n          ? t('Track job')\n          : t('See query details')}\n      </Button>\n    );\n  }\n\n  if (showSql) {\n    sql = (\n      <HighlightedSql\n        sql={query.sql}\n        {...(showSqlInline && { maxLines: 1, maxWidth: 60 })}\n      />\n    );\n  }\n\n  if (query.state === QueryState.Stopped) {\n    return <Alert type=\"warning\" message={t('Query was stopped')} />;\n  }\n\n  if (query.state === QueryState.Failed) {\n    const errors = [...(query.extra?.errors || []), ...(query.errors || [])];\n\n    return (\n      <ResultlessStyles>\n        {errors.map((error, index) => (\n          <ErrorMessageWithStackTrace\n            key={index}\n            title={t('Database error')}\n            error={error}\n            subtitle={<MonospaceDiv>{error.message}</MonospaceDiv>}\n            copyText={error.message || undefined}\n            link={query.link}\n            source=\"sqllab\"\n          />\n        ))}\n        {errors.some(\n          error => error?.error_type === ErrorTypeEnum.FRONTEND_TIMEOUT_ERROR,\n        ) ? (\n          <Button\n            className=\"sql-result-track-job\"\n            buttonSize=\"small\"\n            onClick={() => fetchResults(query, 0)}\n          >\n            {t('Retry fetching results')}\n          </Button>\n        ) : (\n          trackingUrl\n        )}\n      </ResultlessStyles>\n    );\n  }\n\n  if (query.state === QueryState.Success && query.ctas) {\n    const { tempSchema, tempTable } = query;\n    let object = 'Table';\n    if (query.ctas_method === CtasEnum.View) {\n      object = 'View';\n    }\n    return (\n      <div>\n        <Alert\n          type=\"info\"\n          message={\n            <>\n              {t(object)} [\n              <strong>\n                {tempSchema ? `${tempSchema}.` : ''}\n                {tempTable}\n              </strong>\n              ] {t('was created')} &nbsp;\n              <ButtonGroup>\n                <Button\n                  buttonSize=\"small\"\n                  css={{ marginRight: theme.gridUnit }}\n                  onClick={() => popSelectStar(tempSchema, tempTable)}\n                >\n                  {t('Query in a new tab')}\n                </Button>\n                <ExploreCtasResultsButton\n                  table={tempTable}\n                  schema={tempSchema}\n                  dbId={exploreDBId}\n                />\n              </ButtonGroup>\n            </>\n          }\n        />\n      </div>\n    );\n  }\n\n  if (query.state === QueryState.Success && query.results) {\n    const { results } = query;\n    // Accounts for offset needed for height of ResultSetRowsReturned component if !limitReached\n    const rowMessageHeight = !limitReached ? 32 : 0;\n    // Accounts for offset needed for height of Alert if this.state.alertIsOpen\n    const alertContainerHeight = 70;\n    // We need to calculate the height of this.renderRowsReturned()\n    // if we want results panel to be proper height because the\n    // FilterTable component needs an explicit height to render\n    // the Table component\n    const rowsHeight = alertIsOpen\n      ? height - alertContainerHeight\n      : height - rowMessageHeight;\n    let data;\n    if (cache && query.cached) {\n      data = cachedData;\n    } else if (results?.data) {\n      ({ data } = results);\n    }\n    if (data && data.length > 0) {\n      const expandedColumns = results.expanded_columns\n        ? results.expanded_columns.map(col => col.column_name)\n        : [];\n      const allowHTML = getItem(\n        LocalStorageKeys.SqllabIsRenderHtmlEnabled,\n        true,\n      );\n      return (\n        <ResultContainer>\n          {renderControls()}\n          {showSql && showSqlInline ? (\n            <>\n              <div\n                css={css`\n                  display: flex;\n                  justify-content: space-between;\n                  gap: ${GAP}px;\n                `}\n              >\n                <Card\n                  css={[\n                    css`\n                      height: 28px;\n                      width: calc(100% - ${ROWS_CHIP_WIDTH + GAP}px);\n                      code {\n                        width: 100%;\n                        overflow: hidden;\n                        white-space: nowrap !important;\n                        text-overflow: ellipsis;\n                        display: block;\n                      }\n                    `,\n                  ]}\n                >\n                  {sql}\n                </Card>\n                {renderRowsReturned(false)}\n              </div>\n              {renderRowsReturned(true)}\n            </>\n          ) : (\n            <>\n              {renderRowsReturned(false)}\n              {renderRowsReturned(true)}\n              {sql}\n            </>\n          )}\n          <ResultTable\n            data={data}\n            queryId={query.id}\n            orderedColumnKeys={results.columns.map(col => col.column_name)}\n            height={rowsHeight}\n            filterText={searchText}\n            expandedColumns={expandedColumns}\n            allowHTML={allowHTML}\n          />\n        </ResultContainer>\n      );\n    }\n    if (data && data.length === 0) {\n      return <Alert type=\"warning\" message={t('The query returned no data')} />;\n    }\n  }\n\n  if (query.cached || (query.state === QueryState.Success && !query.results)) {\n    if (query.isDataPreview) {\n      return (\n        <Button\n          buttonSize=\"small\"\n          buttonStyle=\"primary\"\n          onClick={() =>\n            dispatch(\n              reFetchQueryResults({\n                ...query,\n                isDataPreview: true,\n              }),\n            )\n          }\n        >\n          {t('Fetch data preview')}\n        </Button>\n      );\n    }\n    if (query.resultsKey) {\n      return (\n        <Button\n          buttonSize=\"small\"\n          buttonStyle=\"primary\"\n          onClick={() => fetchResults(query)}\n        >\n          {t('Refetch results')}\n        </Button>\n      );\n    }\n  }\n\n  let progressBar;\n  if (query.progress > 0) {\n    progressBar = (\n      <ProgressBar percent={parseInt(query.progress.toFixed(0), 10)} striped />\n    );\n  }\n\n  const progressMsg = query?.extra?.progress ?? null;\n\n  return (\n    <ResultlessStyles>\n      <div>{!progressBar && <Loading position=\"normal\" />}</div>\n      {/* show loading bar whenever progress bar is completed but needs time to render */}\n      <div>{query.progress === 100 && <Loading position=\"normal\" />}</div>\n      <QueryStateLabel query={query} />\n      <div>{progressMsg && <Alert type=\"success\" message={progressMsg} />}</div>\n      <div>{query.progress !== 100 && progressBar}</div>\n      {trackingUrl && <div>{trackingUrl}</div>}\n    </ResultlessStyles>\n  );\n};\n\nexport default memo(ResultSet);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}