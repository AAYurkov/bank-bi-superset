{"ast":null,"code":"import _debounce from \"lodash/debounce\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport Point from 'ol/geom/Point';\nimport { unByKey } from 'ol/Observable';\nimport { toLonLat } from 'ol/proj';\n\nimport { fitMapToCharts } from '../util/mapUtil';\nimport { ChartLayer } from './ChartLayer';\nimport { createLayer } from '../util/layerUtil';\nimport { isChartConfigEqual } from '../util/chartUtil';\n/** The name to reference the chart layer */import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nconst CHART_LAYER_NAME = 'openlayers-chart-layer';\nexport const OlChartMap = (props) => {\n  const { height, width, mapId, olMap, chartConfigs, chartSize, chartVizType, layerConfigs, mapView, chartBackgroundColor, chartBackgroundBorderRadius, setControlValue, theme } = props;\n  const [currentChartConfigs, setCurrentChartConfigs] = useState(chartConfigs);\n  const [currentMapView, setCurrentMapView] = useState(mapView);\n  /**\n   * Add map to correct DOM element.\n   */\n  useEffect(() => {\n    olMap.setTarget(mapId);\n  }, [olMap, mapId]);\n  /**\n   * Update map size if size of parent container changes.\n   */\n  useEffect(() => {\n    olMap.updateSize();\n  }, [olMap, width, height]);\n  /**\n   * The prop chartConfigs will always be created on the fly,\n   * therefore the shallow comparison of the effect hooks will\n   * always trigger. In this hook, we make a 'deep comparison'\n   * between the incoming prop and the state. Only if the objects\n   * differ will we set the state to the new object. All other\n   * effect hooks that depend on chartConfigs should now depend\n   * on currentChartConfigs instead.\n   */\n  useEffect(() => {\n    setCurrentChartConfigs((oldCurrentChartConfigs) => {\n      if (isChartConfigEqual(chartConfigs, oldCurrentChartConfigs)) {\n        return oldCurrentChartConfigs;\n      }\n      return chartConfigs;\n    });\n  }, [chartConfigs]);\n  /**\n   * The prop mapView will always be created on the fly,\n   * therefore the shallow comparison of the effect hooks will\n   * always trigger. In this hook, we compare only those props\n   * that might be changed from outside of the component, i.e the\n   * fixed properties and the mode. Only if these values differ will\n   * we set the state to the new object. All other effect hooks that\n   * depend on mapView should now depend on currentMapView instead.\n   */\n  useEffect(() => {\n    setCurrentMapView((oldCurrentMapView) => {\n      const sameFixedZoom = oldCurrentMapView.fixedZoom === mapView.fixedZoom;\n      const sameFixedLon = oldCurrentMapView.fixedLongitude === mapView.fixedLongitude;\n      const sameFixedLat = oldCurrentMapView.fixedLatitude === mapView.fixedLatitude;\n      const sameMode = oldCurrentMapView.mode === mapView.mode;\n      if (sameFixedZoom && sameFixedLon && sameFixedLat && sameMode) {\n        return oldCurrentMapView;\n      }\n      return mapView;\n    });\n  }, [mapView]);\n  /**\n   * Set initial map extent.\n   */\n  useEffect(() => {\n    const view = olMap.getView();\n    const { mode, fixedLatitude, fixedLongitude, fixedZoom } = mapView;\n    switch (mode) {\n      case 'CUSTOM':{\n          const fixedCenter = new Point([fixedLongitude, fixedLatitude]);\n          fixedCenter.transform('EPSG:4326', 'EPSG:3857'); // in-place\n          view.setZoom(fixedZoom);\n          view.setCenter(fixedCenter.getCoordinates());\n          break;\n        }\n      default:{\n          fitMapToCharts(olMap, chartConfigs);\n          const zoom = view.getZoom();\n          const centerCoord = view.getCenter();\n          if (!centerCoord)\n          return;\n          const centerPoint = new Point(centerCoord);\n          centerPoint.transform('EPSG:3857', 'EPSG:4326'); // in-place\n          const [longitude, latitude] = centerPoint.getCoordinates();\n          setControlValue('map_view', {\n            ...mapView,\n            zoom,\n            longitude,\n            latitude,\n            fixedLatitude: latitude,\n            fixedLongitude: longitude,\n            fixedZoom: zoom\n          });\n          break;\n        }\n    }\n  }, []);\n  /**\n   * Update non-chart layers\n   */\n  useEffect(() => {\n    // clear existing layers\n    // We first filter the layers we want to remove,\n    // because removing items from an array during a loop can be erroneous.\n    const layersToRemove = olMap.\n    getLayers().\n    getArray().\n    filter((layer) => !(layer instanceof ChartLayer));\n    layersToRemove.forEach((layer) => {\n      olMap.removeLayer(layer);\n    });\n    const addLayers = async (configs) => {\n      // Loop through layer configs, create layers and add them to map.\n      // The first layer in the list will be the upmost layer on the map.\n      // With insertAt(0) we ensure that the chart layer will always\n      // stay on top, though.\n      const createdLayersPromises = configs.map(createLayer);\n      const createdLayers = await Promise.allSettled(createdLayersPromises);\n      createdLayers.forEach((createdLayer, idx) => {\n        if (createdLayer.status === 'fulfilled' && createdLayer.value) {\n          olMap.getLayers().insertAt(0, createdLayer.value);\n        } else\n        {\n          console.warn(`Layer could not be created: ${configs[idx]}`);\n        }\n      });\n    };\n    addLayers(layerConfigs);\n  }, [olMap, layerConfigs]);\n  /**\n   * Create listener on map movement\n   */\n  useEffect(() => {\n    const { fixedLatitude, fixedLongitude, fixedZoom } = currentMapView;\n    const view = olMap.getView();\n    const onViewChange = (event) => {\n      const targetView = event.target;\n      const center = targetView.getCenter();\n      const zoom = targetView.getZoom();\n      if (!center) {\n        return;\n      }\n      const [longitude, latitude] = toLonLat(center);\n      setControlValue('map_view', {\n        ...currentMapView,\n        zoom,\n        longitude,\n        latitude,\n        fixedLatitude,\n        fixedLongitude,\n        fixedZoom\n      });\n    };\n    // TODO: maybe replace with debounce from lodash\n    // timeout=100ms seems to work well, 1000ms has other side-effects\n    function debounce(func, timeout = 100) {\n      let timer;\n      return function (...args) {\n        clearTimeout(timer);\n        timer = window.setTimeout(() => func.apply(this, args), timeout);\n      };\n    }\n    const debouncedOnViewChange = debounce((event) => {\n      onViewChange(event);\n    });\n    const listenerKey = view.on('change', debouncedOnViewChange);\n    // this is executed before the next render,\n    // here we cleanup the listener\n    return () => {\n      unByKey(listenerKey);\n    };\n  }, [olMap, setControlValue, currentMapView, currentChartConfigs]);\n  useEffect(() => {\n    if (currentMapView.mode === 'FIT_DATA') {\n      const layers = olMap.getLayers();\n      const chartLayer = layers.\n      getArray().\n      find((layer) => layer instanceof ChartLayer);\n      if (!chartLayer) {\n        return;\n      }\n      const extent = chartLayer.getExtent();\n      if (!extent) {\n        return;\n      }\n      const view = olMap.getView();\n      view.fit(extent, {\n        size: [250, 250]\n      });\n    }\n  }, [olMap, currentMapView.mode]);\n  /**\n   * Send updated zoom to chart config control.\n   */\n  useEffect(() => {\n    const view = olMap.getView();\n    const onViewChange = (event) => {\n      const targetView = event.target;\n      // ensure only zoom has changed\n      const zoom = targetView.getZoom();\n      // needed for TypeScript\n      if (!zoom)\n      return;\n      // round zoom to full integer\n      const previousZoom = Math.round(chartSize.configs.zoom);\n      const newZoom = Math.round(zoom);\n      // if zoom has not changed, we return and do not update the controls\n      if (previousZoom === newZoom)\n      return;\n      const updatedChartSizeConf = {\n        ...chartSize,\n        configs: {\n          ...chartSize.configs,\n          zoom: newZoom\n        }\n      };\n      setControlValue('chart_size', updatedChartSizeConf);\n    };\n    const debouncedOnZoomChange = _debounce((event) => {\n      onViewChange(event);\n    }, 100);\n    const listenerKey = view.on('change:resolution', debouncedOnZoomChange);\n    // This is executed before the next render,\n    // here we cleanup our listener.\n    return () => {\n      unByKey(listenerKey);\n    };\n  }, [olMap, setControlValue, chartSize]);\n  /**\n   * Handle changes that trigger changes of charts. Also instantiate\n   * the chart layer, if it does not exist yet.\n   */\n  useEffect(() => {\n    const layers = olMap.getLayers();\n    const chartLayer = layers.\n    getArray().\n    find((layer) => layer instanceof ChartLayer);\n    const { r, g, b, a } = chartBackgroundColor;\n    const cssColor = `rgba(${r}, ${g}, ${b}, ${a})`;\n    if (!chartLayer) {\n      layers.forEach((layer) => {\n        if (!(layer instanceof ChartLayer)) {\n          return;\n        }\n        // remove all chart elements from dom.\n        layer.removeAllChartElements();\n        // delete previous chart layers\n        olMap.removeLayer(layer);\n      });\n      // prevent map interactions when mouse is over chart element\n      // inspired by https://gis.stackexchange.com/questions/303331\n      const deactivateInteractions = () => {\n        olMap.getInteractions().forEach((interaction) => {\n          interaction.setActive(false);\n        });\n      };\n      const activateInteractions = () => {\n        olMap.getInteractions().forEach((interaction) => {\n          interaction.setActive(true);\n        });\n      };\n      const newChartLayer = new ChartLayer({\n        name: CHART_LAYER_NAME,\n        chartConfigs: currentChartConfigs,\n        chartVizType,\n        chartSizeValues: chartSize.values,\n        chartBackgroundCssColor: cssColor,\n        chartBackgroundBorderRadius,\n        onMouseOver: deactivateInteractions,\n        onMouseOut: activateInteractions,\n        theme\n      });\n      olMap.addLayer(newChartLayer);\n    } else\n    {\n      let recreateCharts = false;\n      if (chartVizType !== chartLayer.chartVizType) {\n        chartLayer.setChartVizType(chartVizType, true);\n        recreateCharts = true;\n      }\n      if (!isChartConfigEqual(currentChartConfigs, chartLayer.chartConfigs)) {\n        chartLayer.setChartConfig(currentChartConfigs, true);\n        recreateCharts = true;\n      }\n      // Only the last setter triggers rerendering of charts\n      chartLayer.setChartBackgroundBorderRadius(chartBackgroundBorderRadius, true);\n      chartLayer.setChartBackgroundCssColor(cssColor, true);\n      chartLayer.setChartSizeValues(chartSize.values, true);\n      if (recreateCharts) {\n        chartLayer.removeAllChartElements();\n      }\n      chartLayer.changed();\n    }\n  }, [\n  olMap,\n  theme,\n  currentChartConfigs,\n  chartVizType,\n  chartSize.values,\n  chartBackgroundColor,\n  chartBackgroundBorderRadius]\n  );\n  return _jsx(\"div\", { id: mapId, style: {\n      height: `${height}px`,\n      width: `${width}px`\n    } });\n};__signature__(OlChartMap, \"useState{[currentChartConfigs, setCurrentChartConfigs](chartConfigs)}\\nuseState{[currentMapView, setCurrentMapView](mapView)}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\");const _default =\nOlChartMap;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(CHART_LAYER_NAME, \"CHART_LAYER_NAME\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/components/OlChartMap.tsx\");reactHotLoader.register(OlChartMap, \"OlChartMap\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/components/OlChartMap.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/components/OlChartMap.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useEffect","useState","Point","unByKey","toLonLat","fitMapToCharts","ChartLayer","createLayer","isChartConfigEqual","jsx","_jsx","CHART_LAYER_NAME","OlChartMap","props","height","width","mapId","olMap","chartConfigs","chartSize","chartVizType","layerConfigs","mapView","chartBackgroundColor","chartBackgroundBorderRadius","setControlValue","theme","currentChartConfigs","setCurrentChartConfigs","currentMapView","setCurrentMapView","setTarget","updateSize","oldCurrentChartConfigs","oldCurrentMapView","sameFixedZoom","fixedZoom","sameFixedLon","fixedLongitude","sameFixedLat","fixedLatitude","sameMode","mode","view","getView","fixedCenter","transform","setZoom","setCenter","getCoordinates","zoom","getZoom","centerCoord","getCenter","centerPoint","longitude","latitude","layersToRemove","getLayers","getArray","filter","layer","forEach","removeLayer","addLayers","configs","createdLayersPromises","map","createdLayers","Promise","allSettled","createdLayer","idx","status","value","insertAt","console","warn","onViewChange","event","targetView","target","center","debounce","func","timeout","timer","args","clearTimeout","window","setTimeout","apply","debouncedOnViewChange","listenerKey","on","layers","chartLayer","find","extent","getExtent","fit","size","previousZoom","Math","round","newZoom","updatedChartSizeConf","debouncedOnZoomChange","_debounce","r","g","b","a","cssColor","removeAllChartElements","deactivateInteractions","getInteractions","interaction","setActive","activateInteractions","newChartLayer","name","chartSizeValues","values","chartBackgroundCssColor","onMouseOver","onMouseOut","addLayer","recreateCharts","setChartVizType","setChartConfig","setChartBackgroundBorderRadius","setChartBackgroundCssColor","setChartSizeValues","changed","id","style","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/plugins/plugin-chart-cartodiagram/src/components/OlChartMap.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\n\nimport Point from 'ol/geom/Point';\nimport { View } from 'ol';\nimport BaseEvent from 'ol/events/Event';\nimport { unByKey } from 'ol/Observable';\nimport { toLonLat } from 'ol/proj';\nimport { debounce } from 'lodash';\nimport { fitMapToCharts } from '../util/mapUtil';\nimport { ChartLayer } from './ChartLayer';\nimport { createLayer } from '../util/layerUtil';\nimport {\n  ChartConfig,\n  LayerConf,\n  MapViewConfigs,\n  OlChartMapProps,\n} from '../types';\nimport { isChartConfigEqual } from '../util/chartUtil';\n\n/** The name to reference the chart layer */\nconst CHART_LAYER_NAME = 'openlayers-chart-layer';\n\nexport const OlChartMap = (props: OlChartMapProps) => {\n  const {\n    height,\n    width,\n    mapId,\n    olMap,\n    chartConfigs,\n    chartSize,\n    chartVizType,\n    layerConfigs,\n    mapView,\n    chartBackgroundColor,\n    chartBackgroundBorderRadius,\n    setControlValue,\n    theme,\n  } = props;\n\n  const [currentChartConfigs, setCurrentChartConfigs] =\n    useState<ChartConfig>(chartConfigs);\n  const [currentMapView, setCurrentMapView] = useState<MapViewConfigs>(mapView);\n\n  /**\n   * Add map to correct DOM element.\n   */\n  useEffect(() => {\n    olMap.setTarget(mapId);\n  }, [olMap, mapId]);\n\n  /**\n   * Update map size if size of parent container changes.\n   */\n  useEffect(() => {\n    olMap.updateSize();\n  }, [olMap, width, height]);\n\n  /**\n   * The prop chartConfigs will always be created on the fly,\n   * therefore the shallow comparison of the effect hooks will\n   * always trigger. In this hook, we make a 'deep comparison'\n   * between the incoming prop and the state. Only if the objects\n   * differ will we set the state to the new object. All other\n   * effect hooks that depend on chartConfigs should now depend\n   * on currentChartConfigs instead.\n   */\n  useEffect(() => {\n    setCurrentChartConfigs(oldCurrentChartConfigs => {\n      if (isChartConfigEqual(chartConfigs, oldCurrentChartConfigs)) {\n        return oldCurrentChartConfigs;\n      }\n      return chartConfigs;\n    });\n  }, [chartConfigs]);\n\n  /**\n   * The prop mapView will always be created on the fly,\n   * therefore the shallow comparison of the effect hooks will\n   * always trigger. In this hook, we compare only those props\n   * that might be changed from outside of the component, i.e the\n   * fixed properties and the mode. Only if these values differ will\n   * we set the state to the new object. All other effect hooks that\n   * depend on mapView should now depend on currentMapView instead.\n   */\n  useEffect(() => {\n    setCurrentMapView(oldCurrentMapView => {\n      const sameFixedZoom = oldCurrentMapView.fixedZoom === mapView.fixedZoom;\n      const sameFixedLon =\n        oldCurrentMapView.fixedLongitude === mapView.fixedLongitude;\n      const sameFixedLat =\n        oldCurrentMapView.fixedLatitude === mapView.fixedLatitude;\n      const sameMode = oldCurrentMapView.mode === mapView.mode;\n      if (sameFixedZoom && sameFixedLon && sameFixedLat && sameMode) {\n        return oldCurrentMapView;\n      }\n      return mapView;\n    });\n  }, [mapView]);\n\n  /**\n   * Set initial map extent.\n   */\n  useEffect(() => {\n    const view = olMap.getView();\n    const { mode, fixedLatitude, fixedLongitude, fixedZoom } = mapView;\n\n    switch (mode) {\n      case 'CUSTOM': {\n        const fixedCenter = new Point([fixedLongitude, fixedLatitude]);\n        fixedCenter.transform('EPSG:4326', 'EPSG:3857'); // in-place\n\n        view.setZoom(fixedZoom);\n        view.setCenter(fixedCenter.getCoordinates());\n        break;\n      }\n      default: {\n        fitMapToCharts(olMap, chartConfigs);\n\n        const zoom = view.getZoom();\n        const centerCoord = view.getCenter();\n        if (!centerCoord) return;\n\n        const centerPoint = new Point(centerCoord);\n        centerPoint.transform('EPSG:3857', 'EPSG:4326'); // in-place\n\n        const [longitude, latitude] = centerPoint.getCoordinates();\n\n        setControlValue('map_view', {\n          ...mapView,\n          zoom,\n          longitude,\n          latitude,\n          fixedLatitude: latitude,\n          fixedLongitude: longitude,\n          fixedZoom: zoom,\n        });\n\n        break;\n      }\n    }\n  }, []);\n\n  /**\n   * Update non-chart layers\n   */\n  useEffect(() => {\n    // clear existing layers\n    // We first filter the layers we want to remove,\n    // because removing items from an array during a loop can be erroneous.\n    const layersToRemove = olMap\n      .getLayers()\n      .getArray()\n      .filter(layer => !(layer instanceof ChartLayer));\n\n    layersToRemove.forEach(layer => {\n      olMap.removeLayer(layer);\n    });\n\n    const addLayers = async (configs: LayerConf[]) => {\n      // Loop through layer configs, create layers and add them to map.\n      // The first layer in the list will be the upmost layer on the map.\n      // With insertAt(0) we ensure that the chart layer will always\n      // stay on top, though.\n      const createdLayersPromises = configs.map(createLayer);\n      const createdLayers = await Promise.allSettled(createdLayersPromises);\n      createdLayers.forEach((createdLayer, idx) => {\n        if (createdLayer.status === 'fulfilled' && createdLayer.value) {\n          olMap.getLayers().insertAt(0, createdLayer.value);\n        } else {\n          console.warn(`Layer could not be created: ${configs[idx]}`);\n        }\n      });\n    };\n\n    addLayers(layerConfigs);\n  }, [olMap, layerConfigs]);\n\n  /**\n   * Create listener on map movement\n   */\n  useEffect(() => {\n    const { fixedLatitude, fixedLongitude, fixedZoom } = currentMapView;\n\n    const view = olMap.getView();\n\n    const onViewChange = (event: BaseEvent) => {\n      const targetView: View = event.target as unknown as View;\n\n      const center = targetView.getCenter();\n      const zoom = targetView.getZoom();\n      if (!center) {\n        return;\n      }\n      const [longitude, latitude] = toLonLat(center);\n\n      setControlValue('map_view', {\n        ...currentMapView,\n        zoom,\n        longitude,\n        latitude,\n        fixedLatitude,\n        fixedLongitude,\n        fixedZoom,\n      });\n    };\n\n    // TODO: maybe replace with debounce from lodash\n    // timeout=100ms seems to work well, 1000ms has other side-effects\n    function debounce(func: Function, timeout = 100) {\n      let timer: number;\n      return function (this: any, ...args: any) {\n        clearTimeout(timer);\n        timer = window.setTimeout(() => func.apply(this, args), timeout);\n      };\n    }\n\n    const debouncedOnViewChange = debounce((event: BaseEvent) => {\n      onViewChange(event);\n    });\n\n    const listenerKey = view.on('change', debouncedOnViewChange);\n\n    // this is executed before the next render,\n    // here we cleanup the listener\n    return () => {\n      unByKey(listenerKey);\n    };\n  }, [olMap, setControlValue, currentMapView, currentChartConfigs]);\n\n  useEffect(() => {\n    if (currentMapView.mode === 'FIT_DATA') {\n      const layers = olMap.getLayers();\n      const chartLayer = layers\n        .getArray()\n        .find(layer => layer instanceof ChartLayer) as ChartLayer;\n\n      if (!chartLayer) {\n        return;\n      }\n      const extent = chartLayer.getExtent();\n      if (!extent) {\n        return;\n      }\n      const view = olMap.getView();\n      view.fit(extent, {\n        size: [250, 250],\n      });\n    }\n  }, [olMap, currentMapView.mode]);\n\n  /**\n   * Send updated zoom to chart config control.\n   */\n  useEffect(() => {\n    const view = olMap.getView();\n\n    const onViewChange = (event: BaseEvent) => {\n      const targetView: View = event.target as unknown as View;\n\n      // ensure only zoom has changed\n      const zoom = targetView.getZoom();\n\n      // needed for TypeScript\n      if (!zoom) return;\n\n      // round zoom to full integer\n      const previousZoom = Math.round(chartSize.configs.zoom);\n      const newZoom = Math.round(zoom);\n\n      // if zoom has not changed, we return and do not update the controls\n      if (previousZoom === newZoom) return;\n\n      const updatedChartSizeConf = {\n        ...chartSize,\n        configs: {\n          ...chartSize.configs,\n          zoom: newZoom,\n        },\n      };\n\n      setControlValue('chart_size', updatedChartSizeConf);\n    };\n\n    const debouncedOnZoomChange = debounce((event: BaseEvent) => {\n      onViewChange(event);\n    }, 100);\n\n    const listenerKey = view.on('change:resolution', debouncedOnZoomChange);\n\n    // This is executed before the next render,\n    // here we cleanup our listener.\n    return () => {\n      unByKey(listenerKey);\n    };\n  }, [olMap, setControlValue, chartSize]);\n\n  /**\n   * Handle changes that trigger changes of charts. Also instantiate\n   * the chart layer, if it does not exist yet.\n   */\n  useEffect(() => {\n    const layers = olMap.getLayers();\n    const chartLayer = layers\n      .getArray()\n      .find(layer => layer instanceof ChartLayer) as ChartLayer;\n\n    const { r, g, b, a } = chartBackgroundColor;\n    const cssColor = `rgba(${r}, ${g}, ${b}, ${a})`;\n\n    if (!chartLayer) {\n      layers.forEach(layer => {\n        if (!(layer instanceof ChartLayer)) {\n          return;\n        }\n        // remove all chart elements from dom.\n        layer.removeAllChartElements();\n        // delete previous chart layers\n        olMap.removeLayer(layer);\n      });\n\n      // prevent map interactions when mouse is over chart element\n      // inspired by https://gis.stackexchange.com/questions/303331\n      const deactivateInteractions = () => {\n        olMap.getInteractions().forEach(interaction => {\n          interaction.setActive(false);\n        });\n      };\n\n      const activateInteractions = () => {\n        olMap.getInteractions().forEach(interaction => {\n          interaction.setActive(true);\n        });\n      };\n\n      const newChartLayer = new ChartLayer({\n        name: CHART_LAYER_NAME,\n        chartConfigs: currentChartConfigs,\n        chartVizType,\n        chartSizeValues: chartSize.values,\n        chartBackgroundCssColor: cssColor,\n        chartBackgroundBorderRadius,\n        onMouseOver: deactivateInteractions,\n        onMouseOut: activateInteractions,\n        theme,\n      });\n\n      olMap.addLayer(newChartLayer);\n    } else {\n      let recreateCharts = false;\n      if (chartVizType !== chartLayer.chartVizType) {\n        chartLayer.setChartVizType(chartVizType, true);\n        recreateCharts = true;\n      }\n      if (!isChartConfigEqual(currentChartConfigs, chartLayer.chartConfigs)) {\n        chartLayer.setChartConfig(currentChartConfigs, true);\n        recreateCharts = true;\n      }\n      // Only the last setter triggers rerendering of charts\n      chartLayer.setChartBackgroundBorderRadius(\n        chartBackgroundBorderRadius,\n        true,\n      );\n      chartLayer.setChartBackgroundCssColor(cssColor, true);\n      chartLayer.setChartSizeValues(chartSize.values, true);\n      if (recreateCharts) {\n        chartLayer.removeAllChartElements();\n      }\n      chartLayer.changed();\n    }\n  }, [\n    olMap,\n    theme,\n    currentChartConfigs,\n    chartVizType,\n    chartSize.values,\n    chartBackgroundColor,\n    chartBackgroundBorderRadius,\n  ]);\n\n  return (\n    <div\n      id={mapId}\n      style={{\n        height: `${height}px`,\n        width: `${width}px`,\n      }}\n    />\n  );\n};\n\nexport default OlChartMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}