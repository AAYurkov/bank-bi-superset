{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";import _isEmpty from \"lodash/isEmpty\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { css, ensureIsArray, fetchTimeRange, getTimeOffset, parseDttmToDate, t } from '@superset-ui/core';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { DEFAULT_DATE_PATTERN } from '@superset-ui/chart-controls';\nimport { extendedDayjs } from 'src/utils/dates';import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst DAYJS_FORMAT = 'YYYY-MM-DD';\nconst isTimeRangeEqual = (left, right) => _isEqual(left, right);\nconst isShiftEqual = (left, right) => _isEqual(left, right);\nconst oldChoices = {\n  r: 'inherit',\n  y: '1 year ago',\n  m: '1 month ago',\n  w: '1 week ago',\n  c: 'custom'\n};\nexport const ComparisonRangeLabel = ({ multi = true }) => {\n  const [labels, setLabels] = useState([]);\n  const currentTimeRangeFilters = useSelector((state) => state.explore.form_data.adhoc_filters.filter((adhoc_filter) => adhoc_filter.operator === 'TEMPORAL_RANGE'), isTimeRangeEqual);\n  const previousCustomFilter = useSelector((state) => {var _state$explore$form_d;return (_state$explore$form_d = state.explore.form_data.adhoc_custom) == null ? void 0 : _state$explore$form_d.filter((adhoc_filter) => adhoc_filter.operator === 'TEMPORAL_RANGE');}, isTimeRangeEqual);\n  const shifts = useSelector((state) => {\n    const formData = state.explore.form_data || {};\n    if (!(formData != null && formData.time_compare)) {\n      const previousTimeComparison = formData.time_comparison || '';\n      if (oldChoices.hasOwnProperty(previousTimeComparison)) {\n        const previousChoice = oldChoices[previousTimeComparison];\n        return [previousChoice];\n      }\n    }\n    return formData == null ? void 0 : formData.time_compare;\n  }, isShiftEqual);\n  const startDate = useSelector((state) => state.explore.form_data.start_date_offset);\n  useEffect(() => {\n    const shiftsArray = ensureIsArray(shifts);\n    if (_isEmpty(currentTimeRangeFilters) ||\n    _isEmpty(shiftsArray) && !startDate) {\n      setLabels([]);\n    } else\n    if (!_isEmpty(shifts) || startDate) {\n      let useStartDate = startDate;\n      if (!startDate && !_isEmpty(previousCustomFilter)) {var _previousCustomFilter;\n        useStartDate = (_previousCustomFilter = previousCustomFilter[0]) == null ? void 0 : _previousCustomFilter.comparator.split(' : ')[0];\n        useStartDate = extendedDayjs(parseDttmToDate(useStartDate)).format(DAYJS_FORMAT);\n      }\n      const promises = currentTimeRangeFilters.map((filter) => {\n        const nonCustomNorInheritShifts = shiftsArray.filter((shift) => shift !== 'custom' && shift !== 'inherit') || [];\n        const customOrInheritShifts = shiftsArray.filter((shift) => shift === 'custom' || shift === 'inherit') || [];\n        // There's no custom or inherit to compute, so we can just fetch the time range\n        if (_isEmpty(customOrInheritShifts)) {\n          return fetchTimeRange(filter.comparator, filter.subject, ensureIsArray(nonCustomNorInheritShifts));\n        }\n        // Need to compute custom or inherit shifts first and then mix with the non custom or inherit shifts\n        if (ensureIsArray(customOrInheritShifts).includes('custom') &&\n        startDate ||\n        ensureIsArray(customOrInheritShifts).includes('inherit')) {\n          return fetchTimeRange(filter.comparator, filter.subject).then((res) => {var _res$value;\n            const dates = res == null ? void 0 : (_res$value = res.value) == null ? void 0 : _res$value.match(DEFAULT_DATE_PATTERN);\n            const [parsedStartDate, parsedEndDate] = dates != null ? dates : [];\n            if (parsedStartDate) {\n              const parsedDateDayjs = extendedDayjs(parseDttmToDate(parsedStartDate));\n              const startDateDayjs = extendedDayjs(parseDttmToDate(startDate));\n              if (startDateDayjs.isSameOrBefore(parsedDateDayjs) ||\n              !startDate) {\n                const postProcessedShifts = getTimeOffset({\n                  timeRangeFilter: {\n                    ...filter,\n                    comparator: `${parsedStartDate} : ${parsedEndDate}`\n                  },\n                  shifts: customOrInheritShifts,\n                  startDate: useStartDate,\n                  includeFutureOffsets: false // So we don't trigger requests for future dates\n                });\n                return fetchTimeRange(filter.comparator, filter.subject, ensureIsArray(postProcessedShifts.concat(nonCustomNorInheritShifts)));\n              }\n            }\n            return Promise.resolve({ value: '' });\n          });\n        }\n        return Promise.resolve({ value: '' });\n      });\n      Promise.all(promises).then((res) => {\n        // access the value property inside the res and set the labels with it in the state\n        setLabels(res.map((r) => {var _r$value;return (_r$value = r.value) != null ? _r$value : '';}));\n      });\n    }\n  }, [currentTimeRangeFilters, shifts, startDate]);\n  return labels.length ? _jsxs(_Fragment, { children: [\n    _jsx(ControlHeader, { label: t('Actual range for comparison') }),\n    labels.flat().map((label) => _jsx(_Fragment, { children:\n      _jsx(\"div\", { css: (theme) => css`\n              font-size: ${theme.typography.sizes.m}px;\n              color: ${theme.colors.grayscale.dark1};\n            `, children:\n        label }, label\n      ) }\n    ))] }\n  ) : null;\n};__signature__(ComparisonRangeLabel, \"useState{[labels, setLabels]([])}\\nuseSelector{currentTimeRangeFilters}\\nuseSelector{previousCustomFilter}\\nuseSelector{shifts}\\nuseSelector{startDate}\\nuseEffect{}\", () => [useSelector, useSelector, useSelector, useSelector]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DAYJS_FORMAT, \"DAYJS_FORMAT\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ComparisonRangeLabel.tsx\");reactHotLoader.register(isTimeRangeEqual, \"isTimeRangeEqual\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ComparisonRangeLabel.tsx\");reactHotLoader.register(isShiftEqual, \"isShiftEqual\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ComparisonRangeLabel.tsx\");reactHotLoader.register(oldChoices, \"oldChoices\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ComparisonRangeLabel.tsx\");reactHotLoader.register(ComparisonRangeLabel, \"ComparisonRangeLabel\", \"/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ComparisonRangeLabel.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useEffect","useState","useSelector","css","ensureIsArray","fetchTimeRange","getTimeOffset","parseDttmToDate","t","ControlHeader","DEFAULT_DATE_PATTERN","extendedDayjs","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","DAYJS_FORMAT","isTimeRangeEqual","left","right","_isEqual","isShiftEqual","oldChoices","r","y","m","w","c","ComparisonRangeLabel","multi","labels","setLabels","currentTimeRangeFilters","state","explore","form_data","adhoc_filters","filter","adhoc_filter","operator","previousCustomFilter","_state$explore$form_d","adhoc_custom","shifts","formData","time_compare","previousTimeComparison","time_comparison","hasOwnProperty","previousChoice","startDate","start_date_offset","shiftsArray","_isEmpty","useStartDate","_previousCustomFilter","comparator","split","format","promises","map","nonCustomNorInheritShifts","shift","customOrInheritShifts","subject","includes","then","res","_res$value","dates","value","match","parsedStartDate","parsedEndDate","parsedDateDayjs","startDateDayjs","isSameOrBefore","postProcessedShifts","timeRangeFilter","includeFutureOffsets","concat","Promise","resolve","all","_r$value","length","children","label","flat","theme","typography","sizes","colors","grayscale","dark1","__signature__","reactHotLoader","reactHotLoaderGlobal","default","undefined","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/explore/components/controls/ComparisonRangeLabel.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { isEmpty, isEqual } from 'lodash';\nimport {\n  BinaryAdhocFilter,\n  css,\n  ensureIsArray,\n  fetchTimeRange,\n  getTimeOffset,\n  parseDttmToDate,\n  SimpleAdhocFilter,\n  t,\n} from '@superset-ui/core';\nimport ControlHeader, {\n  ControlHeaderProps,\n} from 'src/explore/components/ControlHeader';\nimport { RootState } from 'src/views/store';\nimport { DEFAULT_DATE_PATTERN } from '@superset-ui/chart-controls';\nimport { extendedDayjs } from 'src/utils/dates';\n\nconst DAYJS_FORMAT = 'YYYY-MM-DD';\n\nconst isTimeRangeEqual = (\n  left: BinaryAdhocFilter[],\n  right: BinaryAdhocFilter[],\n) => isEqual(left, right);\n\nconst isShiftEqual = (left: string[], right: string[]) => isEqual(left, right);\n\ntype ComparisonRangeLabelProps = ControlHeaderProps & {\n  multi?: boolean;\n};\n\nconst oldChoices = {\n  r: 'inherit',\n  y: '1 year ago',\n  m: '1 month ago',\n  w: '1 week ago',\n  c: 'custom',\n};\n\nexport const ComparisonRangeLabel = ({\n  multi = true,\n}: ComparisonRangeLabelProps) => {\n  const [labels, setLabels] = useState<string[]>([]);\n  const currentTimeRangeFilters = useSelector<RootState, BinaryAdhocFilter[]>(\n    state =>\n      state.explore.form_data.adhoc_filters.filter(\n        (adhoc_filter: SimpleAdhocFilter) =>\n          adhoc_filter.operator === 'TEMPORAL_RANGE',\n      ),\n    isTimeRangeEqual,\n  );\n  const previousCustomFilter = useSelector<RootState, BinaryAdhocFilter[]>(\n    state =>\n      state.explore.form_data.adhoc_custom?.filter(\n        (adhoc_filter: SimpleAdhocFilter) =>\n          adhoc_filter.operator === 'TEMPORAL_RANGE',\n      ),\n    isTimeRangeEqual,\n  );\n  const shifts = useSelector<RootState, string[]>(state => {\n    const formData = state.explore.form_data || {};\n    if (!formData?.time_compare) {\n      const previousTimeComparison = formData.time_comparison || '';\n      if (oldChoices.hasOwnProperty(previousTimeComparison)) {\n        const previousChoice =\n          oldChoices[previousTimeComparison as keyof typeof oldChoices];\n        return [previousChoice];\n      }\n    }\n    return formData?.time_compare;\n  }, isShiftEqual);\n  const startDate = useSelector<RootState, string>(\n    state => state.explore.form_data.start_date_offset,\n  );\n\n  useEffect(() => {\n    const shiftsArray = ensureIsArray(shifts);\n    if (\n      isEmpty(currentTimeRangeFilters) ||\n      (isEmpty(shiftsArray) && !startDate)\n    ) {\n      setLabels([]);\n    } else if (!isEmpty(shifts) || startDate) {\n      let useStartDate = startDate;\n      if (!startDate && !isEmpty(previousCustomFilter)) {\n        useStartDate = previousCustomFilter[0]?.comparator.split(' : ')[0];\n        useStartDate = extendedDayjs(parseDttmToDate(useStartDate)).format(\n          DAYJS_FORMAT,\n        );\n      }\n      const promises = currentTimeRangeFilters.map(filter => {\n        const nonCustomNorInheritShifts =\n          shiftsArray.filter(\n            (shift: string) => shift !== 'custom' && shift !== 'inherit',\n          ) || [];\n        const customOrInheritShifts =\n          shiftsArray.filter(\n            (shift: string) => shift === 'custom' || shift === 'inherit',\n          ) || [];\n\n        // There's no custom or inherit to compute, so we can just fetch the time range\n        if (isEmpty(customOrInheritShifts)) {\n          return fetchTimeRange(\n            filter.comparator,\n            filter.subject,\n            ensureIsArray(nonCustomNorInheritShifts),\n          );\n        }\n        // Need to compute custom or inherit shifts first and then mix with the non custom or inherit shifts\n        if (\n          (ensureIsArray(customOrInheritShifts).includes('custom') &&\n            startDate) ||\n          ensureIsArray(customOrInheritShifts).includes('inherit')\n        ) {\n          return fetchTimeRange(filter.comparator, filter.subject).then(res => {\n            const dates = res?.value?.match(DEFAULT_DATE_PATTERN);\n            const [parsedStartDate, parsedEndDate] = dates ?? [];\n            if (parsedStartDate) {\n              const parsedDateDayjs = extendedDayjs(\n                parseDttmToDate(parsedStartDate),\n              );\n              const startDateDayjs = extendedDayjs(parseDttmToDate(startDate));\n              if (\n                startDateDayjs.isSameOrBefore(parsedDateDayjs) ||\n                !startDate\n              ) {\n                const postProcessedShifts = getTimeOffset({\n                  timeRangeFilter: {\n                    ...filter,\n                    comparator: `${parsedStartDate} : ${parsedEndDate}`,\n                  },\n                  shifts: customOrInheritShifts,\n                  startDate: useStartDate,\n                  includeFutureOffsets: false, // So we don't trigger requests for future dates\n                });\n                return fetchTimeRange(\n                  filter.comparator,\n                  filter.subject,\n                  ensureIsArray(\n                    postProcessedShifts.concat(nonCustomNorInheritShifts),\n                  ),\n                );\n              }\n            }\n            return Promise.resolve({ value: '' });\n          });\n        }\n        return Promise.resolve({ value: '' });\n      });\n      Promise.all(promises).then(res => {\n        // access the value property inside the res and set the labels with it in the state\n        setLabels(res.map(r => r.value ?? ''));\n      });\n    }\n  }, [currentTimeRangeFilters, shifts, startDate]);\n\n  return labels.length ? (\n    <>\n      <ControlHeader label={t('Actual range for comparison')} />\n      {labels.flat().map(label => (\n        <>\n          <div\n            css={theme => css`\n              font-size: ${theme.typography.sizes.m}px;\n              color: ${theme.colors.grayscale.dark1};\n            `}\n            key={label}\n          >\n            {label}\n          </div>\n        </>\n      ))}\n    </>\n  ) : null;\n};\n"],"mappings":"oXAAA;;;;;;;;;;;;;;;;;;AAmBA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;;AAEzC,SAEEC,GAAG,EACHC,aAAa,EACbC,cAAc,EACdC,aAAa,EACbC,eAAe,EAEfC,CAAC,QACI,mBAAmB;AAC1B,OAAOC,aAEN,MAAM,sCAAsC;AAE7C,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,aAAa,QAAQ,iBAAiB,CAAC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,QAAA,IAAAC,SAAA,EAAAC,IAAA,IAAAC,KAAA;AAEhD,MAAMC,YAAY,GAAG,YAAY;AAEjC,MAAMC,gBAAgB,GAAGA,CACvBC,IAAyB,EACzBC,KAA0B,KACvBC,QAAA,CAAQF,IAAI,EAAEC,KAAK,CAAC;AAEzB,MAAME,YAAY,GAAGA,CAACH,IAAc,EAAEC,KAAe,KAAKC,QAAA,CAAQF,IAAI,EAAEC,KAAK,CAAC;AAM9E,MAAMG,UAAU,GAAG;EACjBC,CAAC,EAAE,SAAS;EACZC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,aAAa;EAChBC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE;CACJ;AAED,OAAO,MAAMC,oBAAoB,GAAGA,CAAC,EACnCC,KAAK,GAAG,IAAI,EACc,KAAI;EAC9B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGhC,QAAQ,CAAW,EAAE,CAAC;EAClD,MAAMiC,uBAAuB,GAAGhC,WAAW,CACzC,CAAAiC,KAAK,KACHA,KAAK,CAACC,OAAO,CAACC,SAAS,CAACC,aAAa,CAACC,MAAM,CAC1C,CAACC,YAA+B,KAC9BA,YAAY,CAACC,QAAQ,KAAK,gBAAgB,CAC7C,EACHtB,gBAAgB,CACjB;EACD,MAAMuB,oBAAoB,GAAGxC,WAAW,CACtC,CAAAiC,KAAK,UAAAQ,qBAAA,SAAAA,qBAAA,GACHR,KAAK,CAACC,OAAO,CAACC,SAAS,CAACO,YAAY,qBAApCD,qBAAA,CAAsCJ,MAAM,CAC1C,CAACC,YAA+B,KAC9BA,YAAY,CAACC,QAAQ,KAAK,gBAAgB,CAC7C,IACHtB,gBAAgB,CACjB;EACD,MAAM0B,MAAM,GAAG3C,WAAW,CAAsB,CAAAiC,KAAK,KAAG;IACtD,MAAMW,QAAQ,GAAGX,KAAK,CAACC,OAAO,CAACC,SAAS,IAAI,EAAE;IAC9C,IAAI,EAACS,QAAQ,YAARA,QAAQ,CAAEC,YAAY,GAAE;MAC3B,MAAMC,sBAAsB,GAAGF,QAAQ,CAACG,eAAe,IAAI,EAAE;MAC7D,IAAIzB,UAAU,CAAC0B,cAAc,CAACF,sBAAsB,CAAC,EAAE;QACrD,MAAMG,cAAc,GAClB3B,UAAU,CAACwB,sBAAiD,CAAC;QAC/D,OAAO,CAACG,cAAc,CAAC;;;IAG3B,OAAOL,QAAQ,oBAARA,QAAQ,CAAEC,YAAY;EAC/B,CAAC,EAAExB,YAAY,CAAC;EAChB,MAAM6B,SAAS,GAAGlD,WAAW,CAC3B,CAAAiC,KAAK,KAAIA,KAAK,CAACC,OAAO,CAACC,SAAS,CAACgB,iBAAiB,CACnD;EAEDrD,SAAS,CAAC,MAAK;IACb,MAAMsD,WAAW,GAAGlD,aAAa,CAACyC,MAAM,CAAC;IACzC,IACEU,QAAA,CAAQrB,uBAAuB,CAAC;IAC/BqB,QAAA,CAAQD,WAAW,CAAC,IAAI,CAACF,SAAU,EACpC;MACAnB,SAAS,CAAC,EAAE,CAAC;KACd;IAAM,IAAI,CAACsB,QAAA,CAAQV,MAAM,CAAC,IAAIO,SAAS,EAAE;MACxC,IAAII,YAAY,GAAGJ,SAAS;MAC5B,IAAI,CAACA,SAAS,IAAI,CAACG,QAAA,CAAQb,oBAAoB,CAAC,EAAE,KAAAe,qBAAA;QAChDD,YAAY,IAAAC,qBAAA,GAAGf,oBAAoB,CAAC,CAAC,CAAC,qBAAvBe,qBAAA,CAAyBC,UAAU,CAACC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAClEH,YAAY,GAAG7C,aAAa,CAACJ,eAAe,CAACiD,YAAY,CAAC,CAAC,CAACI,MAAM,CAChE1C,YAAY,CACb;;MAEH,MAAM2C,QAAQ,GAAG3B,uBAAuB,CAAC4B,GAAG,CAAC,CAAAvB,MAAM,KAAG;QACpD,MAAMwB,yBAAyB,GAC7BT,WAAW,CAACf,MAAM,CAChB,CAACyB,KAAa,KAAKA,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,SAAS,CAC7D,IAAI,EAAE;QACT,MAAMC,qBAAqB,GACzBX,WAAW,CAACf,MAAM,CAChB,CAACyB,KAAa,KAAKA,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,SAAS,CAC7D,IAAI,EAAE;QAET;QACA,IAAIT,QAAA,CAAQU,qBAAqB,CAAC,EAAE;UAClC,OAAO5D,cAAc,CACnBkC,MAAM,CAACmB,UAAU,EACjBnB,MAAM,CAAC2B,OAAO,EACd9D,aAAa,CAAC2D,yBAAyB,CAAC,CACzC;;QAEH;QACA,IACG3D,aAAa,CAAC6D,qBAAqB,CAAC,CAACE,QAAQ,CAAC,QAAQ,CAAC;QACtDf,SAAS;QACXhD,aAAa,CAAC6D,qBAAqB,CAAC,CAACE,QAAQ,CAAC,SAAS,CAAC,EACxD;UACA,OAAO9D,cAAc,CAACkC,MAAM,CAACmB,UAAU,EAAEnB,MAAM,CAAC2B,OAAO,CAAC,CAACE,IAAI,CAAC,CAAAC,GAAG,KAAG,KAAAC,UAAA;YAClE,MAAMC,KAAK,GAAGF,GAAG,qBAAAC,UAAA,GAAHD,GAAG,CAAEG,KAAK,qBAAVF,UAAA,CAAYG,KAAK,CAAC/D,oBAAoB,CAAC;YACrD,MAAM,CAACgE,eAAe,EAAEC,aAAa,CAAC,GAAGJ,KAAK,WAALA,KAAK,GAAI,EAAE;YACpD,IAAIG,eAAe,EAAE;cACnB,MAAME,eAAe,GAAGjE,aAAa,CACnCJ,eAAe,CAACmE,eAAe,CAAC,CACjC;cACD,MAAMG,cAAc,GAAGlE,aAAa,CAACJ,eAAe,CAAC6C,SAAS,CAAC,CAAC;cAChE,IACEyB,cAAc,CAACC,cAAc,CAACF,eAAe,CAAC;cAC9C,CAACxB,SAAS,EACV;gBACA,MAAM2B,mBAAmB,GAAGzE,aAAa,CAAC;kBACxC0E,eAAe,EAAE;oBACf,GAAGzC,MAAM;oBACTmB,UAAU,EAAE,GAAGgB,eAAe,MAAMC,aAAa;mBAClD;kBACD9B,MAAM,EAAEoB,qBAAqB;kBAC7Bb,SAAS,EAAEI,YAAY;kBACvByB,oBAAoB,EAAE,KAAK,CAAE;iBAC9B,CAAC;gBACF,OAAO5E,cAAc,CACnBkC,MAAM,CAACmB,UAAU,EACjBnB,MAAM,CAAC2B,OAAO,EACd9D,aAAa,CACX2E,mBAAmB,CAACG,MAAM,CAACnB,yBAAyB,CAAC,CACtD,CACF;;;YAGL,OAAOoB,OAAO,CAACC,OAAO,CAAC,EAAEZ,KAAK,EAAE,EAAE,EAAE,CAAC;UACvC,CAAC,CAAC;;QAEJ,OAAOW,OAAO,CAACC,OAAO,CAAC,EAAEZ,KAAK,EAAE,EAAE,EAAE,CAAC;MACvC,CAAC,CAAC;MACFW,OAAO,CAACE,GAAG,CAACxB,QAAQ,CAAC,CAACO,IAAI,CAAC,CAAAC,GAAG,KAAG;QAC/B;QACApC,SAAS,CAACoC,GAAG,CAACP,GAAG,CAAC,CAAArC,CAAC,UAAA6D,QAAA,SAAAA,QAAA,GAAI7D,CAAC,CAAC+C,KAAK,YAAAc,QAAA,GAAI,EAAE,GAAC,CAAC;MACxC,CAAC,CAAC;;EAEN,CAAC,EAAE,CAACpD,uBAAuB,EAAEW,MAAM,EAAEO,SAAS,CAAC,CAAC;EAEhD,OAAOpB,MAAM,CAACuD,MAAM,GAClBtE,KAAA,CAAAF,SAAA,IAAAyE,QAAA;IACE3E,IAAA,CAACJ,aAAa,IAACgF,KAAK,EAAEjF,CAAC,CAAC,6BAA6B,CAAE,GACvD;IAACwB,MAAM,CAAC0D,IAAI,EAAE,CAAC5B,GAAG,CAAC,CAAA2B,KAAK,KACtB5E,IAAA,CAAAE,SAAA,IAAAyE,QAAA;MACE3E,IAAA,UACEV,GAAG,EAAEA,CAAAwF,KAAK,KAAIxF,GAAG;2BACFwF,KAAK,CAACC,UAAU,CAACC,KAAK,CAAClE,CAAC;uBAC5BgE,KAAK,CAACG,MAAM,CAACC,SAAS,CAACC,KAAK;aACrC,EAAAR,QAAA;QAGDC,KAAK,IAFDA;MAGF,CACP;IAAA,CACD,CAAC;EACJ,CAAG,GACD,IAAI;AACV,CAAC,CAACQ,aAAA,CAvIWnE,oBAAoB,iLAIC5B,WAAW,EAQdA,WAAW,EAQzBA,WAAW,EAYRA,WAAW,sBAAAgG,cAAA,UAAAC,oBAAA,mBAAAA,oBAAA,CAAAC,OAAA,GAAAC,SAAA,MAAAH,cAAA,WAAAA,cAAA,CAAAI,QAAA,CArDzBpF,YAAY,yHAAAgF,cAAA,CAAAI,QAAA,CAEZnF,gBAAgB,6HAAA+E,cAAA,CAAAI,QAAA,CAKhB/E,YAAY,yHAAA2E,cAAA,CAAAI,QAAA,CAMZ9E,UAAU,uHAAA0E,cAAA,CAAAI,QAAA,CAQHxE,oBAAoB,yJAAAyE,WAAA,UAAAJ,oBAAA,mBAAAA,oBAAA,CAAAI,WAAA,GAAAF,SAAA,CAAAE,WAAA,IAAAA,WAAA,CAAAC,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}