{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport { ensureIsArray, FeatureFlag, isFeatureEnabled, logging, styled, t } from '@superset-ui/core';\nimport { PLACEHOLDER_DATASOURCE } from 'src/dashboard/constants';\nimport Loading from 'src/components/Loading';\nimport { EmptyState } from 'src/components/EmptyState';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { Logger, LOG_ACTIONS_RENDER_CHART } from 'src/logger/LogUtils';\nimport { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { isCurrentUserBot } from 'src/utils/isBot';\nimport { ChartSource } from 'src/types/ChartSource';\nimport { ResourceStatus } from 'src/hooks/apiResources/apiResources';\nimport ChartRenderer from './ChartRenderer';\nimport { ChartErrorMessage } from './ChartErrorMessage';\nimport { getChartRequiredFieldsMissingMessage } from '../../utils/getChartRequiredFieldsMissingMessage';import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nconst BLANK = {};\nconst NONEXISTENT_DATASET = t('The dataset associated with this chart no longer exists');\nconst defaultProps = {\n  addFilter: () => BLANK,\n  onFilterMenuOpen: () => BLANK,\n  onFilterMenuClose: () => BLANK,\n  initialValues: BLANK,\n  setControlValue: () => BLANK,\n  triggerRender: false,\n  dashboardId: undefined,\n  chartStackTrace: undefined,\n  force: false,\n  isInView: true\n};\nconst Styles = styled.div`\n  min-height: ${(p) => p.height}px;\n  position: relative;\n\n  .chart-tooltip {\n    opacity: 0.75;\n    font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  }\n\n  .slice_container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    height: ${(p) => p.height}px;\n\n    .pivot_table tbody tr {\n      font-feature-settings: 'tnum' 1;\n    }\n\n    .alert {\n      margin: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n`;\nconst LoadingDiv = styled.div`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 80%;\n  transform: translate(-50%, -50%);\n`;\nconst MessageSpan = styled.span`\n  display: block;\n  text-align: center;\n  margin: ${({ theme }) => theme.gridUnit * 4}px auto;\n  width: fit-content;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nclass Chart extends PureComponent {\n\n\n  constructor(props) {\n    super(props);this.renderStartTime = void 0;\n    this.handleRenderContainerFailure =\n    this.handleRenderContainerFailure.bind(this);\n  }\n  componentDidMount() {\n    if (this.props.triggerQuery) {\n      this.runQuery();\n    }\n  }\n  componentDidUpdate() {\n    if (this.props.triggerQuery) {\n      this.runQuery();\n    }\n  }\n  runQuery() {\n    // Create chart with POST request\n    this.props.actions.postChartFormData(this.props.formData, Boolean(this.props.force || getUrlParam(URL_PARAMS.force)), // allow override via url params force=true\n    this.props.timeout, this.props.chartId, this.props.dashboardId, this.props.ownState);\n  }\n  handleRenderContainerFailure(error, info) {\n    const { actions, chartId } = this.props;\n    logging.warn(error);\n    actions.chartRenderingFailed(error.toString(), chartId, info ? info.componentStack : null);\n    actions.logEvent(LOG_ACTIONS_RENDER_CHART, {\n      slice_id: chartId,\n      has_err: true,\n      error_details: error.toString(),\n      start_offset: this.renderStartTime,\n      ts: new Date().getTime(),\n      duration: Logger.getTimestamp() - this.renderStartTime\n    });\n  }\n  renderErrorMessage(queryResponse) {var _queryResponse$errors;\n    const { chartId, chartAlert, chartStackTrace, datasource, dashboardId, height, datasetsStatus } = this.props;\n    const error = queryResponse == null ? void 0 : (_queryResponse$errors = queryResponse.errors) == null ? void 0 : _queryResponse$errors[0];\n    const message = chartAlert || (queryResponse == null ? void 0 : queryResponse.message);\n    // if datasource is still loading, don't render JS errors\n    if (chartAlert !== undefined &&\n    chartAlert !== NONEXISTENT_DATASET &&\n    datasource === PLACEHOLDER_DATASOURCE &&\n    datasetsStatus !== ResourceStatus.Error) {\n      return _jsx(Styles, { \"data-ui-anchor\": \"chart\", className: \"chart-container\", \"data-test\": \"chart-container\", height: height, children:\n        _jsx(Loading, {}) }, chartId\n      );\n    }\n    return _jsx(ChartErrorMessage, { chartId: chartId, error: error, subtitle: message, link: queryResponse ? queryResponse.link : undefined, source: dashboardId ? ChartSource.Dashboard : ChartSource.Explore, stackTrace: chartStackTrace }, chartId);\n  }\n  renderSpinner(databaseName) {\n    const message = databaseName ?\n    t('Waiting on %s', databaseName) :\n    t('Waiting on database...');\n    return _jsxs(LoadingDiv, { children: [\n      _jsx(Loading, { position: \"inline-centered\" }),\n      _jsx(MessageSpan, { children: message })] }\n    );\n  }\n  renderChartContainer() {\n    return _jsx(\"div\", { className: \"slice_container\", \"data-test\": \"slice-container\", children:\n      this.props.isInView ||\n      !isFeatureEnabled(FeatureFlag.DashboardVirtualization) ||\n      isCurrentUserBot() ? _jsx(ChartRenderer, { ...this.props, source: this.props.dashboardId ? 'dashboard' : 'explore', \"data-test\": this.props.vizType }) : _jsx(Loading, {}) }\n    );\n  }\n  render() {var _datasource$database;\n    const { height, chartAlert, chartStatus, datasource, errorMessage, chartIsStale, queriesResponse = [], width } = this.props;\n    const databaseName = datasource == null ? void 0 : (_datasource$database = datasource.database) == null ? void 0 : _datasource$database.name;\n    const isLoading = chartStatus === 'loading';\n    if (chartStatus === 'failed') {\n      return queriesResponse.map((item) => this.renderErrorMessage(item));\n    }\n    if (errorMessage && ensureIsArray(queriesResponse).length === 0) {\n      return _jsx(EmptyState, { size: \"large\", title: t('Add required control values to preview chart'), description: getChartRequiredFieldsMissingMessage(true), image: \"chart.svg\" });\n    }\n    if (!isLoading &&\n    !chartAlert &&\n    !errorMessage &&\n    chartIsStale &&\n    ensureIsArray(queriesResponse).length === 0) {\n      return _jsx(EmptyState, { size: \"large\", title: t('Your chart is ready to go!'), description: _jsxs(\"span\", { children: [\n          t('Click on \"Create chart\" button in the control panel on the left to preview a visualization or'), ' ',\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, onClick: this.props.onQuery, children:\n            t('click here') }\n          ), \".\"] }\n\n        ), image: \"chart.svg\" });\n    }\n    return _jsx(ErrorBoundary, { onError: this.handleRenderContainerFailure, showMessage: false, children:\n      _jsx(Styles, { \"data-ui-anchor\": \"chart\", className: \"chart-container\", \"data-test\": \"chart-container\", height: height, width: width, children:\n        isLoading ?\n        this.renderSpinner(databaseName) :\n        this.renderChartContainer() }\n      ) }\n    );\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}Chart.defaultProps = defaultProps;const _default = Chart;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(BLANK, \"BLANK\", \"/Users/aryurkov/superset/superset-frontend/src/components/Chart/Chart.tsx\");reactHotLoader.register(NONEXISTENT_DATASET, \"NONEXISTENT_DATASET\", \"/Users/aryurkov/superset/superset-frontend/src/components/Chart/Chart.tsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/Users/aryurkov/superset/superset-frontend/src/components/Chart/Chart.tsx\");reactHotLoader.register(Styles, \"Styles\", \"/Users/aryurkov/superset/superset-frontend/src/components/Chart/Chart.tsx\");reactHotLoader.register(LoadingDiv, \"LoadingDiv\", \"/Users/aryurkov/superset/superset-frontend/src/components/Chart/Chart.tsx\");reactHotLoader.register(MessageSpan, \"MessageSpan\", \"/Users/aryurkov/superset/superset-frontend/src/components/Chart/Chart.tsx\");reactHotLoader.register(Chart, \"Chart\", \"/Users/aryurkov/superset/superset-frontend/src/components/Chart/Chart.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/components/Chart/Chart.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["PureComponent","ensureIsArray","FeatureFlag","isFeatureEnabled","logging","styled","t","PLACEHOLDER_DATASOURCE","Loading","EmptyState","ErrorBoundary","Logger","LOG_ACTIONS_RENDER_CHART","URL_PARAMS","getUrlParam","isCurrentUserBot","ChartSource","ResourceStatus","ChartRenderer","ChartErrorMessage","getChartRequiredFieldsMissingMessage","jsx","_jsx","jsxs","_jsxs","BLANK","NONEXISTENT_DATASET","defaultProps","addFilter","onFilterMenuOpen","onFilterMenuClose","initialValues","setControlValue","triggerRender","dashboardId","undefined","chartStackTrace","force","isInView","Styles","div","p","height","theme","typography","sizes","s","gridUnit","LoadingDiv","MessageSpan","span","colors","grayscale","base","Chart","constructor","props","renderStartTime","handleRenderContainerFailure","bind","componentDidMount","triggerQuery","runQuery","componentDidUpdate","actions","postChartFormData","formData","Boolean","timeout","chartId","ownState","error","info","warn","chartRenderingFailed","toString","componentStack","logEvent","slice_id","has_err","error_details","start_offset","ts","Date","getTime","duration","getTimestamp","renderErrorMessage","queryResponse","_queryResponse$errors","chartAlert","datasource","datasetsStatus","errors","message","Error","className","children","subtitle","link","source","Dashboard","Explore","stackTrace","renderSpinner","databaseName","position","renderChartContainer","DashboardVirtualization","vizType","render","_datasource$database","chartStatus","errorMessage","chartIsStale","queriesResponse","width","database","name","isLoading","map","item","length","size","title","description","image","role","tabIndex","onClick","onQuery","onError","showMessage","__reactstandin__regenerateByEval","key","code","eval","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/components/Chart/Chart.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport {\n  ensureIsArray,\n  FeatureFlag,\n  isFeatureEnabled,\n  logging,\n  QueryFormData,\n  styled,\n  t,\n  SqlaFormData,\n  ClientErrorObject,\n  ChartDataResponse,\n} from '@superset-ui/core';\nimport { PLACEHOLDER_DATASOURCE } from 'src/dashboard/constants';\nimport Loading from 'src/components/Loading';\nimport { EmptyState } from 'src/components/EmptyState';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { Logger, LOG_ACTIONS_RENDER_CHART } from 'src/logger/LogUtils';\nimport { URL_PARAMS } from 'src/constants';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { isCurrentUserBot } from 'src/utils/isBot';\nimport { ChartSource } from 'src/types/ChartSource';\nimport { ResourceStatus } from 'src/hooks/apiResources/apiResources';\nimport { Dispatch } from 'redux';\nimport { Annotation } from 'src/explore/components/controls/AnnotationLayerControl';\nimport ChartRenderer from './ChartRenderer';\nimport { ChartErrorMessage } from './ChartErrorMessage';\nimport { getChartRequiredFieldsMissingMessage } from '../../utils/getChartRequiredFieldsMissingMessage';\n\nexport type ChartErrorType = Partial<ClientErrorObject>;\nexport interface ChartProps {\n  annotationData?: Annotation;\n  actions: Actions;\n  chartId: string;\n  datasource?: {\n    database?: {\n      name: string;\n    };\n  };\n  dashboardId?: number;\n  initialValues?: object;\n  formData: QueryFormData;\n  labelColors?: string;\n  sharedLabelColors?: string;\n  width: number;\n  height: number;\n  setControlValue: Function;\n  timeout?: number;\n  vizType: string;\n  triggerRender?: boolean;\n  force?: boolean;\n  isFiltersInitialized?: boolean;\n  chartAlert?: string;\n  chartStatus?: string;\n  chartStackTrace?: string;\n  queriesResponse: ChartDataResponse[];\n  triggerQuery?: boolean;\n  chartIsStale?: boolean;\n  errorMessage?: React.ReactNode;\n  addFilter?: (type: string) => void;\n  onQuery?: () => void;\n  onFilterMenuOpen?: (chartId: string, column: string) => void;\n  onFilterMenuClose?: (chartId: string, column: string) => void;\n  ownState: boolean;\n  postTransformProps?: Function;\n  datasetsStatus?: 'loading' | 'error' | 'complete';\n  isInView?: boolean;\n  emitCrossFilters?: boolean;\n}\n\nexport type Actions = {\n  logEvent(\n    LOG_ACTIONS_RENDER_CHART: string,\n    arg1: {\n      slice_id: string;\n      has_err: boolean;\n      error_details: string;\n      start_offset: number;\n      ts: number;\n      duration: number;\n    },\n  ): Dispatch;\n  chartRenderingFailed(\n    arg0: string,\n    chartId: string,\n    arg2: string | null,\n  ): Dispatch;\n  postChartFormData(\n    formData: SqlaFormData,\n    arg1: boolean,\n    timeout: number | undefined,\n    chartId: string,\n    dashboardId: number | undefined,\n    ownState: boolean,\n  ): Dispatch;\n};\nconst BLANK = {};\nconst NONEXISTENT_DATASET = t(\n  'The dataset associated with this chart no longer exists',\n);\n\nconst defaultProps: Partial<ChartProps> = {\n  addFilter: () => BLANK,\n  onFilterMenuOpen: () => BLANK,\n  onFilterMenuClose: () => BLANK,\n  initialValues: BLANK,\n  setControlValue: () => BLANK,\n  triggerRender: false,\n  dashboardId: undefined,\n  chartStackTrace: undefined,\n  force: false,\n  isInView: true,\n};\n\nconst Styles = styled.div<{ height: number; width?: number }>`\n  min-height: ${p => p.height}px;\n  position: relative;\n\n  .chart-tooltip {\n    opacity: 0.75;\n    font-size: ${({ theme }) => theme.typography.sizes.s}px;\n  }\n\n  .slice_container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    height: ${p => p.height}px;\n\n    .pivot_table tbody tr {\n      font-feature-settings: 'tnum' 1;\n    }\n\n    .alert {\n      margin: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n  }\n`;\n\nconst LoadingDiv = styled.div`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 80%;\n  transform: translate(-50%, -50%);\n`;\n\nconst MessageSpan = styled.span`\n  display: block;\n  text-align: center;\n  margin: ${({ theme }) => theme.gridUnit * 4}px auto;\n  width: fit-content;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nclass Chart extends PureComponent<ChartProps, {}> {\n  static defaultProps = defaultProps;\n\n  renderStartTime: any;\n\n  constructor(props: ChartProps) {\n    super(props);\n    this.handleRenderContainerFailure =\n      this.handleRenderContainerFailure.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.triggerQuery) {\n      this.runQuery();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.triggerQuery) {\n      this.runQuery();\n    }\n  }\n\n  runQuery() {\n    // Create chart with POST request\n    this.props.actions.postChartFormData(\n      this.props.formData,\n      Boolean(this.props.force || getUrlParam(URL_PARAMS.force)), // allow override via url params force=true\n      this.props.timeout,\n      this.props.chartId,\n      this.props.dashboardId,\n      this.props.ownState,\n    );\n  }\n\n  handleRenderContainerFailure(\n    error: Error,\n    info: { componentStack: string } | null,\n  ) {\n    const { actions, chartId } = this.props;\n    logging.warn(error);\n    actions.chartRenderingFailed(\n      error.toString(),\n      chartId,\n      info ? info.componentStack : null,\n    );\n\n    actions.logEvent(LOG_ACTIONS_RENDER_CHART, {\n      slice_id: chartId,\n      has_err: true,\n      error_details: error.toString(),\n      start_offset: this.renderStartTime,\n      ts: new Date().getTime(),\n      duration: Logger.getTimestamp() - this.renderStartTime,\n    });\n  }\n\n  renderErrorMessage(queryResponse: ChartErrorType) {\n    const {\n      chartId,\n      chartAlert,\n      chartStackTrace,\n      datasource,\n      dashboardId,\n      height,\n      datasetsStatus,\n    } = this.props;\n    const error = queryResponse?.errors?.[0];\n    const message = chartAlert || queryResponse?.message;\n\n    // if datasource is still loading, don't render JS errors\n    if (\n      chartAlert !== undefined &&\n      chartAlert !== NONEXISTENT_DATASET &&\n      datasource === PLACEHOLDER_DATASOURCE &&\n      datasetsStatus !== ResourceStatus.Error\n    ) {\n      return (\n        <Styles\n          key={chartId}\n          data-ui-anchor=\"chart\"\n          className=\"chart-container\"\n          data-test=\"chart-container\"\n          height={height}\n        >\n          <Loading />\n        </Styles>\n      );\n    }\n\n    return (\n      <ChartErrorMessage\n        key={chartId}\n        chartId={chartId}\n        error={error}\n        subtitle={message}\n        link={queryResponse ? queryResponse.link : undefined}\n        source={dashboardId ? ChartSource.Dashboard : ChartSource.Explore}\n        stackTrace={chartStackTrace}\n      />\n    );\n  }\n\n  renderSpinner(databaseName: string | undefined) {\n    const message = databaseName\n      ? t('Waiting on %s', databaseName)\n      : t('Waiting on database...');\n\n    return (\n      <LoadingDiv>\n        <Loading position=\"inline-centered\" />\n        <MessageSpan>{message}</MessageSpan>\n      </LoadingDiv>\n    );\n  }\n\n  renderChartContainer() {\n    return (\n      <div className=\"slice_container\" data-test=\"slice-container\">\n        {this.props.isInView ||\n        !isFeatureEnabled(FeatureFlag.DashboardVirtualization) ||\n        isCurrentUserBot() ? (\n          <ChartRenderer\n            {...this.props}\n            source={this.props.dashboardId ? 'dashboard' : 'explore'}\n            data-test={this.props.vizType}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      height,\n      chartAlert,\n      chartStatus,\n      datasource,\n      errorMessage,\n      chartIsStale,\n      queriesResponse = [],\n      width,\n    } = this.props;\n\n    const databaseName = datasource?.database?.name;\n\n    const isLoading = chartStatus === 'loading';\n\n    if (chartStatus === 'failed') {\n      return queriesResponse.map(item =>\n        this.renderErrorMessage(item as ChartErrorType),\n      );\n    }\n\n    if (errorMessage && ensureIsArray(queriesResponse).length === 0) {\n      return (\n        <EmptyState\n          size=\"large\"\n          title={t('Add required control values to preview chart')}\n          description={getChartRequiredFieldsMissingMessage(true)}\n          image=\"chart.svg\"\n        />\n      );\n    }\n    if (\n      !isLoading &&\n      !chartAlert &&\n      !errorMessage &&\n      chartIsStale &&\n      ensureIsArray(queriesResponse).length === 0\n    ) {\n      return (\n        <EmptyState\n          size=\"large\"\n          title={t('Your chart is ready to go!')}\n          description={\n            <span>\n              {t(\n                'Click on \"Create chart\" button in the control panel on the left to preview a visualization or',\n              )}{' '}\n              <span role=\"button\" tabIndex={0} onClick={this.props.onQuery}>\n                {t('click here')}\n              </span>\n              .\n            </span>\n          }\n          image=\"chart.svg\"\n        />\n      );\n    }\n\n    return (\n      <ErrorBoundary\n        onError={this.handleRenderContainerFailure}\n        showMessage={false}\n      >\n        <Styles\n          data-ui-anchor=\"chart\"\n          className=\"chart-container\"\n          data-test=\"chart-container\"\n          height={height}\n          width={width}\n        >\n          {isLoading\n            ? this.renderSpinner(databaseName)\n            : this.renderChartContainer()}\n        </Styles>\n      </ErrorBoundary>\n    );\n  }\n}\nexport default Chart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}