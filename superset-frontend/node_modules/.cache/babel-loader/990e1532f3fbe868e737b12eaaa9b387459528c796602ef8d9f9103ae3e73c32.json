{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport { ensureIsArray, getMetricLabel, ComparisonType, getXAxisLabel } from '@superset-ui/core';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\nimport { TIME_COMPARISON_SEPARATOR } from './utils/constants';\nexport const renameOperator = (formData, queryObject) => {\n  const metrics = ensureIsArray(queryObject.metrics);\n  const columns = ensureIsArray(queryObject.series_columns || queryObject.columns);\n  const { truncate_metric } = formData;\n  const xAxisLabel = getXAxisLabel(formData);\n  const isTimeComparisonValue = isTimeComparison(formData, queryObject);\n  // remove or rename top level of column name(metric name) in the MultiIndex when\n  // 1) at least 1 metric\n  // 2) dimension exist\n  // 3) xAxis exist\n  // 4) truncate_metric in form_data and truncate_metric is true\n  if (metrics.length > 0 &&\n  columns.length > 0 &&\n  xAxisLabel &&\n  truncate_metric !== undefined &&\n  !!truncate_metric) {\n    const renamePairs = [];\n    if (\n    // \"actual values\" will add derived metric.\n    // we will rename the \"metric\" from the metricWithOffset label\n    // for example: \"count__1 year ago\" =>\t\"1 year ago\"\n    isTimeComparisonValue) {\n      const metricOffsetMap = getMetricOffsetsMap(formData, queryObject);\n      const timeOffsets = ensureIsArray(formData.time_compare);\n      [...metricOffsetMap.entries()].forEach(([metricWithOffset, metricOnly]) => {\n        const offsetLabel = timeOffsets.find((offset) => metricWithOffset.includes(offset));\n        renamePairs.push([\n        formData.comparison_type === ComparisonType.Values ?\n        metricWithOffset :\n        [formData.comparison_type, metricOnly, metricWithOffset].join(TIME_COMPARISON_SEPARATOR),\n        metrics.length > 1 ? `${metricOnly}, ${offsetLabel}` : offsetLabel]\n        );\n      });\n    }\n    if (![\n    ComparisonType.Difference,\n    ComparisonType.Percentage,\n    ComparisonType.Ratio].\n    includes(formData.comparison_type) &&\n    metrics.length === 1) {\n      renamePairs.push([getMetricLabel(metrics[0]), null]);\n    }\n    if (renamePairs.length === 0) {\n      return undefined;\n    }\n    return {\n      operation: 'rename',\n      options: {\n        columns: Object.fromEntries(renamePairs),\n        level: 0,\n        inplace: true\n      }\n    };\n  }\n  return undefined;\n};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(renameOperator, \"renameOperator\", \"/Users/aryurkov/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/renameOperator.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["ensureIsArray","getMetricLabel","ComparisonType","getXAxisLabel","getMetricOffsetsMap","isTimeComparison","TIME_COMPARISON_SEPARATOR","renameOperator","formData","queryObject","metrics","columns","series_columns","truncate_metric","xAxisLabel","isTimeComparisonValue","length","undefined","renamePairs","metricOffsetMap","timeOffsets","time_compare","entries","forEach","metricWithOffset","metricOnly","offsetLabel","find","offset","includes","push","comparison_type","Values","join","Difference","Percentage","Ratio","operation","options","Object","fromEntries","level","inplace","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/packages/superset-ui-chart-controls/src/operators/renameOperator.ts"],"sourcesContent":["/* eslint-disable camelcase */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitationsxw\n * under the License.\n */\nimport {\n  PostProcessingRename,\n  ensureIsArray,\n  getMetricLabel,\n  ComparisonType,\n  getXAxisLabel,\n} from '@superset-ui/core';\nimport { PostProcessingFactory } from './types';\nimport { getMetricOffsetsMap, isTimeComparison } from './utils';\nimport { TIME_COMPARISON_SEPARATOR } from './utils/constants';\n\nexport const renameOperator: PostProcessingFactory<PostProcessingRename> = (\n  formData,\n  queryObject,\n) => {\n  const metrics = ensureIsArray(queryObject.metrics);\n  const columns = ensureIsArray(\n    queryObject.series_columns || queryObject.columns,\n  );\n  const { truncate_metric } = formData;\n  const xAxisLabel = getXAxisLabel(formData);\n  const isTimeComparisonValue = isTimeComparison(formData, queryObject);\n\n  // remove or rename top level of column name(metric name) in the MultiIndex when\n  // 1) at least 1 metric\n  // 2) dimension exist\n  // 3) xAxis exist\n  // 4) truncate_metric in form_data and truncate_metric is true\n  if (\n    metrics.length > 0 &&\n    columns.length > 0 &&\n    xAxisLabel &&\n    truncate_metric !== undefined &&\n    !!truncate_metric\n  ) {\n    const renamePairs: [string, string | null][] = [];\n    if (\n      // \"actual values\" will add derived metric.\n      // we will rename the \"metric\" from the metricWithOffset label\n      // for example: \"count__1 year ago\" =>\t\"1 year ago\"\n      isTimeComparisonValue\n    ) {\n      const metricOffsetMap = getMetricOffsetsMap(formData, queryObject);\n      const timeOffsets = ensureIsArray(formData.time_compare);\n      [...metricOffsetMap.entries()].forEach(\n        ([metricWithOffset, metricOnly]) => {\n          const offsetLabel = timeOffsets.find(offset =>\n            metricWithOffset.includes(offset),\n          );\n          renamePairs.push([\n            formData.comparison_type === ComparisonType.Values\n              ? metricWithOffset\n              : [formData.comparison_type, metricOnly, metricWithOffset].join(\n                  TIME_COMPARISON_SEPARATOR,\n                ),\n            metrics.length > 1 ? `${metricOnly}, ${offsetLabel}` : offsetLabel,\n          ]);\n        },\n      );\n    }\n\n    if (\n      ![\n        ComparisonType.Difference,\n        ComparisonType.Percentage,\n        ComparisonType.Ratio,\n      ].includes(formData.comparison_type) &&\n      metrics.length === 1\n    ) {\n      renamePairs.push([getMetricLabel(metrics[0]), null]);\n    }\n\n    if (renamePairs.length === 0) {\n      return undefined;\n    }\n\n    return {\n      operation: 'rename',\n      options: {\n        columns: Object.fromEntries(renamePairs),\n        level: 0,\n        inplace: true,\n      },\n    };\n  }\n\n  return undefined;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}