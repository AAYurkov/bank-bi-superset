{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { css, isFeatureEnabled, FeatureFlag, styled, SupersetClient, t, VizType } from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\nimport { InputNumber } from 'src/components/Input';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport Collapse from 'src/components/Collapse';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport { propertyComparator } from 'src/components/Select/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport { AntdCheckbox, AsyncSelect, Select, TreeSelect } from 'src/components';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { useCommonConf } from 'src/features/databases/state';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport { NotificationMethodOption, Sections, ContentType } from 'src/features/alerts/types';\nimport { useSelector } from 'react-redux';\nimport { Icons } from 'src/components/Icons';\nimport NumberInput from './components/NumberInput';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';\nimport ValidatedPanelHeader from './components/ValidatedPanelHeader';\nimport StyledPanel from './components/StyledPanel';\nimport { buildErrorTooltipMessage } from './buildErrorTooltipMessage';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst TIMEOUT_MIN = 1;\nconst TEXT_BASED_VISUALIZATION_TYPES = [\nVizType.PivotTable,\n'table',\nVizType.PairedTTest];\n\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 0 * * *'; // every day\nconst DEFAULT_RETENTION = 90;\nconst EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\nconst DEFAULT_NOTIFICATION_METHODS = [\nNotificationMethodOption.Email];\n\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst DEFAULT_EXTRA_DASHBOARD_OPTIONS = {\n  dashboard: {\n    anchor: ''\n  }\n};\nconst CONDITIONS = [\n{\n  label: t('< (Smaller than)'),\n  value: '<'\n},\n{\n  label: t('> (Larger than)'),\n  value: '>'\n},\n{\n  label: t('<= (Smaller or equal)'),\n  value: '<='\n},\n{\n  label: t('>= (Larger or equal)'),\n  value: '>='\n},\n{\n  label: t('== (Is equal)'),\n  value: '=='\n},\n{\n  label: t('!= (Is not equal)'),\n  value: '!='\n},\n{\n  label: t('Not null'),\n  value: 'not null'\n}];\n\nconst RETENTION_OPTIONS = [\n{\n  label: t('None'),\n  value: 0\n},\n{\n  label: t('30 days'),\n  value: 30\n},\n{\n  label: t('60 days'),\n  value: 60\n},\n{\n  label: t('90 days'),\n  value: 90\n}];\n\nconst CONTENT_TYPE_OPTIONS = [\n{\n  label: t('Dashboard'),\n  value: 'dashboard'\n},\n{\n  label: t('Chart'),\n  value: 'chart'\n}];\n\nconst FORMAT_OPTIONS = {\n  pdf: {\n    label: t('Send as PDF'),\n    value: 'PDF'\n  },\n  png: {\n    label: t('Send as PNG'),\n    value: 'PNG'\n  },\n  csv: {\n    label: t('Send as CSV'),\n    value: 'CSV'\n  },\n  txt: {\n    label: t('Send as text'),\n    value: 'TEXT'\n  }\n};\n// Apply to final text input components of each collapse panel\nconst noMarginBottom = css`\n  margin-bottom: 0;\n`;\n/*\nHeight of modal body defined here, total width defined at component invocation as antd prop.\n */\nconst StyledModal = styled(Modal)`\n  .antd5-modal-body {\n    height: 720px;\n  }\n\n  .control-label {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .ant-collapse > .ant-collapse-item {\n    border-bottom: none;\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n  }\n`;\nconst StyledTreeSelect = styled(TreeSelect)`\n  width: 100%;\n`;\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\nexport const StyledInputContainer = styled.div`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-top: 0px;\n    margin-bottom: ${theme.gridUnit * 4}px;\n\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input[type='number'] {\n      -moz-appearance: textfield;\n    }\n\n    .helper {\n      display: block;\n      color: ${theme.colors.grayscale.base};\n      font-size: ${theme.typography.sizes.s}px;\n      padding: ${theme.gridUnit}px 0;\n      text-align: left;\n    }\n\n    .required {\n      margin-left: ${theme.gridUnit / 2}px;\n      color: ${theme.colors.error.base};\n    }\n\n    .input-container {\n      display: flex;\n      align-items: center;\n\n      > div {\n        width: 100%;\n      }\n\n      label {\n        display: flex;\n        margin-right: ${theme.gridUnit * 2}px;\n      }\n\n      i {\n        margin: 0 ${theme.gridUnit}px;\n      }\n    }\n\n    input,\n    textarea {\n      flex: 1 1 auto;\n    }\n\n    input[disabled] {\n      color: ${theme.colors.grayscale.base};\n    }\n\n    textarea {\n      height: 300px;\n      resize: none;\n    }\n\n    input::placeholder,\n    textarea::placeholder {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    textarea,\n    input[type='text'],\n    input[type='number'] {\n      padding: ${theme.gridUnit}px ${theme.gridUnit * 2}px;\n      border-style: none;\n      border: 1px solid ${theme.colors.grayscale.light2};\n      border-radius: ${theme.gridUnit}px;\n\n      &[name='description'] {\n        flex: 1 1 auto;\n      }\n    }\n\n    .input-label {\n      margin-left: 10px;\n    }\n  `}\n`;\nconst StyledCheckbox = styled(AntdCheckbox)`\n  margin-top: ${({ theme }) => theme.gridUnit * 0}px;\n`;\nconst StyledTooltip = styled(InfoTooltipWithTrigger)`\n  margin-left: ${({ theme }) => theme.gridUnit}px;\n`;\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  ${({ theme }) => css`\n    color: ${theme.colors.primary.dark1};\n    cursor: pointer;\n\n    i {\n      margin-right: ${theme.gridUnit * 2}px;\n    }\n\n    &.disabled {\n      color: ${theme.colors.grayscale.light1};\n      cursor: default;\n    }\n  `}\n`;\nconst StyledNotificationMethodWrapper = styled.div`\n  .inline-container .input-container {\n    margin-left: 0;\n  }\n`;\nconst inputSpacer = (theme) => css`\n  margin-right: ${theme.gridUnit * 3}px;\n`;\nexport const TRANSLATIONS = {\n  // Panel titles\n  GENERAL_TITLE: t('General information'),\n  ALERT_CONDITION_TITLE: t('Alert condition'),\n  ALERT_CONTENTS_TITLE: t('Alert contents'),\n  REPORT_CONTENTS_TITLE: t('Report contents'),\n  SCHEDULE_TITLE: t('Schedule'),\n  NOTIFICATION_TITLE: t('Notification method'),\n  // Error text\n  NAME_ERROR_TEXT: t('name'),\n  OWNERS_ERROR_TEXT: t('owners'),\n  CONTENT_ERROR_TEXT: t('content type'),\n  DATABASE_ERROR_TEXT: t('database'),\n  SQL_ERROR_TEXT: t('sql'),\n  ALERT_CONDITION_ERROR_TEXT: t('alert condition'),\n  CRONTAB_ERROR_TEXT: t('crontab'),\n  WORKING_TIMEOUT_ERROR_TEXT: t('working timeout'),\n  RECIPIENTS_ERROR_TEXT: t('recipients'),\n  EMAIL_SUBJECT_ERROR_TEXT: t('email subject'),\n  EMAIL_VALIDATION_ERROR_TEXT: t('invalid email'),\n  ERROR_TOOLTIP_MESSAGE: t('Not all required fields are complete. Please provide the following:')\n};\nconst NotificationMethodAdd = ({ status = 'active', onClick }) => {\n  if (status === 'hidden') {\n    return null;\n  }\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n  return _jsxs(StyledNotificationAddButton, { className: status, onClick: checkStatus, children: [\n    _jsx(Icons.PlusOutlined, { iconSize: \"m\", css: (theme) => ({\n        margin: `auto ${theme.gridUnit * 2}px auto 0`,\n        verticalAlign: 'middle'\n      }) }),\n    status === 'active' ?\n    t('Add another notification method') :\n    t('Add delivery method')] }\n  );\n};\nconst AlertReportModal = ({ addDangerToast, onAdd, onHide, show, alert = null, isReport = false, addSuccessToast }) => {var _currentAlert$databas2, _currentAlert$databas3, _currentAlert$validat5, _currentAlert$validat6, _currentAlert$chart3, _currentAlert$chart4, _currentAlert$dashboa3, _currentAlert$dashboa4, _currentAlert$extra2, _currentAlert$extra2$;\n  const currentUser = useSelector((state) => state.user);\n  // Check config for alternate notification methods setting\n  const conf = useCommonConf();\n  const allowedNotificationMethods = (conf == null ? void 0 : conf.ALERT_REPORTS_NOTIFICATION_METHODS) || DEFAULT_NOTIFICATION_METHODS;\n  const [disableSave, setDisableSave] = useState(true);\n  const [currentAlert, setCurrentAlert] = useState();\n  const [isHidden, setIsHidden] = useState(true);\n  const [contentType, setContentType] = useState('dashboard');\n  const [reportFormat, setReportFormat] = useState(DEFAULT_NOTIFICATION_FORMAT);\n  const [forceScreenshot, setForceScreenshot] = useState(false);\n  const [isScreenshot, setIsScreenshot] = useState(false);\n  useEffect(() => {\n    setIsScreenshot(reportFormat === 'PNG');\n  }, [reportFormat]);\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState(false);\n  const [sourceOptions, setSourceOptions] = useState([]);\n  const [dashboardOptions, setDashboardOptions] = useState([]);\n  const [chartOptions, setChartOptions] = useState([]);\n  const [tabOptions, setTabOptions] = useState([]);\n  // Validation\n  const [validationStatus, setValidationStatus] = useState({\n    [Sections.General]: {\n      hasErrors: false,\n      name: TRANSLATIONS.GENERAL_TITLE,\n      errors: []\n    },\n    [Sections.Content]: {\n      hasErrors: false,\n      name: isReport ?\n      TRANSLATIONS.REPORT_CONTENTS_TITLE :\n      TRANSLATIONS.ALERT_CONTENTS_TITLE,\n      errors: []\n    },\n    [Sections.Alert]: {\n      hasErrors: false,\n      name: TRANSLATIONS.ALERT_CONDITION_TITLE,\n      errors: []\n    },\n    [Sections.Schedule]: {\n      hasErrors: false,\n      name: TRANSLATIONS.SCHEDULE_TITLE,\n      errors: []\n    },\n    [Sections.Notification]: {\n      hasErrors: false,\n      name: TRANSLATIONS.NOTIFICATION_TITLE,\n      errors: []\n    }\n  });\n  const [errorTooltipMessage, setErrorTooltipMessage] = useState('');\n  const updateValidationStatus = (section, errors) => {\n    setValidationStatus((currentValidationData) => ({\n      ...currentValidationData,\n      [section]: {\n        hasErrors: errors.length > 0,\n        name: currentValidationData[section].name,\n        errors\n      }\n    }));\n  };\n  // Chart metadata\n  const [chartVizType, setChartVizType] = useState('');\n  const reportOrAlert = isReport ? 'report' : 'alert';\n  const isEditMode = alert !== null;\n  const formatOptionEnabled = isFeatureEnabled(FeatureFlag.AlertsAttachReports) || isReport;\n  const tabsEnabled = isFeatureEnabled(FeatureFlag.AlertReportTabs);\n  const [notificationAddState, setNotificationAddState] = useState('active');\n  const [notificationSettings, setNotificationSettings] = useState([]);\n  const [emailSubject, setEmailSubject] = useState('');\n  const [emailError, setEmailError] = useState(false);\n  const onNotificationAdd = () => {\n    setNotificationSettings([\n    ...notificationSettings,\n    {\n      recipients: '',\n      // options shown in the newly added notification method\n      options: allowedNotificationMethods.filter(\n        // are filtered such that\n        (option) =>\n        // options are not included\n        !notificationSettings.reduce(\n          // when it exists in previous notificationSettings\n          (accum, setting) => accum || option === setting.method, false))\n    }]\n    );\n    setNotificationAddState(notificationSettings.length === allowedNotificationMethodsCount ?\n    'hidden' :\n    'disabled');\n  };\n  const { ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT, ALERT_REPORTS_DEFAULT_CRON_VALUE, ALERT_REPORTS_DEFAULT_RETENTION } = useSelector((state) => {var _state$common, _conf$ALERT_REPORTS_D, _conf$ALERT_REPORTS_D2, _conf$ALERT_REPORTS_D3;\n    const conf = (_state$common = state.common) == null ? void 0 : _state$common.conf;\n    return {\n      ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT: (_conf$ALERT_REPORTS_D = conf == null ? void 0 : conf.ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT) != null ? _conf$ALERT_REPORTS_D : DEFAULT_WORKING_TIMEOUT,\n      ALERT_REPORTS_DEFAULT_CRON_VALUE: (_conf$ALERT_REPORTS_D2 = conf == null ? void 0 : conf.ALERT_REPORTS_DEFAULT_CRON_VALUE) != null ? _conf$ALERT_REPORTS_D2 : DEFAULT_CRON_VALUE,\n      ALERT_REPORTS_DEFAULT_RETENTION: (_conf$ALERT_REPORTS_D3 = conf == null ? void 0 : conf.ALERT_REPORTS_DEFAULT_RETENTION) != null ? _conf$ALERT_REPORTS_D3 : DEFAULT_RETENTION\n    };\n  });\n  const defaultAlert = {\n    active: true,\n    creation_method: 'alerts_reports',\n    crontab: ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    extra: DEFAULT_EXTRA_DASHBOARD_OPTIONS,\n    log_retention: ALERT_REPORTS_DEFAULT_RETENTION,\n    working_timeout: ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    name: '',\n    owners: [],\n    recipients: [],\n    sql: '',\n    email_subject: '',\n    validator_config_json: {},\n    validator_type: '',\n    force_screenshot: false,\n    grace_period: undefined\n  };\n  const updateNotificationSetting = (index, setting) => {\n    const settings = [...notificationSettings];\n    settings[index] = setting;\n    // if you've changed notification method -> remove trailing methods\n    if (notificationSettings[index].method !== setting.method) {\n      notificationSettings[index] = setting;\n      setNotificationSettings(notificationSettings.filter((_, idx) => idx <= index));\n      if (notificationSettings.length - 1 > index) {\n        setNotificationAddState('active');\n      }\n      if (setting.method !== undefined && notificationAddState !== 'hidden') {\n        setNotificationAddState('active');\n      }\n    } else\n    {\n      setNotificationSettings(settings);\n    }\n  };\n  const removeNotificationSetting = (index) => {\n    const settings = notificationSettings.slice();\n    settings.splice(index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n  const updateAnchorState = (value) => {\n    setCurrentAlert((currentAlertData) => {var _currentAlertData$ext;\n      const dashboardState = currentAlertData == null ? void 0 : (_currentAlertData$ext = currentAlertData.extra) == null ? void 0 : _currentAlertData$ext.dashboard;\n      const extra = {\n        dashboard: {\n          ...dashboardState,\n          anchor: value\n        }\n      };\n      return {\n        ...currentAlertData,\n        extra\n      };\n    });\n  };\n  // Alert fetch logic\n  const { state: { loading, resource, error: fetchError }, fetchResource, createResource, updateResource, clearError } = useSingleViewResource('report', t('report'), addDangerToast);\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...defaultAlert });\n    setNotificationAddState('active');\n  };\n  const onSave = () => {var _currentAlert$chart, _currentAlert$dashboa, _currentAlert$databas;\n    // Notification Settings\n    const recipients = [];\n    notificationSettings.forEach((setting) => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients,\n            ccTarget: setting.cc,\n            bccTarget: setting.bcc\n          },\n          type: setting.method\n        });\n      }\n    });\n    const shouldEnableForceScreenshot = contentType === ContentType.Chart && !isReport;\n    const data = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      force_screenshot: shouldEnableForceScreenshot || forceScreenshot,\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull ?\n      {} :\n      currentAlert == null ? void 0 : currentAlert.validator_config_json,\n      chart: contentType === ContentType.Chart ? currentAlert == null ? void 0 : (_currentAlert$chart = currentAlert.chart) == null ? void 0 : _currentAlert$chart.value : null,\n      dashboard: contentType === ContentType.Dashboard ?\n      currentAlert == null ? void 0 : (_currentAlert$dashboa = currentAlert.dashboard) == null ? void 0 : _currentAlert$dashboa.value :\n      null,\n      custom_width: isScreenshot ? currentAlert == null ? void 0 : currentAlert.custom_width : undefined,\n      database: currentAlert == null ? void 0 : (_currentAlert$databas = currentAlert.database) == null ? void 0 : _currentAlert$databas.value,\n      owners: ((currentAlert == null ? void 0 : currentAlert.owners) || []).map((owner) => owner.value || owner.id),\n      recipients,\n      report_format: reportFormat || DEFAULT_NOTIFICATION_FORMAT,\n      extra: contentType === ContentType.Dashboard ? currentAlert == null ? void 0 : currentAlert.extra : {}\n    };\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n    data.context_markdown = 'string';\n    if (isEditMode) {\n      // Edit\n      if (currentAlert != null && currentAlert.id) {\n        const update_id = currentAlert.id;\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n        updateResource(update_id, data).then((response) => {\n          if (!response) {\n            return;\n          }\n          addSuccessToast(t('%s updated', data.type));\n          if (onAdd) {\n            onAdd();\n          }\n          hide();\n        });\n      }\n    } else\n    if (currentAlert) {\n      // Create\n      createResource(data).then((response) => {\n        if (!response) {\n          return;\n        }\n        addSuccessToast(t('%s updated', data.type));\n        if (onAdd) {\n          onAdd(response);\n        }\n        hide();\n      });\n    }\n  };\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode({\n      filter: input,\n      page,\n      page_size: pageSize\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/created_by?q=${query}`\n    }).then((response) => ({\n      data: response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text\n      })),\n      totalCount: response.json.count\n    }));\n  }, []);\n  const getSourceData = useCallback((db) => {\n    const database = db || (currentAlert == null ? void 0 : currentAlert.database);\n    if (!database || database.label) {\n      return null;\n    }\n    let result;\n    // Cycle through source options to find the selected option\n    sourceOptions.forEach((source) => {\n      if (source.value === database.value || source.value === database.id) {\n        result = source;\n      }\n    });\n    return result;\n  }, [currentAlert == null ? void 0 : currentAlert.database, sourceOptions]);\n  // Updating alert/report state\n  const updateAlertState = (name, value) => {\n    setCurrentAlert((currentAlertData) => ({\n      ...currentAlertData,\n      [name]: value\n    }));\n  };\n  const loadSourceOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode({\n      filter: input,\n      page,\n      page_size: pageSize\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/database?q=${query}`\n    }).then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text\n      }));\n      setSourceOptions(list);\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const dashboard = currentAlert == null ? void 0 : currentAlert.dashboard;\n  useEffect(() => {\n    if (!tabsEnabled)\n    return;\n    if (dashboard != null && dashboard.value) {\n      SupersetClient.get({\n        endpoint: `/api/v1/dashboard/${dashboard.value}/tabs`\n      }).\n      then((response) => {var _currentAlert$extra, _currentAlert$extra$d;\n        const { tab_tree: tabTree, all_tabs: allTabs } = response.json.result;\n        const allTabsWithOrder = tabTree.map((tab) => tab.value);\n        // Only show all tabs when there are more than one tab\n        if (allTabsWithOrder.length > 1) {\n          tabTree.push({\n            title: 'All Tabs',\n            // select tree only works with string value\n            value: JSON.stringify(allTabsWithOrder)\n          });\n        }\n        setTabOptions(tabTree);\n        const anchor = currentAlert == null ? void 0 : (_currentAlert$extra = currentAlert.extra) == null ? void 0 : (_currentAlert$extra$d = _currentAlert$extra.dashboard) == null ? void 0 : _currentAlert$extra$d.anchor;\n        if (anchor) {\n          try {\n            const parsedAnchor = JSON.parse(anchor);\n            if (Array.isArray(parsedAnchor)) {\n              // Check if all elements in parsedAnchor list are in allTabs\n              const isValidSubset = parsedAnchor.every((tab) => tab in allTabs);\n              if (!isValidSubset) {\n                updateAnchorState(undefined);\n              }\n            } else\n            {\n              throw new Error('Parsed value is not an array');\n            }\n          }\n          catch (error) {\n            if (!(anchor in allTabs)) {\n              updateAnchorState(undefined);\n            }\n          }\n        }\n      }).\n      catch(() => {\n        addDangerToast(t('There was an error retrieving dashboard tabs.'));\n      });\n    }\n  }, [dashboard, tabsEnabled, currentAlert == null ? void 0 : currentAlert.extra, addDangerToast]);\n  const databaseLabel = (currentAlert == null ? void 0 : currentAlert.database) && !currentAlert.database.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (databaseLabel) {\n      updateAlertState('database', getSourceData());\n    }\n  }, [databaseLabel, getSourceData]);\n  const loadDashboardOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode_uri({\n      filter: input,\n      page,\n      page_size: pageSize\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/dashboard?q=${query}`\n    }).then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text\n      }));\n      setDashboardOptions(list);\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const getDashboardData = (db) => {\n    const dashboard = db || (currentAlert == null ? void 0 : currentAlert.dashboard);\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n    let result;\n    // Cycle through dashboard options to find the selected option\n    dashboardOptions.forEach((dash) => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n    return result;\n  };\n  const getChartData = useCallback((chartData) => {\n    const chart = chartData || (currentAlert == null ? void 0 : currentAlert.chart);\n    if (!chart || chart.label) {\n      return null;\n    }\n    let result;\n    // Cycle through chart options to find the selected option\n    chartOptions.forEach((slice) => {\n      if (slice.value === chart.value || slice.value === chart.id) {\n        result = slice;\n      }\n    });\n    return result;\n  }, [chartOptions, currentAlert == null ? void 0 : currentAlert.chart]);\n  const noChartLabel = (currentAlert == null ? void 0 : currentAlert.chart) && !(currentAlert != null && currentAlert.chart.label);\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (noChartLabel) {\n      updateAlertState('chart', getChartData());\n    }\n  }, [getChartData, noChartLabel]);\n  const loadChartOptions = useMemo(() => (input = '', page, pageSize) => {\n    const query = rison.encode_uri({\n      filter: input,\n      page,\n      page_size: pageSize\n    });\n    return SupersetClient.get({\n      endpoint: `/api/v1/report/related/chart?q=${query}`\n    }).then((response) => {\n      const list = response.json.result.map((item) => ({\n        value: item.value,\n        label: item.text\n      }));\n      setChartOptions(list);\n      return { data: list, totalCount: response.json.count };\n    });\n  }, []);\n  const getChartVisualizationType = (chart) => SupersetClient.get({\n    endpoint: `/api/v1/chart/${chart.value}`\n  }).then((response) => setChartVizType(response.json.result.viz_type));\n  const updateEmailSubject = () => {var _currentAlert$chart2, _currentAlert$dashboa2;\n    const chartLabel = currentAlert == null ? void 0 : (_currentAlert$chart2 = currentAlert.chart) == null ? void 0 : _currentAlert$chart2.label;\n    const dashboardLabel = currentAlert == null ? void 0 : (_currentAlert$dashboa2 = currentAlert.dashboard) == null ? void 0 : _currentAlert$dashboa2.label;\n    if (!(currentAlert != null && currentAlert.name)) {\n      setEmailSubject('');\n      return;\n    }\n    switch (contentType) {\n      case ContentType.Chart:\n        setEmailSubject(`${currentAlert == null ? void 0 : currentAlert.name}: ${chartLabel || ''}`);\n        break;\n      case ContentType.Dashboard:\n        setEmailSubject(`${currentAlert == null ? void 0 : currentAlert.name}: ${dashboardLabel || ''}`);\n        break;\n      default:\n        setEmailSubject('');\n    }\n  };\n  // Handle input/textarea updates\n  const onInputChange = (event) => {\n    const { target: { type, value, name } } = event;\n    const parsedValue = type === 'number' ? parseInt(value, 10) || null : value;\n    updateAlertState(name, parsedValue);\n    if (name === 'name') {\n      updateEmailSubject();\n    }\n  };\n  const onCustomWidthChange = (value) => {\n    const numValue = value === null ||\n    value === undefined ||\n    typeof value === 'string' && Number.isNaN(Number(value)) ?\n    null :\n    Number(value);\n    updateAlertState('custom_width', numValue);\n  };\n  const onTimeoutVerifyChange = (event) => {\n    const { target } = event;\n    const value = +target.value;\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, undefined);\n    } else\n    {\n      updateAlertState(target.name, value ? Math.max(value, TIMEOUT_MIN) : value);\n    }\n  };\n  const onSQLChange = (value) => {\n    updateAlertState('sql', value || '');\n  };\n  const onOwnersChange = (value) => {\n    updateAlertState('owners', value || []);\n  };\n  const onSourceChange = (value) => {\n    updateAlertState('database', value || []);\n  };\n  const onDashboardChange = (dashboard) => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n    if (tabsEnabled) {\n      setTabOptions([]);\n      updateAnchorState('');\n    }\n  };\n  const onChartChange = (chart) => {\n    getChartVisualizationType(chart);\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n  const onActiveSwitch = (checked) => {\n    updateAlertState('active', checked);\n  };\n  const onConditionChange = (op) => {var _currentAlert$validat;\n    setConditionNotNull(op === 'not null');\n    const config = {\n      op,\n      threshold: currentAlert ? (_currentAlert$validat =\n      currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat.threshold :\n      undefined\n    };\n    updateAlertState('validator_config_json', config);\n  };\n  const onThresholdChange = (event) => {var _currentAlert$validat2;\n    const { target } = event;\n    const config = {\n      op: currentAlert ? (_currentAlert$validat2 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat2.op : undefined,\n      threshold: target.value\n    };\n    updateAlertState('validator_config_json', config);\n  };\n  const onLogRetentionChange = (retention) => {\n    updateAlertState('log_retention', retention);\n  };\n  const onTimezoneChange = (timezone) => {\n    updateAlertState('timezone', timezone);\n  };\n  const onContentTypeChange = (value) => {\n    // When switch content type, reset force_screenshot to false\n    setForceScreenshot(false);\n    setContentType(value);\n  };\n  const onFormatChange = (value) => {\n    setReportFormat(value);\n  };\n  const onForceScreenshotChange = (event) => {\n    setForceScreenshot(event.target.checked);\n  };\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n    let hasInfo = false;\n    notificationSettings.forEach((setting) => {var _setting$recipients;\n      if (!!setting.method && (_setting$recipients = setting.recipients) != null && _setting$recipients.length) {\n        hasInfo = true;\n      }\n    });\n    return hasInfo;\n  };\n  const checkEmailFormat = () => {\n    if (!notificationSettings.length) {\n      return true;\n    }\n    const validateEmails = (emails) => {\n      if (!emails)\n      return true; // No emails to validate\n      return emails.\n      split(/[,;]/).\n      every((email) => EMAIL_REGEX.test(email.trim()));\n    };\n    // Use array method to check conditions\n    return notificationSettings.every((setting) => {\n      if (!!setting.method && setting.method === 'Email') {var _setting$recipients2;\n        return (!((_setting$recipients2 = setting.recipients) != null && _setting$recipients2.length) || validateEmails(setting.recipients)) && (\n        !setting.cc || validateEmails(setting.cc)) && (\n        !setting.bcc || validateEmails(setting.bcc));\n      }\n      return true; // Non-Email methods are considered valid\n    });\n  };\n  const validateGeneralSection = () => {var _currentAlert$name, _currentAlert$owners;\n    const errors = [];\n    if (!(currentAlert != null && (_currentAlert$name = currentAlert.name) != null && _currentAlert$name.length)) {\n      errors.push(TRANSLATIONS.NAME_ERROR_TEXT);\n    }\n    if (!(currentAlert != null && (_currentAlert$owners = currentAlert.owners) != null && _currentAlert$owners.length)) {\n      errors.push(TRANSLATIONS.OWNERS_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.General, errors);\n  };\n  const validateContentSection = () => {\n    const errors = [];\n    if (!(contentType === ContentType.Dashboard && !!(currentAlert != null && currentAlert.dashboard) ||\n    contentType === ContentType.Chart && !!(currentAlert != null && currentAlert.chart))) {\n      errors.push(TRANSLATIONS.CONTENT_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Content, errors);\n  };\n  const validateAlertSection = () => {var _currentAlert$sql, _currentAlert$validat3, _currentAlert$validat4;\n    const errors = [];\n    if (!(currentAlert != null && currentAlert.database)) {\n      errors.push(TRANSLATIONS.DATABASE_ERROR_TEXT);\n    }\n    if (!(currentAlert != null && (_currentAlert$sql = currentAlert.sql) != null && _currentAlert$sql.length)) {\n      errors.push(TRANSLATIONS.SQL_ERROR_TEXT);\n    }\n    if (!((conditionNotNull || !!(currentAlert != null && (_currentAlert$validat3 = currentAlert.validator_config_json) != null && _currentAlert$validat3.op)) && (\n    conditionNotNull ||\n    (currentAlert == null ? void 0 : (_currentAlert$validat4 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat4.threshold) !== undefined))) {\n      errors.push(TRANSLATIONS.ALERT_CONDITION_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Alert, errors);\n  };\n  const validateScheduleSection = () => {var _currentAlert$crontab;\n    const errors = [];\n    if (!(currentAlert != null && (_currentAlert$crontab = currentAlert.crontab) != null && _currentAlert$crontab.length)) {\n      errors.push(TRANSLATIONS.CRONTAB_ERROR_TEXT);\n    }\n    if (!(currentAlert != null && currentAlert.working_timeout)) {\n      errors.push(TRANSLATIONS.WORKING_TIMEOUT_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Schedule, errors);\n  };\n  const validateNotificationSection = () => {\n    const errors = [];\n    const hasErrors = !checkNotificationSettings();\n    if (hasErrors) {\n      errors.push(TRANSLATIONS.RECIPIENTS_ERROR_TEXT);\n    } else\n    {\n      // Check for email format errors\n      const hasValidationErrors = !checkEmailFormat();\n      if (hasValidationErrors) {\n        errors.push(TRANSLATIONS.EMAIL_VALIDATION_ERROR_TEXT);\n      }\n    }\n    if (emailError) {\n      errors.push(TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT);\n    }\n    // Update validation status with combined errors\n    updateValidationStatus(Sections.Notification, errors);\n  };\n  const validateAll = () => {\n    validateGeneralSection();\n    validateContentSection();\n    if (!isReport)\n    validateAlertSection();\n    validateScheduleSection();\n    validateNotificationSection();\n  };\n  const enforceValidation = () => {\n    const sections = [\n    Sections.General,\n    Sections.Content,\n    isReport ? undefined : Sections.Alert,\n    Sections.Schedule,\n    Sections.Notification];\n\n    const hasErrors = sections.some((section) => section && validationStatus[section].hasErrors);\n    const tooltip = hasErrors ? buildErrorTooltipMessage(validationStatus) : '';\n    setErrorTooltipMessage(tooltip);\n    setDisableSave(hasErrors);\n  };\n  // Initialize\n  useEffect(() => {\n    if (isEditMode && (\n    !(currentAlert != null && currentAlert.id) || (alert == null ? void 0 : alert.id) !== currentAlert.id || isHidden && show)) {\n      if ((alert == null ? void 0 : alert.id) !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else\n    if (!isEditMode && (\n    !currentAlert || currentAlert.id || isHidden && show)) {\n      setCurrentAlert({\n        ...defaultAlert,\n        owners: currentUser ?\n        [\n        {\n          value: currentUser.userId,\n          label: `${currentUser.firstName} ${currentUser.lastName}`\n        }] :\n\n        []\n      });\n      setNotificationSettings([\n      {\n        recipients: '',\n        cc: '',\n        bcc: '',\n        options: allowedNotificationMethods,\n        method: NotificationMethodOption.Email\n      }]\n      );\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n  useEffect(() => {\n    if (resource) {\n      // Add notification settings\n      const settings = (resource.recipients || []).map((setting) => {\n        const config = typeof setting.recipient_config_json === 'string' ?\n        JSON.parse(setting.recipient_config_json) :\n        {};\n        return {\n          method: setting.type,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: allowedNotificationMethods,\n          cc: config.ccTarget || '',\n          bcc: config.bccTarget || ''\n        };\n      });\n      setNotificationSettings(settings);\n      setNotificationAddState(settings.length === allowedNotificationMethods.length ?\n      'hidden' :\n      'active');\n      setContentType(resource.chart ? ContentType.Chart : ContentType.Dashboard);\n      setReportFormat(resource.report_format || DEFAULT_NOTIFICATION_FORMAT);\n      const validatorConfig = typeof resource.validator_config_json === 'string' ?\n      JSON.parse(resource.validator_config_json) :\n      resource.validator_config_json;\n      setConditionNotNull(resource.validator_type === 'not null');\n      if (resource.chart) {\n        setChartVizType(resource.chart.viz_type);\n      }\n      setForceScreenshot(resource.force_screenshot);\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart ?\n        getChartData(resource.chart) || {\n          value: resource.chart.id,\n          label: resource.chart.slice_name\n        } :\n        undefined,\n        dashboard: resource.dashboard ?\n        getDashboardData(resource.dashboard) || {\n          value: resource.dashboard.id,\n          label: resource.dashboard.dashboard_title\n        } :\n        undefined,\n        database: resource.database ?\n        getSourceData(resource.database) || {\n          value: resource.database.id,\n          label: resource.database.database_name\n        } :\n        undefined,\n        owners: ((alert == null ? void 0 : alert.owners) || []).map((owner) => ({\n          value: owner.value || owner.id,\n          label: owner.label ||\n          `${owner.first_name} ${owner.last_name}`\n        })),\n        // @ts-ignore: Type not assignable\n        validator_config_json: resource.validator_type === 'not null' ?\n        {\n          op: 'not null'\n        } :\n        validatorConfig\n      });\n    }\n  }, [resource]);\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validateAll();\n    updateEmailSubject();\n  }, [\n  currentAlertSafe.name,\n  currentAlertSafe.owners,\n  currentAlertSafe.database,\n  currentAlertSafe.sql,\n  currentAlertSafe.validator_config_json,\n  currentAlertSafe.crontab,\n  currentAlertSafe.working_timeout,\n  currentAlertSafe.dashboard,\n  currentAlertSafe.chart,\n  contentType,\n  notificationSettings,\n  conditionNotNull,\n  emailError]\n  );\n  useEffect(() => {\n    enforceValidation();\n  }, [validationStatus]);\n  const allowedNotificationMethodsCount = useMemo(() => allowedNotificationMethods.reduce((accum, setting) => {\n    if (accum.some((nm) => nm.includes('slack')) &&\n    setting.toLowerCase().includes('slack')) {\n      return accum;\n    }\n    return [...accum, setting.toLowerCase()];\n  }, []).length, [allowedNotificationMethods]);\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n  const getTitleText = () => {\n    let titleText;\n    switch (true) {\n      case isEditMode && isReport:\n        titleText = t('Edit Report');\n        break;\n      case isEditMode:\n        titleText = t('Edit Alert');\n        break;\n      case isReport:\n        titleText = t('Add Report');\n        break;\n      default:\n        titleText = t('Add Alert');\n        break;\n    }\n    return titleText;\n  };\n  const handleErrorUpdate = (hasError) => {\n    setEmailError(hasError);\n  };\n  return _jsx(StyledModal, { className: \"no-content-padding\", responsive: true, disablePrimaryButton: disableSave, primaryTooltipMessage: errorTooltipMessage, onHandledPrimaryAction: onSave, onHide: hide, primaryButtonName: isEditMode ? t('Save') : t('Add'), show: show, width: \"500px\", centered: true, title: _jsx(\"h4\", { \"data-test\": \"alert-report-modal-title\", children: getTitleText() }), children:\n    _jsxs(Collapse, { expandIconPosition: \"right\", defaultActiveKey: \"general\", accordion: true, css: css`\n          border: 'none';\n        `, children: [\n      _jsx(StyledPanel, { header: _jsx(ValidatedPanelHeader, { title: TRANSLATIONS.GENERAL_TITLE, subtitle: t('Set up basic details, such as name and description.'), validateCheckStatus: !validationStatus[Sections.General].hasErrors, testId: \"general-information-panel\" }), children:\n        _jsxs(\"div\", { className: \"header-section\", children: [\n          _jsxs(StyledInputContainer, { children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              isReport ? t('Report name') : t('Alert name'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(\"div\", { className: \"input-container\", children:\n              _jsx(\"input\", { type: \"text\", name: \"name\", value: currentAlert ? currentAlert.name : '', placeholder: isReport ? t('Enter report name') : t('Enter alert name'), onChange: onInputChange }) }\n            )] }\n          ),\n          _jsxs(StyledInputContainer, { children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              t('Owners'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(\"div\", { \"data-test\": \"owners-select\", className: \"input-container\", children:\n              _jsx(AsyncSelect, { ariaLabel: t('Owners'), allowClear: true, name: \"owners\", mode: \"multiple\", placeholder: t('Select owners'), value: (currentAlert == null ? void 0 : currentAlert.owners) || [], options: loadOwnerOptions, onChange: onOwnersChange }) }\n            )] }\n          ),\n          _jsxs(StyledInputContainer, { children: [\n            _jsx(\"div\", { className: \"control-label\", children: t('Description') }),\n            _jsx(\"div\", { className: \"input-container\", children:\n              _jsx(\"input\", { type: \"text\", name: \"description\", value: currentAlert ? currentAlert.description || '' : '', placeholder: t('Include description to be sent with %s', reportOrAlert), onChange: onInputChange }) }\n            )] }\n          ),\n          _jsxs(StyledSwitchContainer, { children: [\n            _jsx(Switch, { checked: currentAlert ? currentAlert.active : false, defaultChecked: true, onChange: onActiveSwitch }),\n            _jsx(\"div\", { className: \"switch-label\", children:\n              isReport ? t('Report is active') : t('Alert is active') }\n            )] }\n          )] }\n        ) }, \"general\"\n      ),\n      !isReport && _jsxs(StyledPanel, { header: _jsx(ValidatedPanelHeader, { title: TRANSLATIONS.ALERT_CONDITION_TITLE, subtitle: t('Define the database, SQL query, and triggering conditions for alert.'), validateCheckStatus: !validationStatus[Sections.Alert].hasErrors, testId: \"alert-condition-panel\" }), children: [\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('Database'),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(AsyncSelect, { ariaLabel: t('Database'), name: \"source\", placeholder: t('Select database'), value: currentAlert != null && (_currentAlert$databas2 = currentAlert.database) != null && _currentAlert$databas2.label &&\n              currentAlert != null && (_currentAlert$databas3 = currentAlert.database) != null && _currentAlert$databas3.value ?\n              {\n                value: currentAlert.database.value,\n                label: currentAlert.database.label\n              } :\n              undefined, options: loadSourceOptions, onChange: onSourceChange }) }\n          )] }\n        ),\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('SQL Query'),\n            _jsx(StyledTooltip, { tooltip: t('The result of this query must be a value capable of numeric interpretation e.g. 1, 1.0, or \"1\" (compatible with Python\\'s float() function).') }),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(TextAreaControl, { name: \"sql\", language: \"sql\", offerEditInModal: false, minLines: 15, maxLines: 15, onChange: onSQLChange, readOnly: false, initialValue: resource == null ? void 0 : resource.sql }, currentAlert == null ? void 0 : currentAlert.id)] }\n        ),\n        _jsxs(\"div\", { className: \"inline-container wrap\", children: [\n          _jsxs(StyledInputContainer, { css: noMarginBottom, children: [\n            _jsxs(\"div\", { className: \"control-label\", css: inputSpacer, children: [\n              t('Trigger Alert If...'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(\"div\", { className: \"input-container\", children:\n              _jsx(Select, { ariaLabel: t('Condition'), onChange: onConditionChange, placeholder: t('Condition'), value: (currentAlert == null ? void 0 : (_currentAlert$validat5 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat5.op) || undefined, options: CONDITIONS, css: inputSpacer }) }\n            )] }\n          ),\n          _jsxs(StyledInputContainer, { css: noMarginBottom, children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              t('Value'), ' ',\n              !conditionNotNull && _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(\"div\", { className: \"input-container\", children:\n              _jsx(\"input\", { type: \"number\", name: \"threshold\", disabled: conditionNotNull, value: (currentAlert == null ? void 0 : (_currentAlert$validat6 = currentAlert.validator_config_json) == null ? void 0 : _currentAlert$validat6.threshold) !==\n                undefined && !conditionNotNull ?\n                currentAlert.validator_config_json.threshold :\n                '', placeholder: t('Value'), onChange: onThresholdChange }) }\n            )] }\n          )] }\n        )] }, \"condition\"\n      ),\n      _jsxs(StyledPanel, { header: _jsx(ValidatedPanelHeader, { title: isReport ?\n          TRANSLATIONS.REPORT_CONTENTS_TITLE :\n          TRANSLATIONS.ALERT_CONTENTS_TITLE, subtitle: t('Customize data source, filters, and layout.'), validateCheckStatus: !validationStatus[Sections.Content].hasErrors, testId: \"contents-panel\" }), children: [\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('Content type'),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(Select, { ariaLabel: t('Select content type'), onChange: onContentTypeChange, value: contentType, options: CONTENT_TYPE_OPTIONS, placeholder: t('Select content type') })] }\n        ),\n        _jsx(StyledInputContainer, { children:\n          contentType === ContentType.Chart ? _jsxs(_Fragment, { children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              t('Select chart'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(AsyncSelect, { ariaLabel: t('Chart'), name: \"chart\", value: currentAlert != null && (_currentAlert$chart3 = currentAlert.chart) != null && _currentAlert$chart3.label && currentAlert != null && (_currentAlert$chart4 = currentAlert.chart) != null && _currentAlert$chart4.value ?\n              {\n                value: currentAlert.chart.value,\n                label: currentAlert.chart.label\n              } :\n              undefined, options: loadChartOptions, onChange: onChartChange, placeholder: t('Select chart to use') })] }\n          ) : _jsxs(_Fragment, { children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              t('Select dashboard'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(AsyncSelect, { ariaLabel: t('Dashboard'), name: \"dashboard\", value: currentAlert != null && (_currentAlert$dashboa3 = currentAlert.dashboard) != null && _currentAlert$dashboa3.label &&\n              currentAlert != null && (_currentAlert$dashboa4 = currentAlert.dashboard) != null && _currentAlert$dashboa4.value ?\n              {\n                value: currentAlert.dashboard.value,\n                label: currentAlert.dashboard.label\n              } :\n              undefined, options: loadDashboardOptions, onChange: onDashboardChange, placeholder: t('Select dashboard to use') })] }\n          ) }\n        ),\n        _jsx(StyledInputContainer, { css: ['PDF', 'TEXT', 'CSV'].includes(reportFormat) && noMarginBottom, children:\n          formatOptionEnabled && _jsxs(_Fragment, { children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              t('Content format'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(Select, { ariaLabel: t('Select format'), onChange: onFormatChange, value: reportFormat, options: contentType === ContentType.Dashboard ?\n              ['pdf', 'png'].map((key) => FORMAT_OPTIONS[key]) :\n              /* If chart is of text based viz type: show text\n              format option */\n              TEXT_BASED_VISUALIZATION_TYPES.includes(chartVizType) ?\n              Object.values(FORMAT_OPTIONS) :\n              ['pdf', 'png', 'csv'].map((key) => FORMAT_OPTIONS[key]), placeholder: t('Select format') })] }\n          ) }\n        ),\n        tabsEnabled && contentType === ContentType.Dashboard && _jsx(StyledInputContainer, { children:\n          _jsxs(_Fragment, { children: [\n            _jsx(\"div\", { className: \"control-label\", children: t('Select tab') }),\n            _jsx(StyledTreeSelect, { disabled: (tabOptions == null ? void 0 : tabOptions.length) === 0, treeData: tabOptions, value: currentAlert == null ? void 0 : (_currentAlert$extra2 = currentAlert.extra) == null ? void 0 : (_currentAlert$extra2$ = _currentAlert$extra2.dashboard) == null ? void 0 : _currentAlert$extra2$.anchor, onSelect: updateAnchorState, placeholder: t('Select a tab') })] }\n          ) }\n        ),\n        isScreenshot && _jsxs(StyledInputContainer, { css: !isReport && contentType === ContentType.Chart && noMarginBottom, children: [\n          _jsx(\"div\", { className: \"control-label\", children: t('Screenshot width') }),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(InputNumber, { type: \"number\", name: \"custom_width\", value: (currentAlert == null ? void 0 : currentAlert.custom_width) || undefined, min: 600, max: 2400, placeholder: t('Input custom width in pixels'), onChange: onCustomWidthChange }) }\n          )] }\n        ),\n        (isReport || contentType === ContentType.Dashboard) && _jsx(\"div\", { className: \"inline-container\", children:\n          _jsx(StyledCheckbox, { \"data-test\": \"bypass-cache\", className: \"checkbox\", checked: forceScreenshot, onChange: onForceScreenshotChange, children:\n            t('Ignore cache when generating report') }\n          ) }\n        )] }, \"contents\"\n      ),\n      _jsxs(StyledPanel, { header: _jsx(ValidatedPanelHeader, { title: TRANSLATIONS.SCHEDULE_TITLE, subtitle: t('Define delivery schedule, timezone, and frequency settings.'), validateCheckStatus: !validationStatus[Sections.Schedule].hasErrors, testId: \"schedule-panel\" }), children: [\n        _jsx(AlertReportCronScheduler, { value: (currentAlert == null ? void 0 : currentAlert.crontab) || '', onChange: (newVal) => updateAlertState('crontab', newVal) }),\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('Timezone'), \" \", _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(TimezoneSelector, { onTimezoneChange: onTimezoneChange, timezone: currentAlert == null ? void 0 : currentAlert.timezone, minWidth: \"100%\" })] }\n        ),\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('Log retention'),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(Select, { ariaLabel: t('Log retention'), placeholder: t('Log retention'), onChange: onLogRetentionChange, value: currentAlert == null ? void 0 : currentAlert.log_retention, options: RETENTION_OPTIONS, sortComparator: propertyComparator('value') }) }\n          )] }\n        ),\n        _jsx(StyledInputContainer, { css: noMarginBottom, children:\n          isReport ? _jsxs(_Fragment, { children: [\n            _jsxs(\"div\", { className: \"control-label\", children: [\n              t('Working timeout'),\n              _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n            ),\n            _jsx(\"div\", { className: \"input-container\", children:\n              _jsx(NumberInput, { min: 1, name: \"working_timeout\", value: (currentAlert == null ? void 0 : currentAlert.working_timeout) || '', placeholder: t('Time in seconds'), onChange: onTimeoutVerifyChange, timeUnit: t('seconds') }) }\n            )] }\n          ) : _jsxs(_Fragment, { children: [\n            _jsx(\"div\", { className: \"control-label\", children: t('Grace period') }),\n            _jsx(\"div\", { className: \"input-container\", children:\n              _jsx(NumberInput, { min: 1, name: \"grace_period\", value: (currentAlert == null ? void 0 : currentAlert.grace_period) || '', placeholder: t('Time in seconds'), onChange: onTimeoutVerifyChange, timeUnit: t('seconds') }) }\n            )] }\n          ) }\n        )] }, \"schedule\"\n      ),\n      _jsxs(StyledPanel, { header: _jsx(ValidatedPanelHeader, { title: TRANSLATIONS.NOTIFICATION_TITLE, subtitle: t('Choose notification method and recipients.'), validateCheckStatus: !validationStatus[Sections.Notification].hasErrors, testId: \"notification-method-panel\" }), children: [\n        notificationSettings.map((notificationSetting, i) => _jsx(StyledNotificationMethodWrapper, { children:\n          _jsx(NotificationMethod, { setting: notificationSetting, index: i, onUpdate: updateNotificationSetting, onRemove: removeNotificationSetting, onInputChange: onInputChange, email_subject: (currentAlert == null ? void 0 : currentAlert.email_subject) || '', defaultSubject: emailSubject || '', setErrorSubject: handleErrorUpdate }, `NotificationMethod-${i}`) }\n        )),\n\n        // Prohibit 'add notification method' button if only one present\n        allowedNotificationMethodsCount > notificationSettings.length && _jsx(NotificationMethodAdd, { \"data-test\": \"notification-add\", status: notificationAddState, onClick: onNotificationAdd })] }, \"notification\"\n      )] }\n    ) }\n  );\n};__signature__(AlertReportModal, \"useSelector{currentUser}\\nuseCommonConf{conf}\\nuseState{[disableSave, setDisableSave](true)}\\nuseState{[currentAlert, setCurrentAlert]}\\nuseState{[isHidden, setIsHidden](true)}\\nuseState{[contentType, setContentType]('dashboard')}\\nuseState{[reportFormat, setReportFormat](DEFAULT_NOTIFICATION_FORMAT)}\\nuseState{[forceScreenshot, setForceScreenshot](false)}\\nuseState{[isScreenshot, setIsScreenshot](false)}\\nuseEffect{}\\nuseState{[conditionNotNull, setConditionNotNull](false)}\\nuseState{[sourceOptions, setSourceOptions]([])}\\nuseState{[dashboardOptions, setDashboardOptions]([])}\\nuseState{[chartOptions, setChartOptions]([])}\\nuseState{[tabOptions, setTabOptions]([])}\\nuseState{[validationStatus, setValidationStatus]({\\n        [Sections.General]: {\\n            hasErrors: false,\\n            name: TRANSLATIONS.GENERAL_TITLE,\\n            errors: [],\\n        },\\n        [Sections.Content]: {\\n            hasErrors: false,\\n            name: isReport\\n                ? TRANSLATIONS.REPORT_CONTENTS_TITLE\\n                : TRANSLATIONS.ALERT_CONTENTS_TITLE,\\n            errors: [],\\n        },\\n        [Sections.Alert]: {\\n            hasErrors: false,\\n            name: TRANSLATIONS.ALERT_CONDITION_TITLE,\\n            errors: [],\\n        },\\n        [Sections.Schedule]: {\\n            hasErrors: false,\\n            name: TRANSLATIONS.SCHEDULE_TITLE,\\n            errors: [],\\n        },\\n        [Sections.Notification]: {\\n            hasErrors: false,\\n            name: TRANSLATIONS.NOTIFICATION_TITLE,\\n            errors: [],\\n        },\\n    })}\\nuseState{[errorTooltipMessage, setErrorTooltipMessage]('')}\\nuseState{[chartVizType, setChartVizType]('')}\\nuseState{[notificationAddState, setNotificationAddState]('active')}\\nuseState{[notificationSettings, setNotificationSettings]([])}\\nuseState{[emailSubject, setEmailSubject]('')}\\nuseState{[emailError, setEmailError](false)}\\nuseSelector{{ ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT, ALERT_REPORTS_DEFAULT_CRON_VALUE, ALERT_REPORTS_DEFAULT_RETENTION, }}\\nuseSingleViewResource{{ state: { loading, resource, error: fetchError }, fetchResource, createResource, updateResource, clearError, }}\\nuseMemo{loadOwnerOptions}\\nuseCallback{getSourceData}\\nuseMemo{loadSourceOptions}\\nuseEffect{}\\nuseEffect{}\\nuseMemo{loadDashboardOptions}\\nuseCallback{getChartData}\\nuseEffect{}\\nuseMemo{loadChartOptions}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseEffect{}\\nuseMemo{allowedNotificationMethodsCount}\", () => [useSelector, useCommonConf, useSelector, useSingleViewResource]);const _default =\nwithToasts(AlertReportModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(TIMEOUT_MIN, \"TIMEOUT_MIN\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(TEXT_BASED_VISUALIZATION_TYPES, \"TEXT_BASED_VISUALIZATION_TYPES\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_WORKING_TIMEOUT, \"DEFAULT_WORKING_TIMEOUT\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_CRON_VALUE, \"DEFAULT_CRON_VALUE\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_RETENTION, \"DEFAULT_RETENTION\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(EMAIL_REGEX, \"EMAIL_REGEX\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_NOTIFICATION_METHODS, \"DEFAULT_NOTIFICATION_METHODS\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_NOTIFICATION_FORMAT, \"DEFAULT_NOTIFICATION_FORMAT\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(DEFAULT_EXTRA_DASHBOARD_OPTIONS, \"DEFAULT_EXTRA_DASHBOARD_OPTIONS\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(CONDITIONS, \"CONDITIONS\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(RETENTION_OPTIONS, \"RETENTION_OPTIONS\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(CONTENT_TYPE_OPTIONS, \"CONTENT_TYPE_OPTIONS\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(FORMAT_OPTIONS, \"FORMAT_OPTIONS\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(noMarginBottom, \"noMarginBottom\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledModal, \"StyledModal\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledTreeSelect, \"StyledTreeSelect\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledSwitchContainer, \"StyledSwitchContainer\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledInputContainer, \"StyledInputContainer\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledCheckbox, \"StyledCheckbox\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledTooltip, \"StyledTooltip\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledNotificationAddButton, \"StyledNotificationAddButton\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(StyledNotificationMethodWrapper, \"StyledNotificationMethodWrapper\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(inputSpacer, \"inputSpacer\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(TRANSLATIONS, \"TRANSLATIONS\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(NotificationMethodAdd, \"NotificationMethodAdd\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(AlertReportModal, \"AlertReportModal\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");reactHotLoader.register(_default, \"default\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useState","useEffect","useMemo","useCallback","css","isFeatureEnabled","FeatureFlag","styled","SupersetClient","t","VizType","rison","useSingleViewResource","InputNumber","Switch","Modal","Collapse","TimezoneSelector","propertyComparator","withToasts","AntdCheckbox","AsyncSelect","Select","TreeSelect","TextAreaControl","useCommonConf","InfoTooltipWithTrigger","NotificationMethodOption","Sections","ContentType","useSelector","Icons","NumberInput","AlertReportCronScheduler","NotificationMethod","ValidatedPanelHeader","StyledPanel","buildErrorTooltipMessage","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TIMEOUT_MIN","TEXT_BASED_VISUALIZATION_TYPES","PivotTable","PairedTTest","DEFAULT_WORKING_TIMEOUT","DEFAULT_CRON_VALUE","DEFAULT_RETENTION","EMAIL_REGEX","DEFAULT_NOTIFICATION_METHODS","Email","DEFAULT_NOTIFICATION_FORMAT","DEFAULT_EXTRA_DASHBOARD_OPTIONS","dashboard","anchor","CONDITIONS","label","value","RETENTION_OPTIONS","CONTENT_TYPE_OPTIONS","FORMAT_OPTIONS","pdf","png","csv","txt","noMarginBottom","StyledModal","theme","gridUnit","StyledTreeSelect","StyledSwitchContainer","div","StyledInputContainer","colors","grayscale","base","typography","sizes","s","error","light1","light2","StyledCheckbox","StyledTooltip","StyledNotificationAddButton","primary","dark1","StyledNotificationMethodWrapper","inputSpacer","TRANSLATIONS","GENERAL_TITLE","ALERT_CONDITION_TITLE","ALERT_CONTENTS_TITLE","REPORT_CONTENTS_TITLE","SCHEDULE_TITLE","NOTIFICATION_TITLE","NAME_ERROR_TEXT","OWNERS_ERROR_TEXT","CONTENT_ERROR_TEXT","DATABASE_ERROR_TEXT","SQL_ERROR_TEXT","ALERT_CONDITION_ERROR_TEXT","CRONTAB_ERROR_TEXT","WORKING_TIMEOUT_ERROR_TEXT","RECIPIENTS_ERROR_TEXT","EMAIL_SUBJECT_ERROR_TEXT","EMAIL_VALIDATION_ERROR_TEXT","ERROR_TOOLTIP_MESSAGE","NotificationMethodAdd","status","onClick","checkStatus","className","children","PlusOutlined","iconSize","margin","verticalAlign","AlertReportModal","addDangerToast","onAdd","onHide","show","alert","isReport","addSuccessToast","_currentAlert$databas2","_currentAlert$databas3","_currentAlert$validat5","_currentAlert$validat6","_currentAlert$chart3","_currentAlert$chart4","_currentAlert$dashboa3","_currentAlert$dashboa4","_currentAlert$extra2","_currentAlert$extra2$","currentUser","state","user","conf","allowedNotificationMethods","ALERT_REPORTS_NOTIFICATION_METHODS","disableSave","setDisableSave","currentAlert","setCurrentAlert","isHidden","setIsHidden","contentType","setContentType","reportFormat","setReportFormat","forceScreenshot","setForceScreenshot","isScreenshot","setIsScreenshot","conditionNotNull","setConditionNotNull","sourceOptions","setSourceOptions","dashboardOptions","setDashboardOptions","chartOptions","setChartOptions","tabOptions","setTabOptions","validationStatus","setValidationStatus","General","hasErrors","name","errors","Content","Alert","Schedule","Notification","errorTooltipMessage","setErrorTooltipMessage","updateValidationStatus","section","currentValidationData","length","chartVizType","setChartVizType","reportOrAlert","isEditMode","formatOptionEnabled","AlertsAttachReports","tabsEnabled","AlertReportTabs","notificationAddState","setNotificationAddState","notificationSettings","setNotificationSettings","emailSubject","setEmailSubject","emailError","setEmailError","onNotificationAdd","recipients","options","filter","option","reduce","accum","setting","method","allowedNotificationMethodsCount","ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT","ALERT_REPORTS_DEFAULT_CRON_VALUE","ALERT_REPORTS_DEFAULT_RETENTION","_state$common","_conf$ALERT_REPORTS_D","_conf$ALERT_REPORTS_D2","_conf$ALERT_REPORTS_D3","common","defaultAlert","active","creation_method","crontab","extra","log_retention","working_timeout","owners","sql","email_subject","validator_config_json","validator_type","force_screenshot","grace_period","undefined","updateNotificationSetting","index","settings","_","idx","removeNotificationSetting","slice","splice","updateAnchorState","currentAlertData","_currentAlertData$ext","dashboardState","loading","resource","fetchError","fetchResource","createResource","updateResource","clearError","hide","onSave","_currentAlert$chart","_currentAlert$dashboa","_currentAlert$databas","forEach","push","recipient_config_json","target","ccTarget","cc","bccTarget","bcc","type","shouldEnableForceScreenshot","Chart","data","chart","Dashboard","custom_width","database","map","owner","id","report_format","context_markdown","update_id","created_by","last_eval_dttm","last_state","last_value","last_value_row_json","then","response","loadOwnerOptions","input","page","pageSize","query","encode","page_size","get","endpoint","json","result","item","text","totalCount","count","getSourceData","db","source","updateAlertState","loadSourceOptions","list","_currentAlert$extra","_currentAlert$extra$d","tab_tree","tabTree","all_tabs","allTabs","allTabsWithOrder","tab","title","JSON","stringify","parsedAnchor","parse","Array","isArray","isValidSubset","every","Error","catch","databaseLabel","loadDashboardOptions","encode_uri","getDashboardData","dash","getChartData","chartData","noChartLabel","loadChartOptions","getChartVisualizationType","viz_type","updateEmailSubject","_currentAlert$chart2","_currentAlert$dashboa2","chartLabel","dashboardLabel","onInputChange","event","parsedValue","parseInt","onCustomWidthChange","numValue","Number","isNaN","onTimeoutVerifyChange","Math","max","onSQLChange","onOwnersChange","onSourceChange","onDashboardChange","onChartChange","onActiveSwitch","checked","onConditionChange","op","_currentAlert$validat","config","threshold","onThresholdChange","_currentAlert$validat2","onLogRetentionChange","retention","onTimezoneChange","timezone","onContentTypeChange","onFormatChange","onForceScreenshotChange","checkNotificationSettings","hasInfo","_setting$recipients","checkEmailFormat","validateEmails","emails","split","email","test","trim","_setting$recipients2","validateGeneralSection","_currentAlert$name","_currentAlert$owners","validateContentSection","validateAlertSection","_currentAlert$sql","_currentAlert$validat3","_currentAlert$validat4","validateScheduleSection","_currentAlert$crontab","validateNotificationSection","hasValidationErrors","validateAll","enforceValidation","sections","some","tooltip","userId","firstName","lastName","validatorConfig","slice_name","dashboard_title","database_name","first_name","last_name","currentAlertSafe","nm","includes","toLowerCase","getTitleText","titleText","handleErrorUpdate","hasError","responsive","disablePrimaryButton","primaryTooltipMessage","onHandledPrimaryAction","primaryButtonName","width","centered","expandIconPosition","defaultActiveKey","accordion","header","subtitle","validateCheckStatus","testId","placeholder","onChange","ariaLabel","allowClear","mode","description","defaultChecked","language","offerEditInModal","minLines","maxLines","readOnly","initialValue","disabled","key","Object","values","treeData","onSelect","min","newVal","minWidth","sortComparator","timeUnit","notificationSetting","i","onUpdate","onRemove","defaultSubject","setErrorSubject","__signature__","_default","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/features/alerts/AlertReportModal.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ChangeEvent,\n  FunctionComponent,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  ReactNode,\n} from 'react';\n\nimport {\n  css,\n  isFeatureEnabled,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  SupersetTheme,\n  t,\n  VizType,\n} from '@superset-ui/core';\nimport rison from 'rison';\nimport { useSingleViewResource } from 'src/views/CRUD/hooks';\n\nimport { InputNumber } from 'src/components/Input';\nimport { Switch } from 'src/components/Switch';\nimport Modal from 'src/components/Modal';\nimport Collapse from 'src/components/Collapse';\nimport TimezoneSelector from 'src/components/TimezoneSelector';\nimport { propertyComparator } from 'src/components/Select/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport Owner from 'src/types/Owner';\nimport { AntdCheckbox, AsyncSelect, Select, TreeSelect } from 'src/components';\nimport TextAreaControl from 'src/explore/components/controls/TextAreaControl';\nimport { useCommonConf } from 'src/features/databases/state';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport {\n  NotificationMethodOption,\n  NotificationSetting,\n  AlertObject,\n  ChartObject,\n  DashboardObject,\n  DatabaseObject,\n  Extra,\n  MetaObject,\n  Operator,\n  Recipient,\n  AlertsReportsConfig,\n  ValidationObject,\n  Sections,\n  TabNode,\n  SelectValue,\n  ContentType,\n} from 'src/features/alerts/types';\nimport { useSelector } from 'react-redux';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport { Icons } from 'src/components/Icons';\nimport NumberInput from './components/NumberInput';\nimport { AlertReportCronScheduler } from './components/AlertReportCronScheduler';\nimport { NotificationMethod } from './components/NotificationMethod';\nimport ValidatedPanelHeader from './components/ValidatedPanelHeader';\nimport StyledPanel from './components/StyledPanel';\nimport { buildErrorTooltipMessage } from './buildErrorTooltipMessage';\n\nconst TIMEOUT_MIN = 1;\nconst TEXT_BASED_VISUALIZATION_TYPES = [\n  VizType.PivotTable,\n  'table',\n  VizType.PairedTTest,\n];\n\nexport interface AlertReportModalProps {\n  addSuccessToast: (msg: string) => void;\n  addDangerToast: (msg: string) => void;\n  alert?: AlertObject | null;\n  isReport?: boolean;\n  onAdd?: (alert?: AlertObject) => void;\n  onHide: () => void;\n  show: boolean;\n}\n\nconst DEFAULT_WORKING_TIMEOUT = 3600;\nconst DEFAULT_CRON_VALUE = '0 0 * * *'; // every day\nconst DEFAULT_RETENTION = 90;\nconst EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\nconst DEFAULT_NOTIFICATION_METHODS: NotificationMethodOption[] = [\n  NotificationMethodOption.Email,\n];\nconst DEFAULT_NOTIFICATION_FORMAT = 'PNG';\nconst DEFAULT_EXTRA_DASHBOARD_OPTIONS: Extra = {\n  dashboard: {\n    anchor: '',\n  },\n};\n\nconst CONDITIONS = [\n  {\n    label: t('< (Smaller than)'),\n    value: '<',\n  },\n  {\n    label: t('> (Larger than)'),\n    value: '>',\n  },\n  {\n    label: t('<= (Smaller or equal)'),\n    value: '<=',\n  },\n  {\n    label: t('>= (Larger or equal)'),\n    value: '>=',\n  },\n  {\n    label: t('== (Is equal)'),\n    value: '==',\n  },\n  {\n    label: t('!= (Is not equal)'),\n    value: '!=',\n  },\n  {\n    label: t('Not null'),\n    value: 'not null',\n  },\n];\n\nconst RETENTION_OPTIONS = [\n  {\n    label: t('None'),\n    value: 0,\n  },\n  {\n    label: t('30 days'),\n    value: 30,\n  },\n  {\n    label: t('60 days'),\n    value: 60,\n  },\n  {\n    label: t('90 days'),\n    value: 90,\n  },\n];\n\nconst CONTENT_TYPE_OPTIONS = [\n  {\n    label: t('Dashboard'),\n    value: 'dashboard',\n  },\n  {\n    label: t('Chart'),\n    value: 'chart',\n  },\n];\nconst FORMAT_OPTIONS = {\n  pdf: {\n    label: t('Send as PDF'),\n    value: 'PDF',\n  },\n  png: {\n    label: t('Send as PNG'),\n    value: 'PNG',\n  },\n  csv: {\n    label: t('Send as CSV'),\n    value: 'CSV',\n  },\n  txt: {\n    label: t('Send as text'),\n    value: 'TEXT',\n  },\n};\n\ntype FORMAT_OPTIONS_KEY = keyof typeof FORMAT_OPTIONS;\n\n// Apply to final text input components of each collapse panel\nconst noMarginBottom = css`\n  margin-bottom: 0;\n`;\n\n/*\nHeight of modal body defined here, total width defined at component invocation as antd prop.\n */\nconst StyledModal = styled(Modal)`\n  .antd5-modal-body {\n    height: 720px;\n  }\n\n  .control-label {\n    margin-top: ${({ theme }) => theme.gridUnit}px;\n  }\n\n  .ant-collapse > .ant-collapse-item {\n    border-bottom: none;\n  }\n\n  .inline-container {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    &.wrap {\n      flex-wrap: wrap;\n    }\n\n    > div {\n      flex: 1 1 auto;\n    }\n  }\n`;\n\nconst StyledTreeSelect = styled(TreeSelect)`\n  width: 100%;\n`;\n\nconst StyledSwitchContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n\n  .switch-label {\n    margin-left: 10px;\n  }\n`;\n\nexport const StyledInputContainer = styled.div`\n  ${({ theme }) => css`\n    flex: 1;\n    margin-top: 0px;\n    margin-bottom: ${theme.gridUnit * 4}px;\n\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input[type='number'] {\n      -moz-appearance: textfield;\n    }\n\n    .helper {\n      display: block;\n      color: ${theme.colors.grayscale.base};\n      font-size: ${theme.typography.sizes.s}px;\n      padding: ${theme.gridUnit}px 0;\n      text-align: left;\n    }\n\n    .required {\n      margin-left: ${theme.gridUnit / 2}px;\n      color: ${theme.colors.error.base};\n    }\n\n    .input-container {\n      display: flex;\n      align-items: center;\n\n      > div {\n        width: 100%;\n      }\n\n      label {\n        display: flex;\n        margin-right: ${theme.gridUnit * 2}px;\n      }\n\n      i {\n        margin: 0 ${theme.gridUnit}px;\n      }\n    }\n\n    input,\n    textarea {\n      flex: 1 1 auto;\n    }\n\n    input[disabled] {\n      color: ${theme.colors.grayscale.base};\n    }\n\n    textarea {\n      height: 300px;\n      resize: none;\n    }\n\n    input::placeholder,\n    textarea::placeholder {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    textarea,\n    input[type='text'],\n    input[type='number'] {\n      padding: ${theme.gridUnit}px ${theme.gridUnit * 2}px;\n      border-style: none;\n      border: 1px solid ${theme.colors.grayscale.light2};\n      border-radius: ${theme.gridUnit}px;\n\n      &[name='description'] {\n        flex: 1 1 auto;\n      }\n    }\n\n    .input-label {\n      margin-left: 10px;\n    }\n  `}\n`;\n\nconst StyledCheckbox = styled(AntdCheckbox)`\n  margin-top: ${({ theme }) => theme.gridUnit * 0}px;\n`;\n\nconst StyledTooltip = styled(InfoTooltipWithTrigger)`\n  margin-left: ${({ theme }) => theme.gridUnit}px;\n`;\n\n// Notification Method components\nconst StyledNotificationAddButton = styled.div`\n  ${({ theme }) => css`\n    color: ${theme.colors.primary.dark1};\n    cursor: pointer;\n\n    i {\n      margin-right: ${theme.gridUnit * 2}px;\n    }\n\n    &.disabled {\n      color: ${theme.colors.grayscale.light1};\n      cursor: default;\n    }\n  `}\n`;\n\nconst StyledNotificationMethodWrapper = styled.div`\n  .inline-container .input-container {\n    margin-left: 0;\n  }\n`;\n\nconst inputSpacer = (theme: SupersetTheme) => css`\n  margin-right: ${theme.gridUnit * 3}px;\n`;\n\ntype NotificationAddStatus = 'active' | 'disabled' | 'hidden';\n\ninterface NotificationMethodAddProps {\n  status: NotificationAddStatus;\n  onClick: () => void;\n}\n\nexport const TRANSLATIONS = {\n  // Panel titles\n  GENERAL_TITLE: t('General information'),\n  ALERT_CONDITION_TITLE: t('Alert condition'),\n  ALERT_CONTENTS_TITLE: t('Alert contents'),\n  REPORT_CONTENTS_TITLE: t('Report contents'),\n  SCHEDULE_TITLE: t('Schedule'),\n  NOTIFICATION_TITLE: t('Notification method'),\n  // Error text\n  NAME_ERROR_TEXT: t('name'),\n  OWNERS_ERROR_TEXT: t('owners'),\n  CONTENT_ERROR_TEXT: t('content type'),\n  DATABASE_ERROR_TEXT: t('database'),\n  SQL_ERROR_TEXT: t('sql'),\n  ALERT_CONDITION_ERROR_TEXT: t('alert condition'),\n  CRONTAB_ERROR_TEXT: t('crontab'),\n  WORKING_TIMEOUT_ERROR_TEXT: t('working timeout'),\n  RECIPIENTS_ERROR_TEXT: t('recipients'),\n  EMAIL_SUBJECT_ERROR_TEXT: t('email subject'),\n  EMAIL_VALIDATION_ERROR_TEXT: t('invalid email'),\n  ERROR_TOOLTIP_MESSAGE: t(\n    'Not all required fields are complete. Please provide the following:',\n  ),\n};\n\nconst NotificationMethodAdd: FunctionComponent<NotificationMethodAddProps> = ({\n  status = 'active',\n  onClick,\n}) => {\n  if (status === 'hidden') {\n    return null;\n  }\n\n  const checkStatus = () => {\n    if (status !== 'disabled') {\n      onClick();\n    }\n  };\n\n  return (\n    <StyledNotificationAddButton className={status} onClick={checkStatus}>\n      <Icons.PlusOutlined\n        iconSize=\"m\"\n        css={theme => ({\n          margin: `auto ${theme.gridUnit * 2}px auto 0`,\n          verticalAlign: 'middle',\n        })}\n      />\n      {status === 'active'\n        ? t('Add another notification method')\n        : t('Add delivery method')}\n    </StyledNotificationAddButton>\n  );\n};\n\nconst AlertReportModal: FunctionComponent<AlertReportModalProps> = ({\n  addDangerToast,\n  onAdd,\n  onHide,\n  show,\n  alert = null,\n  isReport = false,\n  addSuccessToast,\n}) => {\n  const currentUser = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  // Check config for alternate notification methods setting\n  const conf = useCommonConf();\n  const allowedNotificationMethods: NotificationMethodOption[] =\n    conf?.ALERT_REPORTS_NOTIFICATION_METHODS || DEFAULT_NOTIFICATION_METHODS;\n\n  const [disableSave, setDisableSave] = useState<boolean>(true);\n\n  const [currentAlert, setCurrentAlert] =\n    useState<Partial<AlertObject> | null>();\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [contentType, setContentType] = useState<string>('dashboard');\n  const [reportFormat, setReportFormat] = useState<string>(\n    DEFAULT_NOTIFICATION_FORMAT,\n  );\n  const [forceScreenshot, setForceScreenshot] = useState<boolean>(false);\n\n  const [isScreenshot, setIsScreenshot] = useState<boolean>(false);\n  useEffect(() => {\n    setIsScreenshot(reportFormat === 'PNG');\n  }, [reportFormat]);\n\n  // Dropdown options\n  const [conditionNotNull, setConditionNotNull] = useState<boolean>(false);\n  const [sourceOptions, setSourceOptions] = useState<MetaObject[]>([]);\n  const [dashboardOptions, setDashboardOptions] = useState<MetaObject[]>([]);\n  const [chartOptions, setChartOptions] = useState<MetaObject[]>([]);\n  const [tabOptions, setTabOptions] = useState<TabNode[]>([]);\n\n  // Validation\n  const [validationStatus, setValidationStatus] = useState<ValidationObject>({\n    [Sections.General]: {\n      hasErrors: false,\n      name: TRANSLATIONS.GENERAL_TITLE,\n      errors: [],\n    },\n    [Sections.Content]: {\n      hasErrors: false,\n      name: isReport\n        ? TRANSLATIONS.REPORT_CONTENTS_TITLE\n        : TRANSLATIONS.ALERT_CONTENTS_TITLE,\n      errors: [],\n    },\n    [Sections.Alert]: {\n      hasErrors: false,\n      name: TRANSLATIONS.ALERT_CONDITION_TITLE,\n      errors: [],\n    },\n    [Sections.Schedule]: {\n      hasErrors: false,\n      name: TRANSLATIONS.SCHEDULE_TITLE,\n      errors: [],\n    },\n    [Sections.Notification]: {\n      hasErrors: false,\n      name: TRANSLATIONS.NOTIFICATION_TITLE,\n      errors: [],\n    },\n  });\n  const [errorTooltipMessage, setErrorTooltipMessage] = useState<ReactNode>('');\n\n  const updateValidationStatus = (section: Sections, errors: string[]) => {\n    setValidationStatus(currentValidationData => ({\n      ...currentValidationData,\n      [section]: {\n        hasErrors: errors.length > 0,\n        name: currentValidationData[section].name,\n        errors,\n      },\n    }));\n  };\n\n  // Chart metadata\n  const [chartVizType, setChartVizType] = useState<string>('');\n\n  const reportOrAlert = isReport ? 'report' : 'alert';\n  const isEditMode = alert !== null;\n  const formatOptionEnabled =\n    isFeatureEnabled(FeatureFlag.AlertsAttachReports) || isReport;\n  const tabsEnabled = isFeatureEnabled(FeatureFlag.AlertReportTabs);\n\n  const [notificationAddState, setNotificationAddState] =\n    useState<NotificationAddStatus>('active');\n\n  const [notificationSettings, setNotificationSettings] = useState<\n    NotificationSetting[]\n  >([]);\n  const [emailSubject, setEmailSubject] = useState<string>('');\n  const [emailError, setEmailError] = useState(false);\n\n  const onNotificationAdd = () => {\n    setNotificationSettings([\n      ...notificationSettings,\n      {\n        recipients: '',\n        // options shown in the newly added notification method\n        options: allowedNotificationMethods.filter(\n          // are filtered such that\n          option =>\n            // options are not included\n            !notificationSettings.reduce(\n              // when it exists in previous notificationSettings\n              (accum, setting) => accum || option === setting.method,\n              false,\n            ),\n        ),\n      },\n    ]);\n\n    setNotificationAddState(\n      notificationSettings.length === allowedNotificationMethodsCount\n        ? 'hidden'\n        : 'disabled',\n    );\n  };\n\n  const {\n    ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    ALERT_REPORTS_DEFAULT_RETENTION,\n  } = useSelector<any, AlertsReportsConfig>(state => {\n    const conf = state.common?.conf;\n    return {\n      ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT:\n        conf?.ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT ?? DEFAULT_WORKING_TIMEOUT,\n      ALERT_REPORTS_DEFAULT_CRON_VALUE:\n        conf?.ALERT_REPORTS_DEFAULT_CRON_VALUE ?? DEFAULT_CRON_VALUE,\n      ALERT_REPORTS_DEFAULT_RETENTION:\n        conf?.ALERT_REPORTS_DEFAULT_RETENTION ?? DEFAULT_RETENTION,\n    };\n  });\n\n  const defaultAlert = {\n    active: true,\n    creation_method: 'alerts_reports',\n    crontab: ALERT_REPORTS_DEFAULT_CRON_VALUE,\n    extra: DEFAULT_EXTRA_DASHBOARD_OPTIONS,\n    log_retention: ALERT_REPORTS_DEFAULT_RETENTION,\n    working_timeout: ALERT_REPORTS_DEFAULT_WORKING_TIMEOUT,\n    name: '',\n    owners: [],\n    recipients: [],\n    sql: '',\n    email_subject: '',\n    validator_config_json: {},\n    validator_type: '',\n    force_screenshot: false,\n    grace_period: undefined,\n  };\n\n  const updateNotificationSetting = (\n    index: number,\n    setting: NotificationSetting,\n  ) => {\n    const settings: NotificationSetting[] = [...notificationSettings];\n    settings[index] = setting;\n\n    // if you've changed notification method -> remove trailing methods\n    if (notificationSettings[index].method !== setting.method) {\n      notificationSettings[index] = setting;\n\n      setNotificationSettings(\n        notificationSettings.filter((_, idx) => idx <= index),\n      );\n\n      if (notificationSettings.length - 1 > index) {\n        setNotificationAddState('active');\n      }\n\n      if (setting.method !== undefined && notificationAddState !== 'hidden') {\n        setNotificationAddState('active');\n      }\n    } else {\n      setNotificationSettings(settings);\n    }\n  };\n\n  const removeNotificationSetting = (index: number) => {\n    const settings = notificationSettings.slice();\n\n    settings.splice(index, 1);\n    setNotificationSettings(settings);\n    setNotificationAddState('active');\n  };\n\n  const updateAnchorState = (value: any) => {\n    setCurrentAlert(currentAlertData => {\n      const dashboardState = currentAlertData?.extra?.dashboard;\n      const extra = {\n        dashboard: {\n          ...dashboardState,\n          anchor: value,\n        },\n      };\n      return {\n        ...currentAlertData,\n        extra,\n      };\n    });\n  };\n\n  // Alert fetch logic\n  const {\n    state: { loading, resource, error: fetchError },\n    fetchResource,\n    createResource,\n    updateResource,\n    clearError,\n  } = useSingleViewResource<AlertObject>('report', t('report'), addDangerToast);\n\n  // Functions\n  const hide = () => {\n    clearError();\n    setIsHidden(true);\n    onHide();\n    setNotificationSettings([]);\n    setCurrentAlert({ ...defaultAlert });\n    setNotificationAddState('active');\n  };\n\n  const onSave = () => {\n    // Notification Settings\n    const recipients: Recipient[] = [];\n\n    notificationSettings.forEach(setting => {\n      if (setting.method && setting.recipients.length) {\n        recipients.push({\n          recipient_config_json: {\n            target: setting.recipients,\n            ccTarget: setting.cc,\n            bccTarget: setting.bcc,\n          },\n          type: setting.method,\n        });\n      }\n    });\n\n    const shouldEnableForceScreenshot =\n      contentType === ContentType.Chart && !isReport;\n    const data: any = {\n      ...currentAlert,\n      type: isReport ? 'Report' : 'Alert',\n      force_screenshot: shouldEnableForceScreenshot || forceScreenshot,\n      validator_type: conditionNotNull ? 'not null' : 'operator',\n      validator_config_json: conditionNotNull\n        ? {}\n        : currentAlert?.validator_config_json,\n      chart:\n        contentType === ContentType.Chart ? currentAlert?.chart?.value : null,\n      dashboard:\n        contentType === ContentType.Dashboard\n          ? currentAlert?.dashboard?.value\n          : null,\n      custom_width: isScreenshot ? currentAlert?.custom_width : undefined,\n      database: currentAlert?.database?.value,\n      owners: (currentAlert?.owners || []).map(\n        owner => (owner as MetaObject).value || owner.id,\n      ),\n      recipients,\n      report_format: reportFormat || DEFAULT_NOTIFICATION_FORMAT,\n      extra: contentType === ContentType.Dashboard ? currentAlert?.extra : {},\n    };\n\n    if (data.recipients && !data.recipients.length) {\n      delete data.recipients;\n    }\n\n    data.context_markdown = 'string';\n    if (isEditMode) {\n      // Edit\n      if (currentAlert?.id) {\n        const update_id = currentAlert.id;\n\n        delete data.id;\n        delete data.created_by;\n        delete data.last_eval_dttm;\n        delete data.last_state;\n        delete data.last_value;\n        delete data.last_value_row_json;\n\n        updateResource(update_id, data).then(response => {\n          if (!response) {\n            return;\n          }\n\n          addSuccessToast(t('%s updated', data.type));\n\n          if (onAdd) {\n            onAdd();\n          }\n\n          hide();\n        });\n      }\n    } else if (currentAlert) {\n      // Create\n      createResource(data).then(response => {\n        if (!response) {\n          return;\n        }\n\n        addSuccessToast(t('%s updated', data.type));\n\n        if (onAdd) {\n          onAdd(response);\n        }\n\n        hide();\n      });\n    }\n  };\n\n  // Fetch data to populate form dropdowns\n  const loadOwnerOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/created_by?q=${query}`,\n        }).then(response => ({\n          data: response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          ),\n          totalCount: response.json.count,\n        }));\n      },\n    [],\n  );\n\n  const getSourceData = useCallback(\n    (db?: MetaObject) => {\n      const database = db || currentAlert?.database;\n\n      if (!database || database.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through source options to find the selected option\n      sourceOptions.forEach(source => {\n        if (source.value === database.value || source.value === database.id) {\n          result = source;\n        }\n      });\n\n      return result;\n    },\n    [currentAlert?.database, sourceOptions],\n  );\n\n  // Updating alert/report state\n  const updateAlertState = (name: string, value: any) => {\n    setCurrentAlert(currentAlertData => ({\n      ...currentAlertData,\n      [name]: value,\n    }));\n  };\n\n  const loadSourceOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/database?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setSourceOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const dashboard = currentAlert?.dashboard;\n  useEffect(() => {\n    if (!tabsEnabled) return;\n\n    if (dashboard?.value) {\n      SupersetClient.get({\n        endpoint: `/api/v1/dashboard/${dashboard.value}/tabs`,\n      })\n        .then(response => {\n          const { tab_tree: tabTree, all_tabs: allTabs } = response.json.result;\n          const allTabsWithOrder = tabTree.map(\n            (tab: { value: string }) => tab.value,\n          );\n\n          // Only show all tabs when there are more than one tab\n          if (allTabsWithOrder.length > 1) {\n            tabTree.push({\n              title: 'All Tabs',\n              // select tree only works with string value\n              value: JSON.stringify(allTabsWithOrder),\n            });\n          }\n\n          setTabOptions(tabTree);\n\n          const anchor = currentAlert?.extra?.dashboard?.anchor;\n          if (anchor) {\n            try {\n              const parsedAnchor = JSON.parse(anchor);\n              if (Array.isArray(parsedAnchor)) {\n                // Check if all elements in parsedAnchor list are in allTabs\n                const isValidSubset = parsedAnchor.every(tab => tab in allTabs);\n                if (!isValidSubset) {\n                  updateAnchorState(undefined);\n                }\n              } else {\n                throw new Error('Parsed value is not an array');\n              }\n            } catch (error) {\n              if (!(anchor in allTabs)) {\n                updateAnchorState(undefined);\n              }\n            }\n          }\n        })\n        .catch(() => {\n          addDangerToast(t('There was an error retrieving dashboard tabs.'));\n        });\n    }\n  }, [dashboard, tabsEnabled, currentAlert?.extra, addDangerToast]);\n\n  const databaseLabel = currentAlert?.database && !currentAlert.database.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (databaseLabel) {\n      updateAlertState('database', getSourceData());\n    }\n  }, [databaseLabel, getSourceData]);\n\n  const loadDashboardOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/dashboard?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n          setDashboardOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getDashboardData = (db?: MetaObject) => {\n    const dashboard = db || currentAlert?.dashboard;\n\n    if (!dashboard || dashboard.label) {\n      return null;\n    }\n\n    let result;\n\n    // Cycle through dashboard options to find the selected option\n    dashboardOptions.forEach(dash => {\n      if (dash.value === dashboard.value || dash.value === dashboard.id) {\n        result = dash;\n      }\n    });\n\n    return result;\n  };\n\n  const getChartData = useCallback(\n    (chartData?: MetaObject) => {\n      const chart = chartData || currentAlert?.chart;\n\n      if (!chart || chart.label) {\n        return null;\n      }\n\n      let result;\n\n      // Cycle through chart options to find the selected option\n      chartOptions.forEach(slice => {\n        if (slice.value === chart.value || slice.value === chart.id) {\n          result = slice;\n        }\n      });\n\n      return result;\n    },\n    [chartOptions, currentAlert?.chart],\n  );\n\n  const noChartLabel = currentAlert?.chart && !currentAlert?.chart.label;\n  useEffect(() => {\n    // Find source if current alert has one set\n    if (noChartLabel) {\n      updateAlertState('chart', getChartData());\n    }\n  }, [getChartData, noChartLabel]);\n\n  const loadChartOptions = useMemo(\n    () =>\n      (input = '', page: number, pageSize: number) => {\n        const query = rison.encode_uri({\n          filter: input,\n          page,\n          page_size: pageSize,\n        });\n        return SupersetClient.get({\n          endpoint: `/api/v1/report/related/chart?q=${query}`,\n        }).then(response => {\n          const list = response.json.result.map(\n            (item: { value: number; text: string }) => ({\n              value: item.value,\n              label: item.text,\n            }),\n          );\n\n          setChartOptions(list);\n          return { data: list, totalCount: response.json.count };\n        });\n      },\n    [],\n  );\n\n  const getChartVisualizationType = (chart: SelectValue) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/${chart.value}`,\n    }).then(response => setChartVizType(response.json.result.viz_type));\n\n  const updateEmailSubject = () => {\n    const chartLabel = currentAlert?.chart?.label;\n    const dashboardLabel = currentAlert?.dashboard?.label;\n    if (!currentAlert?.name) {\n      setEmailSubject('');\n      return;\n    }\n    switch (contentType) {\n      case ContentType.Chart:\n        setEmailSubject(`${currentAlert?.name}: ${chartLabel || ''}`);\n        break;\n\n      case ContentType.Dashboard:\n        setEmailSubject(`${currentAlert?.name}: ${dashboardLabel || ''}`);\n        break;\n\n      default:\n        setEmailSubject('');\n    }\n  };\n\n  // Handle input/textarea updates\n  const onInputChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const {\n      target: { type, value, name },\n    } = event;\n    const parsedValue = type === 'number' ? parseInt(value, 10) || null : value;\n\n    updateAlertState(name, parsedValue);\n\n    if (name === 'name') {\n      updateEmailSubject();\n    }\n  };\n\n  const onCustomWidthChange = (value: number | string | null | undefined) => {\n    const numValue =\n      value === null ||\n      value === undefined ||\n      (typeof value === 'string' && Number.isNaN(Number(value)))\n        ? null\n        : Number(value);\n    updateAlertState('custom_width', numValue);\n  };\n\n  const onTimeoutVerifyChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { target } = event;\n    const value = +target.value;\n\n    // Need to make sure grace period is not lower than TIMEOUT_MIN\n    if (value === 0) {\n      updateAlertState(target.name, undefined);\n    } else {\n      updateAlertState(\n        target.name,\n        value ? Math.max(value, TIMEOUT_MIN) : value,\n      );\n    }\n  };\n\n  const onSQLChange = (value: string) => {\n    updateAlertState('sql', value || '');\n  };\n\n  const onOwnersChange = (value: Array<SelectValue>) => {\n    updateAlertState('owners', value || []);\n  };\n\n  const onSourceChange = (value: Array<SelectValue>) => {\n    updateAlertState('database', value || []);\n  };\n\n  const onDashboardChange = (dashboard: SelectValue) => {\n    updateAlertState('dashboard', dashboard || undefined);\n    updateAlertState('chart', null);\n    if (tabsEnabled) {\n      setTabOptions([]);\n      updateAnchorState('');\n    }\n  };\n\n  const onChartChange = (chart: SelectValue) => {\n    getChartVisualizationType(chart);\n    updateAlertState('chart', chart || undefined);\n    updateAlertState('dashboard', null);\n  };\n\n  const onActiveSwitch = (checked: boolean) => {\n    updateAlertState('active', checked);\n  };\n\n  const onConditionChange = (op: Operator) => {\n    setConditionNotNull(op === 'not null');\n\n    const config = {\n      op,\n      threshold: currentAlert\n        ? currentAlert.validator_config_json?.threshold\n        : undefined,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onThresholdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    const config = {\n      op: currentAlert ? currentAlert.validator_config_json?.op : undefined,\n      threshold: target.value,\n    };\n\n    updateAlertState('validator_config_json', config);\n  };\n\n  const onLogRetentionChange = (retention: number) => {\n    updateAlertState('log_retention', retention);\n  };\n\n  const onTimezoneChange = (timezone: string) => {\n    updateAlertState('timezone', timezone);\n  };\n\n  const onContentTypeChange = (value: string) => {\n    // When switch content type, reset force_screenshot to false\n    setForceScreenshot(false);\n    setContentType(value);\n  };\n\n  const onFormatChange = (value: string) => {\n    setReportFormat(value);\n  };\n\n  const onForceScreenshotChange = (event: any) => {\n    setForceScreenshot(event.target.checked);\n  };\n\n  // Make sure notification settings has the required info\n  const checkNotificationSettings = () => {\n    if (!notificationSettings.length) {\n      return false;\n    }\n\n    let hasInfo = false;\n\n    notificationSettings.forEach(setting => {\n      if (!!setting.method && setting.recipients?.length) {\n        hasInfo = true;\n      }\n    });\n\n    return hasInfo;\n  };\n\n  const checkEmailFormat = () => {\n    if (!notificationSettings.length) {\n      return true;\n    }\n\n    const validateEmails = (emails: string): boolean => {\n      if (!emails) return true; // No emails to validate\n      return emails\n        .split(/[,;]/)\n        .every(email => EMAIL_REGEX.test(email.trim()));\n    };\n\n    // Use array method to check conditions\n    return notificationSettings.every(setting => {\n      if (!!setting.method && setting.method === 'Email') {\n        return (\n          (!setting.recipients?.length || validateEmails(setting.recipients)) &&\n          (!setting.cc || validateEmails(setting.cc)) &&\n          (!setting.bcc || validateEmails(setting.bcc))\n        );\n      }\n      return true; // Non-Email methods are considered valid\n    });\n  };\n\n  const validateGeneralSection = () => {\n    const errors = [];\n    if (!currentAlert?.name?.length) {\n      errors.push(TRANSLATIONS.NAME_ERROR_TEXT);\n    }\n    if (!currentAlert?.owners?.length) {\n      errors.push(TRANSLATIONS.OWNERS_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.General, errors);\n  };\n  const validateContentSection = () => {\n    const errors = [];\n    if (\n      !(\n        (contentType === ContentType.Dashboard && !!currentAlert?.dashboard) ||\n        (contentType === ContentType.Chart && !!currentAlert?.chart)\n      )\n    ) {\n      errors.push(TRANSLATIONS.CONTENT_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Content, errors);\n  };\n  const validateAlertSection = () => {\n    const errors = [];\n    if (!currentAlert?.database) {\n      errors.push(TRANSLATIONS.DATABASE_ERROR_TEXT);\n    }\n    if (!currentAlert?.sql?.length) {\n      errors.push(TRANSLATIONS.SQL_ERROR_TEXT);\n    }\n    if (\n      !(\n        (conditionNotNull || !!currentAlert?.validator_config_json?.op) &&\n        (conditionNotNull ||\n          currentAlert?.validator_config_json?.threshold !== undefined)\n      )\n    ) {\n      errors.push(TRANSLATIONS.ALERT_CONDITION_ERROR_TEXT);\n    }\n    updateValidationStatus(Sections.Alert, errors);\n  };\n\n  const validateScheduleSection = () => {\n    const errors = [];\n    if (!currentAlert?.crontab?.length) {\n      errors.push(TRANSLATIONS.CRONTAB_ERROR_TEXT);\n    }\n    if (!currentAlert?.working_timeout) {\n      errors.push(TRANSLATIONS.WORKING_TIMEOUT_ERROR_TEXT);\n    }\n\n    updateValidationStatus(Sections.Schedule, errors);\n  };\n\n  const validateNotificationSection = () => {\n    const errors = [];\n    const hasErrors = !checkNotificationSettings();\n\n    if (hasErrors) {\n      errors.push(TRANSLATIONS.RECIPIENTS_ERROR_TEXT);\n    } else {\n      // Check for email format errors\n      const hasValidationErrors = !checkEmailFormat();\n      if (hasValidationErrors) {\n        errors.push(TRANSLATIONS.EMAIL_VALIDATION_ERROR_TEXT);\n      }\n    }\n\n    if (emailError) {\n      errors.push(TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT);\n    }\n\n    // Update validation status with combined errors\n    updateValidationStatus(Sections.Notification, errors);\n  };\n\n  const validateAll = () => {\n    validateGeneralSection();\n    validateContentSection();\n    if (!isReport) validateAlertSection();\n    validateScheduleSection();\n    validateNotificationSection();\n  };\n\n  const enforceValidation = () => {\n    const sections = [\n      Sections.General,\n      Sections.Content,\n      isReport ? undefined : Sections.Alert,\n      Sections.Schedule,\n      Sections.Notification,\n    ];\n\n    const hasErrors = sections.some(\n      section => section && validationStatus[section].hasErrors,\n    );\n    const tooltip = hasErrors ? buildErrorTooltipMessage(validationStatus) : '';\n    setErrorTooltipMessage(tooltip);\n    setDisableSave(hasErrors);\n  };\n\n  // Initialize\n  useEffect(() => {\n    if (\n      isEditMode &&\n      (!currentAlert?.id || alert?.id !== currentAlert.id || (isHidden && show))\n    ) {\n      if (alert?.id !== null && !loading && !fetchError) {\n        const id = alert.id || 0;\n        fetchResource(id);\n      }\n    } else if (\n      !isEditMode &&\n      (!currentAlert || currentAlert.id || (isHidden && show))\n    ) {\n      setCurrentAlert({\n        ...defaultAlert,\n        owners: currentUser\n          ? [\n              {\n                value: currentUser.userId,\n                label: `${currentUser.firstName} ${currentUser.lastName}`,\n              },\n            ]\n          : [],\n      });\n      setNotificationSettings([\n        {\n          recipients: '',\n          cc: '',\n          bcc: '',\n          options: allowedNotificationMethods,\n          method: NotificationMethodOption.Email,\n        },\n      ]);\n      setNotificationAddState('active');\n    }\n  }, [alert]);\n\n  useEffect(() => {\n    if (resource) {\n      // Add notification settings\n      const settings = (resource.recipients || []).map(setting => {\n        const config =\n          typeof setting.recipient_config_json === 'string'\n            ? JSON.parse(setting.recipient_config_json)\n            : {};\n        return {\n          method: setting.type,\n          // @ts-ignore: Type not assignable\n          recipients: config.target || setting.recipient_config_json,\n          options: allowedNotificationMethods,\n          cc: config.ccTarget || '',\n          bcc: config.bccTarget || '',\n        };\n      });\n\n      setNotificationSettings(settings);\n      setNotificationAddState(\n        settings.length === allowedNotificationMethods.length\n          ? 'hidden'\n          : 'active',\n      );\n      setContentType(\n        resource.chart ? ContentType.Chart : ContentType.Dashboard,\n      );\n      setReportFormat(resource.report_format || DEFAULT_NOTIFICATION_FORMAT);\n      const validatorConfig =\n        typeof resource.validator_config_json === 'string'\n          ? JSON.parse(resource.validator_config_json)\n          : resource.validator_config_json;\n\n      setConditionNotNull(resource.validator_type === 'not null');\n\n      if (resource.chart) {\n        setChartVizType((resource.chart as ChartObject).viz_type);\n      }\n      setForceScreenshot(resource.force_screenshot);\n\n      setCurrentAlert({\n        ...resource,\n        chart: resource.chart\n          ? getChartData(resource.chart) || {\n              value: (resource.chart as ChartObject).id,\n              label: (resource.chart as ChartObject).slice_name,\n            }\n          : undefined,\n        dashboard: resource.dashboard\n          ? getDashboardData(resource.dashboard) || {\n              value: (resource.dashboard as DashboardObject).id,\n              label: (resource.dashboard as DashboardObject).dashboard_title,\n            }\n          : undefined,\n        database: resource.database\n          ? getSourceData(resource.database) || {\n              value: (resource.database as DatabaseObject).id,\n              label: (resource.database as DatabaseObject).database_name,\n            }\n          : undefined,\n        owners: (alert?.owners || []).map(owner => ({\n          value: (owner as MetaObject).value || owner.id,\n          label:\n            (owner as MetaObject).label ||\n            `${(owner as Owner).first_name} ${(owner as Owner).last_name}`,\n        })),\n        // @ts-ignore: Type not assignable\n        validator_config_json:\n          resource.validator_type === 'not null'\n            ? {\n                op: 'not null',\n              }\n            : validatorConfig,\n      });\n    }\n  }, [resource]);\n\n  // Validation\n  const currentAlertSafe = currentAlert || {};\n  useEffect(() => {\n    validateAll();\n    updateEmailSubject();\n  }, [\n    currentAlertSafe.name,\n    currentAlertSafe.owners,\n    currentAlertSafe.database,\n    currentAlertSafe.sql,\n    currentAlertSafe.validator_config_json,\n    currentAlertSafe.crontab,\n    currentAlertSafe.working_timeout,\n    currentAlertSafe.dashboard,\n    currentAlertSafe.chart,\n    contentType,\n    notificationSettings,\n    conditionNotNull,\n    emailError,\n  ]);\n  useEffect(() => {\n    enforceValidation();\n  }, [validationStatus]);\n\n  const allowedNotificationMethodsCount = useMemo(\n    () =>\n      allowedNotificationMethods.reduce((accum: string[], setting: string) => {\n        if (\n          accum.some(nm => nm.includes('slack')) &&\n          setting.toLowerCase().includes('slack')\n        ) {\n          return accum;\n        }\n        return [...accum, setting.toLowerCase()];\n      }, []).length,\n    [allowedNotificationMethods],\n  );\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  const getTitleText = () => {\n    let titleText;\n\n    switch (true) {\n      case isEditMode && isReport:\n        titleText = t('Edit Report');\n        break;\n      case isEditMode:\n        titleText = t('Edit Alert');\n        break;\n      case isReport:\n        titleText = t('Add Report');\n        break;\n      default:\n        titleText = t('Add Alert');\n        break;\n    }\n\n    return titleText;\n  };\n\n  const handleErrorUpdate = (hasError: boolean) => {\n    setEmailError(hasError);\n  };\n\n  return (\n    <StyledModal\n      className=\"no-content-padding\"\n      responsive\n      disablePrimaryButton={disableSave}\n      primaryTooltipMessage={errorTooltipMessage}\n      onHandledPrimaryAction={onSave}\n      onHide={hide}\n      primaryButtonName={isEditMode ? t('Save') : t('Add')}\n      show={show}\n      width=\"500px\"\n      centered\n      title={<h4 data-test=\"alert-report-modal-title\">{getTitleText()}</h4>}\n    >\n      <Collapse\n        expandIconPosition=\"right\"\n        defaultActiveKey=\"general\"\n        accordion\n        css={css`\n          border: 'none';\n        `}\n      >\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.GENERAL_TITLE}\n              subtitle={t(\n                'Set up basic details, such as name and description.',\n              )}\n              validateCheckStatus={\n                !validationStatus[Sections.General].hasErrors\n              }\n              testId=\"general-information-panel\"\n            />\n          }\n          key=\"general\"\n        >\n          <div className=\"header-section\">\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {isReport ? t('Report name') : t('Alert name')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  value={currentAlert ? currentAlert.name : ''}\n                  placeholder={\n                    isReport ? t('Enter report name') : t('Enter alert name')\n                  }\n                  onChange={onInputChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Owners')}\n                <span className=\"required\">*</span>\n              </div>\n              <div data-test=\"owners-select\" className=\"input-container\">\n                <AsyncSelect\n                  ariaLabel={t('Owners')}\n                  allowClear\n                  name=\"owners\"\n                  mode=\"multiple\"\n                  placeholder={t('Select owners')}\n                  value={\n                    (currentAlert?.owners as {\n                      label: string;\n                      value: number;\n                    }[]) || []\n                  }\n                  options={loadOwnerOptions}\n                  onChange={onOwnersChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">{t('Description')}</div>\n              <div className=\"input-container\">\n                <input\n                  type=\"text\"\n                  name=\"description\"\n                  value={currentAlert ? currentAlert.description || '' : ''}\n                  placeholder={t(\n                    'Include description to be sent with %s',\n                    reportOrAlert,\n                  )}\n                  onChange={onInputChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledSwitchContainer>\n              <Switch\n                checked={currentAlert ? currentAlert.active : false}\n                defaultChecked\n                onChange={onActiveSwitch}\n              />\n              <div className=\"switch-label\">\n                {isReport ? t('Report is active') : t('Alert is active')}\n              </div>\n            </StyledSwitchContainer>\n          </div>\n        </StyledPanel>\n        {!isReport && (\n          <StyledPanel\n            header={\n              <ValidatedPanelHeader\n                title={TRANSLATIONS.ALERT_CONDITION_TITLE}\n                subtitle={t(\n                  'Define the database, SQL query, and triggering conditions for alert.',\n                )}\n                validateCheckStatus={\n                  !validationStatus[Sections.Alert].hasErrors\n                }\n                testId=\"alert-condition-panel\"\n              />\n            }\n            key=\"condition\"\n          >\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('Database')}\n                <span className=\"required\">*</span>\n              </div>\n              <div className=\"input-container\">\n                <AsyncSelect\n                  ariaLabel={t('Database')}\n                  name=\"source\"\n                  placeholder={t('Select database')}\n                  value={\n                    currentAlert?.database?.label &&\n                    currentAlert?.database?.value\n                      ? {\n                          value: currentAlert.database.value,\n                          label: currentAlert.database.label,\n                        }\n                      : undefined\n                  }\n                  options={loadSourceOptions}\n                  onChange={onSourceChange}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t('SQL Query')}\n                <StyledTooltip\n                  tooltip={t(\n                    'The result of this query must be a value capable of numeric interpretation e.g. 1, 1.0, or \"1\" (compatible with Python\\'s float() function).',\n                  )}\n                />\n                <span className=\"required\">*</span>\n              </div>\n              <TextAreaControl\n                name=\"sql\"\n                language=\"sql\"\n                offerEditInModal={false}\n                minLines={15}\n                maxLines={15}\n                onChange={onSQLChange}\n                readOnly={false}\n                initialValue={resource?.sql}\n                key={currentAlert?.id}\n              />\n            </StyledInputContainer>\n            <div className=\"inline-container wrap\">\n              <StyledInputContainer css={noMarginBottom}>\n                <div className=\"control-label\" css={inputSpacer}>\n                  {t('Trigger Alert If...')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <Select\n                    ariaLabel={t('Condition')}\n                    onChange={onConditionChange}\n                    placeholder={t('Condition')}\n                    value={currentAlert?.validator_config_json?.op || undefined}\n                    options={CONDITIONS}\n                    css={inputSpacer}\n                  />\n                </div>\n              </StyledInputContainer>\n              <StyledInputContainer css={noMarginBottom}>\n                <div className=\"control-label\">\n                  {t('Value')}{' '}\n                  {!conditionNotNull && <span className=\"required\">*</span>}\n                </div>\n                <div className=\"input-container\">\n                  <input\n                    type=\"number\"\n                    name=\"threshold\"\n                    disabled={conditionNotNull}\n                    value={\n                      currentAlert?.validator_config_json?.threshold !==\n                        undefined && !conditionNotNull\n                        ? currentAlert.validator_config_json.threshold\n                        : ''\n                    }\n                    placeholder={t('Value')}\n                    onChange={onThresholdChange}\n                  />\n                </div>\n              </StyledInputContainer>\n            </div>\n          </StyledPanel>\n        )}\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={\n                isReport\n                  ? TRANSLATIONS.REPORT_CONTENTS_TITLE\n                  : TRANSLATIONS.ALERT_CONTENTS_TITLE\n              }\n              subtitle={t('Customize data source, filters, and layout.')}\n              validateCheckStatus={\n                !validationStatus[Sections.Content].hasErrors\n              }\n              testId=\"contents-panel\"\n            />\n          }\n          key=\"contents\"\n        >\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Content type')}\n              <span className=\"required\">*</span>\n            </div>\n            <Select\n              ariaLabel={t('Select content type')}\n              onChange={onContentTypeChange}\n              value={contentType}\n              options={CONTENT_TYPE_OPTIONS}\n              placeholder={t('Select content type')}\n            />\n          </StyledInputContainer>\n          <StyledInputContainer>\n            {contentType === ContentType.Chart ? (\n              <>\n                <div className=\"control-label\">\n                  {t('Select chart')}\n                  <span className=\"required\">*</span>\n                </div>\n                <AsyncSelect\n                  ariaLabel={t('Chart')}\n                  name=\"chart\"\n                  value={\n                    currentAlert?.chart?.label && currentAlert?.chart?.value\n                      ? {\n                          value: currentAlert.chart.value,\n                          label: currentAlert.chart.label,\n                        }\n                      : undefined\n                  }\n                  options={loadChartOptions}\n                  onChange={onChartChange}\n                  placeholder={t('Select chart to use')}\n                />\n              </>\n            ) : (\n              <>\n                <div className=\"control-label\">\n                  {t('Select dashboard')}\n                  <span className=\"required\">*</span>\n                </div>\n                <AsyncSelect\n                  ariaLabel={t('Dashboard')}\n                  name=\"dashboard\"\n                  value={\n                    currentAlert?.dashboard?.label &&\n                    currentAlert?.dashboard?.value\n                      ? {\n                          value: currentAlert.dashboard.value,\n                          label: currentAlert.dashboard.label,\n                        }\n                      : undefined\n                  }\n                  options={loadDashboardOptions}\n                  onChange={onDashboardChange}\n                  placeholder={t('Select dashboard to use')}\n                />\n              </>\n            )}\n          </StyledInputContainer>\n          <StyledInputContainer\n            css={\n              ['PDF', 'TEXT', 'CSV'].includes(reportFormat) && noMarginBottom\n            }\n          >\n            {formatOptionEnabled && (\n              <>\n                <div className=\"control-label\">\n                  {t('Content format')}\n                  <span className=\"required\">*</span>\n                </div>\n                <Select\n                  ariaLabel={t('Select format')}\n                  onChange={onFormatChange}\n                  value={reportFormat}\n                  options={\n                    contentType === ContentType.Dashboard\n                      ? ['pdf', 'png'].map(\n                          key => FORMAT_OPTIONS[key as FORMAT_OPTIONS_KEY],\n                        )\n                      : /* If chart is of text based viz type: show text\n                  format option */\n                        TEXT_BASED_VISUALIZATION_TYPES.includes(chartVizType)\n                        ? Object.values(FORMAT_OPTIONS)\n                        : ['pdf', 'png', 'csv'].map(\n                            key => FORMAT_OPTIONS[key as FORMAT_OPTIONS_KEY],\n                          )\n                  }\n                  placeholder={t('Select format')}\n                />\n              </>\n            )}\n          </StyledInputContainer>\n          {tabsEnabled && contentType === ContentType.Dashboard && (\n            <StyledInputContainer>\n              <>\n                <div className=\"control-label\">{t('Select tab')}</div>\n                <StyledTreeSelect\n                  disabled={tabOptions?.length === 0}\n                  treeData={tabOptions}\n                  value={currentAlert?.extra?.dashboard?.anchor}\n                  onSelect={updateAnchorState}\n                  placeholder={t('Select a tab')}\n                />\n              </>\n            </StyledInputContainer>\n          )}\n          {isScreenshot && (\n            <StyledInputContainer\n              css={\n                !isReport && contentType === ContentType.Chart && noMarginBottom\n              }\n            >\n              <div className=\"control-label\">{t('Screenshot width')}</div>\n              <div className=\"input-container\">\n                <InputNumber\n                  type=\"number\"\n                  name=\"custom_width\"\n                  value={currentAlert?.custom_width || undefined}\n                  min={600}\n                  max={2400}\n                  placeholder={t('Input custom width in pixels')}\n                  onChange={onCustomWidthChange}\n                />\n              </div>\n            </StyledInputContainer>\n          )}\n          {(isReport || contentType === ContentType.Dashboard) && (\n            <div className=\"inline-container\">\n              <StyledCheckbox\n                data-test=\"bypass-cache\"\n                className=\"checkbox\"\n                checked={forceScreenshot}\n                onChange={onForceScreenshotChange}\n              >\n                {t('Ignore cache when generating report')}\n              </StyledCheckbox>\n            </div>\n          )}\n        </StyledPanel>\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.SCHEDULE_TITLE}\n              subtitle={t(\n                'Define delivery schedule, timezone, and frequency settings.',\n              )}\n              validateCheckStatus={\n                !validationStatus[Sections.Schedule].hasErrors\n              }\n              testId=\"schedule-panel\"\n            />\n          }\n          key=\"schedule\"\n        >\n          <AlertReportCronScheduler\n            value={currentAlert?.crontab || ''}\n            onChange={newVal => updateAlertState('crontab', newVal)}\n          />\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Timezone')} <span className=\"required\">*</span>\n            </div>\n            <TimezoneSelector\n              onTimezoneChange={onTimezoneChange}\n              timezone={currentAlert?.timezone}\n              minWidth=\"100%\"\n            />\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Log retention')}\n              <span className=\"required\">*</span>\n            </div>\n            <div className=\"input-container\">\n              <Select\n                ariaLabel={t('Log retention')}\n                placeholder={t('Log retention')}\n                onChange={onLogRetentionChange}\n                value={currentAlert?.log_retention}\n                options={RETENTION_OPTIONS}\n                sortComparator={propertyComparator('value')}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer css={noMarginBottom}>\n            {isReport ? (\n              <>\n                <div className=\"control-label\">\n                  {t('Working timeout')}\n                  <span className=\"required\">*</span>\n                </div>\n                <div className=\"input-container\">\n                  <NumberInput\n                    min={1}\n                    name=\"working_timeout\"\n                    value={currentAlert?.working_timeout || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                    timeUnit={t('seconds')}\n                  />\n                </div>\n              </>\n            ) : (\n              <>\n                <div className=\"control-label\">{t('Grace period')}</div>\n                <div className=\"input-container\">\n                  <NumberInput\n                    min={1}\n                    name=\"grace_period\"\n                    value={currentAlert?.grace_period || ''}\n                    placeholder={t('Time in seconds')}\n                    onChange={onTimeoutVerifyChange}\n                    timeUnit={t('seconds')}\n                  />\n                </div>\n              </>\n            )}\n          </StyledInputContainer>\n        </StyledPanel>\n        <StyledPanel\n          header={\n            <ValidatedPanelHeader\n              title={TRANSLATIONS.NOTIFICATION_TITLE}\n              subtitle={t('Choose notification method and recipients.')}\n              validateCheckStatus={\n                !validationStatus[Sections.Notification].hasErrors\n              }\n              testId=\"notification-method-panel\"\n            />\n          }\n          key=\"notification\"\n        >\n          {notificationSettings.map((notificationSetting, i) => (\n            <StyledNotificationMethodWrapper>\n              <NotificationMethod\n                setting={notificationSetting}\n                index={i}\n                key={`NotificationMethod-${i}`}\n                onUpdate={updateNotificationSetting}\n                onRemove={removeNotificationSetting}\n                onInputChange={onInputChange}\n                email_subject={currentAlert?.email_subject || ''}\n                defaultSubject={emailSubject || ''}\n                setErrorSubject={handleErrorUpdate}\n              />\n            </StyledNotificationMethodWrapper>\n          ))}\n          {\n            // Prohibit 'add notification method' button if only one present\n            allowedNotificationMethodsCount > notificationSettings.length && (\n              <NotificationMethodAdd\n                data-test=\"notification-add\"\n                status={notificationAddState}\n                onClick={onNotificationAdd}\n              />\n            )\n          }\n        </StyledPanel>\n      </Collapse>\n    </StyledModal>\n  );\n};\n\nexport default withToasts(AlertReportModal);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}