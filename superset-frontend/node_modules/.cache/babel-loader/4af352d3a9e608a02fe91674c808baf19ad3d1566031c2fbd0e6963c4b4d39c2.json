{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useState, useEffect, useMemo } from 'react';\nimport rison from 'rison';\nimport { FeatureFlag, SupersetClient, isFeatureEnabled, styled, t, useTheme } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { Icons } from 'src/components/Icons';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport { NotificationMethodOption } from '../types';\nimport { StyledInputContainer } from '../AlertReportModal';import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nconst StyledNotificationMethod = styled.div`\n  ${({ theme }) => `\n    margin-bottom: ${theme.gridUnit * 3}px;\n\n    .input-container {\n      textarea {\n        height: auto;\n      }\n\n      &.error {\n        input {\n          border-color: ${theme.colors.error.base};\n        }\n      }\n\n      .helper {\n        margin-top: ${theme.gridUnit * 2}px;\n        font-size: ${theme.typography.sizes.s}px;\n        color: ${theme.colors.grayscale.base};\n      }\n    }\n\n    .inline-container {\n      margin-bottom: ${theme.gridUnit * 2}px;\n\n      > div {\n        margin: 0px;\n      }\n\n      .delete-button {\n        margin-left: ${theme.gridUnit * 2}px;\n        padding-top: ${theme.gridUnit}px;\n      }\n      .anticon {\n        margin-left: ${theme.gridUnit}px;\n      }\n    }\n\n    .ghost-button {\n      color: ${theme.colors.primary.dark1};\n      display: inline-flex;\n      align-items: center;\n      font-size: ${theme.typography.sizes.s}px;\n      cursor: pointer;\n\n      .icon {\n        width: ${theme.gridUnit * 3}px;\n        height: ${theme.gridUnit * 3}px;\n        font-size: ${theme.typography.sizes.s}px;\n        margin-right: ${theme.gridUnit}px;\n      }\n    }\n\n    .ghost-button + .ghost-button {\n      margin-left: ${theme.gridUnit * 4}px;\n    }\n\n    .ghost-button:first-child[style*='none'] + .ghost-button {\n      margin-left: 0px; /* Remove margin when the first button is hidden */\n    }\n  `}\n`;\nconst TRANSLATIONS = {\n  EMAIL_CC_NAME: t('CC recipients'),\n  EMAIL_BCC_NAME: t('BCC recipients'),\n  EMAIL_SUBJECT_NAME: t('Email subject name (optional)'),\n  EMAIL_SUBJECT_ERROR_TEXT: t('Please enter valid text. Spaces alone are not permitted.')\n};\nexport const mapSlackValues = ({ method, recipientValue, slackOptions }) => {\n  const prop = method === NotificationMethodOption.SlackV2 ? 'value' : 'label';\n  return recipientValue.\n  split(',').\n  map((recipient) => slackOptions.find((option) => option[prop].trim().toLowerCase() === recipient.trim().toLowerCase())).\n  filter((val) => !!val);\n};\nexport const mapChannelsToOptions = (result) => {\n  const publicChannels = [];\n  const privateChannels = [];\n  result.forEach((channel) => {\n    if (channel.is_private) {\n      privateChannels.push(channel);\n    } else\n    {\n      publicChannels.push(channel);\n    }\n  });\n  return [\n  {\n    label: 'Public Channels',\n    options: publicChannels.map((channel) => ({\n      label: `${channel.name} ${channel.is_member ? '' : t('(Bot not in channel)')}`,\n      value: channel.id,\n      key: channel.id\n    })),\n    key: 'public'\n  },\n  {\n    label: t('Private Channels (Bot in channel)'),\n    options: privateChannels.map((channel) => ({\n      label: channel.name,\n      value: channel.id,\n      key: channel.id\n    })),\n    key: 'private'\n  }];\n\n};\nexport const NotificationMethod = ({ setting = null, index, onUpdate, onRemove, onInputChange, email_subject, defaultSubject, setErrorSubject }) => {\n  const { method, recipients, cc, bcc, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState(recipients || '');\n  const [slackRecipients, setSlackRecipients] = useState([]);\n  const [error, setError] = useState(false);\n  const [ccVisible, setCcVisible] = useState(!!cc);\n  const [bccVisible, setBccVisible] = useState(!!bcc);\n  const [ccValue, setCcValue] = useState(cc || '');\n  const [bccValue, setBccValue] = useState(bcc || '');\n  const theme = useTheme();\n  const [methodOptionsLoading, setMethodOptionsLoading] = useState(true);\n  const [slackOptions, setSlackOptions] = useState([\n  {\n    label: '',\n    options: []\n  }]\n  );\n  const [useSlackV1, setUseSlackV1] = useState(false);\n  const [isSlackChannelsLoading, setIsSlackChannelsLoading] = useState(true);\n  const onMethodChange = (selected) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    setCcValue('');\n    setBccValue('');\n    if (onUpdate && setting) {\n      const updatedSetting = {\n        ...setting,\n        method: selected.value,\n        recipients: '',\n        cc: '',\n        bcc: ''\n      };\n      onUpdate(index, updatedSetting);\n    }\n  };\n  const fetchSlackChannels = async ({ searchString = '', types = [], exactMatch = false, force = false } = {}) => {\n    const queryString = rison.encode({\n      searchString,\n      types,\n      exactMatch,\n      force\n    });\n    const endpoint = `/api/v1/report/slack_channels/?q=${queryString}`;\n    return SupersetClient.get({ endpoint });\n  };\n  const updateSlackOptions = async ({ force } = {}) => {\n    setIsSlackChannelsLoading(true);\n    fetchSlackChannels({ types: ['public_channel', 'private_channel'], force }).\n    then(({ json }) => {\n      const { result } = json;\n      const options = mapChannelsToOptions(result);\n      setSlackOptions(options);\n      if (isFeatureEnabled(FeatureFlag.AlertReportSlackV2)) {\n        // for edit mode, map existing ids to names for display if slack v2\n        // or names to ids if slack v1\n        const [publicOptions, privateOptions] = options;\n        if (method &&\n        [\n        NotificationMethodOption.SlackV2,\n        NotificationMethodOption.Slack].\n        includes(method)) {\n          setSlackRecipients(mapSlackValues({\n            method,\n            recipientValue,\n            slackOptions: [\n            ...publicOptions.options,\n            ...privateOptions.options]\n\n          }));\n        }\n      }\n    }).\n    catch((e) => {\n      // Fallback to slack v1 if slack v2 is not compatible\n      setUseSlackV1(true);\n    }).\n    finally(() => {\n      setMethodOptionsLoading(false);\n      setIsSlackChannelsLoading(false);\n    });\n  };\n  useEffect(() => {var _slackOptions$;\n    const slackEnabled = options == null ? void 0 : options.some((option) => option === NotificationMethodOption.Slack ||\n    option === NotificationMethodOption.SlackV2);\n    if (slackEnabled && !((_slackOptions$ = slackOptions[0]) != null && _slackOptions$.options.length)) {\n      updateSlackOptions();\n    }\n  }, []);\n  const methodOptions = useMemo(() => (options || []).\n  filter((method) => isFeatureEnabled(FeatureFlag.AlertReportSlackV2) &&\n  !useSlackV1 &&\n  method === NotificationMethodOption.SlackV2 ||\n  (!isFeatureEnabled(FeatureFlag.AlertReportSlackV2) ||\n  useSlackV1) &&\n  method === NotificationMethodOption.Slack ||\n  method === NotificationMethodOption.Email).\n  map((method) => ({\n    label: method === NotificationMethodOption.SlackV2 ?\n    NotificationMethodOption.Slack :\n    method,\n    value: method\n  })), [options, useSlackV1]);\n  if (!setting) {\n    return null;\n  }\n  const onRecipientsChange = (event) => {\n    const { target } = event;\n    setRecipientValue(target.value);\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value\n      };\n      onUpdate(index, updatedSetting);\n    }\n  };\n  const onSlackRecipientsChange = (recipients) => {\n    setSlackRecipients(recipients);\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: recipients == null ? void 0 : recipients.map((obj) => obj.value).join(',')\n      };\n      onUpdate(index, updatedSetting);\n    }\n  };\n  const onSubjectChange = (event) => {\n    const { value } = event.target;\n    if (onInputChange) {\n      onInputChange(event);\n    }\n    const hasError = value.length > 0 && value.trim().length === 0;\n    setError(hasError);\n    if (setErrorSubject) {\n      setErrorSubject(hasError);\n    }\n  };\n  const onCcChange = (event) => {\n    const { target } = event;\n    setCcValue(target.value);\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        cc: target.value\n      };\n      onUpdate(index, updatedSetting);\n    }\n  };\n  const onBccChange = (event) => {\n    const { target } = event;\n    setBccValue(target.value);\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        bcc: target.value\n      };\n      onUpdate(index, updatedSetting);\n    }\n  };\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n  if (!!cc && ccValue !== cc) {\n    setCcValue(cc);\n  }\n  if (!!bcc && bccValue !== bcc) {\n    setBccValue(bcc);\n  }\n  return _jsxs(StyledNotificationMethod, { children: [\n    _jsx(\"div\", { className: \"inline-container\", children:\n      _jsxs(StyledInputContainer, { children: [\n        _jsx(\"div\", { className: \"control-label\", children: t('Notification Method') }),\n        _jsxs(\"div\", { className: \"input-container\", children: [\n          _jsx(Select, { ariaLabel: t('Delivery method'), \"data-test\": \"select-delivery-method\", labelInValue: true, onChange: onMethodChange, placeholder: t('Select Delivery Method'), options: methodOptions, showSearch: true, value: methodOptions.find((option) => option.value === method), loading: methodOptionsLoading }),\n          index !== 0 && !!onRemove ?\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n          _jsx(\"span\", { role: \"button\", tabIndex: 0, className: \"delete-button\", onClick: () => onRemove(index), children:\n            _jsx(Icons.DeleteOutlined, { iconSize: \"l\" }) }\n          ) : null] }\n        )] }\n      ) }\n    ),\n    method !== undefined ? _jsxs(_Fragment, { children: [\n      _jsx(\"div\", { className: \"inline-container\", children:\n        _jsx(StyledInputContainer, { children:\n          method === NotificationMethodOption.Email ? _jsxs(_Fragment, { children: [\n            _jsx(\"div\", { className: \"control-label\", children:\n              TRANSLATIONS.EMAIL_SUBJECT_NAME }\n            ),\n            _jsx(\"div\", { className: `input-container ${error ? 'error' : ''}`, children:\n              _jsx(\"input\", { type: \"text\", name: \"email_subject\", value: email_subject, placeholder: defaultSubject, onChange: onSubjectChange }) }\n            ),\n            error && _jsx(\"div\", { style: {\n                color: theme.colors.error.base,\n                fontSize: theme.gridUnit * 3\n              }, children:\n              TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT }\n            )] }\n          ) : null }\n        ) }\n      ),\n      _jsx(\"div\", { className: \"inline-container\", children:\n        _jsxs(StyledInputContainer, { children: [\n          _jsxs(\"div\", { className: \"control-label\", children: [\n            t('%s recipients', method === NotificationMethodOption.SlackV2 ?\n            NotificationMethodOption.Slack :\n            method),\n            _jsx(\"span\", { className: \"required\", children: \"*\" })] }\n          ),\n          _jsx(\"div\", { children:\n            [\n            NotificationMethodOption.Email,\n            NotificationMethodOption.Slack].\n            includes(method) ? _jsxs(_Fragment, { children: [\n              _jsx(\"div\", { className: \"input-container\", children:\n                _jsx(\"textarea\", { name: \"To\", \"data-test\": \"recipients\", value: recipientValue, onChange: onRecipientsChange }) }\n              ),\n              _jsx(\"div\", { className: \"input-container\", children:\n                _jsx(\"div\", { className: \"helper\", children:\n                  t('Recipients are separated by \",\" or \";\"') }\n                ) }\n              )] }\n            ) :\n            // for SlackV2\n            _jsxs(\"div\", { className: \"input-container\", children: [\n              _jsx(Select, { ariaLabel: t('Select channels'), mode: \"multiple\", name: \"recipients\", value: slackRecipients, options: slackOptions, onChange: onSlackRecipientsChange, allowClear: true, \"data-test\": \"recipients\", loading: isSlackChannelsLoading, allowSelectAll: false, labelInValue: true }),\n              _jsx(RefreshLabel, { onClick: () => updateSlackOptions({ force: true }), tooltipContent: t('Force refresh Slack channels list'), disabled: isSlackChannelsLoading })] }\n            ) }\n          )] }\n        ) }\n      ),\n      method === NotificationMethodOption.Email && _jsxs(StyledInputContainer, { children: [\n\n        ccVisible && _jsxs(_Fragment, { children: [\n          _jsx(\"div\", { className: \"control-label\", children:\n            TRANSLATIONS.EMAIL_CC_NAME }\n          ),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(\"textarea\", { name: \"CC\", \"data-test\": \"cc\", value: ccValue, onChange: onCcChange }) }\n          ),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(\"div\", { className: \"helper\", children:\n              t('Recipients are separated by \",\" or \";\"') }\n            ) }\n          )] }\n        ),\n\n        bccVisible && _jsxs(_Fragment, { children: [\n          _jsx(\"div\", { className: \"control-label\", children:\n            TRANSLATIONS.EMAIL_BCC_NAME }\n          ),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(\"textarea\", { name: \"BCC\", \"data-test\": \"bcc\", value: bccValue, onChange: onBccChange }) }\n          ),\n          _jsx(\"div\", { className: \"input-container\", children:\n            _jsx(\"div\", { className: \"helper\", children:\n              t('Recipients are separated by \",\" or \";\"') }\n            ) }\n          )] }\n        ),\n\n        _jsxs(\"div\", { className: \"ghost-button\", children: [\n          _jsxs(\"span\", { className: \"ghost-button\", role: \"button\", tabIndex: 0, onClick: () => setCcVisible(true), style: { display: ccVisible ? 'none' : 'inline-flex' }, children: [\n            _jsx(Icons.MailOutlined, { iconSize: \"xs\", className: \"icon\" }),\n            t('Add CC Recipients')] }\n          ),\n          _jsxs(\"span\", { className: \"ghost-button\", role: \"button\", tabIndex: 0, onClick: () => setBccVisible(true), style: { display: bccVisible ? 'none' : 'inline-flex' }, children: [\n            _jsx(Icons.MailOutlined, { iconSize: \"xs\", className: \"icon\" }),\n            t('Add BCC Recipients')] }\n          )] }\n        )] }\n      )] }\n    ) : null] }\n  );\n};__signature__(NotificationMethod, \"useState{[recipientValue, setRecipientValue](recipients || '')}\\nuseState{[slackRecipients, setSlackRecipients]([])}\\nuseState{[error, setError](false)}\\nuseState{[ccVisible, setCcVisible](!!cc)}\\nuseState{[bccVisible, setBccVisible](!!bcc)}\\nuseState{[ccValue, setCcValue](cc || '')}\\nuseState{[bccValue, setBccValue](bcc || '')}\\nuseTheme{theme}\\nuseState{[methodOptionsLoading, setMethodOptionsLoading](true)}\\nuseState{[slackOptions, setSlackOptions]([\\n        {\\n            label: '',\\n            options: [],\\n        },\\n    ])}\\nuseState{[useSlackV1, setUseSlackV1](false)}\\nuseState{[isSlackChannelsLoading, setIsSlackChannelsLoading](true)}\\nuseEffect{}\\nuseMemo{methodOptions}\", () => [useTheme]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledNotificationMethod, \"StyledNotificationMethod\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/components/NotificationMethod.tsx\");reactHotLoader.register(TRANSLATIONS, \"TRANSLATIONS\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/components/NotificationMethod.tsx\");reactHotLoader.register(mapSlackValues, \"mapSlackValues\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/components/NotificationMethod.tsx\");reactHotLoader.register(mapChannelsToOptions, \"mapChannelsToOptions\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/components/NotificationMethod.tsx\");reactHotLoader.register(NotificationMethod, \"NotificationMethod\", \"/Users/aryurkov/superset/superset-frontend/src/features/alerts/components/NotificationMethod.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"names":["useState","useEffect","useMemo","rison","FeatureFlag","SupersetClient","isFeatureEnabled","styled","t","useTheme","Select","Icons","RefreshLabel","NotificationMethodOption","StyledInputContainer","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","StyledNotificationMethod","div","theme","gridUnit","colors","error","base","typography","sizes","s","grayscale","primary","dark1","TRANSLATIONS","EMAIL_CC_NAME","EMAIL_BCC_NAME","EMAIL_SUBJECT_NAME","EMAIL_SUBJECT_ERROR_TEXT","mapSlackValues","method","recipientValue","slackOptions","prop","SlackV2","split","map","recipient","find","option","trim","toLowerCase","filter","val","mapChannelsToOptions","result","publicChannels","privateChannels","forEach","channel","is_private","push","label","options","name","is_member","value","id","key","NotificationMethod","setting","index","onUpdate","onRemove","onInputChange","email_subject","defaultSubject","setErrorSubject","recipients","cc","bcc","setRecipientValue","slackRecipients","setSlackRecipients","setError","ccVisible","setCcVisible","bccVisible","setBccVisible","ccValue","setCcValue","bccValue","setBccValue","methodOptionsLoading","setMethodOptionsLoading","setSlackOptions","useSlackV1","setUseSlackV1","isSlackChannelsLoading","setIsSlackChannelsLoading","onMethodChange","selected","updatedSetting","fetchSlackChannels","searchString","types","exactMatch","force","queryString","encode","endpoint","get","updateSlackOptions","then","json","AlertReportSlackV2","publicOptions","privateOptions","Slack","includes","catch","e","finally","_slackOptions$","slackEnabled","some","length","methodOptions","Email","onRecipientsChange","event","target","onSlackRecipientsChange","obj","join","onSubjectChange","hasError","onCcChange","onBccChange","children","className","ariaLabel","labelInValue","onChange","placeholder","showSearch","loading","role","tabIndex","onClick","DeleteOutlined","iconSize","undefined","type","style","color","fontSize","mode","allowClear","allowSelectAll","tooltipContent","disabled","display","MailOutlined","__signature__","reactHotLoader","reactHotLoaderGlobal","default","register","leaveModule","module"],"sources":["/Users/aryurkov/superset/superset-frontend/src/features/alerts/components/NotificationMethod.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  FunctionComponent,\n  useState,\n  ChangeEvent,\n  useEffect,\n  useMemo,\n} from 'react';\nimport rison from 'rison';\n\nimport {\n  FeatureFlag,\n  JsonResponse,\n  SupersetClient,\n  isFeatureEnabled,\n  styled,\n  t,\n  useTheme,\n} from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { Icons } from 'src/components/Icons';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport {\n  NotificationMethodOption,\n  NotificationSetting,\n  SlackChannel,\n} from '../types';\nimport { StyledInputContainer } from '../AlertReportModal';\n\nconst StyledNotificationMethod = styled.div`\n  ${({ theme }) => `\n    margin-bottom: ${theme.gridUnit * 3}px;\n\n    .input-container {\n      textarea {\n        height: auto;\n      }\n\n      &.error {\n        input {\n          border-color: ${theme.colors.error.base};\n        }\n      }\n\n      .helper {\n        margin-top: ${theme.gridUnit * 2}px;\n        font-size: ${theme.typography.sizes.s}px;\n        color: ${theme.colors.grayscale.base};\n      }\n    }\n\n    .inline-container {\n      margin-bottom: ${theme.gridUnit * 2}px;\n\n      > div {\n        margin: 0px;\n      }\n\n      .delete-button {\n        margin-left: ${theme.gridUnit * 2}px;\n        padding-top: ${theme.gridUnit}px;\n      }\n      .anticon {\n        margin-left: ${theme.gridUnit}px;\n      }\n    }\n\n    .ghost-button {\n      color: ${theme.colors.primary.dark1};\n      display: inline-flex;\n      align-items: center;\n      font-size: ${theme.typography.sizes.s}px;\n      cursor: pointer;\n\n      .icon {\n        width: ${theme.gridUnit * 3}px;\n        height: ${theme.gridUnit * 3}px;\n        font-size: ${theme.typography.sizes.s}px;\n        margin-right: ${theme.gridUnit}px;\n      }\n    }\n\n    .ghost-button + .ghost-button {\n      margin-left: ${theme.gridUnit * 4}px;\n    }\n\n    .ghost-button:first-child[style*='none'] + .ghost-button {\n      margin-left: 0px; /* Remove margin when the first button is hidden */\n    }\n  `}\n`;\n\nconst TRANSLATIONS = {\n  EMAIL_CC_NAME: t('CC recipients'),\n  EMAIL_BCC_NAME: t('BCC recipients'),\n  EMAIL_SUBJECT_NAME: t('Email subject name (optional)'),\n  EMAIL_SUBJECT_ERROR_TEXT: t(\n    'Please enter valid text. Spaces alone are not permitted.',\n  ),\n};\n\ninterface NotificationMethodProps {\n  setting?: NotificationSetting | null;\n  index: number;\n  onUpdate?: (index: number, updatedSetting: NotificationSetting) => void;\n  onRemove?: (index: number) => void;\n  onInputChange?: (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => void;\n  email_subject: string;\n  defaultSubject: string;\n  setErrorSubject: (hasError: boolean) => void;\n}\n\nexport const mapSlackValues = ({\n  method,\n  recipientValue,\n  slackOptions,\n}: {\n  method: string;\n  recipientValue: string;\n  slackOptions: { label: string; value: string }[];\n}) => {\n  const prop = method === NotificationMethodOption.SlackV2 ? 'value' : 'label';\n  return recipientValue\n    .split(',')\n    .map(recipient =>\n      slackOptions.find(\n        option =>\n          option[prop].trim().toLowerCase() === recipient.trim().toLowerCase(),\n      ),\n    )\n    .filter(val => !!val) as { label: string; value: string }[];\n};\n\nexport const mapChannelsToOptions = (result: SlackChannel[]) => {\n  const publicChannels: SlackChannel[] = [];\n  const privateChannels: SlackChannel[] = [];\n\n  result.forEach(channel => {\n    if (channel.is_private) {\n      privateChannels.push(channel);\n    } else {\n      publicChannels.push(channel);\n    }\n  });\n\n  return [\n    {\n      label: 'Public Channels',\n      options: publicChannels.map((channel: SlackChannel) => ({\n        label: `${channel.name} ${\n          channel.is_member ? '' : t('(Bot not in channel)')\n        }`,\n        value: channel.id,\n        key: channel.id,\n      })),\n      key: 'public',\n    },\n    {\n      label: t('Private Channels (Bot in channel)'),\n      options: privateChannels.map((channel: SlackChannel) => ({\n        label: channel.name,\n        value: channel.id,\n        key: channel.id,\n      })),\n      key: 'private',\n    },\n  ];\n};\n\ntype SlackOptionsType = {\n  label: string;\n  options: { label: string; value: string }[];\n}[];\n\nexport const NotificationMethod: FunctionComponent<NotificationMethodProps> = ({\n  setting = null,\n  index,\n  onUpdate,\n  onRemove,\n  onInputChange,\n  email_subject,\n  defaultSubject,\n  setErrorSubject,\n}) => {\n  const { method, recipients, cc, bcc, options } = setting || {};\n  const [recipientValue, setRecipientValue] = useState<string>(\n    recipients || '',\n  );\n  const [slackRecipients, setSlackRecipients] = useState<\n    { label: string; value: string }[]\n  >([]);\n  const [error, setError] = useState(false);\n  const [ccVisible, setCcVisible] = useState<boolean>(!!cc);\n  const [bccVisible, setBccVisible] = useState<boolean>(!!bcc);\n  const [ccValue, setCcValue] = useState<string>(cc || '');\n  const [bccValue, setBccValue] = useState<string>(bcc || '');\n  const theme = useTheme();\n  const [methodOptionsLoading, setMethodOptionsLoading] =\n    useState<boolean>(true);\n  const [slackOptions, setSlackOptions] = useState<SlackOptionsType>([\n    {\n      label: '',\n      options: [],\n    },\n  ]);\n\n  const [useSlackV1, setUseSlackV1] = useState<boolean>(false);\n  const [isSlackChannelsLoading, setIsSlackChannelsLoading] =\n    useState<boolean>(true);\n\n  const onMethodChange = (selected: {\n    label: string;\n    value: NotificationMethodOption;\n  }) => {\n    // Since we're swapping the method, reset the recipients\n    setRecipientValue('');\n    setCcValue('');\n    setBccValue('');\n\n    if (onUpdate && setting) {\n      const updatedSetting = {\n        ...setting,\n        method: selected.value,\n        recipients: '',\n        cc: '',\n        bcc: '',\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const fetchSlackChannels = async ({\n    searchString = '',\n    types = [],\n    exactMatch = false,\n    force = false,\n  }: {\n    searchString?: string | undefined;\n    types?: string[];\n    exactMatch?: boolean | undefined;\n    force?: boolean | undefined;\n  } = {}): Promise<JsonResponse> => {\n    const queryString = rison.encode({\n      searchString,\n      types,\n      exactMatch,\n      force,\n    });\n    const endpoint = `/api/v1/report/slack_channels/?q=${queryString}`;\n    return SupersetClient.get({ endpoint });\n  };\n\n  const updateSlackOptions = async ({\n    force,\n  }: {\n    force?: boolean | undefined;\n  } = {}) => {\n    setIsSlackChannelsLoading(true);\n    fetchSlackChannels({ types: ['public_channel', 'private_channel'], force })\n      .then(({ json }) => {\n        const { result } = json;\n        const options: SlackOptionsType = mapChannelsToOptions(result);\n\n        setSlackOptions(options);\n\n        if (isFeatureEnabled(FeatureFlag.AlertReportSlackV2)) {\n          // for edit mode, map existing ids to names for display if slack v2\n          // or names to ids if slack v1\n          const [publicOptions, privateOptions] = options;\n          if (\n            method &&\n            [\n              NotificationMethodOption.SlackV2,\n              NotificationMethodOption.Slack,\n            ].includes(method)\n          ) {\n            setSlackRecipients(\n              mapSlackValues({\n                method,\n                recipientValue,\n                slackOptions: [\n                  ...publicOptions.options,\n                  ...privateOptions.options,\n                ],\n              }),\n            );\n          }\n        }\n      })\n      .catch(e => {\n        // Fallback to slack v1 if slack v2 is not compatible\n        setUseSlackV1(true);\n      })\n      .finally(() => {\n        setMethodOptionsLoading(false);\n        setIsSlackChannelsLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    const slackEnabled = options?.some(\n      option =>\n        option === NotificationMethodOption.Slack ||\n        option === NotificationMethodOption.SlackV2,\n    );\n    if (slackEnabled && !slackOptions[0]?.options.length) {\n      updateSlackOptions();\n    }\n  }, []);\n\n  const methodOptions = useMemo(\n    () =>\n      (options || [])\n        .filter(\n          method =>\n            (isFeatureEnabled(FeatureFlag.AlertReportSlackV2) &&\n              !useSlackV1 &&\n              method === NotificationMethodOption.SlackV2) ||\n            ((!isFeatureEnabled(FeatureFlag.AlertReportSlackV2) ||\n              useSlackV1) &&\n              method === NotificationMethodOption.Slack) ||\n            method === NotificationMethodOption.Email,\n        )\n        .map(method => ({\n          label:\n            method === NotificationMethodOption.SlackV2\n              ? NotificationMethodOption.Slack\n              : method,\n          value: method,\n        })),\n    [options, useSlackV1],\n  );\n\n  if (!setting) {\n    return null;\n  }\n\n  const onRecipientsChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n\n    setRecipientValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onSlackRecipientsChange = (\n    recipients: { label: string; value: string }[],\n  ) => {\n    setSlackRecipients(recipients);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        recipients: recipients?.map(obj => obj.value).join(','),\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onSubjectChange = (\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { value } = event.target;\n\n    if (onInputChange) {\n      onInputChange(event);\n    }\n\n    const hasError = value.length > 0 && value.trim().length === 0;\n    setError(hasError);\n    if (setErrorSubject) {\n      setErrorSubject(hasError);\n    }\n  };\n\n  const onCcChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n\n    setCcValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        cc: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  const onBccChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n\n    setBccValue(target.value);\n\n    if (onUpdate) {\n      const updatedSetting = {\n        ...setting,\n        bcc: target.value,\n      };\n\n      onUpdate(index, updatedSetting);\n    }\n  };\n\n  // Set recipients\n  if (!!recipients && recipientValue !== recipients) {\n    setRecipientValue(recipients);\n  }\n\n  if (!!cc && ccValue !== cc) {\n    setCcValue(cc);\n  }\n\n  if (!!bcc && bccValue !== bcc) {\n    setBccValue(bcc);\n  }\n\n  return (\n    <StyledNotificationMethod>\n      <div className=\"inline-container\">\n        <StyledInputContainer>\n          <div className=\"control-label\">{t('Notification Method')}</div>\n          <div className=\"input-container\">\n            <Select\n              ariaLabel={t('Delivery method')}\n              data-test=\"select-delivery-method\"\n              labelInValue\n              onChange={onMethodChange}\n              placeholder={t('Select Delivery Method')}\n              options={methodOptions}\n              showSearch\n              value={methodOptions.find(option => option.value === method)}\n              loading={methodOptionsLoading}\n            />\n            {index !== 0 && !!onRemove ? (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <span\n                role=\"button\"\n                tabIndex={0}\n                className=\"delete-button\"\n                onClick={() => onRemove(index)}\n              >\n                <Icons.DeleteOutlined iconSize=\"l\" />\n              </span>\n            ) : null}\n          </div>\n        </StyledInputContainer>\n      </div>\n      {method !== undefined ? (\n        <>\n          <div className=\"inline-container\">\n            <StyledInputContainer>\n              {method === NotificationMethodOption.Email ? (\n                <>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.EMAIL_SUBJECT_NAME}\n                  </div>\n                  <div className={`input-container ${error ? 'error' : ''}`}>\n                    <input\n                      type=\"text\"\n                      name=\"email_subject\"\n                      value={email_subject}\n                      placeholder={defaultSubject}\n                      onChange={onSubjectChange}\n                    />\n                  </div>\n                  {error && (\n                    <div\n                      style={{\n                        color: theme.colors.error.base,\n                        fontSize: theme.gridUnit * 3,\n                      }}\n                    >\n                      {TRANSLATIONS.EMAIL_SUBJECT_ERROR_TEXT}\n                    </div>\n                  )}\n                </>\n              ) : null}\n            </StyledInputContainer>\n          </div>\n          <div className=\"inline-container\">\n            <StyledInputContainer>\n              <div className=\"control-label\">\n                {t(\n                  '%s recipients',\n                  method === NotificationMethodOption.SlackV2\n                    ? NotificationMethodOption.Slack\n                    : method,\n                )}\n                <span className=\"required\">*</span>\n              </div>\n              <div>\n                {[\n                  NotificationMethodOption.Email,\n                  NotificationMethodOption.Slack,\n                ].includes(method) ? (\n                  <>\n                    <div className=\"input-container\">\n                      <textarea\n                        name=\"To\"\n                        data-test=\"recipients\"\n                        value={recipientValue}\n                        onChange={onRecipientsChange}\n                      />\n                    </div>\n                    <div className=\"input-container\">\n                      <div className=\"helper\">\n                        {t('Recipients are separated by \",\" or \";\"')}\n                      </div>\n                    </div>\n                  </>\n                ) : (\n                  // for SlackV2\n                  <div className=\"input-container\">\n                    <Select\n                      ariaLabel={t('Select channels')}\n                      mode=\"multiple\"\n                      name=\"recipients\"\n                      value={slackRecipients}\n                      options={slackOptions}\n                      onChange={onSlackRecipientsChange}\n                      allowClear\n                      data-test=\"recipients\"\n                      loading={isSlackChannelsLoading}\n                      allowSelectAll={false}\n                      labelInValue\n                    />\n                    <RefreshLabel\n                      onClick={() => updateSlackOptions({ force: true })}\n                      tooltipContent={t('Force refresh Slack channels list')}\n                      disabled={isSlackChannelsLoading}\n                    />\n                  </div>\n                )}\n              </div>\n            </StyledInputContainer>\n          </div>\n          {method === NotificationMethodOption.Email && (\n            <StyledInputContainer>\n              {/* Render \"CC\" input field if ccVisible is true */}\n              {ccVisible && (\n                <>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.EMAIL_CC_NAME}\n                  </div>\n                  <div className=\"input-container\">\n                    <textarea\n                      name=\"CC\"\n                      data-test=\"cc\"\n                      value={ccValue}\n                      onChange={onCcChange}\n                    />\n                  </div>\n                  <div className=\"input-container\">\n                    <div className=\"helper\">\n                      {t('Recipients are separated by \",\" or \";\"')}\n                    </div>\n                  </div>\n                </>\n              )}\n              {/* Render \"BCC\" input field if bccVisible is true */}\n              {bccVisible && (\n                <>\n                  <div className=\"control-label\">\n                    {TRANSLATIONS.EMAIL_BCC_NAME}\n                  </div>\n                  <div className=\"input-container\">\n                    <textarea\n                      name=\"BCC\"\n                      data-test=\"bcc\"\n                      value={bccValue}\n                      onChange={onBccChange}\n                    />\n                  </div>\n                  <div className=\"input-container\">\n                    <div className=\"helper\">\n                      {t('Recipients are separated by \",\" or \";\"')}\n                    </div>\n                  </div>\n                </>\n              )}\n              {/* New buttons container */}\n              <div className=\"ghost-button\">\n                <span\n                  className=\"ghost-button\"\n                  role=\"button\"\n                  tabIndex={0}\n                  onClick={() => setCcVisible(true)}\n                  style={{ display: ccVisible ? 'none' : 'inline-flex' }}\n                >\n                  <Icons.MailOutlined iconSize=\"xs\" className=\"icon\" />\n                  {t('Add CC Recipients')}\n                </span>\n                <span\n                  className=\"ghost-button\"\n                  role=\"button\"\n                  tabIndex={0}\n                  onClick={() => setBccVisible(true)}\n                  style={{ display: bccVisible ? 'none' : 'inline-flex' }}\n                >\n                  <Icons.MailOutlined iconSize=\"xs\" className=\"icon\" />\n                  {t('Add BCC Recipients')}\n                </span>\n              </div>\n            </StyledInputContainer>\n          )}\n        </>\n      ) : null}\n    </StyledNotificationMethod>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}